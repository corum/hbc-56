
; ******** Source: mario.asm
     1                          ; Troy's HBC-56 - Mario bros tune
     2                          ;
     3                          ; Copyright (c) 2021 Troy Schrapel
     4                          ;
     5                          ; This code is licensed under the MIT license
     6                          ;
     7                          ; https://github.com/visrealm/hbc-56
     8                          ;
     9                          

; ******** Source: ../../kernel\hbc56kernel.inc
     1                          ; 6502 - HBC-56 Kernel Include file for user code
     2                          ;
     3                          ; Copyright (c) 2021 Troy Schrapel
     4                          ;
     5                          ; This code is licensed under the MIT license
     6                          ;
     7                          ; https://github.com/visrealm/hbc-56
     8                          ;
     9                          ;
    10                          
    11                          !cpu w65c02
    12                          !initmem $FF
    13                          cputype = $65c02
    14                          

; ******** Source: ../../kernel\kernel.o.lmap
     1                          	HBC56_RST_VECTOR	= $f114	; ?
     2                          	AY_ENV_SHAPE_SAW1	= $8	; unused
     3                          	tmsConsoleBackspace	= $ea21	; ?
     4                          	NES_RAM_SIZE	= $1
     5                          	UART_ZP_START	= $28
     6                          	TMS_LT_RED	= $9	; unused
     7                          	UART_STATUS_RCVR_OVERRUN	= $20	; unused
     8                          	HBC56_TMP	= $7ca2
     9                          	KB_SCANCODE_ESC	= $76	; unused
    10                          	AY_ENV_SHAPE_SAW2	= $c	; unused
    11                          	TMS_GFX_TILE_WIDTH	= $8
    12                          	LCD_RAM_END	= $7b58
    13                          	TMS_SPRITE_SIZE	= $8
    14                          	KB_SCANCODE_ARROW_RIGHT	= $f4	; unused
    15                          	KB_CAPS_LOCK	= $8
    16                          	KB_EXT_KEY	= $e0
    17                          	VIA_RAM_SIZE	= $1
    18                          	HBC56_VSYNC_CALLBACK	= $7cb9
    19                          	isLower	= $e000
    20                          	TMS_R1_SPRITE_MAG2	= $1	; unused
    21                          	KB_BUFFER_MASK	= $f
    22                          	KB_SCANCODE_SLASH_FORWARD	= $4a	; unused
    23                          	AY_PORTB	= $f	; unused
    24                          	TMS_R1_RAM_16K	= $80
    25                          	AY_PORTA	= $e	; unused
    26                          	TMS_R1_SPRITE_MAG1	= $0	; unused
    27                          	TMS_FPS	= $3c
    28                          	kbInit	= $eaf9
    29                          	VIA_TMP	= $7c58	; unused
    30                          	tmsSetAddressNextRow	= $e586	; unused
    31                          	UART_IRQ_BIT	= $4
    32                          	tmsModeText	= $e694	; unused
    33                          	VIA_REG_IFR	= $d
    34                          	_tmsSendKb	= $e6f1	; ?
    35                          	UART_STATUS_RX_REG_FULL	= $1
    36                          	tmsReg1SetFields	= $e5d3
    37                          	BITMAP_ZP_START	= $1e
    38                          	JMP_OPCODE	= $4c
    39                          	hbc56IntHandler	= $f08a
    40                          	TILEMAP_RAM_START	= $7a00
    41                          	KB_SCANCODE_SCROLL_LOCK	= $7e	; unused
    42                          	KB_RAM_END	= $7c9c
    43                          	AY_ENV_SHAPE_HOLD	= $1
    44                          	TMS_R0_MODE_GRAPHICS_II	= $2
    45                          	KB_SHIFT_LEFT_MAP_BYTE	= $2
    46                          	VIA_IO_ADDR_IFR	= $7ffd	; unused
    47                          	VIA_IO_ADDR_T1C_H	= $7ff5	; unused
    48                          	MEMORY_ZP_END	= $32
    49                          	TMS_R1_SPRITE_8	= $0	; unused
    50                          	VIA_REG_T1L_H	= $7
    51                          	KB_SCANCODE_PRTSCR	= $92	; unused
    52                          	KB_SCANCODE_SLASH_BACK	= $5d	; unused
    53                          	VIA_IO_ADDR_T1C_L	= $7ff4	; unused
    54                          	AY_WRITE	= $1
    55                          	UART_STATUS_CARRIER_DETECT	= $4	; unused
    56                          	VIA_REG_T1L_L	= $6
    57                          	KB_PRESSED_MAP	= $7c76
    58                          	TMS9918_ZP_START	= $24
    59                          	tmsDecPosConsole	= $e8ff
    60                          	UART_CTL_WORD_8BIT_1SB	= $14	; unused
    61                          	HBC56_CONSOLE_FLAG_LCD	= $20	; unused
    62                          	TMS_CYAN	= $7
    63                          	HBC56_TITLE	= $edce
    64                          	memcpyMultiPage	= $e0bf	; unused
    65                          	KB_SCANCODE_NUM_LOCK	= $77	; unused
    66                          	TILEMAP_RAM_END	= $7b16
    67                          	VIA_DIR_OUTPUT	= $ff	; unused
    68                          	KB_BUFFER_TAIL	= $7c65
    69                          	tmsSetRegister	= $e5b0
    70                          	hbc56Tms9918Int	= $f0c4	; ?
    71                          	KB_SCANCODE_NUMPAD_ENTER	= $da	; unused
    72                          	UART_STATUS_TX_REG_EMPTY	= $2
    73                          	UART_RX_BUFFER_XOFF_SIZE	= $c0
    74                          	KB_FLAGS	= $7c5c
    75                          	HBC56_NMI_VECTOR	= $7e04
    76                          	KB_SCANCODE_SQUARE_LEFT	= $54	; unused
    77                          	BITMAP_ZP_END	= $24
    78                          	UART_CTL_CLOCK_DIV_64	= $2
    79                          	toUpper	= $e06b	; unused
    80                          	VIA_IO_ADDR	= $7ff0
    81                          	tableBitsFromLeft	= $e150	; unused
    82                          	NES_TMP	= $7c9c	; unused
    83                          	HBC56_META_TITLE_END	= $7cb7
    84                          	uartFlowCtrlXoff	= $ea82	; ?
    85                          	SFXMAN_RAM_START	= $7c59
    86                          	uartInWait	= $ea8b
    87                          	uartOutString	= $eacf	; unused
    88                          	RTI_OPCODE	= $40
    89                          	KB_SCANCODE_PAGE_UP	= $fd	; unused
    90                          	AY_ENV_SHAPE_FADE_OUT	= $9	; unused
    91                          	tmsModeBitmap	= $e611	; unused
    92                          	TMS_VRAM_SPRITE_ATTR_ADDRESS	= $3b00
    93                          	NOTE_FREQ_AS8	= 7458.619999999999890860635787248611	; unused
    94                          	HBC56_TMP_Y	= $7ca5
    95                          	KB_SCANCODE_TILDE	= $e	; unused
    96                          	HBC56_TITLE_LEN	= $1a
    97                          	UART_IO_PORT	= $20
    98                          	TMS9918_RAM_END	= $7b58
    99                          	AY_S0_ADDR	= $7f40	; unused
   100                          	TMS9918_ZP_SIZE	= $2
   101                          	HBC56_TMP_X	= $7ca4
   102                          	NOTE_FREQ_AS5	= 932.330000000000040927261579781771	; unused
   103                          	TMS_MED_GREEN	= $2	; unused
   104                          	TMS_WHITE	= $f
   105                          	KB_SCANCODE_WINDOWS_RIGHT	= $a7	; unused
   106                          	HBC56_KERNEL_ZP_END	= $36
   107                          	AY_S1_WRITE	= $7f45	; unused
   108                          	NOTE_FREQ_AS4	= 466.160000000000025011104298755527	; unused
   109                          	VIA_REG_DDR_B	= $2
   110                          	NOTE_FREQ_AS7	= 3729.309999999999945430317893624306	; unused
   111                          	TMS_TMP_ADDRESS	= $24
   112                          	KB_SCANCODE_PERIOD	= $49	; unused
   113                          	VIA_REG_DDR_A	= $3
   114                          	tableBitFromLeft	= $e130
   115                          	NOTE_FREQ_AS6	= 1864.660000000000081854523159563541	; unused
   116                          	AY_NOISE_GEN	= $6	; unused
   117                          	NOTE_FREQ_AS1	= 58.270000000000003126388037344441	; unused
   118                          	AY_S0_WRITE	= $7f41	; unused
   119                          	NOTE_FREQ_AS0	= 29.140000000000000568434188608080	; unused
   120                          	tmsSetAddressRead	= $e5a2
   121                          	VIA_RAM_START	= $7c58
   122                          	NOTE_FREQ_AS3	= 233.080000000000012505552149377763	; unused
   123                          	UART_RX_BUFFER_TAIL	= $29
   124                          	tmsSetPatternRead	= $e99a	; unused
   125                          	AY_S1_ADDR	= $7f44	; unused
   126                          	NOTE_FREQ_AS2	= 116.540000000000006252776074688882	; unused
   127                          	UART_RX_BUFFER	= $7b58
   128                          	TMS_R1_SPRITE_16	= $2	; unused
   129                          	TMS_GFX_PIXELS_Y	= $c0	; unused
   130                          	TMS_GFX_PIXELS_X	= $100	; unused
   131                          	KB_SCANCODE_NUMPAD_MULTIPLY	= $7c	; unused
   132                          	HBC56_DISABLE_SFXMAN	= $1
   133                          	tmsSetAddressWrite	= $e592
   134                          	TMS_MAGENTA	= $d	; unused
   135                          	LCD_IO_PORT	= $2	; unused
   136                          	tmsConsoleScrollLine	= $e86a
   137                          	KB_SCANCODE_CTRL_RIGHT	= $94	; unused
   138                          	_tmsSendEmptyPage	= $e730
   139                          	KB_BUFFER_SIZE	= $10
   140                          	KB_SCANCODE_COMMA	= $41	; unused
   141                          	HBC56_TITLE_TEXT	= $edce
   142                          	AY_R10	= $8
   143                          	AY_IO_PORT	= $40
   144                          	AY_R11	= $9
   145                          	NES_LEFT	= $2	; unused
   146                          	AY_R12	= $a
   147                          	TMS_R1_DISP_BLANK	= $0	; unused
   148                          	KB_NUM_LOCK	= $10	; unused
   149                          	hbc56LogoPatt	= $ee50
   150                          	kernelMain	= $f114	; ?
   151                          	AY_R13	= $b
   152                          	hbc56LogoPattEnd	= $efc8	; unused
   153                          	ASCII_CR	= $d	; unused
   154                          	AY_R14	= $c
   155                          	KB_SCANCODE_PAGE_DOWN	= $fa	; unused
   156                          	kbIntHandler	= $eb34
   157                          	IO_PORT_BASE_ADDRESS	= $7f00
   158                          	AY_R15	= $d
   159                          	isDigit	= $e01e
   160                          	AY_R16	= $e
   161                          	HAVE_TMS9918	= $1
   162                          	UART_CTL_MASTER_RESET	= $3
   163                          	AY_R17	= $f
   164                          	KB_SCANCODE_TAB	= $d	; unused
   165                          	HBC56_KERNEL_ZP_START	= $18
   166                          	TMS9918_IRQ_BIT	= $1
   167                          	HBC56_BORDER	= $4
   168                          	TMS_R1_MODE_MULTICOLOR	= $8
   169                          	TMS_R0_MODE_MULTICOLOR	= $0
   170                          	TMS_DK_BLUE	= $4
   171                          	AY_ENV_SHAPE_TRIANGLE2	= $a	; unused
   172                          	TMS_VRAM_SPRITE_PATT_ADDRESS	= $1800
   173                          	HBC56_CONSOLE_FLAG_NOWAIT	= $10
   174                          	KB_SCANCODE_ENTER	= $5a	; unused
   175                          	KB_IO_PORT	= $80
   176                          	AY_ENV_SHAPE_ATTACK	= $4
   177                          	UART_STATUS_IRQ	= $80	; unused
   178                          	VIA_REG_PFR	= $c	; unused
   179                          	NES_DOWN	= $4	; unused
   180                          	tmsReg1ClearFields	= $e5dd
   181                          	NES_SELECT	= $20	; unused
   182                          	hbc56Stop	= $f273
   183                          	UART_RX_BUFFER_SIZE	= $100
   184                          	KB_BUFFER	= $7c66
   185                          	DEFAULT_HBC56_NMI_VECTOR	= $ffe0	; unused
   186                          	NES1_IO_ADDR	= $7f82
   187                          	UART_CTL_WORD_7BIT_OPB_1SB	= $c	; unused
   188                          	KB_SCANCODE_NUMPAD_PLUS	= $79	; unused
   189                          	NES2_IO_ADDR	= $7f83
   190                          	BITMAP_RAM_END	= $7b26
   191                          	KB_SCANCODE_F2	= $6	; unused
   192                          	HBC56_TITLE_TEXT_LEN	= $1a
   193                          	NES_UP	= $8	; unused
   194                          	KB_SCANCODE_F3	= $4	; unused
   195                          	VIA_DIR_INPUT	= $0	; unused
   196                          	DELAY_L	= $34
   197                          	TMS_TXT_TILES_X	= $28
   198                          	ASCII_BACKSPACE	= $8	; unused
   199                          	TMS_TXT_TILES_Y	= $18
   200                          	KB_SCANCODE_F1	= $5	; unused
   201                          	KB_SCANCODE_SEMICOLON	= $4c	; unused
   202                          	KB_SCANCODE_F6	= $b	; unused
   203                          	TMS_R1_DISP_ACTIVE	= $40
   204                          	tmsInitColorTable	= $e79d
   205                          	KB_SCANCODE_F7	= $83	; unused
   206                          	KB_SCANCODE_HOME	= $ec	; unused
   207                          	DELAY_H	= $35
   208                          	KB_SCANCODE_F4	= $c	; unused
   209                          	tmsSetPosTmpAddress	= $e828
   210                          	uartInNoWait	= $ea95	; unused
   211                          	hbc56Reset	= $f270	; unused
   212                          	KB_SCANCODE_F5	= $3	; unused
   213                          	hbc56CustomDelayMs	= $f277	; unused
   214                          	_tmsWaitReg	= $e582	; unused
   215                          	uartOut	= $eab8	; ?
   216                          	KB_TMP_X	= $7c5d
   217                          	KB_SCANCODE_F8	= $a	; unused
   218                          	HBC56_KERNEL_RAM_START	= $7a00
   219                          	KB_TMP_Y	= $7c5e	; unused
   220                          	KB_SCANCODE_F9	= $1	; unused
   221                          	tmsConsolePrint	= $e9ea	; unused
   222                          	tmsConsoleCls	= $e91c	; unused
   223                          	uartIrq	= $ea53
   224                          	TMS_BLACK	= $1
   225                          	HBC56_META_TITLE	= $7ca6
   226                          	KB_SCANCODE_SQUARE_RIGHT	= $5b	; unused
   227                          	tmsConsoleNewline	= $e9fa	; ?
   228                          	AY_S1	= $7f44
   229                          	NOTE_FREQ_C8	= 4186.010000000000218278728425502777	; unused
   230                          	KB_IRQ_BIT	= $2
   231                          	tmsModeGraphicsII	= $e673	; unused
   232                          	AY_S0	= $7f40
   233                          	NOTE_FREQ_A8	= $1b80	; unused
   234                          	HBC56_TICKS	= $7c9f
   235                          	HBC56_SECONDS_H	= $7ca1
   236                          	memcpySinglePage	= $e0a3	; unused
   237                          	tmsModeGraphicsI	= $e5fe
   238                          	NOTE_FREQ_G8	= 6271.930000000000291038304567337036	; unused
   239                          	AY_ADDR	= $0
   240                          	NOTE_FREQ_E8	= 5274.039999999999963620211929082870	; unused
   241                          	TMS_R1_RAM_4K	= $0	; unused
   242                          	AY_ENV_SHAPE_ALTERNATE	= $2
   243                          	NOTE_FREQ_DS8	= 4978.029999999999745341483503580093	; unused
   244                          	tmsInitEntireColorTable	= $e79b	; ?
   245                          	TMS_GREY	= $e
   246                          	NES_B	= $40	; unused
   247                          	HBC56_SECONDS_L	= $7ca0
   248                          	AY_PSG1	= $4
   249                          	UART_CTL_WORD_7BIT_EPB_1SB	= $8	; unused
   250                          	NES_A	= $80	; unused
   251                          	TMS9918_IO_PORT	= $10
   252                          	UART_RAM_END	= $7c58
   253                          	AY_PSG0	= $0
   254                          	UART_FLOWCTRL_XON	= $11
   255                          	DEFAULT_HBC56_RST_VECTOR	= $8000
   256                          	NOTE_FREQ_C0	= 16.350000000000001421085471520200	; unused
   257                          	NOTE_FREQ_A1	= $37	; unused
   258                          	NOTE_FREQ_G2	= $62	; unused
   259                          	NOTE_FREQ_E3	= 164.810000000000002273736754432321
   260                          	NOTE_FREQ_DS4	= 311.129999999999995452526491135359	; unused
   261                          	KB_SCANCODE_CTRL_LEFT	= $14	; unused
   262                          	NOTE_FREQ_A0	= 27.500000000000000000000000000000	; unused
   263                          	NOTE_FREQ_E2	= 82.409999999999996589394868351519	; unused
   264                          	NOTE_FREQ_DS5	= 622.250000000000000000000000000000	; unused
   265                          	tmsReg0ClearFields	= $e5cb
   266                          	UART_STATUS_CLEAR_TO_SEND	= $8	; unused
   267                          	NOTE_FREQ_G3	= $c4	; unused
   268                          	NOTE_FREQ_C1	= 32.700000000000002842170943040401	; unused
   269                          	NOTE_FREQ_G0	= 24.500000000000000000000000000000	; unused
   270                          	NOTE_FREQ_E1	= 41.200000000000002842170943040401	; unused
   271                          	NOTE_FREQ_DS6	= 1244.509999999999990905052982270718	; unused
   272                          	UART_DATA	= $7f21
   273                          	VIA_IO_ADDR_T2C_H	= $7ff9	; unused
   274                          	NOTE_FREQ_C2	= 65.409999999999996589394868351519	; unused
   275                          	NOTE_FREQ_A3	= $dc	; unused
   276                          	NOTE_FREQ_E0	= 20.600000000000001421085471520200	; unused
   277                          	NOTE_FREQ_DS7	= 2489.019999999999981810105964541435	; unused
   278                          	TMS9918_TMP_BUFFER	= $7b30
   279                          	NOTE_FREQ_G1	= $31	; unused
   280                          	NOTE_FREQ_A2	= $6e	; unused
   281                          	NOTE_FREQ_C3	= 130.810000000000002273736754432321	; unused
   282                          	UART_ZP_END	= $2c
   283                          	NOTE_FREQ_DS0	= 19.449999999999999289457264239900	; unused
   284                          	NOTE_FREQ_C4	= 261.629999999999995452526491135359	; unused
   285                          	NOTE_FREQ_A5	= $370	; unused
   286                          	NOTE_FREQ_G6	= 1567.980000000000018189894035458565	; unused
   287                          	NOTE_FREQ_E7	= 2637.019999999999981810105964541435	; unused
   288                          	NOTE_FREQ_DS1	= 38.890000000000000568434188608080	; unused
   289                          	HAVE_KEYBOARD	= $1
   290                          	NOTE_FREQ_A4	= $1b8	; unused
   291                          	NOTE_FREQ_E6	= 1318.509999999999990905052982270718	; unused
   292                          	hbc56HighBell	= $f1f1	; ?
   293                          	NOTE_FREQ_G7	= 3135.960000000000036379788070917130	; unused
   294                          	NOTE_FREQ_C5	= 523.250000000000000000000000000000	; unused
   295                          	tmsConsoleHome	= $e91f	; unused
   296                          	NOTE_FREQ_DS2	= 77.780000000000001136868377216160	; unused
   297                          	NOTE_FREQ_G4	= $188	; unused
   298                          	NOTE_FREQ_E5	= 659.250000000000000000000000000000	; unused
   299                          	VIA_IO_ADDR_T2C_L	= $7ff8	; unused
   300                          	NOTE_FREQ_C6	= 1046.500000000000000000000000000000	; unused
   301                          	NOTE_FREQ_A7	= $dc0	; unused
   302                          	BCD_RAM_START	= $7c59
   303                          	HBC56_META_TITLE_MAX_LEN	= $10
   304                          	isDigitX	= $e030	; unused
   305                          	NOTE_FREQ_DS3	= 155.560000000000002273736754432321	; unused
   306                          	NOTE_FREQ_E4	= 329.629999999999995452526491135359	; unused
   307                          	NOTE_FREQ_G5	= 783.990000000000009094947017729282	; unused
   308                          	NOTE_FREQ_A6	= $6e0	; unused
   309                          	NOTE_FREQ_C7	= $82d	; unused
   310                          	VIA_RAM_END	= $7c59
   311                          	AY_INACTIVE	= $3	; unused
   312                          	TMS_SPRITE_SIZE2X	= $10	; unused
   313                          	tmsSetPosWriteText	= $e938	; ?
   314                          	KB_SCANCODE_F11	= $78	; unused
   315                          	AY_S0_READ	= $7f42	; unused
   316                          	tmsInitTextTable	= $e77d	; ?
   317                          	KB_SCANCODE_F10	= $9	; unused
   318                          	VIA_REG_PORT_A	= $1
   319                          	KB_SCANCODE_NUMPAD_PERIOD	= $71	; unused
   320                          	VIA_REG_PORT_B	= $0
   321                          	KB_SCANCODE_F12	= $7	; unused
   322                          	kbNextScancode	= $ec52
   323                          	KB_SCANCODE_WINDOWS_LEFT	= $9f	; unused
   324                          	BCD_RAM_END	= $7c5c
   325                          	ASCII_RETURN	= $a	; unused
   326                          	TMS_R1_INT_ENABLE	= $20
   327                          	UART_CTL_WORD_8BIT_OPAR_1SB	= $1c	; unused
   328                          	isSpace	= $e049	; unused
   329                          	hbc56BootScreen	= $efc8
   330                          	AY_S1_READ	= $7f46	; unused
   331                          	KB_SCANCODE_END	= $e9	; unused
   332                          	TMS_GFX_TILE_HEIGHT	= $8
   333                          	KB_SCANCODE_SHIFT_RIGHT	= $59
   334                          	TMS_LT_BLUE	= $5	; unused
   335                          	TMS_R0_EXT_VDP_ENABLE	= $1	; unused
   336                          	uartOutNoBsCheck	= $eabe	; ?
   337                          	KB_SCANCODE_ALT_LEFT	= $11	; unused
   338                          	HBC56_INT_VECTOR	= $7e00
   339                          	VIA_REG_IER	= $e
   340                          	tmsIncPosConsole	= $e8de
   341                          	INT_IO_PORT	= $df
   342                          	KB_PRESSED_MAP_BYTES	= $20
   343                          	VIA_REG_ACR	= $b
   344                          	STR_ADDR_H	= $33
   345                          	NES_RAM_END	= $7c9f
   346                          	memsetSinglePage	= $e101
   347                          	TMS_FONT_DATA	= $e271
   348                          	tmsSetPatternTmpAddressII	= $e948	; unused
   349                          	kbWaitForScancode	= $ec3d
   350                          	tmsReg0SetFields	= $e5c1
   351                          	tmsPrint	= $e9a0
   352                          	KB_SCANCODE_APOS	= $52	; unused
   353                          	STR_ADDR_L	= $32
   354                          	tmsSetPosConsole	= $e925
   355                          	KB_SHIFT_RIGHT_MAP_BYTE	= $b
   356                          	AY_CLOCK_FREQ	= $1e8480
   357                          	tmsSetBackground	= $e5bd
   358                          	TMS_R1_MODE_GRAPHICS_II	= $0
   359                          	UART_RX_BUFFER_XON_SIZE	= $4
   360                          	VIA_IO_ADDR_ACR	= $7ffb	; unused
   361                          	uartFlowCtrlXon	= $ea77	; ?
   362                          	VIA_IO_ADDR_IER	= $7ffe	; unused
   363                          	ASCII_BELL	= $7	; unused
   364                          	BCD_TMP3	= $7c5b
   365                          	TMS_MED_RED	= $8	; unused
   366                          	UART_CTL_WORD_8BIT_EPAR_1SB	= $18	; unused
   367                          	BCD_TMP2	= $7c5a
   368                          	LCD_ZP_END	= $28
   369                          	toLower	= $e073	; unused
   370                          	BCD_TMP1	= $7c59
   371                          	MEM_SRC	= $2e
   372                          	AY_ENABLES	= $7
   373                          	UART_CTL_WORD_7BIT_OPB_2SB	= $4	; unused
   374                          	LCD_RAM_START	= $7b58
   375                          	TMS_LT_GREEN	= $3	; unused
   376                          	_tmsWaitData	= $e579
   377                          	tmsSetColorTmpAddressII	= $e944	; unused
   378                          	VIA_REG_SR	= $a	; unused
   379                          	HAVE_MATH_INC	= $1
   380                          	KB_SCANCODE_B	= $32	; unused
   381                          	hbc56Bell	= $f223	; unused
   382                          	KB_SCANCODE_C	= $21	; unused
   383                          	TMS_TXT_PIXELS_X	= $f0	; unused
   384                          	HBC56_KERNEL_RAM_SIZE	= $2bd	; unused
   385                          	TMS_TXT_PIXELS_Y	= $c0	; unused
   386                          	KB_SCANCODE_A	= $1c	; unused
   387                          	TMS_GFX_TILES_Y	= $18
   388                          	KB_PRESSED_MAP_SIZE	= $fe	; unused
   389                          	KB_SCANCODE_F	= $2b	; unused
   390                          	kbIsPressed	= $ec20	; unused
   391                          	TMS_R0_MODE_TEXT	= $0
   392                          	TMS_GFX_TILES_X	= $20
   393                          	KB_SCANCODE_G	= $34	; unused
   394                          	HBC56_DISABLE_LCD	= $1
   395                          	TMS_R0_MODE_GRAPHICS_I	= $0
   396                          	tmsSetSpriteTmpAddress	= $e81f	; unused
   397                          	KB_CB_RELEASED	= $7c61
   398                          	KB_SCANCODE_D	= $23	; unused
   399                          	TMS_R1_MODE_GRAPHICS_I	= $0
   400                          	KB_SCANCODE_E	= $24	; unused
   401                          	TILEMAP_ZP_START	= $18
   402                          	KB_SHIFT_DOWN	= $1	; unused
   403                          	KB_SCANCODE_J	= $3b	; unused
   404                          	KB_CB_PRESSED	= $7c5f
   405                          	KB_SCANCODE_K	= $42	; unused
   406                          	KB_SHIFT_RIGHT_MAP_BIT	= $40
   407                          	HBC56_CONSOLE_FLAGS	= $7ca3
   408                          	AY_ENV_SHAPE	= $d
   409                          	KB_SCANCODE_H	= $33	; unused
   410                          	kbReadAscii	= $ecba	; unused
   411                          	KB_BUFFER_HEAD	= $7c64
   412                          	KB_SCANCODE_I	= $43	; unused
   413                          	viaIntHandler	= $edcb
   414                          	KB_SCANCODE_N	= $31	; unused
   415                          	tmsTileXyAtPixelXy	= $e7e5	; unused
   416                          	UART_CTL_CLOCK_DIV_16	= $1	; unused
   417                          	nesWaitForPress	= $eadc
   418                          	hbc56LogoInd	= $ee0e
   419                          	KB_SCANCODE_O	= $44	; unused
   420                          	memcpyMultiPagePort	= $e0e1	; unused
   421                          	KB_SCANCODE_L	= $4b	; unused
   422                          	bin2bcd8	= $e07b	; unused
   423                          	KB_SCANCODE_M	= $3a	; unused
   424                          	KB_SCANCODE_ARROW_UP	= $f5	; unused
   425                          	UART_RX_BUFFER_HEAD	= $28
   426                          	KB_SCANCODE_R	= $2d	; unused
   427                          	_tmsSendPage	= $e6fa	; ?
   428                          	tmsSetPosWrite	= $e92b	; unused
   429                          	KB_SCANCODE_S	= $1b	; unused
   430                          	KB_SCANCODE_P	= $4d	; unused
   431                          	TMS_DK_RED	= $6	; unused
   432                          	KB_SCANCODE_Q	= $15	; unused
   433                          	NOTE_FREQ_GS8	= 6644.880000000000109139364212751389	; unused
   434                          	KB_CURRENT_STATE	= $7c63
   435                          	KB_SCANCODE_V	= $2a	; unused
   436                          	NOTE_FREQ_CS8	= 4434.920000000000072759576141834259	; unused
   437                          	KB_SCANCODE_W	= $1d	; unused
   438                          	HBC56_CONSOLE_FLAG_NES	= $40
   439                          	UART_CTL_WORD_7BIT_EPB_2SB	= $0	; unused
   440                          	kbScancodeToAscii	= $ec67
   441                          	KB_SCANCODE_T	= $2c	; unused
   442                          	KB_SHIFT_LEFT_MAP_BIT	= $20
   443                          	TMS_TRANSPARENT	= $0	; unused
   444                          	KB_SCANCODE_U	= $3c	; unused
   445                          	SFXMAN_RAM_END	= $7c59
   446                          	NOTE_FREQ_GS4	= 415.300000000000011368683772161603	; unused
   447                          	tmsSendBytes	= $e734
   448                          	NOTE_FREQ_CS5	= 554.370000000000004547473508864641	; unused
   449                          	VIA_REG_T2C_H	= $9
   450                          	VIA_REG_PORT_Ax	= $f	; unused
   451                          	KB_SCANCODE_Z	= $1a	; unused
   452                          	LCD_ZP_START	= $28
   453                          	NOTE_FREQ_CS4	= 277.180000000000006821210263296962	; unused
   454                          	NOTE_FREQ_GS5	= 830.610000000000013642420526593924	; unused
   455                          	KB_SCANCODE_MINUS	= $4e	; unused
   456                          	isUpper	= $e00c
   457                          	TMS_VRAM_NAME_ADDRESS	= $3800
   458                          	UART_IRQ	= $3
   459                          	NES_RAM_START	= $7c9c
   460                          	NOTE_FREQ_GS6	= 1661.220000000000027284841053187847	; unused
   461                          	NOTE_FREQ_CS7	= 2217.460000000000036379788070917130	; unused
   462                          	KB_SCANCODE_X	= $22	; unused
   463                          	KB_SCANCODE_PAUSE	= $e1
   464                          	KB_IO_ADDR	= $7f80
   465                          	memcpySinglePagePort	= $e0b1	; unused
   466                          	NOTE_FREQ_CS6	= 1108.730000000000018189894035458565	; unused
   467                          	NOTE_FREQ_GS7	= 3322.440000000000054569682106375694	; unused
   468                          	TMS_REGISTER_DATA	= $e571
   469                          	TMS_MODEL	= $26be
   470                          	KB_SCANCODE_Y	= $35	; unused
   471                          	NOTE_FREQ_GS0	= 25.960000000000000852651282912120	; unused
   472                          	NOTE_FREQ_CS1	= 34.649999999999998578914528479800	; unused
   473                          	VIA_REG_T2C_L	= $8
   474                          	ROM_BANK_REG	= $8	; unused
   475                          	HBC56_USER_ZP_START	= $36	; unused
   476                          	NOTE_FREQ_CS0	= 17.320000000000000284217094304040	; unused
   477                          	NOTE_FREQ_GS1	= 51.909999999999996589394868351519	; unused
   478                          	UART_CTL_RX_INT_ENABLE	= $80
   479                          	KB_SCANCODE_CAPS_LOCK	= $58
   480                          	tableInvBitFromRight	= $e148	; unused
   481                          	tmsInitPattTable	= $e743	; ?
   482                          	TMS9918_IRQ	= $1
   483                          	HBC56_CONSOLE_FLAG_CURSOR	= $80	; unused
   484                          	NOTE_FREQ_GS2	= 103.829999999999998294697434175760	; unused
   485                          	NOTE_FREQ_CS3	= 138.590000000000003410605131648481	; unused
   486                          	tmsModeMulticolor	= $e6a7	; unused
   487                          	NOTE_FREQ_CS2	= 69.299999999999997157829056959599	; unused
   488                          	NOTE_FREQ_GS3	= 207.650000000000005684341886080801	; unused
   489                          	KB_IRQ	= $2
   490                          	VIA_IO_PORT	= $f0
   491                          	HBC56_VIA_CALLBACK	= $7cbb
   492                          	_tmsSendX8	= $e6fc
   493                          	KB_SCANCODE_NUMPAD_5	= $73	; unused
   494                          	AY_CHA	= $0
   495                          	KB_SCANCODE_ALT_RIGHT_	= $91	; unused
   496                          	KB_SCANCODE_NUMPAD_4	= $6b	; unused
   497                          	AY_CHB	= $1
   498                          	KB_RAM_SIZE	= $3a
   499                          	tmsSetPatternWrite	= $e994	; unused
   500                          	KB_SCANCODE_NUMPAD_7	= $6c	; unused
   501                          	UART_RAM_START	= $7b58
   502                          	AY_CHC	= $2
   503                          	KB_SCANCODE_NUMPAD_6	= $74	; unused
   504                          	MEMORY_ZP_SIZE	= $6
   505                          	KB_SCANCODE_NUMPAD_1	= $69	; unused
   506                          	KEY_MAP_SHIFTED	= $ed4b	; ?
   507                          	AY_READ	= $2
   508                          	KB_SCANCODE_NUMPAD_0	= $70	; unused
   509                          	KB_SCANCODE_NUMPAD_3	= $7a	; unused
   510                          	HBC56_LOGO	= $4
   511                          	VIA_IRQ	= $5
   512                          	tableBitFromRight	= $e140	; unused
   513                          	KB_SCANCODE_NUMPAD_2	= $72	; unused
   514                          	TMS9918_CONSOLE_LINE_LEN	= $7b2b
   515                          	KB_SCANCODE_NUMPAD_MINUS	= $7b	; unused
   516                          	BITMAP_RAM_START	= $7b16
   517                          	uartInit	= $ea37	; unused
   518                          	hbc56CustomDelay	= $ffe3
   519                          	UART_STATUS_FRAMING_ERROR	= $10	; unused
   520                          	HBC56_BACKGROUND	= $f
   521                          	AY_ENV_SHAPE_FADE_IN_STOP	= $4	; unused
   522                          	HAVE_UART	= $1
   523                          	MEM_DST	= $2c
   524                          	TMS_DK_YELLOW	= $a	; unused
   525                          	UART_STATUS_PARITY_ERROR	= $40	; unused
   526                          	KB_SCANCODE_NUMPAD_9	= $7d	; unused
   527                          	KB_SCANCODE_NUMPAD_8	= $75	; unused
   528                          	AY_CHN	= $3	; unused
   529                          	AY_ENV_SHAPE_TRIANGLE	= $e	; unused
   530                          	hbc56Delay	= $ffe1
   531                          	tableInvBitFromLeft	= $e138
   532                          	KB_SCANCODE_2	= $1e	; unused
   533                          	AY_CHB_TONE_H	= $3	; unused
   534                          	KB_SCANCODE_3	= $26	; unused
   535                          	kbResetCallbacks	= $eb23	; unused
   536                          	NES_IO_PORT	= $82
   537                          	TMS9918_RAM_SIZE	= $32
   538                          	KB_SCANCODE_0	= $45	; unused
   539                          	TMS9918_RAM_START	= $7b26
   540                          	AY_CHA_TONE_L	= $0
   541                          	AY_CHC_TONE_H	= $5	; unused
   542                          	AY_ENV_SHAPE_CONTINUE	= $8
   543                          	KB_SCANCODE_1	= $16	; unused
   544                          	HBC56_TEXT	= $4
   545                          	HBC56_META_VECTOR	= $dffc
   546                          	cputype	= $65c02	; unused
   547                          	KB_SCANCODE_6	= $36	; unused
   548                          	HBC56_KERNEL_RAM_END	= $7cbd
   549                          	AY_CHB_TONE_L	= $2	; unused
   550                          	KB_SCANCODE_7	= $3d	; unused
   551                          	AY_ENV_SHAPE_FADE_IN	= $d	; unused
   552                          	tmsModeReset	= $e5e5
   553                          	KB_SCANCODE_DELETE	= $f1	; unused
   554                          	KB_SCANCODE_4	= $25	; unused
   555                          	KB_SCANCODE_MENU	= $af	; unused
   556                          	KB_SCANCODE_SPACEBAR	= $29	; unused
   557                          	AY_CHA_TONE_H	= $1
   558                          	AY_CHC_TONE_L	= $4	; unused
   559                          	KB_SCANCODE_5	= $2e	; unused
   560                          	MEMORY_ZP_START	= $2c
   561                          	tmsSetPosRead	= $e93e	; unused
   562                          	nes1Pressed	= $eae9	; unused
   563                          	VIA_REG_T1C_H	= $5
   564                          	INT_CTRL_ADDRESS	= $7fdf
   565                          	STR_ADDR	= $32
   566                          	AY_ENV_PERIOD_H	= $c
   567                          	tmsHex8	= $e7f2	; unused
   568                          	VIA_IO_ADDR_T1L_H	= $7ff7	; unused
   569                          	TILEMAP_ZP_END	= $1e
   570                          	KEY_MAP	= $eccb	; ?
   571                          	KB_SCANCODE_8	= $3e	; unused
   572                          	KB_RAM_START	= $7c5c
   573                          	KB_SCANCODE_9	= $46	; unused
   574                          	VIA_REG_T1C_L	= $4
   575                          	AY_ENV_PERIOD_L	= $b
   576                          	KB_CTRL_DOWN	= $2	; unused
   577                          	KB_PAUSE_KEY	= $e1
   578                          	VIA_IO_ADDR_T1L_L	= $7ff6	; unused
   579                          	NES_RIGHT	= $1	; unused
   580                          	nes2Pressed	= $eaf1	; unused
   581                          	MEM_LEN	= $30
   582                          	VIA_IO_ADDR_PORT_A	= $7ff1	; unused
   583                          	UART_CTL_WORD_8BIT_2SB	= $10
   584                          	NES_START	= $10	; unused
   585                          	HBC56_META_TITLE_LEN	= $7cb8
   586                          	memsetMultiPage	= $e10d	; unused
   587                          	UART_REG	= $7f20
   588                          	LCD_MODEL	= $3240	; unused
   589                          	KB_SCANCODE_SHIFT_LEFT	= $12
   590                          	VIA_IO_ADDR_PORT_B	= $7ff0	; unused
   591                          	isAlNum	= $e02a	; unused
   592                          	AY_CHA_AMPL	= $8
   593                          	LAST_MODULE_RAM_END	= $7c9f
   594                          	TMS_R1_MODE_TEXT	= $10
   595                          	tmsConsoleOut	= $e9b3
   596                          	TMS9918_REG	= $7f11
   597                          	KB_SCANCODE_NUMPAD_DIVIDE	= $ca	; unused
   598                          	DEFAULT_HBC56_INT_VECTOR	= $ffe0
   599                          	VIA_IRQ_BIT	= $10
   600                          	TMS_VRAM_PATT_ADDRESS	= $2000
   601                          	KB_SCANCODE_EQUAL	= $55	; unused
   602                          	KB_RELEASE	= $f0
   603                          	tmsInitSpriteTable	= $e7b6	; ?
   604                          	KB_SCANCODE_ARROW_DOWN	= $f2	; unused
   605                          	UART_RX_BUFFER_BYTES	= $2a
   606                          	isAlpha	= $e018
   607                          	ayInit	= $e158
   608                          	TMS9918_RAM	= $7f10
   609                          	UART_RX_FLAGS	= $2b
   610                          	AY_R1	= $1
   611                          	NOTE_FREQ_B8	= 7902.130000000000109139364212751389	; unused
   612                          	KB_STATUS_ADDR	= $7f81
   613                          	AY_R0	= $0
   614                          	AY_R3	= $3
   615                          	NOTE_FREQ_F8	= 5587.649999999999636202119290828705	; unused
   616                          	AY_R2	= $2
   617                          	NOTE_FREQ_D8	= 4698.630000000000109139364212751389	; unused
   618                          	TMS_DK_GREEN	= $c	; unused
   619                          	AY_R5	= $5
   620                          	AY_CHC_AMPL	= $a	; unused
   621                          	NOTE_FREQ_FS8	= 5919.909999999999854480847716331482	; unused
   622                          	AY_R4	= $4
   623                          	AY_R7	= $7
   624                          	KB_ALT_DOWN	= $4	; unused
   625                          	AY_R6	= $6
   626                          	TMS_TXT_TILE_HEIGHT	= $8
   627                          	NOTE_FREQ_B0	= 30.870000000000000994759830064140	; unused
   628                          	NOTE_FREQ_F2	= 87.310000000000002273736754432321	; unused
   629                          	NOTE_FREQ_D3	= 146.830000000000012505552149377763	; unused
   630                          	NOTE_FREQ_FS4	= 369.990000000000009094947017729282	; unused
   631                          	TMS_VRAM_COLOR_ADDRESS+2	= $0
   632                          	tmsSetPatternTmpAddressBank1	= $e97e	; unused
   633                          	VIA_IO_ADDR_DDR_A	= $7ff3	; unused
   634                          	NOTE_FREQ_B1	= 61.740000000000001989519660128281	; unused
   635                          	NOTE_FREQ_D2	= 73.420000000000001705302565824240	; unused
   636                          	NOTE_FREQ_FS5	= 739.990000000000009094947017729282	; unused
   637                          	UART_FLOWCTRL_XOFF	= $13
   638                          	TMS_R0_EXT_VDP_DISABLE	= $0
   639                          	tmsSetPatternTmpAddressBank0	= $e961	; unused
   640                          	NOTE_FREQ_F3	= 174.610000000000013642420526593924	; unused
   641                          	NOTE_FREQ_F0	= 21.829999999999998294697434175760	; unused
   642                          	NOTE_FREQ_D1	= 36.710000000000000852651282912120	; unused
   643                          	NOTE_FREQ_FS6	= 1479.980000000000018189894035458565	; unused
   644                          	TMS9918_CONSOLE_Y	= $7b29
   645                          	TMS_LT_YELLOW	= $b	; unused
   646                          	KB_SCANCODE_ARROW_LEFT	= $eb	; unused
   647                          	NOTE_FREQ_B2	= 123.469999999999998863131622783840	; unused
   648                          	NOTE_FREQ_D0	= 18.350000000000001421085471520200	; unused
   649                          	NOTE_FREQ_FS7	= 2959.960000000000036379788070917130	; unused
   650                          	TMS9918_CONSOLE_X	= $7b28
   651                          	tmsSetPatternTmpAddressBank2	= $e989	; unused
   652                          	VIA_IO_ADDR_DDR_B	= $7ff2	; unused
   653                          	NOTE_FREQ_F1	= 43.649999999999998578914528479800	; unused
   654                          	NOTE_FREQ_B3	= 246.939999999999997726263245567679	; unused
   655                          	HBC56_KERNEL_START	= $e000
   656                          	TMS9918_ZP_END	= $28
   657                          	HAVE_AY3891X	= $1
   658                          	NOTE_FREQ_FS0	= 23.120000000000000994759830064140	; unused
   659                          	TMS_R1_INT_DISABLE	= $0	; unused
   660                          	AY_CHB_AMPL	= $9	; unused
   661                          	NOTE_FREQ_B4	= 493.879999999999995452526491135359	; unused
   662                          	NOTE_FREQ_F6	= 1396.910000000000081854523159563541	; unused
   663                          	NOTE_FREQ_D7	= 2349.320000000000163709046319127083	; unused
   664                          	NOTE_FREQ_FS1	= 46.250000000000000000000000000000	; unused
   665                          	NOTE_FREQ_B5	= 987.769999999999981810105964541435	; unused
   666                          	NOTE_FREQ_D6	= 1174.660000000000081854523159563541	; unused
   667                          	TMS_TXT_TILE_WIDTH	= $6
   668                          	tmsSetPosTmpAddressText	= $e845
   669                          	tmsSetPatternTmpAddress	= $e961
   670                          	NOTE_FREQ_F7	= 2793.829999999999927240423858165741	; unused
   671                          	NOTE_FREQ_FS2	= 92.500000000000000000000000000000	; unused
   672                          	NOTE_FREQ_F4	= 349.230000000000018189894035458565	; unused
   673                          	NOTE_FREQ_D5	= 587.330000000000040927261579781771	; unused
   674                          	LOGO_BUFFER	= $3000	; unused
   675                          	NOTE_FREQ_B6	= 1975.529999999999972715158946812153	; unused
   676                          	TMS9918_CONSOLE_SIZE_X	= $7b2a
   677                          	KB_SCANCODE_BACKSPACE	= $66	; unused
   678                          	NOTE_FREQ_FS3	= $b9	; unused
   679                          	NOTE_FREQ_D4	= 293.660000000000025011104298755527	; unused
   680                          	tmsInit	= $e6b5
   681                          	NOTE_FREQ_F5	= 698.460000000000036379788070917130
   682                          	NOTE_FREQ_B7	= 3951.070000000000163709046319127083	; unused
   683                          	KB_SCANCODE_INSERT	= $f0	; unused

; ******** Source: ../../kernel\hbc56kernel.inc
    15                          
    16                          

; ******** Source: ../../lib\ut\math.inc
     1                          ; 6502
     2                          ;
     3                          ; Math macros
     4                          ;
     5                          ; Copyright (c) 2020 Troy Schrapel
     6                          ;
     7                          ; This code is licensed under the MIT license
     8                          ;
     9                          ; https://github.com/visrealm/hbc-56
    10                          ;
    11                          ;
    12                          
    13                          HAVE_MATH_INC = 1
    14                          
    15                          !macro lsr2 {
    16                                  lsr
    17                                  lsr
    18                          }
    19                          
    20                          !macro lsr3 {
    21                                  +lsr2
    22                                  lsr
    23                          }
    24                          
    25                          !macro lsr4 {
    26                                  +lsr3
    27                                  lsr
    28                          }
    29                          
    30                          !macro lsr5 {
    31                                  +lsr4
    32                                  lsr
    33                          }
    34                          
    35                          !macro lsr6 {
    36                                  +lsr5
    37                                  lsr
    38                          }
    39                          
    40                          !macro lsr7 {
    41                                  +lsr6
    42                                  lsr
    43                          }
    44                          
    45                          !macro div2   { lsr }
    46                          !macro div4   { +lsr2 }
    47                          !macro div8   { +lsr3 }
    48                          !macro div16  { +lsr4 }
    49                          !macro div32  { +lsr5 }
    50                          !macro div64  { +lsr6 }
    51                          !macro div128 { +lsr7 }
    52                          
    53                          !macro asl2 {
    54                                  asl
    55                                  asl
    56                          }
    57                          
    58                          !macro asl3 {
    59                                  +asl2
    60                                  asl
    61                          }
    62                          
    63                          !macro asl4 {
    64                                  +asl3
    65                                  asl
    66                          }
    67                          
    68                          !macro asl5 {
    69                                  +asl4
    70                                  asl
    71                          }
    72                          
    73                          !macro asl6 {
    74                                  +asl5
    75                                  asl
    76                          }
    77                          
    78                          !macro asl7 {
    79                                  +asl6
    80                                  asl
    81                          }
    82                          
    83                          !macro mul2   { asl }
    84                          !macro mul4   { +asl2 }
    85                          !macro mul8   { +asl3 }
    86                          !macro mul16  { +asl4 }
    87                          !macro mul32  { +asl5 }
    88                          !macro mul64  { +asl6 }
    89                          !macro mul128 { +asl7 }
    90                          
    91                          
    92                          
    93                          ; -----------------------------------------------------------------------------
    94                          ; +dec16: decement a 16-bit value
    95                          ; -----------------------------------------------------------------------------
    96                          ; Inputs:
    97                          ;  addr: address containing LSB of value to decrement
    98                          ; -----------------------------------------------------------------------------
    99                          !macro dec16 .addr {
   100                            lda .addr
   101                            bne +
   102                            dec .addr + 1
   103                          +
   104                            dec .addr
   105                          }
   106                          
   107                          ; -----------------------------------------------------------------------------
   108                          ; +inc16: increment a 16-bit value
   109                          ; -----------------------------------------------------------------------------
   110                          ; Inputs:
   111                          ;  addr: address containing LSB of value to increment
   112                          ; -----------------------------------------------------------------------------
   113                          !macro inc16 .addr {
   114                            inc .addr
   115                            bne +
   116                            inc .addr + 1
   117                          +
   118                          }
   119                          
   120                          ; -----------------------------------------------------------------------------
   121                          ; +cmp16: compare two 16-bit values in memory
   122                          ; -----------------------------------------------------------------------------
   123                          ; Inputs:
   124                          ;  left:  address containing LSB of left value to comapre
   125                          ;  right: address containing LSB of right value to comapre
   126                          ; Outputs:
   127                          ;  C set if right < left
   128                          ;  Z set if right == left
   129                          ; -----------------------------------------------------------------------------
   130                          !macro cmp16 .left, .right {
   131                            lda .left + 1
   132                            cmp .right + 1
   133                            bne +
   134                            lda .left
   135                            cmp .right
   136                          +
   137                          }
   138                          
   139                          ; -----------------------------------------------------------------------------
   140                          ; +cmp16i: compare a 16-bit values in memory with an immediate value
   141                          ; -----------------------------------------------------------------------------
   142                          ; Inputs:
   143                          ;  .addr: address containing LSB
   144                          ;  .imm:  immediate value to compare to
   145                          ; Outputs:
   146                          ;  C set if right < left
   147                          ;  Z set if right == left
   148                          ; -----------------------------------------------------------------------------
   149                          !macro cmp16i .addr, .imm {
   150                            lda .addr + 1
   151                            cmp #>.imm
   152                            bne +
   153                            lda .addr
   154                            cmp #<.imm
   155                          +
   156                          }
   157                          
   158                          ; -----------------------------------------------------------------------------
   159                          ; +cmp16: compare two 16-bit values in memory
   160                          ; -----------------------------------------------------------------------------
   161                          ; Inputs:
   162                          ;  value: immediate value to compare
   163                          ;  x:     msb
   164                          ;  a:     lsb
   165                          ; -----------------------------------------------------------------------------
   166                          !macro cmp16xa .value {
   167                            cpx #>.value
   168                            bne +
   169                            cmp #<.value
   170                          +
   171                          }
   172                          
   173                          ; -----------------------------------------------------------------------------
   174                          ; +sub16: subtract 16 bit numbers
   175                          ; -----------------------------------------------------------------------------
   176                          ; Inputs:
   177                          ;  left:  address containing LSB of left value
   178                          ;  right: address containing LSB of right value
   179                          ; Outputs:
   180                          ;  res:   address containing LSB of result
   181                          ; -----------------------------------------------------------------------------
   182                          !macro sub16 .left, .right, .res {
   183                            sec
   184                            lda .left
   185                            sbc .right
   186                            sta .res
   187                            lda .left + 1
   188                            sbc .right + 1
   189                            sta .res + 1
   190                          }
   191                          
   192                          ; -----------------------------------------------------------------------------
   193                          ; +sub16: subtract 16 bit numbers - result in ax registers
   194                          ; -----------------------------------------------------------------------------
   195                          ; Inputs:
   196                          ;  left:  address containing LSB of left value
   197                          ;  right: address containing LSB of right value
   198                          ; Outputs:
   199                          ;  a:     result msb
   200                          ;  x:     result lsb
   201                          ; -----------------------------------------------------------------------------
   202                          !macro sub16 .left, .right {
   203                            sec
   204                            lda .left
   205                            sbc .right
   206                            tax
   207                            lda .left + 1
   208                            sbc .right + 1
   209                          }
   210                          
   211                          
   212                          ; -----------------------------------------------------------------------------
   213                          ; +add16: add 16 bit numbers - result in ax registers
   214                          ; -----------------------------------------------------------------------------
   215                          ; Inputs:
   216                          ;  left:  address containing LSB of left value
   217                          ;  right: address containing LSB of right value
   218                          ; Outputs:
   219                          ;  a:     result msb
   220                          ;  x:     result lsb
   221                          ; -----------------------------------------------------------------------------
   222                          !macro add16 .left, .right {
   223                            clc
   224                            lda .left
   225                            adc .right
   226                            tax
   227                            lda .left + 1
   228                            adc .right + 1
   229                          }
   230                          
   231                          
   232                          ; -----------------------------------------------------------------------------
   233                          ; +add16Imm: add 16 bit numbers - result stored to res
   234                          ; -----------------------------------------------------------------------------
   235                          ; Inputs:
   236                          ;  left:  address containing LSB of left value
   237                          ;  imm:   immediate value to add
   238                          ; Outputs:
   239                          ;  res: address to store result
   240                          ; -----------------------------------------------------------------------------
   241                          !macro add16Imm .left, .imm, .res {
   242                            clc
   243                            lda .left
   244                            adc #<.imm
   245                            sta .res
   246                            lda .left + 1
   247                            adc #>.imm
   248                            sta .res + 1
   249                          }
   250                          
   251                          
   252                          ; -----------------------------------------------------------------------------
   253                          ; +subImm8From16: subtract an 8 bit number from a 16 bit number
   254                          ; -----------------------------------------------------------------------------
   255                          ; Inputs:
   256                          ;  left:  address containing LSB of left value
   257                          ;  right: immediate 8-bit value
   258                          ; Outputs:
   259                          ;  res:   address containing LSB of result
   260                          ; -----------------------------------------------------------------------------
   261                          !macro subImm8From16 .left, .right, .res {
   262                            sec
   263                            lda .left
   264                            sbc #.right
   265                            sta .res
   266                            lda .left + 1
   267                            sbc #0
   268                            sta .res + 1
   269                          }
   270                          
   271                          ; -----------------------------------------------------------------------------
   272                          ; +incBcd: increment a BCD byte (inc instruction doesn't work in bcd mode)
   273                          ; -----------------------------------------------------------------------------
   274                          ; Inputs:
   275                          ;  addr:  address containing BCD value
   276                          ; -----------------------------------------------------------------------------
   277                          !macro incBcd .addr {
   278                            lda .addr
   279                            sed
   280                            clc
   281                            adc #1
   282                            cld
   283                            sta .addr
   284                          }
   285                          
   286                          ; -----------------------------------------------------------------------------
   287                          ; +decBcd: decrement a BCD byte (inc instruction doesn't work in bcd mode)
   288                          ; -----------------------------------------------------------------------------
   289                          ; Inputs:
   290                          ;  addr:  address containing BCD value
   291                          ; -----------------------------------------------------------------------------
   292                          !macro decBcd .addr {
   293                            lda .addr
   294                            sed
   295                            sec
   296                            sbc #1
   297                            cld
   298                            sta .addr

; ******** Source: ../../kernel\hbc56kernel.inc
    17                          

; ******** Source: ../../lib\ut\memory.inc
     1                          ; 6502
     2                          ;
     3                          ; Memory subroutines and macros
     4                          ;
     5                          ; Copyright (c) 2020 Troy Schrapel
     6                          ;
     7                          ; This code is licensed under the MIT license
     8                          ;
     9                          ; https://github.com/visrealm/hbc-56
    10                          ;
    11                          ;
    12                          
    13                          ; -----------------------------------------------------------------------------
    14                          ; store16: Write a 16-bit immediate value to memory
    15                          ; -----------------------------------------------------------------------------
    16                          ; Inputs:
    17                          ;	.addr: destination address
    18                          ;	.val16: 16-bit value
    19                          ; -----------------------------------------------------------------------------
    20                          !macro store16 .addr, .val16 {
    21                                  lda #<.val16
    22                                  sta .addr
    23                                  lda #>.val16
    24                                  sta .addr + 1
    25                          }
    26                          
    27                          ; -----------------------------------------------------------------------------
    28                          ; memcpy: Copy a fixed number of bytes from .src to dest
    29                          ; -----------------------------------------------------------------------------
    30                          ; Inputs:
    31                          ;	.src: source address
    32                          ;	.dst: destination address
    33                          ;	.cnt: number of bytes
    34                          ; -----------------------------------------------------------------------------
    35                          !macro memcpy .dst, .src, .cnt {
    36                          !if .cnt <= 0 {
    37                          	!error "memcpy: invalid count: ", .cnt
    38                          } else if .cnt <= 8 {
    39                          	!for i, 0, .cnt - 1 {
    40                          		lda .src + i
    41                          		sta .dst + i
    42                          	}
    43                          } else { !if .cnt <= 256 {
    44                          	ldx #0
    45                          -
    46                          	lda .src, x
    47                          	sta .dst, x
    48                          	inx
    49                          	cpx #(.cnt & $ff)	
    50                          	bne -
    51                          } else {
    52                                  +store16 MEM_SRC, .src
    53                                  +store16 MEM_DST, .dst
    54                                  +store16 MEM_LEN, .cnt
    55                          
    56                                  jsr memcpyMultiPage
    57                          }
    58                          }
    59                          }
    60                          
    61                          !macro setMemCpySrc .src {
    62                                  +store16 MEM_SRC, .src
    63                          }
    64                          
    65                          !macro setMemCpyDst .dst {
    66                                  +store16 MEM_DST, .dst
    67                          }
    68                          
    69                          !macro setMemCpySrcInd .srcRef {
    70                          	lda .srcRef
    71                          	sta MEM_SRC
    72                          	lda .srcRef + 1
    73                          	sta MEM_SRC + 1
    74                          }
    75                          
    76                          !macro setMemCpyDstInd .dstRef {
    77                          	lda .dstRef
    78                          	sta MEM_DST
    79                          	lda .dstRef + 1
    80                          	sta MEM_DST + 1
    81                          }
    82                          
    83                          !macro memcpySinglePage .bytes {
    84                          
    85                          	!if .bytes <= 0 {
    86                          		!error "memcpySinglePage: invalid count: ", .bytes
    87                          	}	
    88                          
    89                          	ldy #.bytes
    90                          	jsr memcpySinglePage
    91                          }
    92                          
    93                          
    94                          ; -----------------------------------------------------------------------------
    95                          ; memcpyPort: Copy a fixed number of bytes from .src ram to dest port
    96                          ; -----------------------------------------------------------------------------
    97                          ; Inputs:
    98                          ;	.src: source address
    99                          ;	.dst: destination address
   100                          ;	.cnt: number of bytes
   101                          ; -----------------------------------------------------------------------------
   102                          !macro memcpyPort .dst, .src, .cnt {
   103                          	!if .cnt <= 0 {
   104                          		!error "memcpyPort: invalid count: ", .cnt
   105                          	}
   106                          	
   107                                  +store16 MEM_SRC, .src
   108                                  +store16 MEM_DST, .dst
   109                          
   110                          	!if .cnt <= 256 {
   111                          		ldy #<.cnt					
   112                          		jsr memcpySinglePagePort
   113                          	} else {
   114                                          +store16 MEM_LEN, .cnt
   115                          		jsr memcpyMultiPagePort
   116                          	}
   117                          }
   118                          
   119                          !zone {
   120                          
   121                          ; -----------------------------------------------------------------------------
   122                          ; memset: Set a fixed number of bytes to a single value
   123                          ; -----------------------------------------------------------------------------
   124                          ; Inputs:
   125                          ;	.dst: destination address
   126                          ;	val: the byte value
   127                          ;	.cnt: number of bytes
   128                          ; -----------------------------------------------------------------------------
   129                          !macro memset .dst, .val, .cnt {
   130                          !if .cnt <= 0 {
   131                          	!error "memset: invalid count: ", .cnt
   132                          } else if .cnt <= 8 {
   133                          	lda #.val
   134                          	!for i, 0, .cnt - 1 {
   135                          	sta .dst + i
   136                          	}
   137                          } else if .cnt <= 256 {
   138                          	ldx #<.cnt
   139                          	lda #.val
   140                          -
   141                          	dex
   142                          	sta .dst, x
   143                          	cpx #0
   144                          	bne -
   145                          } else {
   146                                  +store16 MEM_DST, .dst
   147                                  +store16 MEM_LEN, .cnt
   148                                  
   149                          	lda #.val
   150                          	jsr memsetMultiPage
   151                          }
   152                          }
   153                          
   154                          

; ******** Source: ../../kernel\hbc56kernel.inc
    18                          

; ******** Source: ../../lib\gfx\tms9918.inc
     1                          ; 6502 - TMS9918 VDP Macros
     2                          ;
     3                          ; Copyright (c) 2021 Troy Schrapel
     4                          ;
     5                          ; This code is licensed under the MIT license
     6                          ;
     7                          ; https://github.com/visrealm/hbc-56
     8                          ;
     9                          
    10                          
    11                          
    12                          
    13                          ; -----------------------------------------------------------------------------
    14                          ; tmsWaitReg: Not sure how much delay we need so make a macro for now
    15                          ; -----------------------------------------------------------------------------
    16                          !macro tmsWaitReg {
    17                                  ;jsr _tmsWaitReg
    18                          }
    19                          
    20                          ; -----------------------------------------------------------------------------
    21                          ; tmsWaitData: Not sure how much delay we need so make a macro for now
    22                          ; -----------------------------------------------------------------------------
    23                          !macro tmsWaitData {
    24                                  jsr _tmsWaitData
    25                          }
    26                          
    27                          ; -----------------------------------------------------------------------------
    28                          ; tmsSetAddressWrite: Set an address in the TMS9918
    29                          ; -----------------------------------------------------------------------------
    30                          !macro tmsSetAddressWrite .addr {
    31                                  +tmsSetAddressRead ($4000 | .addr)
    32                          }
    33                          
    34                          ; -----------------------------------------------------------------------------
    35                          ; tmsSetAddressRead: Set an address to read from the TMS9918
    36                          ; -----------------------------------------------------------------------------
    37                          !macro tmsSetAddressRead .addr {
    38                                  php
    39                                  sei             ; we can't be interrupted here
    40                                  lda #<(.addr)
    41                                  sta TMS9918_REG
    42                                  +tmsWaitReg
    43                                  lda #>(.addr)
    44                                  sta TMS9918_REG
    45                                  +tmsWaitReg
    46                                  plp
    47                          }
    48                          
    49                          ; -----------------------------------------------------------------------------
    50                          ; tmsGet: Get a byte of data from the TMS9918
    51                          ; -----------------------------------------------------------------------------
    52                          !macro tmsGet {
    53                                  lda TMS9918_RAM
    54                                  +tmsWaitData
    55                          }
    56                          
    57                          ; -----------------------------------------------------------------------------
    58                          ; tmsPut: Send a byte of data to the TMS9918
    59                          ; -----------------------------------------------------------------------------
    60                          !macro tmsPut .byte {
    61                                  lda #(.byte & 0xff)
    62                                  +tmsPut
    63                          }
    64                          
    65                          
    66                          ; -----------------------------------------------------------------------------
    67                          ; tmsPut: Send a byte (A) of data to the TMS9918
    68                          ; -----------------------------------------------------------------------------
    69                          !macro tmsPut {
    70                                  sta TMS9918_RAM
    71                                  +tmsWaitData
    72                          }
    73                          
    74                          ; -----------------------------------------------------------------------------
    75                          ; tmsSetColor: Set current fg/bg color
    76                          ; -----------------------------------------------------------------------------
    77                          !macro tmsSetColor .color {
    78                                  lda #.color
    79                                  jsr tmsSetBackground
    80                          }
    81                          
    82                          ; -----------------------------------------------------------------------------
    83                          ; tmsSetColorFgBg: Set current fg/bg color
    84                          ; -----------------------------------------------------------------------------
    85                          !macro tmsSetColorFgBg .fg, .bg {
    86                                  +tmsColorFgBg .fg, .bg
    87                                  jsr tmsSetBackground
    88                          }
    89                          
    90                          ; -----------------------------------------------------------------------------
    91                          ; byteTmsColorFgBg: Output a data byte
    92                          ; -----------------------------------------------------------------------------
    93                          !macro byteTmsColorFgBg .fg, .bg {
    94                          !byte (.fg << 4 | .bg)
    95                          }
    96                          
    97                          
    98                          ; -----------------------------------------------------------------------------
    99                          ; tmsDisableOutput: Disable the TMS9918 output
   100                          ; -----------------------------------------------------------------------------
   101                          !macro tmsDisableOutput {
   102                                  lda #TMS_R1_DISP_ACTIVE
   103                                  jsr tmsReg1ClearFields
   104                          }
   105                          
   106                          ; -----------------------------------------------------------------------------
   107                          ; tmsEnableOutput: Enable the TMS9918 output
   108                          ; -----------------------------------------------------------------------------
   109                          !macro tmsEnableOutput {
   110                                  lda #TMS_R1_DISP_ACTIVE
   111                                  jsr tmsReg1SetFields
   112                          }
   113                          
   114                          ; -
   115                          !macro tmsEnableInterrupts {
   116                                  lda #TMS_R1_INT_ENABLE
   117                                  jsr tmsReg1SetFields
   118                          }
   119                          
   120                          !macro tmsDisableInterrupts {
   121                                  lda #TMS_R1_INT_ENABLE
   122                                  jsr tmsReg1ClearFields
   123                          }
   124                          
   125                          !macro tmsConsoleOut .char {
   126                                  lda #.char
   127                                  jsr tmsConsoleOut
   128                          }
   129                          
   130                          
   131                          ; -----------------------------------------------------------------------------
   132                          ; tmsConsolePrintAddr: Print text to console
   133                          ; -----------------------------------------------------------------------------
   134                          ; Inputs:
   135                          ;  textAddr: Address of null-terminated string to print
   136                          ; -----------------------------------------------------------------------------
   137                          !macro tmsConsolePrintAddr .textAddr {
   138                                  lda #<.textAddr
   139                                  sta STR_ADDR_L
   140                                  lda #>.textAddr
   141                                  sta STR_ADDR_H
   142                                  jsr tmsConsolePrint        
   143                          }
   144                          
   145                          ; -----------------------------------------------------------------------------
   146                          ; tmsConsolePrint: Print immediate text to console
   147                          ; -----------------------------------------------------------------------------
   148                          ; Inputs:
   149                          ;  str: String to print
   150                          ; -----------------------------------------------------------------------------
   151                          !macro tmsConsolePrint .str {
   152                          	jmp .afterText
   153                          .textAddr
   154                          	!text .str,0
   155                          .afterText        
   156                                  +tmsConsolePrintAddr .textAddr
   157                          }
   158                          
   159                          ; -----------------------------------------------------------------------------
   160                          ; +tmsColorFgBg: Set A to the given FG / BG color
   161                          ; -----------------------------------------------------------------------------
   162                          !macro tmsColorFgBg .fg, .bg {
   163                                  lda #(.fg << 4 | .bg)
   164                          }
   165                          
   166                          ; -----------------------------------------------------------------------------
   167                          ; tmsReadStatus: Read status - clear interrupt
   168                          ; -----------------------------------------------------------------------------
   169                          !macro tmsReadStatus  {
   170                                  bit TMS9918_REG
   171                          }
   172                          
   173                          ; -----------------------------------------------------------------------------
   174                          ; tmsSendData: Send # bytes from .sourceAddr to tms9918 data port
   175                          ; -----------------------------------------------------------------------------
   176                          !macro tmsSendData .sourceAddr, .numBytes {
   177                                  lda #<.sourceAddr
   178                                  sta TMS_TMP_ADDRESS
   179                                  lda #>.sourceAddr
   180                                  sta TMS_TMP_ADDRESS + 1
   181                          
   182                                  !if .numBytes < 256 {
   183                                          ldx #.numBytes
   184                                          jsr tmsSendBytes
   185                                  } else {
   186                                          !do while .numBytes > 0 {
   187                                                  !if .numBytes > 255 {
   188                                                          ldx #0
   189                                                          !set .numBytes = .numBytes - 256
   190                                                  } else {
   191                                                          ldx #.numBytes
   192                                                          !set .numBytes = 0
   193                                                  }
   194                                                  jsr tmsSendBytes
   195                                                  inc TMS_TMP_ADDRESS + 1
   196                                          }
   197                                  }
   198                          
   199                          }
   200                          
   201                          ; -----------------------------------------------------------------------------
   202                          ; tmsSendDataRpt: Send # bytes from .sourceAddr to tms9918 data port .rpt times
   203                          ; -----------------------------------------------------------------------------
   204                          !macro tmsSendDataRpt .sourceAddr, .numBytes, .rpt {
   205                                  lda #<.sourceAddr
   206                                  sta TMS_TMP_ADDRESS
   207                                  lda #>.sourceAddr
   208                                  sta TMS_TMP_ADDRESS + 1
   209                          
   210                                  !if .numBytes < 256 {
   211                                          !if .rpt < 5 {
   212                                                  !for i,1,.rpt {
   213                                                          ldx #.numBytes
   214                                                          jsr tmsSendBytes
   215                                                  }
   216                                          } else {
   217                                                  lda #.rpt
   218                                                  sta TMS9918_TMP_BUFFER
   219                          -
   220                                                  ldx #.numBytes
   221                                                  jsr tmsSendBytes
   222                                                  dec TMS9918_TMP_BUFFER
   223                                                  bne -
   224                                          }
   225                                  } else {
   226                                          !error "tmsSendDataRpt supports <256 bytes only"
   227                                  }
   228                          }
   229                          
   230                          
   231                          ; -----------------------------------------------------------------------------
   232                          ; tmsPutRpt: Send value .rpt times
   233                          ; -----------------------------------------------------------------------------
   234                          !macro tmsPutRpt .value, .rpt {
   235                                  ldx #.rpt
   236                                  lda #.value
   237                          -
   238                                  +tmsPut
   239                                  dex
   240                                  bne -
   241                          }
   242                          
   243                          !macro tmsPutSeq .from, .count {
   244                                  lda #.from
   245                          -
   246                                  +tmsPut
   247                                  inc
   248                                  cmp #<(.from + .count)
   249                                  bne -
   250                          }
   251                          
   252                          !macro tmsSetSourceAddressInd .addr {
   253                          	lda .addr
   254                          	sta TMS_TMP_ADDRESS
   255                          	lda .addr + 1
   256                          	sta TMS_TMP_ADDRESS + 1
   257                          }
   258                          
   259                          !macro tmsSetSourceAddressIndOffset .addr, .offset {
   260                                  clc
   261                          	lda .addr
   262                                  adc #<.offset
   263                          	sta TMS_TMP_ADDRESS
   264                          	lda .addr + 1
   265                                  adc #>.offset
   266                          	sta TMS_TMP_ADDRESS + 1
   267                          }
   268                          
   269                          
   270                          !macro tmsSendBytes .bytes {
   271                                  ldx #.bytes
   272                                  jsr tmsSendBytes
   273                          }
   274                          
   275                          
   276                          ; -----------------------------------------------------------------------------
   277                          ; tmsSetAddrPattTable: Initialise address for font table
   278                          ; -----------------------------------------------------------------------------
   279                          !macro tmsSetAddrPattTable {
   280                                  +tmsSetAddrPattTable 0
   281                          }
   282                          
   283                          ; -----------------------------------------------------------------------------
   284                          ; tmsSetAddrPattTable: Initialise address for pattern table
   285                          ; -----------------------------------------------------------------------------
   286                          !macro tmsSetAddrPattTable .ind {
   287                                  +tmsSetAddressWrite TMS_VRAM_PATT_ADDRESS + (8 * .ind)
   288                          }
   289                          
   290                          ; -----------------------------------------------------------------------------
   291                          ; tmsSetAddrPattTable: Initialise address for pattern table
   292                          ; -----------------------------------------------------------------------------
   293                          !macro tmsSetAddrPattTable .ind, .row {
   294                                  +tmsSetAddressWrite TMS_VRAM_PATT_ADDRESS + (8 * .ind) + .row
   295                          }
   296                          
   297                          ; -----------------------------------------------------------------------------
   298                          ; tmsSetAddrPattTableIIBank0: Initialise address for pattern table
   299                          ; -----------------------------------------------------------------------------
   300                          !macro tmsSetAddrPattTableIIBank0 .ind {
   301                                  +tmsSetAddrPattTable .ind
   302                          }
   303                          
   304                          ; -----------------------------------------------------------------------------
   305                          ; tmsSetAddrPattTableIIBank1: Initialise address for pattern table
   306                          ; -----------------------------------------------------------------------------
   307                          !macro tmsSetAddrPattTableIIBank1 .ind {
   308                                  +tmsSetAddrPattTable 256 + .ind
   309                          }
   310                          
   311                          ; -----------------------------------------------------------------------------
   312                          ; tmsSetAddrPattTableIIBank2: Initialise address for pattern table
   313                          ; -----------------------------------------------------------------------------
   314                          !macro tmsSetAddrPattTableIIBank2 .ind {
   315                                  +tmsSetAddrPattTable 512 + .ind
   316                          }
   317                          
   318                          ; -----------------------------------------------------------------------------
   319                          ; tmsSetAddrPattTableRead: Initialise address for pattern table to read
   320                          ; -----------------------------------------------------------------------------
   321                          !macro tmsSetAddrPattTableRead .ind {
   322                                  +tmsSetAddressRead TMS_VRAM_PATT_ADDRESS + (8 * .ind)
   323                          }
   324                          
   325                          ; -----------------------------------------------------------------------------
   326                          ; tmsSetAddrPattTableRowRead: Initialise address for pattern table to read
   327                          ; -----------------------------------------------------------------------------
   328                          !macro tmsSetAddrPattTableRead .ind, .row {
   329                                  +tmsSetAddressRead TMS_VRAM_PATT_ADDRESS + (8 * .ind) + .row
   330                          }
   331                          
   332                          ; -----------------------------------------------------------------------------
   333                          ; tmsUpdateFont: Update the pattern table with a given font
   334                          ; -----------------------------------------------------------------------------
   335                          !macro tmsUpdateFont .fontAddr {
   336                                  +tmsSetAddrPattTable 32
   337                                  +tmsSendData .fontAddr, $300
   338                          }
   339                          
   340                          ; -----------------------------------------------------------------------------
   341                          ; tmsSetAddrNameTable: Initialise address for base (text) table
   342                          ; -----------------------------------------------------------------------------
   343                          !macro tmsSetAddrNameTable {
   344                                  +tmsSetAddressWrite TMS_VRAM_NAME_ADDRESS
   345                          }
   346                          
   347                          ; -----------------------------------------------------------------------------
   348                          ; tmsSetAddrColorTable: Initialise address for color table
   349                          ; -----------------------------------------------------------------------------
   350                          !macro tmsSetAddrColorTable {
   351                                  +tmsSetAddressWrite TMS_VRAM_COLOR_ADDRESS
   352                          }
   353                          
   354                          ; -----------------------------------------------------------------------------
   355                          ; tmsSetAddrColorTable: Initialise address for color table index
   356                          ; -----------------------------------------------------------------------------
   357                          !macro tmsSetAddrColorTable .ind {
   358                                  +tmsSetAddressWrite TMS_VRAM_COLOR_ADDRESS + .ind
   359                          }
   360                          
   361                          ; -----------------------------------------------------------------------------
   362                          ; tmsSetAddrColorTableII: Initialise address for color table index (mode II)
   363                          ; -----------------------------------------------------------------------------
   364                          !macro tmsSetAddrColorTableII .ind {
   365                                  +tmsSetAddressWrite TMS_VRAM_COLOR_ADDRESS + .ind * 8
   366                          }
   367                          
   368                          ; -----------------------------------------------------------------------------
   369                          ; tmsSetAddrColorTableIIBank0: Initialise address for color table index (mode II)
   370                          ; -----------------------------------------------------------------------------
   371                          !macro tmsSetAddrColorTableIIBank0 .ind {
   372                                  +tmsSetAddrColorTableII .ind
   373                          }
   374                          
   375                          ; -----------------------------------------------------------------------------
   376                          ; tmsSetAddrColorTableIIBank1: Initialise address for color table index (mode II)
   377                          ; -----------------------------------------------------------------------------
   378                          !macro tmsSetAddrColorTableIIBank1 .ind {
   379                                  +tmsSetAddrColorTableII 256 + .ind
   380                          }
   381                          
   382                          ; -----------------------------------------------------------------------------
   383                          ; tmsSetAddrColorTableIIBank2: Initialise address for color table index (mode II)
   384                          ; -----------------------------------------------------------------------------
   385                          !macro tmsSetAddrColorTableIIBank2 .ind {
   386                                  +tmsSetAddrColorTableII 512 + .ind
   387                          }
   388                          
   389                          ; -----------------------------------------------------------------------------
   390                          ; tmsSetAddrSpriteAttrTable: Initialise address for sprite attributes table
   391                          ; -----------------------------------------------------------------------------
   392                          !macro tmsSetAddrSpriteAttrTable {
   393                                  +tmsSetAddrSpriteAttrTable 0
   394                          }
   395                          
   396                          ; -----------------------------------------------------------------------------
   397                          ; tmsSetAddrSpriteAttrTable: Initialise address for sprite attributes table
   398                          ; -----------------------------------------------------------------------------
   399                          !macro tmsSetAddrSpriteAttrTable .index {
   400                                  +tmsSetAddressWrite TMS_VRAM_SPRITE_ATTR_ADDRESS + .index * 4
   401                          }
   402                          
   403                          ; -----------------------------------------------------------------------------
   404                          ; tmsSetAddrSpritePattTable: Initialise address for sprite pattern table
   405                          ; -----------------------------------------------------------------------------
   406                          !macro tmsSetAddrSpritePattTable {
   407                                  +tmsSetAddrSpritePattTable 0
   408                          }
   409                          
   410                          ; -----------------------------------------------------------------------------
   411                          ; tmsSetAddrSpritePattTable: Initialise address for sprite pattern table
   412                          ; -----------------------------------------------------------------------------
   413                          !macro tmsSetAddrSpritePattTable .index {
   414                                  +tmsSetAddressWrite TMS_VRAM_SPRITE_PATT_ADDRESS + .index * 8
   415                          }
   416                          
   417                          
   418                          ; -----------------------------------------------------------------------------
   419                          ; tmsCreateSpritePattern: Create a sprite pattern (.spriteDataAddr is 8 bytes)
   420                          ; -----------------------------------------------------------------------------
   421                          !macro tmsCreateSpritePattern .pattInd, .spriteDataAddr {
   422                          
   423                                  
   424                          
   425                                  ; sprite pattern table
   426                                  +tmsSetAddrSpritePattTable .pattInd
   427                          
   428                                  ldx #0
   429                          -
   430                                  lda .spriteDataAddr,x
   431                                  +tmsPut
   432                                  inx
   433                                  cpx #8
   434                          
   435                                  
   436                          
   437                                  bne -
   438                          }
   439                          
   440                          ; -----------------------------------------------------------------------------
   441                          ; tmsCreateSpritePatternQuad: Create a (size 1) sprite pattern 
   442                          ;   (.spriteDataAddr is 32 bytes)
   443                          ; -----------------------------------------------------------------------------
   444                          !macro tmsCreateSpritePatternQuad .pattInd, .spriteDataAddr {
   445                          
   446                                  
   447                          
   448                                  ; sprite pattern table
   449                                  +tmsSetAddrSpritePattTable .pattInd * 4
   450                          
   451                                  ldx #0
   452                          -
   453                                  lda .spriteDataAddr,x
   454                                  +tmsPut 
   455                                  inx
   456                                  cpx #32
   457                          
   458                                  
   459                          
   460                                  bne -
   461                          }
   462                          
   463                          
   464                          !macro tmsCreateSpritePatternImm .ind, .b0, .b1, .b2, .b3, .b4, .b5, .b6, .b7 {
   465                          
   466                                  ; sprite pattern table
   467                                  +tmsSetAddrSpritePattTable .ind
   468                                  +tmsPut .b0
   469                                  +tmsPut .b2
   470                                  +tmsPut .b2
   471                                  +tmsPut .b3
   472                                  +tmsPut .b4
   473                                  +tmsPut .b5
   474                                  +tmsPut .b6
   475                                  +tmsPut .b7
   476                          }
   477                          
   478                          !macro tmsCreatePatternImm .ind, .b0, .b1, .b2, .b3, .b4, .b5, .b6, .b7 {
   479                          
   480                                  ; sprite pattern table
   481                                  +tmsSetAddrPattTable .ind
   482                                  +tmsPut .b0
   483                                  +tmsPut .b2
   484                                  +tmsPut .b2
   485                                  +tmsPut .b3
   486                                  +tmsPut .b4
   487                                  +tmsPut .b5
   488                                  +tmsPut .b6
   489                                  +tmsPut .b7
   490                          }
   491                          
   492                          
   493                          ; -----------------------------------------------------------------------------
   494                          ; tmsCreateSprite: Create a sprite
   495                          ; -----------------------------------------------------------------------------
   496                          !macro tmsCreateSprite .ind, .pattInd, .xPos, .yPos, .color {
   497                          
   498                                  ; sprite attr table
   499                                  +tmsSetAddrSpriteAttrTable .ind
   500                          
   501                                  +tmsPut .yPos
   502                                  +tmsPut .xPos
   503                                  +tmsPut .pattInd
   504                                  +tmsPut .color
   505                          }
   506                          
   507                          ; -----------------------------------------------------------------------------
   508                          ; tmsSpritePos: Set a sprite position
   509                          ; -----------------------------------------------------------------------------
   510                          !macro tmsSpritePos .ind, .xPos, .yPos {
   511                                  
   512                          
   513                                  ; sprite attr table
   514                                  +tmsSetAddrSpriteAttrTable .ind
   515                          
   516                                  +tmsPut .yPos
   517                                  +tmsPut .xPos        
   518                          }
   519                          
   520                          
   521                          ; -----------------------------------------------------------------------------
   522                          ; tmsSetLastSprite: Mark a sprite as the last sprite (set next ypos to )
   523                          ; -----------------------------------------------------------------------------
   524                          !macro tmsSetLastSprite .ind {
   525                                  +tmsSpritePos .ind + 1, 0, $d0
   526                          }
   527                          
   528                          
   529                          ; -----------------------------------------------------------------------------
   530                          ; tmsSpritePosXYReg: Set a sprite position from x/y registers
   531                          ; -----------------------------------------------------------------------------
   532                          !macro tmsSpritePosXYReg .ind {
   533                                  
   534                          
   535                                  ; sprite attr table
   536                                  +tmsSetAddrSpriteAttrTable .ind
   537                          
   538                                  tya
   539                                  +tmsPut 
   540                                  txa
   541                                  +tmsPut 
   542                          }
   543                          
   544                          
   545                          ; -----------------------------------------------------------------------------
   546                          ; tmsSetAddrSpriteColor: Change a sprite color
   547                          ; -----------------------------------------------------------------------------
   548                          !macro tmsSetAddrSpriteColor .ind {
   549                          
   550                                  ; sprite attr table
   551                                  +tmsSetAddressWrite TMS_VRAM_SPRITE_ATTR_ADDRESS + (.ind * 4) + 3
   552                          }
   553                          ; -----------------------------------------------------------------------------
   554                          ; tmsSpriteColor: Change a sprite color
   555                          ; -----------------------------------------------------------------------------
   556                          !macro tmsSpriteColor .ind, .color {
   557                          
   558                                  +tmsSetAddrSpriteColor .ind
   559                          
   560                                  +tmsPut .color
   561                          }
   562                          
   563                          
   564                          ; -----------------------------------------------------------------------------
   565                          ; tmsSetPosWrite: Set cursor position
   566                          ; -----------------------------------------------------------------------------
   567                          !macro tmsSetPosWrite .x, .y {
   568                                  +tmsSetAddressWrite (TMS_VRAM_NAME_ADDRESS + .y * 32 + .x)
   569                          }
   570                          
   571                          ; -----------------------------------------------------------------------------
   572                          ; tmsSetPosRead: Set read cursor position
   573                          ; -----------------------------------------------------------------------------
   574                          !macro tmsSetPosRead .x, .y {
   575                                  +tmsSetAddressRead (TMS_VRAM_NAME_ADDRESS + .y * 32 + .x)
   576                          }
   577                          
   578                          ; -----------------------------------------------------------------------------
   579                          ; tmsPrint: Print immediate text
   580                          ; -----------------------------------------------------------------------------
   581                          ; Inputs:
   582                          ;  str: String to print
   583                          ;  x: x position
   584                          ;  y: y position
   585                          ; -----------------------------------------------------------------------------
   586                          !macro tmsPrint .str, .x, .y {
   587                          	jmp .afterText
   588                          .textAddr
   589                          	!text .str,0
   590                          .afterText        
   591                          
   592                                  +tmsSetPosWrite .x, .y
   593                          
   594                                  lda #<.textAddr
   595                                  sta STR_ADDR_L
   596                                  lda #>.textAddr
   597                                  sta STR_ADDR_H
   598                                  jsr tmsPrint        
   599                          }
   600                          
   601                          
   602                          ; -----------------------------------------------------------------------------
   603                          ; tmsPrintCentre: Print centre-aligned immediate text
   604                          ; -----------------------------------------------------------------------------
   605                          ; Inputs:
   606                          ;  str: String to print
   607                          ;  y: y position
   608                          ; -----------------------------------------------------------------------------
   609                          !macro tmsPrintCentre .str, .y {
   610                          	jmp .afterText
   611                          .textAddr
   612                          	!text .str,0
   613                          .afterText        
   614                          
   615                                  +tmsSetPosWrite (32 - ((.afterText - 1) - .textAddr)) / 2, .y
   616                          
   617                                  lda #<.textAddr
   618                                  sta STR_ADDR_L
   619                                  lda #>.textAddr
   620                                  sta STR_ADDR_H
   621                                  jsr tmsPrint        
   622                          }
   623                          
   624                          
   625                          ; -----------------------------------------------------------------------------
   626                          ; tmsPrintZ: Print text
   627                          ; -----------------------------------------------------------------------------
   628                          ; Inputs:
   629                          ;  str: Address of zero-terminated string to print
   630                          ;  x: x position
   631                          ;  y: y position
   632                          ; -----------------------------------------------------------------------------
   633                          !macro tmsPrintZ .textAddr, .x, .y {
   634                                  +tmsSetPosWrite .x, .y
   635                          
   636                                  lda #<.textAddr
   637                                  sta STR_ADDR_L
   638                                  lda #>.textAddr
   639                                  sta STR_ADDR_H
   640                                  jsr tmsPrint        
   641                          }

; ******** Source: ../../kernel\hbc56kernel.inc
    19                          

; ******** Source: ../../lib\gfx\tilemap.inc
     1                          ; 6502 - Tilemap
     2                          ;
     3                          ; Copyright (c) 2021 Troy Schrapel
     4                          ;
     5                          ; This code is licensed under the MIT license
     6                          ;
     7                          ; https://github.com/visrealm/hbc-56
     8                          ;
     9                          ;
    10                          
    11                          
    12                          
    13                          !macro tilemapCreate .tilemapStructAddr, .bufferAddr, .tilesetAddr, .sizeFlags, .tileSizePx, .invertAddr, .dirtyAddr {
    14                          	!if <.tilesetAddr != 0 { !error "tilemapCreate: Tileset address must be page-aligned",.tilesetAddr }
    15                          	!if >.tilesetAddr < 3 { !error "tilemapCreate: Tileset address must be greater than $2ff",.tilesetAddr }
    16                          	!if <.bufferAddr != 0 { !error "tilemapCreate: Buffer address must be page-aligned",.bufferAddr }
    17                          	!if >.bufferAddr < 3 { !error "tilemapCreate: Buffer address must be greater than $2ff",.bufferAddr }
    18                          	!if .invertAddr != 0 and <.invertAddr != 0  {!error "tilemapCreate: Invert address must be page-aligned", .invertAddr}
    19                          	!if .invertAddr != 0 and >.invertAddr < 3  {!error "tilemapCreate: Invert address must be greater than $2ff", .invertAddr}
    20                          	!if .dirtyAddr != 0 and <.dirtyAddr != 0  {!error "tilemapCreate: Dirty address must be page-aligned", .dirtyAddr}
    21                          	!if .dirtyAddr != 0 and >.dirtyAddr < 3  {!error "tilemapCreate: Dirty address must be greater than $2ff", .dirtyAddr}
    22                          	!if .tileSizePx != 4 and .tileSizePx != 8 {!error "tilemapCreate: Tile size must be 4 or 8 pixels",.tileSizePx}
    23                          
    24                          	lda #<.tilemapStructAddr
    25                          	sta TILEMAP_ADDR
    26                          	lda #>.tilemapStructAddr
    27                          	sta TILEMAP_ADDR + 1
    28                          
    29                          	lda #>.bufferAddr
    30                          	sta .tilemapStructAddr + TILEMAP_BUFFER_ADDR
    31                          	lda #.sizeFlags
    32                          	sta .tilemapStructAddr + TILEMAP_SIZE
    33                          	lda #>.tilesetAddr
    34                          	sta .tilemapStructAddr + TILEMAP_TILES_ADDR
    35                          	lda #>.invertAddr
    36                          	sta .tilemapStructAddr + TILEMAP_INVERT_ADDR
    37                          	lda #>.dirtyAddr
    38                          	sta .tilemapStructAddr + TILEMAP_DIRTY_ADDR
    39                          	lda #.tileSizePx
    40                          	sta .tilemapStructAddr + TILEMAP_TILE_SIZE_PX
    41                          
    42                          	jsr tilemapInit
    43                          }
    44                          
    45                          !macro tilemapCreateDefault .sizeFlags, .tilesetAddr {
    46                          	+tilemapCreate TILEMAP_FIXED_ADDRESS, TILEMAP_DEFAULT_BUFFER_ADDRESS, .tilesetAddr, .sizeFlags, 8, $0, $0
    47                          }
    48                          
    49                          !macro tilemapSetActive .tilemapStructAddr {
    50                          	lda #<.tilemapStructAddr
    51                          	sta TILEMAP_ADDR
    52                          	lda #>.tilemapStructAddr
    53                          	sta TILEMAP_ADDR + 1
    54                          
    55                          	jsr tilemapSetActive

; ******** Source: ../../kernel\hbc56kernel.inc
    20                          

; ******** Source: ../../lib\lcd\lcd.inc
     1                          ; 6502 LCD Macros - HBC-56
     2                          ;
     3                          ; Copyright (c) 2021 Troy Schrapel
     4                          ;
     5                          ; This code is licensed under the MIT license
     6                          ;
     7                          ; https://github.com/visrealm/hbc-56
     8                          ;
     9                          
    10                          ; -----------------------------------------------------------------------------
    11                          ; lcdPrint: Print immediate text
    12                          ; -----------------------------------------------------------------------------
    13                          ; Inputs:
    14                          ;  str: String to print
    15                          ; -----------------------------------------------------------------------------
    16                          !macro lcdPrint str {
    17                          	jmp +
    18                          .textAddr
    19                          	!text str,0
    20                          +
    21                          	lda #<.textAddr
    22                          	sta STR_ADDR_L
    23                          	lda #>.textAddr
    24                          	sta STR_ADDR_H
    25                          	jsr lcdPrint
    26                          }
    27                          
    28                          
    29                          ; -----------------------------------------------------------------------------
    30                          ; lcdChar: Print immediate character
    31                          ; -----------------------------------------------------------------------------
    32                          ; Inputs:
    33                          ;  c: Character to print
    34                          ; -----------------------------------------------------------------------------
    35                          !macro lcdChar c {
    36                          	pha
    37                          	lda #c
    38                          	jsr lcdChar
    39                          	pla
    40                          }
    41                          
    42                          
    43                          ; -----------------------------------------------------------------------------
    44                          ; lcdConsolePrint: Print immediate text to console
    45                          ; -----------------------------------------------------------------------------
    46                          ; Inputs:
    47                          ;  str: String to print
    48                          ; -----------------------------------------------------------------------------
    49                          !macro lcdConsolePrint .str {
    50                          	jmp .afterText
    51                          .textAddr
    52                          	!text .str,0
    53                          .afterText        
    54                          
    55                                  lda #<.textAddr
    56                                  sta STR_ADDR_L
    57                                  lda #>.textAddr
    58                                  sta STR_ADDR_H
    59                                  jsr lcdConsolePrint        

; ******** Source: ../../kernel\hbc56kernel.inc
    21                          

; ******** Source: ../../lib\inp\nes.inc
     1                          ; 6502 NES Controller Macros - HBC-56
     2                          ;
     3                          ; Copyright (c) 2021 Troy Schrapel
     4                          ;
     5                          ; This code is licensed under the MIT license
     6                          ;
     7                          ; https://github.com/visrealm/hbc-56
     8                          ;
     9                          ; Dependencies:
    10                          ;  - hbc56.asm
    11                          
    12                          
    13                          ;  Safe versions of NES pressed macros (preserves accumulator)
    14                          
    15                          !macro nes1BranchIfPressedSafe .buttonMask, .addr {
    16                                  pha
    17                                  lda #(.buttonMask)
    18                                  jsr nes1Pressed
    19                                  pla
    20                                  bcs .addr
    21                          }
    22                          
    23                          !macro nes1BranchIfNotPressedSafe .buttonMask, .addr {
    24                                  pha
    25                                  lda #(.buttonMask)
    26                                  jsr nes1Pressed
    27                                  pla
    28                                  bcc .addr
    29                          }
    30                          
    31                          !macro nes2BranchIfPressedSafe .buttonMask, addr {
    32                                  pha
    33                                  lda #(.buttonMask)
    34                                  jsr nes2Pressed
    35                                  pla
    36                                  bcs addr
    37                          }
    38                          
    39                          !macro nes2BranchIfNotPressedSafe .buttonMask, addr {
    40                                  pha
    41                                  lda #(.buttonMask)
    42                                  jsr nes2Pressed
    43                                  pla
    44                                  bcc addr
    45                          }
    46                          
    47                          ;  NES pressed macros which stomp accumulator
    48                          
    49                          !macro nes1BranchIfPressed .buttonMask, .addr {
    50                                  lda #(.buttonMask)
    51                                  bit NES1_IO_ADDR
    52                                  beq .addr
    53                          }
    54                          
    55                          !macro nes1BranchIfNotPressed .buttonMask, .addr {
    56                                  lda #(.buttonMask)
    57                                  bit NES1_IO_ADDR
    58                                  bne .addr
    59                          }
    60                          
    61                          !macro nes2BranchIfPressed .buttonMask, addr {
    62                                  lda #(.buttonMask)
    63                                  bit NES2_IO_ADDR
    64                                  beq addr
    65                          }
    66                          
    67                          !macro nes2BranchIfNotPressed .buttonMask, addr {
    68                                  lda #(.buttonMask)
    69                                  bit NES2_IO_ADDR
    70                                  bne addr
    71                          }

; ******** Source: ../../kernel\hbc56kernel.inc
    22                          

; ******** Source: ../../lib\inp\keyboard.inc
     1                          ; 6502 KB Controller Macros - HBC-56
     2                          ;
     3                          ; Copyright (c) 2021 Troy Schrapel
     4                          ;
     5                          ; This code is licensed under the MIT license
     6                          ;
     7                          ; https://github.com/visrealm/hbc-56
     8                          ;
     9                          ; Dependencies:
    10                          ;  - hbc56.asm
    11                          
    12                          
    13                          !macro kbBranchIfNotPressed .scancode, .addr {
    14                                  ldx #.scancode
    15                                  jsr kbReadAscii
    16                                  beq .addr
    17                          }
    18                          
    19                          !macro kbBranchIfPressed .scancode, .addr {
    20                                  ldx #.scancode
    21                                  jsr kbIsPressed
    22                                  bne .addr
    23                          }
    24                          
    25                          !macro kbSetEventHandlerPressed .cb {
    26                                  lda #<.cb
    27                                  sta KB_CB_PRESSED
    28                                  lda #>.cb
    29                                  sta KB_CB_PRESSED + 1
    30                          }
    31                          
    32                          !macro kbSetEventHandlerReleased .cb {
    33                                  lda #<.cb
    34                                  sta KB_CB_RELEASED
    35                                  lda #>.cb
    36                                  sta KB_CB_RELEASED + 1

; ******** Source: ../../kernel\hbc56kernel.inc
    23                          

; ******** Source: ../../lib\sfx\ay3891x.inc
     1                          ; 6502 - AY-3-819x PSG
     2                          ;
     3                          ; Copyright (c) 2021 Troy Schrapel
     4                          ;
     5                          ; This code is licensed under the MIT license
     6                          ;
     7                          ; https://github.com/visrealm/hbc-56
     8                          ;
     9                          
    10                          
    11                          
    12                          !macro ayWrite .dev, .reg, .val {
    13                                  lda #.reg
    14                                  sta IO_PORT_BASE_ADDRESS | AY_IO_PORT | AY_ADDR | .dev
    15                                  lda #.val
    16                                  sta IO_PORT_BASE_ADDRESS | AY_IO_PORT | AY_WRITE | .dev
    17                          }        
    18                          
    19                          !macro ayRead .dev, .reg {
    20                                  lda #.reg
    21                                  sta IO_PORT_BASE_ADDRESS | AY_IO_PORT | AY_ADDR | .dev
    22                                  lda IO_PORT_BASE_ADDRESS | AY_IO_PORT | AY_READ | .dev
    23                          }        
    24                          
    25                          
    26                          !macro ayWriteX .dev, .reg {
    27                                  lda #.reg
    28                                  sta IO_PORT_BASE_ADDRESS | AY_IO_PORT | AY_ADDR | .dev
    29                                  stx IO_PORT_BASE_ADDRESS | AY_IO_PORT | AY_WRITE | .dev
    30                          }
    31                          
    32                          !macro ayWriteA .dev, .reg {
    33                                  ldx #.reg
    34                                  stx IO_PORT_BASE_ADDRESS | AY_IO_PORT | AY_ADDR | .dev
    35                                  sta IO_PORT_BASE_ADDRESS | AY_IO_PORT | AY_WRITE | .dev
    36                          }
    37                          
    38                          !macro ayPlayNote .dev, .chan, .freq {
    39                                  !if .freq <= 0 {
    40                                          .val = 0
    41                                  } else {
    42                                          .val = AY_CLOCK_FREQ / (16.0 * .freq)
    43                                  }
    44                                  +ayWrite .dev, AY_CHA_TONE_L + (.chan * 2), <.val
    45                                  +ayWrite .dev, AY_CHA_TONE_H + (.chan * 2), >.val
    46                          }
    47                          
    48                          !macro ayToneWordPeriod .periodHz {
    49                                  !word ((AY_CLOCK_FREQ * .periodHz) / 16.0)
    50                          }
    51                          
    52                          !macro ayToneWord .freq {
    53                                  !word (AY_CLOCK_FREQ / (16.0 * .freq))
    54                          }
    55                          
    56                          !macro ayToneByteL .freq {
    57                                  !byte <(AY_CLOCK_FREQ / (16.0 * .freq))
    58                          }
    59                          
    60                          !macro ayToneByteH .freq {
    61                                  !byte >(AY_CLOCK_FREQ / (16.0 * .freq))
    62                          }
    63                          
    64                          
    65                          !macro ayToneEnable .dev, .chan {
    66                                  +ayRead .dev, AY_ENABLES
    67                                  and #!($01 << .chan)
    68                                  +ayWriteA .dev, AY_ENABLES
    69                          }
    70                          
    71                          !macro ayToneDisable .dev, .chan {
    72                                  +ayRead .dev, AY_ENABLES
    73                                  ora #($01 << .chan)
    74                                  +ayWriteA .dev, AY_ENABLES
    75                          }
    76                          
    77                          !macro ayNoiseEnable .dev, .chan {
    78                                  +ayRead .dev, AY_ENABLES
    79                                  eor #($08 << .chan)
    80                                  +ayWriteA .dev, AY_ENABLES
    81                          }
    82                          
    83                          !macro ayNoiseDisable .dev, .chan {
    84                                  +ayRead .dev, AY_ENABLES
    85                                  ora #($08 << .chan)
    86                                  +ayWriteA .dev, AY_ENABLES
    87                          }
    88                          
    89                          !macro aySetVolume .dev, .chan, .vol {
    90                                  +ayWrite .dev, (AY_CHA_AMPL + .chan), (.vol >> 4)
    91                          }
    92                          
    93                          !macro aySetVolumeEnvelope .dev, .chan {
    94                                  +ayWrite .dev, (AY_CHA_AMPL + .chan), $10
    95                          }
    96                          
    97                          !macro aySetEnvelopePeriod .dev, .period {
    98                                  +ayWrite .dev, AY_ENV_PERIOD_L, <.period
    99                                  +ayWrite .dev, AY_ENV_PERIOD_H, >.period
   100                          }
   101                          
   102                          !macro aySetEnvShape .dev, .shape {
   103                                  +ayWrite .dev, AY_ENV_SHAPE, .shape
   104                          }
   105                          
   106                          !macro aySetNoise .dev, .freq {
   107                                  +ayWrite .dev, AY_ENV_SHAPE, .freq >> 3
   108                          }
   109                          
   110                          !macro ayStop .dev, .chan {
   111                                  +ayPlayNote .dev, .chan, 0
   112                          }

; ******** Source: ../../kernel\hbc56kernel.inc
    24                          

; ******** Source: ../../lib\ser\uart.inc
     1                          ; 6502 - MC68B50 UART Macros
     2                          ;
     3                          ; Copyright (c) 2021 Troy Schrapel
     4                          ;
     5                          ; This code is licensed under the MIT license
     6                          ;
     7                          ; https://github.com/visrealm/hbc-56
     8                          ;
     9                          
    10                          ; -----------------------------------------------------------------------------
    11                          ; uartOutStringAddr: Output a string to the uart
    12                          ; -----------------------------------------------------------------------------
    13                          ; Inputs:
    14                          ;  .addr: Address of null-terminated string to print
    15                          ; -----------------------------------------------------------------------------
    16                          !macro uartOutStringAddr .addr {
    17                                  lda #<.addr
    18                                  sta STR_ADDR_L
    19                                  lda #>.addr
    20                                  sta STR_ADDR_H
    21                                  jsr uartOutString        
    22                          }
    23                          
    24                          
    25                          ; -----------------------------------------------------------------------------
    26                          ; uartOutString: Output an immediate string to the uart
    27                          ; -----------------------------------------------------------------------------
    28                          ; Inputs:
    29                          ;  .str: String to output
    30                          ; -----------------------------------------------------------------------------
    31                          !macro uartOutString .str {
    32                          	jmp @afterText
    33                          @textAddr
    34                          	!text .str,0
    35                          @afterText        
    36                                  +uartOutStringAddr @textAddr
    37                          }
    38                          

; ******** Source: ../../kernel\hbc56kernel.inc
    25                          

; ******** Source: ../../kernel\kernel.inc
     1                          ; 6502 - HBC-56 Kernel Macros
     2                          ;
     3                          ; Copyright (c) 2021 Troy Schrapel
     4                          ;
     5                          ; This code is licensed under the MIT license
     6                          ;
     7                          ; https://github.com/visrealm/hbc-56
     8                          ;
     9                          ;
    10                          
    11                          !macro setIntHandler .address {
    12                                  lda #<.address
    13                                  sta HBC56_INT_VECTOR + 1
    14                                  lda #>.address
    15                                  sta HBC56_INT_VECTOR + 2
    16                                  lda #JMP_OPCODE
    17                                  sta HBC56_INT_VECTOR
    18                          }
    19                          
    20                          !macro setNmiHandler .address {
    21                                  lda #<.address
    22                                  sta HBC56_NMI_VECTOR + 1
    23                                  lda #>.address
    24                                  sta HBC56_NMI_VECTOR + 2
    25                                  lda #JMP_OPCODE
    26                                  sta HBC56_NMI_VECTOR
    27                          }
    28                          
    29                          !macro setHbcMetaNES {
    30                                  lda #HBC56_CONSOLE_FLAG_NES
    31                                  ora HBC56_CONSOLE_FLAGS
    32                                  sta HBC56_CONSOLE_FLAGS
    33                          }
    34                          
    35                          !macro setHbcMetaNoWait {
    36                                  lda #HBC56_CONSOLE_FLAG_NOWAIT
    37                                  ora HBC56_CONSOLE_FLAGS
    38                                  sta HBC56_CONSOLE_FLAGS
    39                          }
    40                          
    41                          
    42                          !macro hbc56SetVsyncCallback .vsync {
    43                                  lda #<.vsync
    44                                  sta HBC56_VSYNC_CALLBACK
    45                                  lda #>.vsync
    46                                  sta HBC56_VSYNC_CALLBACK + 1
    47                          }
    48                          
    49                          !macro hbc56SetViaCallback .cb {
    50                                  lda #<.cb
    51                                  sta HBC56_VIA_CALLBACK
    52                                  lda #>.cb
    53                                  sta HBC56_VIA_CALLBACK + 1
    54                          }
    55                          
    56                          
    57                          !macro setHbcMetaTitle .titleStr {
    58                                  jmp .hbcMetaTitleOut
    59                          .titleStrLabel:
    60                                  !text .titleStr
    61                          .titleStrLabelLen = * - .titleStrLabel
    62                                  !byte 0 ; nul terminator for game name
    63                          
    64                          !if .titleStrLabelLen > HBC56_META_TITLE_MAX_LEN {
    65                                  !error "setHbcMetaTitle: Title metadata limited to ",HBC56_META_TITLE_MAX_LEN,"bytes"
    66                          }
    67                          .hbcMetaTitleOut:
    68                                  +memcpy HBC56_META_TITLE + (HBC56_META_TITLE_MAX_LEN-.titleStrLabelLen)/2, .titleStrLabel, .titleStrLabelLen
    69                                  lda #.titleStrLabelLen
    70                                  sta HBC56_META_TITLE_LEN
    71                          }
    72                          
    73                          !macro consoleEnableCursor {
    74                                  lda HBC56_CONSOLE_FLAGS
    75                                  ora #HBC56_CONSOLE_FLAG_CURSOR
    76                                  sta HBC56_CONSOLE_FLAGS
    77                          }
    78                          
    79                          !macro consoleDisableCursor {
    80                                  lda HBC56_CONSOLE_FLAGS
    81                                  and #!HBC56_CONSOLE_FLAG_CURSOR & $ff
    82                                  sta HBC56_CONSOLE_FLAGS
    83                          }
    84                          
    85                          !macro consoleLCDMode {
    86                                  lda HBC56_CONSOLE_FLAGS
    87                                  ora #HBC56_CONSOLE_FLAG_LCD
    88                                  sta HBC56_CONSOLE_FLAGS
    89                          }
    90                          
    91                          !macro setBreakpoint {
    92                                 !byte $db 
    93                          }
    94                          
    95                          !macro hbc56CustomDelay .delay {
    96                                  ldy #.delay
    97                                  jsr hbc56CustomDelay
    98                          }
    99                          
   100                          !macro hbc56DelayUs .us {
   101                          !if .us = 1 {
   102                                  nop
   103                                  nop
   104                          }
   105                          }
   106                          !macro hbc56DelayMs .ms {
   107                                  lda #<.ms
   108                                  sta DELAY_L
   109                                  lda #>.ms
   110                                  sta DELAY_H
   111                          
   112                                  jsr hbc56CustomDelayMs

; ******** Source: ../../kernel\hbc56kernel.inc
    26                          
    27                          
    28                          !ifndef HBC_56_EXCLUDE_KERNEL_ROM {
    29                          
    30                                  ; if the program requires the kernal image
    31                                  ; then... include it
    32                          
    33                                  *=HBC56_META_VECTOR
    34                                  !ifdef hbc56Meta {
    35  dffc 4c0380                             jmp hbc56Meta
    36                                  } else {
    37                                          rts
    38                                  }
    39                          
    40                                  *=HBC56_KERNEL_START
    41  e000 c9619005c97b9002...        !bin "kernel.o"
    42                          
    43                                  *=DEFAULT_HBC56_RST_VECTOR
    44  8000 4c2a80                     jmp hbc56Main
    45                          
    46                          } else {
    47                          
    48                                  ; otherwise, place the program in RAM
    49                          
    50                                  *=$0400

; ******** Source: mario.asm
    11                          
    12                          
    13                          hbc56Meta:
    14  8003 4c17804d4152494f...        +setHbcMetaTitle "MARIO BROS AUDIO"
    15  8029 60                         rts
    16                          
    17                          
    18                          TONE0 = $60
    19                          TONE1 = $61
    20                          NOISE0 = $62
    21                          
    22                          MIDI1ADDR = $70
    23                          MIDI2ADDR = $72
    24                          MIDI3ADDR = $74
    25                          MIDI1DELAY = $76
    26                          MIDI2DELAY = $77
    27                          MIDI3DELAY = $78
    28                          
    29                          
    30                          hbc56Main:
    31                          
    32  802a 2073e6                     jsr tmsModeGraphicsII
    33                          
    34  802d a9f1                       +tmsColorFgBg TMS_WHITE, TMS_BLACK
    35  802f 20bde5                     jsr tmsSetBackground
    36                          
    37  8032 a92020dde5                 +tmsDisableInterrupts
    38  8037 a94020dde5                 +tmsDisableOutput
    39                          
    40  803c 0878a9008d117fa9...        +tmsSetAddrPattTable
    41  8049 a9238524a9848525...        +tmsSendData marioPatt, $1800
    42                          
    43  80f9 0878a9008d117fa9...        +tmsSetAddrColorTable
    44  8106 a9238524a99c8525...        +tmsSendData marioCol, $1800
    45                          
    46  81b6 0878a9008d117fa9...        +tmsSetAddrNameTable
    47  81c3 a9008d107f2079e5...	+tmsPutSeq 0, 256
    48  81d0 a9008d107f2079e5...	+tmsPutSeq 0, 256
    49  81dd a9008d107f2079e5...	+tmsPutSeq 0, 256
    50                          
    51  81ea a94020d3e5                 +tmsEnableOutput
    52                          
    53                          
    54  81ef 2058e1             	jsr ayInit
    55  81f2 a900                       lda #0
    56  81f4 8560                       sta TONE0
    57  81f6 8561                       sta TONE1
    58  81f8 8562                       sta NOISE0
    59                          
    60  81fa a9088d407fa90f8d...        +ayWrite AY_PSG0, AY_CHA_AMPL, $0f
    61  8204 a9098d407fa90f8d...        +ayWrite AY_PSG0, AY_CHB_AMPL, $0f
    62  820e a90a8d407fa90f8d...        +ayWrite AY_PSG0, AY_CHC_AMPL, $0f
    63                                  ;+ayWrite AY_PSG0, AY_NOISE_GEN, 31
    64  8218 a9078d407fa9388d...        +ayWrite AY_PSG0, AY_ENABLES, $38
    65                          
    66  8222 a90d8d407fa9098d...        +aySetEnvShape AY_PSG0, AY_ENV_SHAPE_FADE_OUT
    67  822c a90b8d407fa9b08d...        +aySetEnvelopePeriod AY_PSG0, 1200
    68                          
    69  8240 a940                       lda #$40
    70  8242 8dfb7f                     sta  VIA_IO_ADDR_ACR
    71                          
    72  8245 a9c0                       lda #$c0
    73  8247 8dfe7f                     sta  VIA_IO_ADDR_IER
    74                          
    75  824a a9b7                       lda #$b7
    76  824c 8df47f                     sta VIA_IO_ADDR_T1C_L
    77  824f a955                       lda #$55
    78  8251 8df57f                     sta VIA_IO_ADDR_T1C_H
    79  8254 a9868dbb7ca9828d...        +hbc56SetViaCallback timerHandler
    80                          
    81  825e a9238570a9b48571           +store16 MIDI1ADDR, tones1
    82  8266 a9d18572a9b88573           +store16 MIDI2ADDR, tones2
    83  826e a9af8574a9bd8575           +store16 MIDI3ADDR, tones3
    84                          
    85  8276 b270                       lda (MIDI1ADDR)
    86  8278 8576                       sta MIDI1DELAY
    87  827a b272                       lda (MIDI2ADDR)
    88  827c 8577                       sta MIDI2DELAY
    89  827e b274                       lda (MIDI3ADDR)
    90  8280 8578                       sta MIDI3DELAY
    91                          
    92  8282 58                         cli
    93                          
    94  8283 4c73f2                     jmp hbc56Stop
    95                          
    96                          timerHandler:
    97  8286 2cf47f                     bit VIA_IO_ADDR_T1C_L
    98  8289 a576                       lda MIDI1DELAY
    99  828b d003                       bne +
   100  828d 20d082                     jsr playNote1
   101                          +
   102  8290 c676                       dec MIDI1DELAY
   103  8292 a577                       lda MIDI2DELAY
   104  8294 d003                       bne +
   105  8296 203083                     jsr playNote2
   106                          +
   107  8299 c677                       dec MIDI2DELAY
   108  829b a578                       lda MIDI3DELAY
   109  829d d003                       bne +
   110  829f 209083                     jsr playNote3
   111                          
   112                          +
   113  82a2 c678                       dec MIDI3DELAY
   114  82a4 a578                       lda MIDI3DELAY
   115  82a6 c9fe                       cmp #$fe
   116  82a8 f001                       beq +
   117  82aa 60                         rts
   118                          +
   119  82ab a9238570a9b48571           +store16 MIDI1ADDR, tones1
   120  82b3 a9d18572a9b88573           +store16 MIDI2ADDR, tones2
   121  82bb a9af8574a9bd8575           +store16 MIDI3ADDR, tones3
   122                          
   123  82c3 b270                       lda (MIDI1ADDR)
   124  82c5 8576                       sta MIDI1DELAY
   125  82c7 b272                       lda (MIDI2ADDR)
   126  82c9 8577                       sta MIDI2DELAY
   127  82cb b274                       lda (MIDI3ADDR)
   128  82cd 8578                       sta MIDI3DELAY
   129                          
   130                                  
   131  82cf 60                         rts
   132                          
   133                          playNote1:
   134  82d0 e670d002e671               +inc16 MIDI1ADDR
   135  82d6 b270                       lda (MIDI1ADDR)
   136  82d8 f02d                       beq @stopNote1
   137  82da a8                         tay
   138  82db b93dc2                     lda midiNotesL, y
   139  82de a2008e407f8d417f           +ayWriteA AY_PSG0, AY_CHA_TONE_L
   140  82e6 b9bdc2                     lda midiNotesH, y
   141  82e9 a2018e407f8d417f           +ayWriteA AY_PSG0, AY_CHA_TONE_H
   142  82f1 a9088d407fa91f8d...        +ayWrite AY_PSG0, AY_CHA_AMPL, 0x1f
   143  82fb a90d8d407fa9098d...        +aySetEnvShape AY_PSG0, AY_ENV_SHAPE_FADE_OUT
   144  8305 801e                       bra @setupNext        
   145                          @stopNote1:
   146  8307 a9008d407fa9008d...        +ayWrite AY_PSG0, AY_CHA_TONE_L, 0
   147  8311 a9018d407fa9008d...        +ayWrite AY_PSG0, AY_CHA_TONE_H, 0
   148  831b a9088d407fa9008d...        +ayWrite AY_PSG0, AY_CHA_AMPL, 0
   149                          @setupNext:
   150  8325 e670d002e671               +inc16 MIDI1ADDR
   151  832b b270                       lda (MIDI1ADDR)
   152  832d 8576                       sta MIDI1DELAY
   153  832f 60                         rts
   154                          
   155                          playNote2:
   156  8330 e672d002e673               +inc16 MIDI2ADDR
   157  8336 b272                       lda (MIDI2ADDR)
   158  8338 f02d                       beq @stopNote2
   159  833a a8                         tay
   160  833b b93dc2                     lda midiNotesL, y
   161  833e a2028e407f8d417f           +ayWriteA AY_PSG0, AY_CHB_TONE_L
   162  8346 b9bdc2                     lda midiNotesH, y
   163  8349 a2038e407f8d417f           +ayWriteA AY_PSG0, AY_CHB_TONE_H
   164  8351 a9098d407fa91f8d...        +ayWrite AY_PSG0, AY_CHB_AMPL, 0x1f
   165  835b a90d8d407fa9098d...        +aySetEnvShape AY_PSG0, AY_ENV_SHAPE_FADE_OUT
   166  8365 801e                       bra @setupNext        
   167                          @stopNote2:
   168  8367 a9028d407fa9008d...        +ayWrite AY_PSG0, AY_CHB_TONE_L, 0
   169  8371 a9038d407fa9008d...        +ayWrite AY_PSG0, AY_CHB_TONE_H, 0
   170  837b a9098d407fa9008d...        +ayWrite AY_PSG0, AY_CHB_AMPL, 0
   171                          @setupNext:
   172  8385 e672d002e673               +inc16 MIDI2ADDR
   173  838b b272                       lda (MIDI2ADDR)
   174  838d 8577                       sta MIDI2DELAY
   175  838f 60                         rts
   176                          
   177                          
   178                          playNote3:
   179  8390 e674d002e675               +inc16 MIDI3ADDR
   180  8396 b274                       lda (MIDI3ADDR)
   181  8398 f02d                       beq @stopNote3
   182  839a a8                         tay
   183  839b b93dc2                     lda midiNotesL, y
   184  839e a2048e407f8d417f           +ayWriteA AY_PSG0, AY_CHC_TONE_L
   185  83a6 b9bdc2                     lda midiNotesH, y
   186  83a9 a2058e407f8d417f           +ayWriteA AY_PSG0, AY_CHC_TONE_H
   187  83b1 a90a8d407fa91f8d...        +ayWrite AY_PSG0, AY_CHC_AMPL, 0x1f
   188  83bb a90d8d407fa9098d...        +aySetEnvShape AY_PSG0, AY_ENV_SHAPE_FADE_OUT
   189  83c5 801e                       bra @setupNext        
   190                          @stopNote3:
   191  83c7 a9048d407fa9008d...        +ayWrite AY_PSG0, AY_CHC_TONE_L, 0
   192  83d1 a9058d407fa9008d...        +ayWrite AY_PSG0, AY_CHC_TONE_H, 0
   193  83db a90a8d407fa9008d...        +ayWrite AY_PSG0, AY_CHC_AMPL, 0
   194                          @setupNext:
   195  83e5 e674d002e675               +inc16 MIDI3ADDR
   196  83eb b274                       lda (MIDI3ADDR)
   197  83ed 8578                       sta MIDI3DELAY
   198  83ef 60                         rts
   199                          
   200                          toneDelay:
   201  83f0 a0ff               	ldy #255
   202  83f2 201884             	jsr customDelay
   203  83f5 a0ff               	ldy #255
   204  83f7 4c1884             	jmp customDelay
   205                          
   206                          shortDelay:
   207  83fa a010               	ldy #16
   208  83fc 4c1884             	jmp customDelay
   209                          
   210                          medDelay:
   211  83ff 200b84             	jsr delay
   212  8402 200b84             	jsr delay
   213  8405 200b84             	jsr delay
   214  8408 200b84             	jsr delay
   215                          
   216                          
   217                          delay:
   218  840b a2ff               	ldx #255
   219  840d a0ff               	ldy #255
   220                          -
   221  840f ca                 	dex
   222  8410 d0fd               	bne -
   223  8412 a2ff               	ldx #255
   224  8414 88                 	dey
   225  8415 d0f8               	bne -
   226  8417 60                 	rts
   227                          
   228                          customDelay:
   229  8418 a2ff               	ldx #255
   230                          -
   231  841a ca                 	dex
   232  841b d0fd               	bne -
   233  841d a2ff               	ldx #255
   234  841f 88                 	dey
   235  8420 d0f8               	bne -
   236  8422 60                 	rts
   237                          
   238                          
   239                          marioPatt:
   240  8423 0000000000000000...!bin "mario.gfx2p"
   241                          marioCol:
   242  9c23 1111111111111111...!bin "mario.gfx2c"
   243                          
   244                          tones1:
   245  b423 004c1000084c1000...!bin "overworld.mid.t01.bin"
   246                          tones2:
   247  b8d1 0042100008421000...!bin "overworld.mid.t02.bin"
   248                          tones3:
   249  bdaf 0032100008321000...!bin "overworld.mid.t03.bin"
   250                          
   251                          
   252                          ; midi notes id to frequency. f=440 * 2^((n-69)/12)
   253                          
   254                          midiNotesL:
   255  c23d b9                 +ayToneByteL 8.17579891564371
   256  c23e 5e                 +ayToneByteL 8.66195721802725
   257  c23f 34                 +ayToneByteL 9.17702399741899
   258  c240 38                 +ayToneByteL 9.72271824131503
   259  c241 66                 +ayToneByteL 10.3008611535272
   260  c242 bd                 +ayToneByteL 10.9133822322814
   261  c243 3a                 +ayToneByteL 11.5623257097386
   262  c244 dc                 +ayToneByteL 12.2498573744297
   263  c245 9f                 +ayToneByteL 12.9782717993733
   264  c246 82                 +ayToneByteL 13.75
   265  c247 84                 +ayToneByteL 14.5676175474403
   266  c248 a3                 +ayToneByteL 15.4338531642539
   267  c249 dc                 +ayToneByteL 16.3515978312874
   268  c24a 2f                 +ayToneByteL 17.3239144360545
   269  c24b 9a                 +ayToneByteL 18.354047994838
   270  c24c 1c                 +ayToneByteL 19.4454364826301
   271  c24d b3                 +ayToneByteL 20.6017223070544
   272  c24e 5e                 +ayToneByteL 21.8267644645627
   273  c24f 1d                 +ayToneByteL 23.1246514194772
   274  c250 ee                 +ayToneByteL 24.4997147488593
   275  c251 cf                 +ayToneByteL 25.9565435987466
   276  c252 c1                 +ayToneByteL 27.5
   277  c253 c2                 +ayToneByteL 29.1352350948806
   278  c254 d1                 +ayToneByteL 30.8677063285078
   279  c255 ee                 +ayToneByteL 32.7031956625748
   280  c256 17                 +ayToneByteL 34.647828872109
   281  c257 4d                 +ayToneByteL 36.7080959896759
   282  c258 8e                 +ayToneByteL 38.8908729652601
   283  c259 d9                 +ayToneByteL 41.2034446141088
   284  c25a 2f                 +ayToneByteL 43.6535289291255
   285  c25b 8e                 +ayToneByteL 46.2493028389543
   286  c25c f7                 +ayToneByteL 48.9994294977187
   287  c25d 67                 +ayToneByteL 51.9130871974931
   288  c25e e0                 +ayToneByteL 55
   289  c25f 61                 +ayToneByteL 58.2704701897613
   290  c260 e8                 +ayToneByteL 61.7354126570155
   291  c261 77                 +ayToneByteL 65.4063913251497
   292  c262 0b                 +ayToneByteL 69.295657744218
   293  c263 a6                 +ayToneByteL 73.4161919793519
   294  c264 47                 +ayToneByteL 77.7817459305202
   295  c265 ec                 +ayToneByteL 82.4068892282175
   296  c266 97                 +ayToneByteL 87.307057858251
   297  c267 47                 +ayToneByteL 92.4986056779086
   298  c268 fb                 +ayToneByteL 97.9988589954373
   299  c269 b3                 +ayToneByteL 103.826174394986
   300  c26a 70                 +ayToneByteL 110
   301  c26b 30                 +ayToneByteL 116.540940379522
   302  c26c f4                 +ayToneByteL 123.470825314031
   303  c26d bb                 +ayToneByteL 130.812782650299
   304  c26e 85                 +ayToneByteL 138.591315488436
   305  c26f 53                 +ayToneByteL 146.832383958704
   306  c270 23                 +ayToneByteL 155.56349186104
   307  c271 f6                 +ayToneByteL 164.813778456435
   308  c272 cb                 +ayToneByteL 174.614115716502
   309  c273 a3                 +ayToneByteL 184.997211355817
   310  c274 7d                 +ayToneByteL 195.997717990875
   311  c275 59                 +ayToneByteL 207.652348789973
   312  c276 38                 +ayToneByteL 220
   313  c277 18                 +ayToneByteL 233.081880759045
   314  c278 fa                 +ayToneByteL 246.941650628062
   315  c279 dd                 +ayToneByteL 261.625565300599
   316  c27a c2                 +ayToneByteL 277.182630976872
   317  c27b a9                 +ayToneByteL 293.664767917408
   318  c27c 91                 +ayToneByteL 311.126983722081
   319  c27d 7b                 +ayToneByteL 329.62755691287
   320  c27e 65                 +ayToneByteL 349.228231433004
   321  c27f 51                 +ayToneByteL 369.994422711634
   322  c280 3e                 +ayToneByteL 391.995435981749
   323  c281 2c                 +ayToneByteL 415.304697579945
   324  c282 1c                 +ayToneByteL 440
   325  c283 0c                 +ayToneByteL 466.16376151809
   326  c284 fd                 +ayToneByteL 493.883301256124
   327  c285 ee                 +ayToneByteL 523.251130601197
   328  c286 e1                 +ayToneByteL 554.365261953744
   329  c287 d4                 +ayToneByteL 587.329535834815
   330  c288 c8                 +ayToneByteL 622.253967444162
   331  c289 bd                 +ayToneByteL 659.25511382574
   332  c28a b2                 +ayToneByteL 698.456462866008
   333  c28b a8                 +ayToneByteL 739.988845423269
   334  c28c 9f                 +ayToneByteL 783.990871963499
   335  c28d 96                 +ayToneByteL 830.60939515989
   336  c28e 8e                 +ayToneByteL 880
   337  c28f 86                 +ayToneByteL 932.32752303618
   338  c290 7e                 +ayToneByteL 987.766602512248
   339  c291 77                 +ayToneByteL 1046.50226120239
   340  c292 70                 +ayToneByteL 1108.73052390749
   341  c293 6a                 +ayToneByteL 1174.65907166963
   342  c294 64                 +ayToneByteL 1244.50793488832
   343  c295 5e                 +ayToneByteL 1318.51022765148
   344  c296 59                 +ayToneByteL 1396.91292573202
   345  c297 54                 +ayToneByteL 1479.97769084654
   346  c298 4f                 +ayToneByteL 1567.981743927
   347  c299 4b                 +ayToneByteL 1661.21879031978
   348  c29a 47                 +ayToneByteL 1760
   349  c29b 43                 +ayToneByteL 1864.65504607236
   350  c29c 3f                 +ayToneByteL 1975.5332050245
   351  c29d 3b                 +ayToneByteL 2093.00452240479
   352  c29e 38                 +ayToneByteL 2217.46104781498
   353  c29f 35                 +ayToneByteL 2349.31814333926
   354  c2a0 32                 +ayToneByteL 2489.01586977665
   355  c2a1 2f                 +ayToneByteL 2637.02045530296
   356  c2a2 2c                 +ayToneByteL 2793.82585146403
   357  c2a3 2a                 +ayToneByteL 2959.95538169308
   358  c2a4 27                 +ayToneByteL 3135.96348785399
   359  c2a5 25                 +ayToneByteL 3322.43758063956
   360  c2a6 23                 +ayToneByteL 3520
   361  c2a7 21                 +ayToneByteL 3729.31009214472
   362  c2a8 1f                 +ayToneByteL 3951.06641004899
   363  c2a9 1d                 +ayToneByteL 4186.00904480958
   364  c2aa 1c                 +ayToneByteL 4434.92209562995
   365  c2ab 1a                 +ayToneByteL 4698.63628667852
   366  c2ac 19                 +ayToneByteL 4978.03173955329
   367  c2ad 17                 +ayToneByteL 5274.04091060592
   368  c2ae 16                 +ayToneByteL 5587.65170292806
   369  c2af 15                 +ayToneByteL 5919.91076338615
   370  c2b0 13                 +ayToneByteL 6271.92697570798
   371  c2b1 12                 +ayToneByteL 6644.87516127912
   372  c2b2 11                 +ayToneByteL 7040
   373  c2b3 10                 +ayToneByteL 7458.62018428944
   374  c2b4 0f                 +ayToneByteL 7902.13282009799
   375  c2b5 0e                 +ayToneByteL 8372.01808961916
   376  c2b6 0e                 +ayToneByteL 8869.8441912599
   377  c2b7 0d                 +ayToneByteL 9397.27257335704
   378  c2b8 0c                 +ayToneByteL 9956.06347910659
   379  c2b9 0b                 +ayToneByteL 10548.0818212118
   380  c2ba 0b                 +ayToneByteL 11175.3034058561
   381  c2bb 0a                 +ayToneByteL 11839.8215267723
   382  c2bc 09                 +ayToneByteL 12543.853951416
   383                          
   384                          
   385                          midiNotesH:
   386  c2bd 3b                 +ayToneByteH 8.17579891564371
   387  c2be 38                 +ayToneByteH 8.66195721802725
   388  c2bf 35                 +ayToneByteH 9.17702399741899
   389  c2c0 32                 +ayToneByteH 9.72271824131503
   390  c2c1 2f                 +ayToneByteH 10.3008611535272
   391  c2c2 2c                 +ayToneByteH 10.9133822322814
   392  c2c3 2a                 +ayToneByteH 11.5623257097386
   393  c2c4 27                 +ayToneByteH 12.2498573744297
   394  c2c5 25                 +ayToneByteH 12.9782717993733
   395  c2c6 23                 +ayToneByteH 13.75
   396  c2c7 21                 +ayToneByteH 14.5676175474403
   397  c2c8 1f                 +ayToneByteH 15.4338531642539
   398  c2c9 1d                 +ayToneByteH 16.3515978312874
   399  c2ca 1c                 +ayToneByteH 17.3239144360545
   400  c2cb 1a                 +ayToneByteH 18.354047994838
   401  c2cc 19                 +ayToneByteH 19.4454364826301
   402  c2cd 17                 +ayToneByteH 20.6017223070544
   403  c2ce 16                 +ayToneByteH 21.8267644645627
   404  c2cf 15                 +ayToneByteH 23.1246514194772
   405  c2d0 13                 +ayToneByteH 24.4997147488593
   406  c2d1 12                 +ayToneByteH 25.9565435987466
   407  c2d2 11                 +ayToneByteH 27.5
   408  c2d3 10                 +ayToneByteH 29.1352350948806
   409  c2d4 0f                 +ayToneByteH 30.8677063285078
   410  c2d5 0e                 +ayToneByteH 32.7031956625748
   411  c2d6 0e                 +ayToneByteH 34.647828872109
   412  c2d7 0d                 +ayToneByteH 36.7080959896759
   413  c2d8 0c                 +ayToneByteH 38.8908729652601
   414  c2d9 0b                 +ayToneByteH 41.2034446141088
   415  c2da 0b                 +ayToneByteH 43.6535289291255
   416  c2db 0a                 +ayToneByteH 46.2493028389543
   417  c2dc 09                 +ayToneByteH 48.9994294977187
   418  c2dd 09                 +ayToneByteH 51.9130871974931
   419  c2de 08                 +ayToneByteH 55
   420  c2df 08                 +ayToneByteH 58.2704701897613
   421  c2e0 07                 +ayToneByteH 61.7354126570155
   422  c2e1 07                 +ayToneByteH 65.4063913251497
   423  c2e2 07                 +ayToneByteH 69.295657744218
   424  c2e3 06                 +ayToneByteH 73.4161919793519
   425  c2e4 06                 +ayToneByteH 77.7817459305202
   426  c2e5 05                 +ayToneByteH 82.4068892282175
   427  c2e6 05                 +ayToneByteH 87.307057858251
   428  c2e7 05                 +ayToneByteH 92.4986056779086
   429  c2e8 04                 +ayToneByteH 97.9988589954373
   430  c2e9 04                 +ayToneByteH 103.826174394986
   431  c2ea 04                 +ayToneByteH 110
   432  c2eb 04                 +ayToneByteH 116.540940379522
   433  c2ec 03                 +ayToneByteH 123.470825314031
   434  c2ed 03                 +ayToneByteH 130.812782650299
   435  c2ee 03                 +ayToneByteH 138.591315488436
   436  c2ef 03                 +ayToneByteH 146.832383958704
   437  c2f0 03                 +ayToneByteH 155.56349186104
   438  c2f1 02                 +ayToneByteH 164.813778456435
   439  c2f2 02                 +ayToneByteH 174.614115716502
   440  c2f3 02                 +ayToneByteH 184.997211355817
   441  c2f4 02                 +ayToneByteH 195.997717990875
   442  c2f5 02                 +ayToneByteH 207.652348789973
   443  c2f6 02                 +ayToneByteH 220
   444  c2f7 02                 +ayToneByteH 233.081880759045
   445  c2f8 01                 +ayToneByteH 246.941650628062
   446  c2f9 01                 +ayToneByteH 261.625565300599
   447  c2fa 01                 +ayToneByteH 277.182630976872
   448  c2fb 01                 +ayToneByteH 293.664767917408
   449  c2fc 01                 +ayToneByteH 311.126983722081
   450  c2fd 01                 +ayToneByteH 329.62755691287
   451  c2fe 01                 +ayToneByteH 349.228231433004
   452  c2ff 01                 +ayToneByteH 369.994422711634
   453  c300 01                 +ayToneByteH 391.995435981749
   454  c301 01                 +ayToneByteH 415.304697579945
   455  c302 01                 +ayToneByteH 440
   456  c303 01                 +ayToneByteH 466.16376151809
   457  c304 00                 +ayToneByteH 493.883301256124
   458  c305 00                 +ayToneByteH 523.251130601197
   459  c306 00                 +ayToneByteH 554.365261953744
   460  c307 00                 +ayToneByteH 587.329535834815
   461  c308 00                 +ayToneByteH 622.253967444162
   462  c309 00                 +ayToneByteH 659.25511382574
   463  c30a 00                 +ayToneByteH 698.456462866008
   464  c30b 00                 +ayToneByteH 739.988845423269
   465  c30c 00                 +ayToneByteH 783.990871963499
   466  c30d 00                 +ayToneByteH 830.60939515989
   467  c30e 00                 +ayToneByteH 880
   468  c30f 00                 +ayToneByteH 932.32752303618
   469  c310 00                 +ayToneByteH 987.766602512248
   470  c311 00                 +ayToneByteH 1046.50226120239
   471  c312 00                 +ayToneByteH 1108.73052390749
   472  c313 00                 +ayToneByteH 1174.65907166963
   473  c314 00                 +ayToneByteH 1244.50793488832
   474  c315 00                 +ayToneByteH 1318.51022765148
   475  c316 00                 +ayToneByteH 1396.91292573202
   476  c317 00                 +ayToneByteH 1479.97769084654
   477  c318 00                 +ayToneByteH 1567.981743927
   478  c319 00                 +ayToneByteH 1661.21879031978
   479  c31a 00                 +ayToneByteH 1760
   480  c31b 00                 +ayToneByteH 1864.65504607236
   481  c31c 00                 +ayToneByteH 1975.5332050245
   482  c31d 00                 +ayToneByteH 2093.00452240479
   483  c31e 00                 +ayToneByteH 2217.46104781498
   484  c31f 00                 +ayToneByteH 2349.31814333926
   485  c320 00                 +ayToneByteH 2489.01586977665
   486  c321 00                 +ayToneByteH 2637.02045530296
   487  c322 00                 +ayToneByteH 2793.82585146403
   488  c323 00                 +ayToneByteH 2959.95538169308
   489  c324 00                 +ayToneByteH 3135.96348785399
   490  c325 00                 +ayToneByteH 3322.43758063956
   491  c326 00                 +ayToneByteH 3520
   492  c327 00                 +ayToneByteH 3729.31009214472
   493  c328 00                 +ayToneByteH 3951.06641004899
   494  c329 00                 +ayToneByteH 4186.00904480958
   495  c32a 00                 +ayToneByteH 4434.92209562995
   496  c32b 00                 +ayToneByteH 4698.63628667852
   497  c32c 00                 +ayToneByteH 4978.03173955329
   498  c32d 00                 +ayToneByteH 5274.04091060592
   499  c32e 00                 +ayToneByteH 5587.65170292806
   500  c32f 00                 +ayToneByteH 5919.91076338615
   501  c330 00                 +ayToneByteH 6271.92697570798
   502  c331 00                 +ayToneByteH 6644.87516127912
   503  c332 00                 +ayToneByteH 7040
   504  c333 00                 +ayToneByteH 7458.62018428944
   505  c334 00                 +ayToneByteH 7902.13282009799
   506  c335 00                 +ayToneByteH 8372.01808961916
   507  c336 00                 +ayToneByteH 8869.8441912599
   508  c337 00                 +ayToneByteH 9397.27257335704
   509  c338 00                 +ayToneByteH 9956.06347910659
   510  c339 00                 +ayToneByteH 10548.0818212118
   511  c33a 00                 +ayToneByteH 11175.3034058561
   512  c33b 00                 +ayToneByteH 11839.8215267723

; ******** Source: kernel.asm
     1                          ; 6502 - HBC-56 Kernel
     2                          ;
     3                          ; Copyright (c) 2021 Troy Schrapel
     4                          ;
     5                          ; This code is licensed under the MIT license
     6                          ;
     7                          ; https://github.com/visrealm/hbc-56
     8                          ;
     9                          ;
    10                          
    11                          HBC56_INT_VECTOR = $7e00
    12                          HBC56_NMI_VECTOR = $7e04
    13                          HBC56_RST_VECTOR = kernelMain
    14                          
    15                          HBC56_KERNEL_START = $e000
    16                          HBC56_META_VECTOR  = HBC56_KERNEL_START-4
    17                          
    18                          RTI_OPCODE = $40
    19                          JMP_OPCODE = $4c
    20                          
    21                          ; -------------------------
    22                          ; I/O devices
    23                          ; -------------------------
    24                          LCD_IO_PORT             = $02
    25                          TMS9918_IO_PORT         = $10
    26                          UART_IO_PORT            = $20
    27                          AY_IO_PORT              = $40
    28                          KB_IO_PORT              = $80
    29                          NES_IO_PORT             = $82
    30                          INT_IO_PORT             = $df
    31                          VIA_IO_PORT             = $f0
    32                          ROM_BANK_REG            = $08
    33                          
    34                          ; -------------------------
    35                          ; Kernel Zero Page
    36                          ; -------------------------
    37                          HBC56_KERNEL_ZP_START   = $18
    38                          
    39                          TILEMAP_ZP_START        = HBC56_KERNEL_ZP_START
    40                          TILEMAP_ZP_END          = TILEMAP_ZP_START + 6
    41                          
    42                          BITMAP_ZP_START         = TILEMAP_ZP_END
    43                          BITMAP_ZP_END           = BITMAP_ZP_START + 6
    44                          
    45                          !ifdef HBC56_DISABLE_TMS9918 { .TMS_ZP_SIZE = 0 } else { .TMS_ZP_SIZE = 4 }
    46                          TMS9918_ZP_START        = BITMAP_ZP_END
    47                          TMS9918_ZP_END          = TMS9918_ZP_START + .TMS_ZP_SIZE
    48                          
    49                          !ifdef HBC56_DISABLE_LCD { .LCD_ZP_SIZE = 0 } else { .LCD_ZP_SIZE = 2 }
    50                          LCD_ZP_START            = TMS9918_ZP_END
    51                          LCD_ZP_END              = LCD_ZP_START + .LCD_ZP_SIZE
    52                          
    53                          !ifdef HBC56_DISABLE_UART { .UART_ZP_SIZE = 0 } else { .UART_ZP_SIZE = 4 }
    54                          UART_ZP_START            = LCD_ZP_END
    55                          UART_ZP_END              = UART_ZP_START + .UART_ZP_SIZE
    56                          
    57                          MEMORY_ZP_START         = UART_ZP_END
    58                          MEMORY_ZP_END           = MEMORY_ZP_START + 6
    59                          
    60                          STR_ADDR                = MEMORY_ZP_END
    61                          STR_ADDR_L              = MEMORY_ZP_END
    62                          STR_ADDR_H              = MEMORY_ZP_END + 1
    63                          
    64                          DELAY_L                 = STR_ADDR_H + 1
    65                          DELAY_H                 = DELAY_L + 1
    66                          
    67                          HBC56_KERNEL_ZP_END     = DELAY_H + 1
    68                          HBC56_USER_ZP_START     = HBC56_KERNEL_ZP_END
    69                          
    70                          ;!warn "Total ZP used: ",STR_ADDR_H-HBC56_KERNEL_ZP_START
    71                          
    72                          
    73                          !ifndef HAVE_TMS9918 { HBC56_DISABLE_SFXMAN=1 }
    74                          
    75                          ; -------------------------
    76                          ; Kernel RAM
    77                          ; -------------------------
    78                          HBC56_KERNEL_RAM_START  = $7a00
    79                          
    80                          TILEMAP_RAM_START       = HBC56_KERNEL_RAM_START
    81                          TILEMAP_RAM_END         = TILEMAP_RAM_START + $116
    82                          
    83                          BITMAP_RAM_START        = TILEMAP_RAM_END
    84                          BITMAP_RAM_END          = BITMAP_RAM_START + 16
    85                          
    86                          !ifdef HBC56_DISABLE_TMS9918 { .TMS_RAM_SIZE = 0 } else { .TMS_RAM_SIZE = 50 }
    87                          TMS9918_RAM_START       = BITMAP_RAM_END
    88                          TMS9918_RAM_END         = TMS9918_RAM_START + .TMS_RAM_SIZE
    89                          
    90                          !ifdef HBC56_DISABLE_LCD { .LCD_RAM_SIZE = 0 } else { .LCD_RAM_SIZE = 42 }
    91                          LCD_RAM_START           = TMS9918_RAM_END
    92                          LCD_RAM_END             = LCD_RAM_START + .LCD_RAM_SIZE
    93                          
    94                          !ifdef HBC56_DISABLE_UART { .UART_RAM_SIZE = 0 } else { .UART_RAM_SIZE = 256 }
    95                          UART_RAM_START            = LCD_RAM_END
    96                          UART_RAM_END              = UART_RAM_START + .UART_RAM_SIZE
    97                          
    98                          VIA_RAM_START             = UART_RAM_END
    99                          VIA_RAM_END               = VIA_RAM_START + 1
   100                          
   101                          !ifdef HBC56_DISABLE_SFXMAN { .SFXMAN_RAM_SIZE = 0 } else { .SFXMAN_RAM_SIZE = 18 }
   102                          SFXMAN_RAM_START        = VIA_RAM_END
   103                          SFXMAN_RAM_END          = SFXMAN_RAM_START + .SFXMAN_RAM_SIZE
   104                          
   105                          BCD_RAM_START           = SFXMAN_RAM_END
   106                          BCD_RAM_END             = BCD_RAM_START + 3
   107                          
   108                          KB_RAM_START            = BCD_RAM_END
   109                          KB_RAM_END              = KB_RAM_START + 64
   110                          
   111                          NES_RAM_START            = KB_RAM_END
   112                          NES_RAM_END              = NES_RAM_START + 3
   113                          
   114                          LAST_MODULE_RAM_END     = NES_RAM_END
   115                          
   116                          HBC56_TICKS             = LAST_MODULE_RAM_END
   117                          HBC56_SECONDS_L         = LAST_MODULE_RAM_END + 1
   118                          HBC56_SECONDS_H         = LAST_MODULE_RAM_END + 2
   119                          HBC56_TMP               = LAST_MODULE_RAM_END + 3
   120                          
   121                          HBC56_CONSOLE_FLAGS     = LAST_MODULE_RAM_END + 4
   122                          HBC56_CONSOLE_FLAG_CURSOR = $80
   123                          HBC56_CONSOLE_FLAG_NES    = $40
   124                          HBC56_CONSOLE_FLAG_LCD    = $20
   125                          HBC56_CONSOLE_FLAG_NOWAIT = $10
   126                          
   127                          HBC56_TMP_X             = LAST_MODULE_RAM_END + 5
   128                          HBC56_TMP_Y             = LAST_MODULE_RAM_END + 6
   129                          
   130                          HBC56_META_TITLE_MAX_LEN = 16
   131                          HBC56_META_TITLE        = LAST_MODULE_RAM_END + 7
   132                          HBC56_META_TITLE_END    = HBC56_META_TITLE + HBC56_META_TITLE_MAX_LEN + 1
   133                          HBC56_META_TITLE_LEN    = HBC56_META_TITLE_END + 1
   134                          
   135                          ; callback function on vsync
   136                          HBC56_VSYNC_CALLBACK = HBC56_META_TITLE_LEN + 1
   137                          HBC56_VIA_CALLBACK   = HBC56_VSYNC_CALLBACK + 2
   138                          
   139                          
   140                          HBC56_KERNEL_RAM_END    = HBC56_VIA_CALLBACK + 2
   141                          HBC56_KERNEL_RAM_SIZE   = HBC56_KERNEL_RAM_END - HBC56_KERNEL_RAM_START
   142                          ;!warn "Total RAM used: ",HBC56_KERNEL_RAM_SIZE
   143                          

; ******** Source: ../lib\hbc56.asm
     1                          ; 6502 - HBC-56
     2                          ;
     3                          ; Copyright (c) 2021 Troy Schrapel
     4                          ;
     5                          ; This code is licensed under the MIT license
     6                          ;
     7                          ; https://github.com/visrealm/hbc-56
     8                          ;
     9                          ;
    10                          
    11                          !cpu w65c02
    12                          !initmem $FF
    13                          cputype = $65c02
    14                          

; ******** Source: ../lib\hbc56.inc
     1                          ; 6502 - HBC-56
     2                          ;
     3                          ; Copyright (c) 2021 Troy Schrapel
     4                          ;
     5                          ; This code is licensed under the MIT license
     6                          ;
     7                          ; https://github.com/visrealm/hbc-56
     8                          ;
     9                          ;
    10                          
    11                          ; Base address of the 256 IO port memory range
    12                          IO_PORT_BASE_ADDRESS	= $7f00
    13                          
    14                          
    15                          ; -------------------------
    16                          ; ASCII constants
    17                          ; -------------------------
    18                          ASCII_RETURN    = $0A
    19                          ASCII_CR        = $0D
    20                          ASCII_BACKSPACE = $08
    21                          ASCII_BELL      = $07

; ******** Source: ../lib\hbc56.asm
    16                          
    17                          DEFAULT_HBC56_NMI_VECTOR = $FFE0
    18                          DEFAULT_HBC56_RST_VECTOR = $8000
    19                          DEFAULT_HBC56_INT_VECTOR = $FFE0
    20                          
    21                          !macro hbc56Title .title {
    22                          HBC56_TITLE_TEXT:
    23                                  !text .title
    24                          HBC56_TITLE_TEXT_LEN = * - HBC56_TITLE_TEXT
    25                                  !byte 0 ; nul terminator for game name
    26                          }
    27                          
    28                          *=DEFAULT_HBC56_INT_VECTOR
    29  ffe0 40                         rti
    30                          
    31                          hbc56Delay:
    32  ffe1 a000               	ldy #0
    33                          hbc56CustomDelay:
    34  ffe3 a200               	ldx #0
    35                          -
    36  ffe5 ca                 	dex
    37  ffe6 d0fd               	bne -
    38  ffe8 a200               	ldx #0
    39  ffea 88                 	dey
    40  ffeb d0f8               	bne -
    41  ffed 60                 	rts
    42                          
    43                          *=$FFFA
    44  fffa 047e               !ifdef HBC56_NMI_VECTOR { !word HBC56_NMI_VECTOR } else { !word DEFAULT_HBC56_NMI_VECTOR }
    45  fffc 14f1               !ifdef HBC56_RST_VECTOR { !word HBC56_RST_VECTOR } else { !word DEFAULT_HBC56_RST_VECTOR }
    46  fffe 007e               !ifdef HBC56_INT_VECTOR { !word HBC56_INT_VECTOR } else { !word DEFAULT_HBC56_INT_VECTOR }
    47                          
    48                          
    49                          *=DEFAULT_HBC56_RST_VECTOR

; ******** Source: kernel.asm
   144                          
   145                          *=HBC56_KERNEL_START
   146                          

; ******** Source: ../lib\ut\ascii.asm
     1                          ; 6502 - ASCII subroutines
     2                          ;
     3                          ; Copyright (c) 2022 Troy Schrapel
     4                          ;
     5                          ; This code is licensed under the MIT license
     6                          ;
     7                          ; https://github.com/visrealm/hbc-56
     8                          ;
     9                          ;
    10                          
    11                          ; -----------------------------------------------------------------------------
    12                          ; isLower: Is the ASCII character a lower-case letter (a-z)
    13                          ; -----------------------------------------------------------------------------
    14                          ; Inputs:
    15                          ;   A: ASCII character
    16                          ; Outputs:
    17                          ;   Carry set if lower case, carry clear if not lower case
    18                          ; -----------------------------------------------------------------------------
    19                          isLower:
    20  e000 c961                       cmp #'a'
    21  e002 9005                       bcc @notLower   ; less than 'a'?
    22  e004 c97b                       cmp #'z' + 1
    23  e006 9002                       bcc @isLower    ; less than or equal 'z'?
    24  e008 18                         clc
    25                          @notLower:
    26  e009 60                         rts
    27                          
    28                          @isLower
    29  e00a 38                         sec
    30  e00b 60                         rts
    31                          
    32                          
    33                          ; -----------------------------------------------------------------------------
    34                          ; isUpper: Is the ASCII character a upper-case letter (A-Z)
    35                          ; -----------------------------------------------------------------------------
    36                          ; Inputs:
    37                          ;   A: ASCII character
    38                          ; Outputs:
    39                          ;   Carry set if upper case, carry clear if not upper case
    40                          ; -----------------------------------------------------------------------------
    41                          isUpper:
    42  e00c c941                       cmp #'A'
    43  e00e 9005                       bcc @notUpper   ; less than 'A'?
    44  e010 c95b                       cmp #'Z' + 1
    45  e012 9002                       bcc @isUpper    ; less than or equal 'Z'?
    46  e014 18                         clc
    47                          @notUpper:
    48  e015 60                         rts
    49                          
    50                          @isUpper
    51  e016 38                         sec
    52  e017 60                         rts
    53                          
    54                          ; -----------------------------------------------------------------------------
    55                          ; isAlpha: Is the ASCII character alphanumeric (A-Z, a-z)
    56                          ; -----------------------------------------------------------------------------
    57                          ; Inputs:
    58                          ;   A: ASCII character
    59                          ; Outputs:
    60                          ;   Carry set if alpha, carry clear if not alpha
    61                          ; -----------------------------------------------------------------------------
    62                          isAlpha:
    63  e018 2000e0                     jsr isLower
    64  e01b 90ef                       bcc isUpper
    65  e01d 60                         rts
    66                          
    67                          
    68                          ; -----------------------------------------------------------------------------
    69                          ; isDigit: Is the ASCII character a decimal digit (0-9)
    70                          ; -----------------------------------------------------------------------------
    71                          ; Inputs:
    72                          ;   A: ASCII character
    73                          ; Outputs:
    74                          ;   Carry set if digit, carry clear if not digit
    75                          ; -----------------------------------------------------------------------------
    76                          isDigit:
    77  e01e c930                       cmp #'0'
    78  e020 9005                       bcc @notDigit    ; less than '0'?
    79  e022 c93a                       cmp #'9' + 1
    80  e024 9002                       bcc @isDigit     ; less than or equal '9'?
    81  e026 18                         clc
    82                          
    83                          @notDigit:
    84  e027 60                         rts
    85                          
    86                          @isDigit
    87  e028 38                         sec
    88  e029 60                         rts
    89                          
    90                          
    91                          ; -----------------------------------------------------------------------------
    92                          ; isAlNum: Is the ASCII character alphanumeric (A-Z, a-z, 0-9)
    93                          ; -----------------------------------------------------------------------------
    94                          ; Inputs:
    95                          ;   A: ASCII character
    96                          ; Outputs:
    97                          ;   Carry set if alphanumeric, carry clear if not alphanumeric
    98                          ; -----------------------------------------------------------------------------
    99                          isAlNum:
   100  e02a 2018e0                     jsr isAlpha
   101  e02d 90ef                       bcc isDigit
   102  e02f 60                         rts
   103                          
   104                          ; -----------------------------------------------------------------------------
   105                          ; isDigitX: Is the ASCII character a hex digit (A-F, a-f, 0-9)
   106                          ; -----------------------------------------------------------------------------
   107                          ; Inputs:
   108                          ;   A: ASCII character
   109                          ; Outputs:
   110                          ;   Carry set if hexadecimal, carry clear if not hexadecimal
   111                          ; -----------------------------------------------------------------------------
   112                          isDigitX:
   113  e030 201ee0                     jsr isDigit
   114  e033 b013                       bcs @endIsDigitX
   115  e035 c941                       cmp #'A'
   116  e037 900d                       bcc @notHexDigit   ; less than 'A'?
   117  e039 c947                       cmp #'F' + 1
   118  e03b 900a                       bcc @isHexDigit    ; less than or equal 'F'?
   119  e03d c961                       cmp #'a'
   120  e03f 9005                       bcc @notHexDigit   ; less than 'a'?
   121  e041 c967                       cmp #'f' + 1
   122  e043 9002                       bcc @isHexDigit    ; less than or equal 'f'?
   123  e045 18                         clc
   124                          @notHexDigit:
   125  e046 60                         rts
   126                          
   127                          @isHexDigit
   128  e047 38                         sec
   129                          
   130                          @endIsDigitX
   131  e048 60                         rts
   132                          
   133                          
   134                          ; -----------------------------------------------------------------------------
   135                          ; isSpace: Is the ASCII character a whitespace character?
   136                          ; -----------------------------------------------------------------------------
   137                          ; Inputs:
   138                          ;   A: ASCII character
   139                          ; Outputs:
   140                          ;   Carry set if space, carry clear if not space
   141                          ; -----------------------------------------------------------------------------
   142                          isSpace:
   143  e049 c920                       cmp #' '
   144  e04b f01c                       beq @isSpace
   145  e04d b018                       bcs @notSpace
   146  e04f c90a                       cmp #'\n'
   147  e051 f016                       beq @isSpace
   148  e053 c90d                       cmp #'\r'
   149  e055 f012                       beq @isSpace
   150  e057 c909                       cmp #'\t'
   151  e059 f00e                       beq @isSpace
   152  e05b c90d                       cmp #'\r'
   153  e05d f00a                       beq @isSpace
   154  e05f c90b                       cmp #$0b
   155  e061 f006                       beq @isSpace
   156  e063 c90c                       cmp #$0c
   157  e065 f002                       beq @isSpace
   158                          
   159                          @notSpace:
   160  e067 18                         clc
   161  e068 60                         rts
   162                          
   163                          @isSpace
   164  e069 38                         sec
   165  e06a 60                         rts
   166                          
   167                          ; -----------------------------------------------------------------------------
   168                          ; toUpper: convert an ascii character to upper case
   169                          ; -----------------------------------------------------------------------------
   170                          ; Inputs:
   171                          ;   A: ascii character
   172                          ; Outputs:
   173                          ;   A: upper case ascii character
   174                          ;   C: set if character was converted
   175                          ; -----------------------------------------------------------------------------
   176                          toUpper:
   177  e06b 2000e0                     jsr isLower
   178  e06e 9002                       bcc @endToUpper
   179  e070 4920                       eor #$20        ; convert (subtract $20)
   180                          
   181                          @endToUpper
   182  e072 60                         rts        
   183                          
   184                          ; -----------------------------------------------------------------------------
   185                          ; toLower: convert an ascii character to lower case
   186                          ; -----------------------------------------------------------------------------
   187                          ; Inputs:
   188                          ;   A: ascii character
   189                          ; Outputs:
   190                          ;   A: lower case ascii character
   191                          ;   C: set if character was converted
   192                          ; -----------------------------------------------------------------------------
   193                          toLower:
   194  e073 200ce0                     jsr isUpper
   195  e076 9002                       bcc @endToUpper
   196                          
   197  e078 0920                       ora #$20        ; convert (add $20)
   198                          
   199                          @endToUpper

; ******** Source: kernel.asm
   147  e07a 60                 

; ******** Source: ../lib\ut\bcd.asm
     1                          ; 6502 - BCD subroutines
     2                          ;
     3                          ; Copyright (c) 2020 Troy Schrapel
     4                          ;
     5                          ; This code is licensed under the MIT license
     6                          ;
     7                          ; https://github.com/visrealm/hbc-56
     8                          ;
     9                          ;
    10                          
    11                          
    12                          !ifndef BCD_RAM_START { BCD_RAM_START = $7810
    13                                  !warn "BCD_RAM_START not provided. Defaulting to ", BCD_RAM_START
    14                          }
    15                          
    16                          ; -------------------------
    17                          ; High RAM
    18                          ; -------------------------
    19                          BCD_TMP1	= BCD_RAM_START
    20                          BCD_TMP2	= BCD_RAM_START + 1
    21                          BCD_TMP3	= BCD_RAM_START + 2
    22                          .BCD_RAM_SIZE	= 3
    23                          
    24                          !if BCD_RAM_END < (BCD_RAM_START + .BCD_RAM_SIZE) {
    25                          	!error "BCD_RAM requires ",BCD_RAM_SIZE," bytes. Allocated ",BCD_RAM_END - BCD_RAM_START
    26                          }
    27                          
    28                          
    29                          ; -----------------------------------------------------------------------------
    30                          ; bin2bcd8: convert an unsigned byte to a 2-digit bcd value
    31                          ; -----------------------------------------------------------------------------
    32                          ; Inputs:
    33                          ;   A: value
    34                          ; Outputs:
    35                          ;   BCD value in R8
    36                          ; -----------------------------------------------------------------------------
    37                          bin2bcd8:
    38  e07b 8d597c               sta BCD_TMP1
    39  e07e a900                 lda #0
    40  e080 8d5a7c               sta BCD_TMP2
    41  e083 8d5b7c               sta BCD_TMP3
    42  e086 a208                 ldx #8 
    43  e088 f8                   sed    
    44                          .loop:
    45  e089 0e597c               asl BCD_TMP1
    46  e08c ad5a7c               lda BCD_TMP2
    47  e08f 6d5a7c               adc BCD_TMP2
    48  e092 8d5a7c               sta BCD_TMP2
    49  e095 ad5b7c               lda BCD_TMP3
    50  e098 6d5b7c               adc BCD_TMP3
    51  e09b 8d5b7c               sta BCD_TMP3
    52  e09e ca                   dex
    53  e09f d0e8                 bne .loop
    54  e0a1 d8                   cld   
    55  e0a2 60                   rts
    56                          

; ******** Source: kernel.asm
   148                          

; ******** Source: ../lib\ut\memory.asm
     1                          ; 6502
     2                          ;
     3                          ; Memory subroutines and macros
     4                          ;
     5                          ; Copyright (c) 2020 Troy Schrapel
     6                          ;
     7                          ; This code is licensed under the MIT license
     8                          ;
     9                          ; https://github.com/visrealm/hbc-56
    10                          ;
    11                          ;
    12                          

; ******** Source: ../lib\ut\memory.inc
     1                          ; 6502
     2                          ;
     3                          ; Memory subroutines and macros
     4                          ;
     5                          ; Copyright (c) 2020 Troy Schrapel
     6                          ;
     7                          ; This code is licensed under the MIT license
     8                          ;
     9                          ; https://github.com/visrealm/hbc-56
    10                          ;
    11                          ;
    12                          
    13                          ; -----------------------------------------------------------------------------
    14                          ; store16: Write a 16-bit immediate value to memory
    15                          ; -----------------------------------------------------------------------------
    16                          ; Inputs:
    17                          ;	.addr: destination address
    18                          ;	.val16: 16-bit value
    19                          ; -----------------------------------------------------------------------------
    20                          !macro store16 .addr, .val16 {
    21                                  lda #<.val16
    22                                  sta .addr
    23                                  lda #>.val16
    24                                  sta .addr + 1
    25                          }
    26                          
    27                          ; -----------------------------------------------------------------------------
    28                          ; memcpy: Copy a fixed number of bytes from .src to dest
    29                          ; -----------------------------------------------------------------------------
    30                          ; Inputs:
    31                          ;	.src: source address
    32                          ;	.dst: destination address
    33                          ;	.cnt: number of bytes
    34                          ; -----------------------------------------------------------------------------
    35                          !macro memcpy .dst, .src, .cnt {
    36                          !if .cnt <= 0 {
    37                          	!error "memcpy: invalid count: ", .cnt
    38                          } else if .cnt <= 8 {
    39                          	!for i, 0, .cnt - 1 {
    40                          		lda .src + i
    41                          		sta .dst + i
    42                          	}
    43                          } else { !if .cnt <= 256 {
    44                          	ldx #0
    45                          -
    46                          	lda .src, x
    47                          	sta .dst, x
    48                          	inx
    49                          	cpx #(.cnt & $ff)	
    50                          	bne -
    51                          } else {
    52                                  +store16 MEM_SRC, .src
    53                                  +store16 MEM_DST, .dst
    54                                  +store16 MEM_LEN, .cnt
    55                          
    56                                  jsr memcpyMultiPage
    57                          }
    58                          }
    59                          }
    60                          
    61                          !macro setMemCpySrc .src {
    62                                  +store16 MEM_SRC, .src
    63                          }
    64                          
    65                          !macro setMemCpyDst .dst {
    66                                  +store16 MEM_DST, .dst
    67                          }
    68                          
    69                          !macro setMemCpySrcInd .srcRef {
    70                          	lda .srcRef
    71                          	sta MEM_SRC
    72                          	lda .srcRef + 1
    73                          	sta MEM_SRC + 1
    74                          }
    75                          
    76                          !macro setMemCpyDstInd .dstRef {
    77                          	lda .dstRef
    78                          	sta MEM_DST
    79                          	lda .dstRef + 1
    80                          	sta MEM_DST + 1
    81                          }
    82                          
    83                          !macro memcpySinglePage .bytes {
    84                          
    85                          	!if .bytes <= 0 {
    86                          		!error "memcpySinglePage: invalid count: ", .bytes
    87                          	}	
    88                          
    89                          	ldy #.bytes
    90                          	jsr memcpySinglePage
    91                          }
    92                          
    93                          
    94                          ; -----------------------------------------------------------------------------
    95                          ; memcpyPort: Copy a fixed number of bytes from .src ram to dest port
    96                          ; -----------------------------------------------------------------------------
    97                          ; Inputs:
    98                          ;	.src: source address
    99                          ;	.dst: destination address
   100                          ;	.cnt: number of bytes
   101                          ; -----------------------------------------------------------------------------
   102                          !macro memcpyPort .dst, .src, .cnt {
   103                          	!if .cnt <= 0 {
   104                          		!error "memcpyPort: invalid count: ", .cnt
   105                          	}
   106                          	
   107                                  +store16 MEM_SRC, .src
   108                                  +store16 MEM_DST, .dst
   109                          
   110                          	!if .cnt <= 256 {
   111                          		ldy #<.cnt					
   112                          		jsr memcpySinglePagePort
   113                          	} else {
   114                                          +store16 MEM_LEN, .cnt
   115                          		jsr memcpyMultiPagePort
   116                          	}
   117                          }
   118                          
   119                          !zone {
   120                          
   121                          ; -----------------------------------------------------------------------------
   122                          ; memset: Set a fixed number of bytes to a single value
   123                          ; -----------------------------------------------------------------------------
   124                          ; Inputs:
   125                          ;	.dst: destination address
   126                          ;	val: the byte value
   127                          ;	.cnt: number of bytes
   128                          ; -----------------------------------------------------------------------------
   129                          !macro memset .dst, .val, .cnt {
   130                          !if .cnt <= 0 {
   131                          	!error "memset: invalid count: ", .cnt
   132                          } else if .cnt <= 8 {
   133                          	lda #.val
   134                          	!for i, 0, .cnt - 1 {
   135                          	sta .dst + i
   136                          	}
   137                          } else if .cnt <= 256 {
   138                          	ldx #<.cnt
   139                          	lda #.val
   140                          -
   141                          	dex
   142                          	sta .dst, x
   143                          	cpx #0
   144                          	bne -
   145                          } else {
   146                                  +store16 MEM_DST, .dst
   147                                  +store16 MEM_LEN, .cnt
   148                                  
   149                          	lda #.val
   150                          	jsr memsetMultiPage
   151                          }
   152                          }
   153                          
   154                          

; ******** Source: ../lib\ut\memory.asm
    14                          
    15                          
    16                          !ifndef MEMORY_ZP_START { MEMORY_ZP_START = $48
    17                                  !warn "MEMORY_ZP_START not provided. Defaulting to ", MEMORY_ZP_START
    18                          }
    19                          
    20                          ; -------------------------
    21                          ; Zero page
    22                          ; -------------------------
    23                          MEM_DST	= MEMORY_ZP_START
    24                          MEM_SRC	= MEMORY_ZP_START + 2
    25                          MEM_LEN	= MEMORY_ZP_START + 4
    26                          MEMORY_ZP_SIZE	= 6
    27                          
    28                          
    29                          !if MEMORY_ZP_END < (MEMORY_ZP_START + MEMORY_ZP_SIZE) {
    30                          	!error "MEMORY_ZP requires ",MEMORY_ZP_SIZE," bytes. Allocated ",MEMORY_ZP_END - MEMORY_ZP_START
    31                          }
    32                          
    33                          ; -----------------------------------------------------------------------------
    34                          ; memcpySinglePage: Copy up to 255 bytes 
    35                          ; -----------------------------------------------------------------------------
    36                          ; Inputs:
    37                          ;	MEM_SRC: src address
    38                          ;	MEM_DST: dst address
    39                          ;	Y:	bytes
    40                          ; -----------------------------------------------------------------------------
    41                          memcpySinglePage:
    42  e0a3 c000               	cpy #0
    43  e0a5 f009               	beq .endMemcpySinglePage
    44                          -
    45  e0a7 88                 	dey
    46  e0a8 b12e               	lda (MEM_SRC), Y
    47  e0aa 912c               	sta (MEM_DST), Y
    48  e0ac c000               	cpy #0
    49  e0ae d0f7               	bne -
    50                          .endMemcpySinglePage:
    51  e0b0 60                 	rts
    52                          ; -----------------------------------------------------------------------------
    53                          
    54                          
    55                          
    56                          ; -----------------------------------------------------------------------------
    57                          ; memcpySinglePagePort: Copy up to 255 bytes 
    58                          ; -----------------------------------------------------------------------------
    59                          ; Inputs:
    60                          ;	MEM_SRC: src address
    61                          ;	MEM_DST: dst address (port)
    62                          ;	Y:	bytes
    63                          ; -----------------------------------------------------------------------------
    64                          memcpySinglePagePort:
    65  e0b1 c000               	cpy #0
    66  e0b3 f009               	beq .endMemcpySinglePagePort
    67                          -
    68  e0b5 88                 	dey
    69  e0b6 b12e               	lda (MEM_SRC), Y
    70  e0b8 852c               	sta MEM_DST
    71  e0ba c000               	cpy #0
    72  e0bc d0f7               	bne -
    73                          .endMemcpySinglePagePort
    74  e0be 60                 	rts
    75                          ; -----------------------------------------------------------------------------
    76                          
    77                          
    78                          
    79                          ; -----------------------------------------------------------------------------
    80                          ; memcpyMultiPage: Copy an up to 2^15 bytes 
    81                          ; -----------------------------------------------------------------------------
    82                          ; Inputs:
    83                          ;	MEM_SRC: src address
    84                          ;	MEM_DST: dst address
    85                          ;	MEM_LEN: length
    86                          ; -----------------------------------------------------------------------------
    87                          memcpyMultiPage:
    88                          
    89                          !ifdef ALLOW_SELF_MODIFYING_CODE {
    90                          	lda MEM_SRC
    91                          	sta .loadIns + 1
    92                          	lda MEM_SRC + 1
    93                          	sta .loadIns + 2
    94                          
    95                          	lda MEM_DST
    96                          	sta .storeIns + 1
    97                          	lda MEM_DST + 1
    98                          	sta .storeIns + 2
    99                          
   100                          .loadIns:
   101                          	lda SELF_MODIFY_ADDR, Y
   102                          	
   103                          .storeIns:
   104                          	sta SELF_MODIFY_ADDR, Y
   105                          	dey
   106                          	bne .loadIns
   107                          	inc .loadIns + 2
   108                          	inc .storeIns + 2
   109                          	dex
   110                          	bne .loadIns
   111                          } else {
   112  e0bf a000               	ldy #0
   113  e0c1 a631               	ldx MEM_LEN + 1
   114                          - 
   115  e0c3 b12e               	lda (MEM_SRC),y ; could unroll to any power of 2
   116  e0c5 912c               	sta (MEM_DST),y
   117  e0c7 c8                 	iny
   118  e0c8 d0f9               	bne -
   119  e0ca ca                 	dex
   120  e0cb f007               	beq .memcpyMultiPageRemaining
   121  e0cd e62f               	inc MEM_SRC + 1
   122  e0cf e62d               	inc MEM_DST + 1
   123  e0d1 4cc3e0             	jmp -
   124                          .memcpyMultiPageRemaining ; remaining bytes
   125  e0d4 a630               	ldx MEM_LEN
   126  e0d6 f008               	beq .memcpyMultiPageEnd
   127                          - ; X bytes
   128  e0d8 b12e               	lda (MEM_SRC),y
   129  e0da 912c               	sta (MEM_DST),y
   130  e0dc c8                 	iny
   131  e0dd ca                 	dex
   132  e0de d0f8               	bne -
   133                          .memcpyMultiPageEnd
   134                          }
   135                          
   136  e0e0 60                 	rts
   137                          ; -----------------------------------------------------------------------------
   138                          
   139                          
   140                          ; -----------------------------------------------------------------------------
   141                          ; memcpyMultiPagePort: Copy an up to 2^15 bytes 
   142                          ; -----------------------------------------------------------------------------
   143                          ; Inputs:
   144                          ;	MEM_SRC: src address
   145                          ;	MEM_DST: dst address (port)
   146                          ;	MEM_LEN: length
   147                          ; -----------------------------------------------------------------------------
   148                          memcpyMultiPagePort:
   149                          
   150  e0e1 a000               	ldy #0
   151  e0e3 a631               	ldx MEM_LEN + 1
   152                          - 
   153  e0e5 b12e               	lda (MEM_SRC),y ; could unroll to any power of 2
   154  e0e7 852c               	sta MEM_DST
   155  e0e9 c8                 	iny
   156  e0ea d0f9               	bne -
   157  e0ec ca                 	dex
   158  e0ed f005               	beq .memcpyMultiPagePortRemaining
   159  e0ef e62f               	inc MEM_SRC + 1
   160  e0f1 4ce5e0             	jmp -
   161                          .memcpyMultiPagePortRemaining ; remaining bytes
   162  e0f4 a630               	ldx MEM_LEN
   163  e0f6 f008               	beq .memcpyMultiPagePortEnd
   164                          - ; X bytes
   165  e0f8 b12e               	lda (MEM_SRC),y
   166  e0fa 852c               	sta MEM_DST
   167  e0fc c8                 	iny
   168  e0fd ca                 	dex
   169  e0fe d0f8               	bne -
   170                          .memcpyMultiPagePortEnd
   171  e100 60                 	rts
   172                          ; -----------------------------------------------------------------------------
   173                          
   174                          
   175                          ; -----------------------------------------------------------------------------
   176                          ; memsetSinglePage: set a block of memory data
   177                          ; -----------------------------------------------------------------------------
   178                          ; Inputs:
   179                          ;	 A:	value to set
   180                          ;	 MEM_DST: start address
   181                          ;	 Y:	bytes
   182                          ; -----------------------------------------------------------------------------
   183                          memsetSinglePage:
   184  e101 c000               	cpy #0
   185  e103 f007               	beq .doneCpy
   186                          -
   187  e105 88                 	dey
   188  e106 912c               	sta (MEM_DST), y
   189  e108 c000               	cpy #0
   190  e10a d0f9               	bne -
   191                          .doneCpy
   192  e10c 60                 	rts
   193                          
   194                          
   195                          ; -----------------------------------------------------------------------------
   196                          ; memsetMultiPage: set a block of memory data
   197                          ; -----------------------------------------------------------------------------
   198                          ; Inputs:
   199                          ;	 A: value
   200                          ;	 MEM_DST: start address
   201                          ;	 MEM_LEN: length
   202                          ; -----------------------------------------------------------------------------
   203                          memsetMultiPage:
   204  e10d a631               	ldx MEM_LEN + 1
   205  e10f d005               	bne .doneSet
   206  e111 a430               	ldy MEM_LEN
   207  e113 4c01e1             	jmp memsetSinglePage
   208                          .doneSet
   209  e116 a000               	ldy #0
   210                          - 
   211  e118 912c               	sta (MEM_DST),y ; could unroll to any power of 2
   212  e11a c8                 	iny
   213  e11b d0fb               	bne -
   214  e11d ca                 	dex
   215  e11e f005               	beq .doneSet2
   216  e120 e62d               	inc MEM_DST + 1
   217  e122 4c18e1             	jmp -
   218                          .doneSet2 ; remaining bytes
   219  e125 a630               	ldx MEM_LEN
   220  e127 f006               	beq .doneSet3
   221                          - ; X bytes
   222  e129 912c               	sta (MEM_DST),y
   223  e12b c8                 	iny
   224  e12c ca                 	dex
   225  e12d d0fa               	bne -
   226                          .doneSet3
   227  e12f 60                 	rts

; ******** Source: kernel.asm
   149                          

; ******** Source: ../lib\ut\tables.asm
     1                          ; 6502 - Useful tables
     2                          ;
     3                          ; Copyright (c) 2022 Troy Schrapel
     4                          ;
     5                          ; This code is licensed under the MIT license
     6                          ;
     7                          ; https://github.com/visrealm/hbc-56
     8                          ;
     9                          ;
    10                          
    11                          tableBitFromLeft:
    12  e130 8040201008040201   !byte $80,$40,$20,$10,$08,$04,$02,$01
    13                          tableInvBitFromLeft:
    14  e138 7fbfdfeff7fbfdfe   !byte $7f,$bf,$df,$ef,$f7,$fb,$fd,$fe
    15                          tableBitFromRight:
    16  e140 0102040810204080   !byte $01,$02,$04,$08,$10,$20,$40,$80
    17                          tableInvBitFromRight:
    18  e148 fefdfbf7efdfbf7f   !byte $fe,$fd,$fb,$f7,$ef,$df,$bf,$7f
    19                          tableBitsFromLeft:
    20  e150 80c0e0f0f8fcfeff   !byte $80,$c0,$e0,$f0,$f8,$fc,$fe,$ff

; ******** Source: kernel.asm
   150                          
   151                          
   152                          !ifndef HBC56_DISABLE_AY3891X {

; ******** Source: ../lib\sfx\ay3891x.asm
     1                          ; 6502 - AY-3-819x PSG
     2                          ;
     3                          ; Copyright (c) 2021 Troy Schrapel
     4                          ;
     5                          ; This code is licensed under the MIT license
     6                          ;
     7                          ; https://github.com/visrealm/hbc-56
     8                          ;
     9                          

; ******** Source: ../lib\sfx\ay3891x.inc
     1                          ; 6502 - AY-3-819x PSG
     2                          ;
     3                          ; Copyright (c) 2021 Troy Schrapel
     4                          ;
     5                          ; This code is licensed under the MIT license
     6                          ;
     7                          ; https://github.com/visrealm/hbc-56
     8                          ;
     9                          
    10                          
    11                          
    12                          !macro ayWrite .dev, .reg, .val {
    13                                  lda #.reg
    14                                  sta IO_PORT_BASE_ADDRESS | AY_IO_PORT | AY_ADDR | .dev
    15                                  lda #.val
    16                                  sta IO_PORT_BASE_ADDRESS | AY_IO_PORT | AY_WRITE | .dev
    17                          }        
    18                          
    19                          !macro ayRead .dev, .reg {
    20                                  lda #.reg
    21                                  sta IO_PORT_BASE_ADDRESS | AY_IO_PORT | AY_ADDR | .dev
    22                                  lda IO_PORT_BASE_ADDRESS | AY_IO_PORT | AY_READ | .dev
    23                          }        
    24                          
    25                          
    26                          !macro ayWriteX .dev, .reg {
    27                                  lda #.reg
    28                                  sta IO_PORT_BASE_ADDRESS | AY_IO_PORT | AY_ADDR | .dev
    29                                  stx IO_PORT_BASE_ADDRESS | AY_IO_PORT | AY_WRITE | .dev
    30                          }
    31                          
    32                          !macro ayWriteA .dev, .reg {
    33                                  ldx #.reg
    34                                  stx IO_PORT_BASE_ADDRESS | AY_IO_PORT | AY_ADDR | .dev
    35                                  sta IO_PORT_BASE_ADDRESS | AY_IO_PORT | AY_WRITE | .dev
    36                          }
    37                          
    38                          !macro ayPlayNote .dev, .chan, .freq {
    39                                  !if .freq <= 0 {
    40                                          .val = 0
    41                                  } else {
    42                                          .val = AY_CLOCK_FREQ / (16.0 * .freq)
    43                                  }
    44                                  +ayWrite .dev, AY_CHA_TONE_L + (.chan * 2), <.val
    45                                  +ayWrite .dev, AY_CHA_TONE_H + (.chan * 2), >.val
    46                          }
    47                          
    48                          !macro ayToneWordPeriod .periodHz {
    49                                  !word ((AY_CLOCK_FREQ * .periodHz) / 16.0)
    50                          }
    51                          
    52                          !macro ayToneWord .freq {
    53                                  !word (AY_CLOCK_FREQ / (16.0 * .freq))
    54                          }
    55                          
    56                          !macro ayToneByteL .freq {
    57                                  !byte <(AY_CLOCK_FREQ / (16.0 * .freq))
    58                          }
    59                          
    60                          !macro ayToneByteH .freq {
    61                                  !byte >(AY_CLOCK_FREQ / (16.0 * .freq))
    62                          }
    63                          
    64                          
    65                          !macro ayToneEnable .dev, .chan {
    66                                  +ayRead .dev, AY_ENABLES
    67                                  and #!($01 << .chan)
    68                                  +ayWriteA .dev, AY_ENABLES
    69                          }
    70                          
    71                          !macro ayToneDisable .dev, .chan {
    72                                  +ayRead .dev, AY_ENABLES
    73                                  ora #($01 << .chan)
    74                                  +ayWriteA .dev, AY_ENABLES
    75                          }
    76                          
    77                          !macro ayNoiseEnable .dev, .chan {
    78                                  +ayRead .dev, AY_ENABLES
    79                                  eor #($08 << .chan)
    80                                  +ayWriteA .dev, AY_ENABLES
    81                          }
    82                          
    83                          !macro ayNoiseDisable .dev, .chan {
    84                                  +ayRead .dev, AY_ENABLES
    85                                  ora #($08 << .chan)
    86                                  +ayWriteA .dev, AY_ENABLES
    87                          }
    88                          
    89                          !macro aySetVolume .dev, .chan, .vol {
    90                                  +ayWrite .dev, (AY_CHA_AMPL + .chan), (.vol >> 4)
    91                          }
    92                          
    93                          !macro aySetVolumeEnvelope .dev, .chan {
    94                                  +ayWrite .dev, (AY_CHA_AMPL + .chan), $10
    95                          }
    96                          
    97                          !macro aySetEnvelopePeriod .dev, .period {
    98                                  +ayWrite .dev, AY_ENV_PERIOD_L, <.period
    99                                  +ayWrite .dev, AY_ENV_PERIOD_H, >.period
   100                          }
   101                          
   102                          !macro aySetEnvShape .dev, .shape {
   103                                  +ayWrite .dev, AY_ENV_SHAPE, .shape
   104                          }
   105                          
   106                          !macro aySetNoise .dev, .freq {
   107                                  +ayWrite .dev, AY_ENV_SHAPE, .freq >> 3
   108                          }
   109                          
   110                          !macro ayStop .dev, .chan {
   111                                  +ayPlayNote .dev, .chan, 0
   112                          }

; ******** Source: ../lib\sfx\ay3891x.asm
    10                          
    11                          
    12                          
    13                          !ifndef AY_IO_PORT { AY_IO_PORT = $40
    14                                  !warn "AY_IO_PORT not provided. Defaulting to ", AY_IO_PORT
    15                          }
    16                          
    17                          HAVE_AY3891X = 1
    18                          
    19                          ; -------------------------
    20                          ; Constants
    21                          ; -------------------------
    22                          AY_PSG0 = $00
    23                          AY_PSG1 = $04
    24                          
    25                          ; IO Ports
    26                          AY_S0 = IO_PORT_BASE_ADDRESS | AY_IO_PORT | AY_PSG0
    27                          AY_S1 = IO_PORT_BASE_ADDRESS | AY_IO_PORT | AY_PSG1
    28                          
    29                          AY_INACTIVE = $03
    30                          AY_READ     = $02
    31                          AY_WRITE    = $01
    32                          AY_ADDR     = $00
    33                          
    34                          AY_S0_READ  = AY_S0 | AY_READ
    35                          AY_S0_WRITE = AY_S0 | AY_WRITE
    36                          AY_S0_ADDR  = AY_S0 | AY_ADDR
    37                          
    38                          AY_S1_READ  = AY_S1 | AY_READ
    39                          AY_S1_WRITE = AY_S1 | AY_WRITE
    40                          AY_S1_ADDR  = AY_S1 | AY_ADDR
    41                          
    42                          ; Registers (they're named using Octal values)
    43                          AY_R0 = 0
    44                          AY_R1 = 1
    45                          AY_R2 = 2
    46                          AY_R3 = 3
    47                          AY_R4 = 4
    48                          AY_R5 = 5
    49                          AY_R6 = 6
    50                          AY_R7 = 7
    51                          AY_R10 = 8
    52                          AY_R11 = 9
    53                          AY_R12 = 10
    54                          AY_R13 = 11
    55                          AY_R14 = 12
    56                          AY_R15 = 13
    57                          AY_R16 = 14
    58                          AY_R17 = 15
    59                          
    60                          AY_CHA = 0
    61                          AY_CHB = 1
    62                          AY_CHC = 2
    63                          AY_CHN = 3
    64                          
    65                          AY_CHA_TONE_L   = AY_R0
    66                          AY_CHA_TONE_H   = AY_R1
    67                          AY_CHB_TONE_L   = AY_R2
    68                          AY_CHB_TONE_H   = AY_R3
    69                          AY_CHC_TONE_L   = AY_R4
    70                          AY_CHC_TONE_H   = AY_R5
    71                          AY_NOISE_GEN    = AY_R6
    72                          AY_ENABLES      = AY_R7
    73                          AY_CHA_AMPL     = AY_R10
    74                          AY_CHB_AMPL     = AY_R11
    75                          AY_CHC_AMPL     = AY_R12
    76                          AY_ENV_PERIOD_L = AY_R13
    77                          AY_ENV_PERIOD_H = AY_R14
    78                          AY_ENV_SHAPE    = AY_R15
    79                          AY_PORTA        = AY_R16
    80                          AY_PORTB        = AY_R17
    81                          
    82                          AY_ENV_SHAPE_CONTINUE  = $08
    83                          AY_ENV_SHAPE_ATTACK    = $04
    84                          AY_ENV_SHAPE_ALTERNATE = $02
    85                          AY_ENV_SHAPE_HOLD      = $01
    86                          
    87                          ;  /\  /\  /\  /\  /\ 
    88                          ; /  \/  \/  \/  \/  \
    89                          AY_ENV_SHAPE_TRIANGLE     = (AY_ENV_SHAPE_CONTINUE | AY_ENV_SHAPE_ATTACK | AY_ENV_SHAPE_ALTERNATE)
    90                          
    91                          ; \  /\  /\  /\  /\  /
    92                          ;  \/  \/  \/  \/  \/
    93                          AY_ENV_SHAPE_TRIANGLE2    = (AY_ENV_SHAPE_CONTINUE | AY_ENV_SHAPE_ALTERNATE)
    94                          
    95                          ;  /------------------
    96                          ; /
    97                          AY_ENV_SHAPE_FADE_IN      = (AY_ENV_SHAPE_CONTINUE | AY_ENV_SHAPE_ATTACK | AY_ENV_SHAPE_HOLD)
    98                          
    99                          ; \
   100                          ;  \__________________
   101                          AY_ENV_SHAPE_FADE_OUT     = (AY_ENV_SHAPE_CONTINUE | AY_ENV_SHAPE_HOLD)
   102                          
   103                          ; \ |\ |\ |\ |\ |\ |\ |
   104                          ;  \| \| \| \| \| \| \|
   105                          AY_ENV_SHAPE_SAW1         = (AY_ENV_SHAPE_CONTINUE)
   106                          
   107                          ;  /| /| /| /| /| /| /|
   108                          ; / |/ |/ |/ |/ |/ |/ |
   109                          AY_ENV_SHAPE_SAW2         = (AY_ENV_SHAPE_CONTINUE | AY_ENV_SHAPE_ATTACK)
   110                          
   111                          ;  /|
   112                          ; / |__________________
   113                          AY_ENV_SHAPE_FADE_IN_STOP = (AY_ENV_SHAPE_ATTACK)
   114                          
   115                          
   116                          AY_CLOCK_FREQ   = 2000000
   117                          
   118                          ayInit:
   119                                  ; disable everything
   120  e158 a9078d407fa9ff8d...        +ayWrite AY_PSG0, AY_ENABLES, $ff
   121  e162 a9078d447fa9ff8d...        +ayWrite AY_PSG1, AY_ENABLES, $ff
   122                          
   123  e16c a9088d407fa9008d...        +aySetVolume AY_PSG0, AY_CHA, 0
   124  e176 a9098d407fa9008d...        +aySetVolume AY_PSG0, AY_CHB, 0
   125  e180 a90a8d407fa9008d...        +aySetVolume AY_PSG0, AY_CHC, 0
   126                          
   127  e18a a9008d407fa9008d...        +ayPlayNote AY_PSG0, AY_CHA, 0
   128  e19e a9028d407fa9008d...        +ayPlayNote AY_PSG0, AY_CHB, 0
   129  e1b2 a9048d407fa9008d...        +ayPlayNote AY_PSG0, AY_CHC, 0
   130                          
   131  e1c6 a90b8d407fa9008d...        +aySetEnvelopePeriod AY_PSG0, 0
   132  e1da a90d8d407fa9008d...        +aySetEnvShape AY_PSG0, 0
   133  e1e4 a90d8d407fa9008d...        +aySetNoise  AY_PSG0, 0
   134                          
   135  e1ee a9088d447fa9008d...        +aySetVolume AY_PSG1, AY_CHA, 0
   136  e1f8 a9098d447fa9008d...        +aySetVolume AY_PSG1, AY_CHB, 0
   137  e202 a90a8d447fa9008d...        +aySetVolume AY_PSG1, AY_CHC, 0
   138                          
   139  e20c a9008d447fa9008d...        +ayPlayNote AY_PSG1, AY_CHA, 0
   140  e220 a9028d447fa9008d...        +ayPlayNote AY_PSG1, AY_CHB, 0
   141  e234 a9048d447fa9008d...        +ayPlayNote AY_PSG1, AY_CHC, 0
   142                          
   143  e248 a90b8d447fa9008d...        +aySetEnvelopePeriod AY_PSG1, 0
   144  e25c a90d8d447fa9008d...        +aySetEnvShape AY_PSG1, 0
   145  e266 a90d8d447fa9008d...        +aySetNoise  AY_PSG1, 0
   146  e270 60                         rts
   147                          
   148                          ; Note frequencies from https://pages.mtu.edu/~suits/notefreqs.html
   149                          
   150                          NOTE_FREQ_C0  = 16.35
   151                          NOTE_FREQ_CS0 = 17.32
   152                          NOTE_FREQ_D0  = 18.35
   153                          NOTE_FREQ_DS0 = 19.45
   154                          NOTE_FREQ_E0  = 20.6
   155                          NOTE_FREQ_F0  = 21.83
   156                          NOTE_FREQ_FS0 = 23.12
   157                          NOTE_FREQ_G0  = 24.5
   158                          NOTE_FREQ_GS0 = 25.96
   159                          NOTE_FREQ_A0  = 27.5
   160                          NOTE_FREQ_AS0 = 29.14
   161                          NOTE_FREQ_B0  = 30.87
   162                          NOTE_FREQ_C1  = 32.7
   163                          NOTE_FREQ_CS1 = 34.65
   164                          NOTE_FREQ_D1  = 36.71
   165                          NOTE_FREQ_DS1 = 38.89
   166                          NOTE_FREQ_E1  = 41.2
   167                          NOTE_FREQ_F1  = 43.65
   168                          NOTE_FREQ_FS1 = 46.25
   169                          NOTE_FREQ_G1  = 49
   170                          NOTE_FREQ_GS1 = 51.91
   171                          NOTE_FREQ_A1  = 55
   172                          NOTE_FREQ_AS1 = 58.27
   173                          NOTE_FREQ_B1  = 61.74
   174                          NOTE_FREQ_C2  = 65.41
   175                          NOTE_FREQ_CS2 = 69.3
   176                          NOTE_FREQ_D2  = 73.42
   177                          NOTE_FREQ_DS2 = 77.78
   178                          NOTE_FREQ_E2  = 82.41
   179                          NOTE_FREQ_F2  = 87.31
   180                          NOTE_FREQ_FS2 = 92.5
   181                          NOTE_FREQ_G2  = 98
   182                          NOTE_FREQ_GS2 = 103.83
   183                          NOTE_FREQ_A2  = 110
   184                          NOTE_FREQ_AS2 = 116.54
   185                          NOTE_FREQ_B2  = 123.47
   186                          NOTE_FREQ_C3  = 130.81
   187                          NOTE_FREQ_CS3 = 138.59
   188                          NOTE_FREQ_D3  = 146.83
   189                          NOTE_FREQ_DS3 = 155.56
   190                          NOTE_FREQ_E3  = 164.81
   191                          NOTE_FREQ_F3  = 174.61
   192                          NOTE_FREQ_FS3 = 185
   193                          NOTE_FREQ_G3  = 196
   194                          NOTE_FREQ_GS3 = 207.65
   195                          NOTE_FREQ_A3  = 220
   196                          NOTE_FREQ_AS3 = 233.08
   197                          NOTE_FREQ_B3  = 246.94
   198                          NOTE_FREQ_C4  = 261.63
   199                          NOTE_FREQ_CS4 = 277.18
   200                          NOTE_FREQ_D4  = 293.66
   201                          NOTE_FREQ_DS4 = 311.13
   202                          NOTE_FREQ_E4  = 329.63
   203                          NOTE_FREQ_F4  = 349.23
   204                          NOTE_FREQ_FS4 = 369.99
   205                          NOTE_FREQ_G4  = 392
   206                          NOTE_FREQ_GS4 = 415.3
   207                          NOTE_FREQ_A4  = 440
   208                          NOTE_FREQ_AS4 = 466.16
   209                          NOTE_FREQ_B4  = 493.88
   210                          NOTE_FREQ_C5  = 523.25
   211                          NOTE_FREQ_CS5 = 554.37
   212                          NOTE_FREQ_D5  = 587.33
   213                          NOTE_FREQ_DS5 = 622.25
   214                          NOTE_FREQ_E5  = 659.25
   215                          NOTE_FREQ_F5  = 698.46
   216                          NOTE_FREQ_FS5 = 739.99
   217                          NOTE_FREQ_G5  = 783.99
   218                          NOTE_FREQ_GS5 = 830.61
   219                          NOTE_FREQ_A5  = 880
   220                          NOTE_FREQ_AS5 = 932.33
   221                          NOTE_FREQ_B5  = 987.77
   222                          NOTE_FREQ_C6  = 1046.5
   223                          NOTE_FREQ_CS6 = 1108.73
   224                          NOTE_FREQ_D6  = 1174.66
   225                          NOTE_FREQ_DS6 = 1244.51
   226                          NOTE_FREQ_E6  = 1318.51
   227                          NOTE_FREQ_F6  = 1396.91
   228                          NOTE_FREQ_FS6 = 1479.98
   229                          NOTE_FREQ_G6  = 1567.98
   230                          NOTE_FREQ_GS6 = 1661.22
   231                          NOTE_FREQ_A6  = 1760
   232                          NOTE_FREQ_AS6 = 1864.66
   233                          NOTE_FREQ_B6  = 1975.53
   234                          NOTE_FREQ_C7  = 2093
   235                          NOTE_FREQ_CS7 = 2217.46
   236                          NOTE_FREQ_D7  = 2349.32
   237                          NOTE_FREQ_DS7 = 2489.02
   238                          NOTE_FREQ_E7  = 2637.02
   239                          NOTE_FREQ_F7  = 2793.83
   240                          NOTE_FREQ_FS7 = 2959.96
   241                          NOTE_FREQ_G7  = 3135.96
   242                          NOTE_FREQ_GS7 = 3322.44
   243                          NOTE_FREQ_A7  = 3520
   244                          NOTE_FREQ_AS7 = 3729.31
   245                          NOTE_FREQ_B7  = 3951.07
   246                          NOTE_FREQ_C8  = 4186.01
   247                          NOTE_FREQ_CS8 = 4434.92
   248                          NOTE_FREQ_D8  = 4698.63
   249                          NOTE_FREQ_DS8 = 4978.03
   250                          NOTE_FREQ_E8  = 5274.04
   251                          NOTE_FREQ_F8  = 5587.65
   252                          NOTE_FREQ_FS8 = 5919.91
   253                          NOTE_FREQ_G8  = 6271.93
   254                          NOTE_FREQ_GS8 = 6644.88
   255                          NOTE_FREQ_A8  = 7040
   256                          NOTE_FREQ_AS8 = 7458.62
   257                          NOTE_FREQ_B8  = 7902.13

; ******** Source: kernel.asm
   153                          
   154                          }
   155                          
   156                          !ifndef HBC56_DISABLE_TMS9918 {
   157                                  !ifndef TMS_MODEL { TMS_MODEL = 9918 }

; ******** Source: ../lib\gfx\tms9918.asm
     1                          ; 6502 - TMS9918 VDP
     2                          ;
     3                          ; Copyright (c) 2021 Troy Schrapel
     4                          ;
     5                          ; This code is licensed under the MIT license
     6                          ;
     7                          ; https://github.com/visrealm/hbc-56
     8                          ;
     9                          

; ******** Source: ../lib\hbc56.inc
     1                          ; 6502 - HBC-56
     2                          ;
     3                          ; Copyright (c) 2021 Troy Schrapel
     4                          ;
     5                          ; This code is licensed under the MIT license
     6                          ;
     7                          ; https://github.com/visrealm/hbc-56
     8                          ;
     9                          ;
    10                          
    11                          ; Base address of the 256 IO port memory range
    12                          IO_PORT_BASE_ADDRESS	= $7f00
    13                          
    14                          
    15                          ; -------------------------
    16                          ; ASCII constants
    17                          ; -------------------------
    18                          ASCII_RETURN    = $0A
    19                          ASCII_CR        = $0D
    20                          ASCII_BACKSPACE = $08
    21                          ASCII_BELL      = $07

; ******** Source: ../lib\gfx\tms9918.asm
    10                          
    11                          
    12                          !ifndef HAVE_MATH_INC { !src "ut/math.inc" }

; ******** Source: ../lib\gfx\tms9918.inc
     1                          ; 6502 - TMS9918 VDP Macros
     2                          ;
     3                          ; Copyright (c) 2021 Troy Schrapel
     4                          ;
     5                          ; This code is licensed under the MIT license
     6                          ;
     7                          ; https://github.com/visrealm/hbc-56
     8                          ;
     9                          
    10                          
    11                          
    12                          
    13                          ; -----------------------------------------------------------------------------
    14                          ; tmsWaitReg: Not sure how much delay we need so make a macro for now
    15                          ; -----------------------------------------------------------------------------
    16                          !macro tmsWaitReg {
    17                                  ;jsr _tmsWaitReg
    18                          }
    19                          
    20                          ; -----------------------------------------------------------------------------
    21                          ; tmsWaitData: Not sure how much delay we need so make a macro for now
    22                          ; -----------------------------------------------------------------------------
    23                          !macro tmsWaitData {
    24                                  jsr _tmsWaitData
    25                          }
    26                          
    27                          ; -----------------------------------------------------------------------------
    28                          ; tmsSetAddressWrite: Set an address in the TMS9918
    29                          ; -----------------------------------------------------------------------------
    30                          !macro tmsSetAddressWrite .addr {
    31                                  +tmsSetAddressRead ($4000 | .addr)
    32                          }
    33                          
    34                          ; -----------------------------------------------------------------------------
    35                          ; tmsSetAddressRead: Set an address to read from the TMS9918
    36                          ; -----------------------------------------------------------------------------
    37                          !macro tmsSetAddressRead .addr {
    38                                  php
    39                                  sei             ; we can't be interrupted here
    40                                  lda #<(.addr)
    41                                  sta TMS9918_REG
    42                                  +tmsWaitReg
    43                                  lda #>(.addr)
    44                                  sta TMS9918_REG
    45                                  +tmsWaitReg
    46                                  plp
    47                          }
    48                          
    49                          ; -----------------------------------------------------------------------------
    50                          ; tmsGet: Get a byte of data from the TMS9918
    51                          ; -----------------------------------------------------------------------------
    52                          !macro tmsGet {
    53                                  lda TMS9918_RAM
    54                                  +tmsWaitData
    55                          }
    56                          
    57                          ; -----------------------------------------------------------------------------
    58                          ; tmsPut: Send a byte of data to the TMS9918
    59                          ; -----------------------------------------------------------------------------
    60                          !macro tmsPut .byte {
    61                                  lda #(.byte & 0xff)
    62                                  +tmsPut
    63                          }
    64                          
    65                          
    66                          ; -----------------------------------------------------------------------------
    67                          ; tmsPut: Send a byte (A) of data to the TMS9918
    68                          ; -----------------------------------------------------------------------------
    69                          !macro tmsPut {
    70                                  sta TMS9918_RAM
    71                                  +tmsWaitData
    72                          }
    73                          
    74                          ; -----------------------------------------------------------------------------
    75                          ; tmsSetColor: Set current fg/bg color
    76                          ; -----------------------------------------------------------------------------
    77                          !macro tmsSetColor .color {
    78                                  lda #.color
    79                                  jsr tmsSetBackground
    80                          }
    81                          
    82                          ; -----------------------------------------------------------------------------
    83                          ; tmsSetColorFgBg: Set current fg/bg color
    84                          ; -----------------------------------------------------------------------------
    85                          !macro tmsSetColorFgBg .fg, .bg {
    86                                  +tmsColorFgBg .fg, .bg
    87                                  jsr tmsSetBackground
    88                          }
    89                          
    90                          ; -----------------------------------------------------------------------------
    91                          ; byteTmsColorFgBg: Output a data byte
    92                          ; -----------------------------------------------------------------------------
    93                          !macro byteTmsColorFgBg .fg, .bg {
    94                          !byte (.fg << 4 | .bg)
    95                          }
    96                          
    97                          
    98                          ; -----------------------------------------------------------------------------
    99                          ; tmsDisableOutput: Disable the TMS9918 output
   100                          ; -----------------------------------------------------------------------------
   101                          !macro tmsDisableOutput {
   102                                  lda #TMS_R1_DISP_ACTIVE
   103                                  jsr tmsReg1ClearFields
   104                          }
   105                          
   106                          ; -----------------------------------------------------------------------------
   107                          ; tmsEnableOutput: Enable the TMS9918 output
   108                          ; -----------------------------------------------------------------------------
   109                          !macro tmsEnableOutput {
   110                                  lda #TMS_R1_DISP_ACTIVE
   111                                  jsr tmsReg1SetFields
   112                          }
   113                          
   114                          ; -
   115                          !macro tmsEnableInterrupts {
   116                                  lda #TMS_R1_INT_ENABLE
   117                                  jsr tmsReg1SetFields
   118                          }
   119                          
   120                          !macro tmsDisableInterrupts {
   121                                  lda #TMS_R1_INT_ENABLE
   122                                  jsr tmsReg1ClearFields
   123                          }
   124                          
   125                          !macro tmsConsoleOut .char {
   126                                  lda #.char
   127                                  jsr tmsConsoleOut
   128                          }
   129                          
   130                          
   131                          ; -----------------------------------------------------------------------------
   132                          ; tmsConsolePrintAddr: Print text to console
   133                          ; -----------------------------------------------------------------------------
   134                          ; Inputs:
   135                          ;  textAddr: Address of null-terminated string to print
   136                          ; -----------------------------------------------------------------------------
   137                          !macro tmsConsolePrintAddr .textAddr {
   138                                  lda #<.textAddr
   139                                  sta STR_ADDR_L
   140                                  lda #>.textAddr
   141                                  sta STR_ADDR_H
   142                                  jsr tmsConsolePrint        
   143                          }
   144                          
   145                          ; -----------------------------------------------------------------------------
   146                          ; tmsConsolePrint: Print immediate text to console
   147                          ; -----------------------------------------------------------------------------
   148                          ; Inputs:
   149                          ;  str: String to print
   150                          ; -----------------------------------------------------------------------------
   151                          !macro tmsConsolePrint .str {
   152                          	jmp .afterText
   153                          .textAddr
   154                          	!text .str,0
   155                          .afterText        
   156                                  +tmsConsolePrintAddr .textAddr
   157                          }
   158                          
   159                          ; -----------------------------------------------------------------------------
   160                          ; +tmsColorFgBg: Set A to the given FG / BG color
   161                          ; -----------------------------------------------------------------------------
   162                          !macro tmsColorFgBg .fg, .bg {
   163                                  lda #(.fg << 4 | .bg)
   164                          }
   165                          
   166                          ; -----------------------------------------------------------------------------
   167                          ; tmsReadStatus: Read status - clear interrupt
   168                          ; -----------------------------------------------------------------------------
   169                          !macro tmsReadStatus  {
   170                                  bit TMS9918_REG
   171                          }
   172                          
   173                          ; -----------------------------------------------------------------------------
   174                          ; tmsSendData: Send # bytes from .sourceAddr to tms9918 data port
   175                          ; -----------------------------------------------------------------------------
   176                          !macro tmsSendData .sourceAddr, .numBytes {
   177                                  lda #<.sourceAddr
   178                                  sta TMS_TMP_ADDRESS
   179                                  lda #>.sourceAddr
   180                                  sta TMS_TMP_ADDRESS + 1
   181                          
   182                                  !if .numBytes < 256 {
   183                                          ldx #.numBytes
   184                                          jsr tmsSendBytes
   185                                  } else {
   186                                          !do while .numBytes > 0 {
   187                                                  !if .numBytes > 255 {
   188                                                          ldx #0
   189                                                          !set .numBytes = .numBytes - 256
   190                                                  } else {
   191                                                          ldx #.numBytes
   192                                                          !set .numBytes = 0
   193                                                  }
   194                                                  jsr tmsSendBytes
   195                                                  inc TMS_TMP_ADDRESS + 1
   196                                          }
   197                                  }
   198                          
   199                          }
   200                          
   201                          ; -----------------------------------------------------------------------------
   202                          ; tmsSendDataRpt: Send # bytes from .sourceAddr to tms9918 data port .rpt times
   203                          ; -----------------------------------------------------------------------------
   204                          !macro tmsSendDataRpt .sourceAddr, .numBytes, .rpt {
   205                                  lda #<.sourceAddr
   206                                  sta TMS_TMP_ADDRESS
   207                                  lda #>.sourceAddr
   208                                  sta TMS_TMP_ADDRESS + 1
   209                          
   210                                  !if .numBytes < 256 {
   211                                          !if .rpt < 5 {
   212                                                  !for i,1,.rpt {
   213                                                          ldx #.numBytes
   214                                                          jsr tmsSendBytes
   215                                                  }
   216                                          } else {
   217                                                  lda #.rpt
   218                                                  sta TMS9918_TMP_BUFFER
   219                          -
   220                                                  ldx #.numBytes
   221                                                  jsr tmsSendBytes
   222                                                  dec TMS9918_TMP_BUFFER
   223                                                  bne -
   224                                          }
   225                                  } else {
   226                                          !error "tmsSendDataRpt supports <256 bytes only"
   227                                  }
   228                          }
   229                          
   230                          
   231                          ; -----------------------------------------------------------------------------
   232                          ; tmsPutRpt: Send value .rpt times
   233                          ; -----------------------------------------------------------------------------
   234                          !macro tmsPutRpt .value, .rpt {
   235                                  ldx #.rpt
   236                                  lda #.value
   237                          -
   238                                  +tmsPut
   239                                  dex
   240                                  bne -
   241                          }
   242                          
   243                          !macro tmsPutSeq .from, .count {
   244                                  lda #.from
   245                          -
   246                                  +tmsPut
   247                                  inc
   248                                  cmp #<(.from + .count)
   249                                  bne -
   250                          }
   251                          
   252                          !macro tmsSetSourceAddressInd .addr {
   253                          	lda .addr
   254                          	sta TMS_TMP_ADDRESS
   255                          	lda .addr + 1
   256                          	sta TMS_TMP_ADDRESS + 1
   257                          }
   258                          
   259                          !macro tmsSetSourceAddressIndOffset .addr, .offset {
   260                                  clc
   261                          	lda .addr
   262                                  adc #<.offset
   263                          	sta TMS_TMP_ADDRESS
   264                          	lda .addr + 1
   265                                  adc #>.offset
   266                          	sta TMS_TMP_ADDRESS + 1
   267                          }
   268                          
   269                          
   270                          !macro tmsSendBytes .bytes {
   271                                  ldx #.bytes
   272                                  jsr tmsSendBytes
   273                          }
   274                          
   275                          
   276                          ; -----------------------------------------------------------------------------
   277                          ; tmsSetAddrPattTable: Initialise address for font table
   278                          ; -----------------------------------------------------------------------------
   279                          !macro tmsSetAddrPattTable {
   280                                  +tmsSetAddrPattTable 0
   281                          }
   282                          
   283                          ; -----------------------------------------------------------------------------
   284                          ; tmsSetAddrPattTable: Initialise address for pattern table
   285                          ; -----------------------------------------------------------------------------
   286                          !macro tmsSetAddrPattTable .ind {
   287                                  +tmsSetAddressWrite TMS_VRAM_PATT_ADDRESS + (8 * .ind)
   288                          }
   289                          
   290                          ; -----------------------------------------------------------------------------
   291                          ; tmsSetAddrPattTable: Initialise address for pattern table
   292                          ; -----------------------------------------------------------------------------
   293                          !macro tmsSetAddrPattTable .ind, .row {
   294                                  +tmsSetAddressWrite TMS_VRAM_PATT_ADDRESS + (8 * .ind) + .row
   295                          }
   296                          
   297                          ; -----------------------------------------------------------------------------
   298                          ; tmsSetAddrPattTableIIBank0: Initialise address for pattern table
   299                          ; -----------------------------------------------------------------------------
   300                          !macro tmsSetAddrPattTableIIBank0 .ind {
   301                                  +tmsSetAddrPattTable .ind
   302                          }
   303                          
   304                          ; -----------------------------------------------------------------------------
   305                          ; tmsSetAddrPattTableIIBank1: Initialise address for pattern table
   306                          ; -----------------------------------------------------------------------------
   307                          !macro tmsSetAddrPattTableIIBank1 .ind {
   308                                  +tmsSetAddrPattTable 256 + .ind
   309                          }
   310                          
   311                          ; -----------------------------------------------------------------------------
   312                          ; tmsSetAddrPattTableIIBank2: Initialise address for pattern table
   313                          ; -----------------------------------------------------------------------------
   314                          !macro tmsSetAddrPattTableIIBank2 .ind {
   315                                  +tmsSetAddrPattTable 512 + .ind
   316                          }
   317                          
   318                          ; -----------------------------------------------------------------------------
   319                          ; tmsSetAddrPattTableRead: Initialise address for pattern table to read
   320                          ; -----------------------------------------------------------------------------
   321                          !macro tmsSetAddrPattTableRead .ind {
   322                                  +tmsSetAddressRead TMS_VRAM_PATT_ADDRESS + (8 * .ind)
   323                          }
   324                          
   325                          ; -----------------------------------------------------------------------------
   326                          ; tmsSetAddrPattTableRowRead: Initialise address for pattern table to read
   327                          ; -----------------------------------------------------------------------------
   328                          !macro tmsSetAddrPattTableRead .ind, .row {
   329                                  +tmsSetAddressRead TMS_VRAM_PATT_ADDRESS + (8 * .ind) + .row
   330                          }
   331                          
   332                          ; -----------------------------------------------------------------------------
   333                          ; tmsUpdateFont: Update the pattern table with a given font
   334                          ; -----------------------------------------------------------------------------
   335                          !macro tmsUpdateFont .fontAddr {
   336                                  +tmsSetAddrPattTable 32
   337                                  +tmsSendData .fontAddr, $300
   338                          }
   339                          
   340                          ; -----------------------------------------------------------------------------
   341                          ; tmsSetAddrNameTable: Initialise address for base (text) table
   342                          ; -----------------------------------------------------------------------------
   343                          !macro tmsSetAddrNameTable {
   344                                  +tmsSetAddressWrite TMS_VRAM_NAME_ADDRESS
   345                          }
   346                          
   347                          ; -----------------------------------------------------------------------------
   348                          ; tmsSetAddrColorTable: Initialise address for color table
   349                          ; -----------------------------------------------------------------------------
   350                          !macro tmsSetAddrColorTable {
   351                                  +tmsSetAddressWrite TMS_VRAM_COLOR_ADDRESS
   352                          }
   353                          
   354                          ; -----------------------------------------------------------------------------
   355                          ; tmsSetAddrColorTable: Initialise address for color table index
   356                          ; -----------------------------------------------------------------------------
   357                          !macro tmsSetAddrColorTable .ind {
   358                                  +tmsSetAddressWrite TMS_VRAM_COLOR_ADDRESS + .ind
   359                          }
   360                          
   361                          ; -----------------------------------------------------------------------------
   362                          ; tmsSetAddrColorTableII: Initialise address for color table index (mode II)
   363                          ; -----------------------------------------------------------------------------
   364                          !macro tmsSetAddrColorTableII .ind {
   365                                  +tmsSetAddressWrite TMS_VRAM_COLOR_ADDRESS + .ind * 8
   366                          }
   367                          
   368                          ; -----------------------------------------------------------------------------
   369                          ; tmsSetAddrColorTableIIBank0: Initialise address for color table index (mode II)
   370                          ; -----------------------------------------------------------------------------
   371                          !macro tmsSetAddrColorTableIIBank0 .ind {
   372                                  +tmsSetAddrColorTableII .ind
   373                          }
   374                          
   375                          ; -----------------------------------------------------------------------------
   376                          ; tmsSetAddrColorTableIIBank1: Initialise address for color table index (mode II)
   377                          ; -----------------------------------------------------------------------------
   378                          !macro tmsSetAddrColorTableIIBank1 .ind {
   379                                  +tmsSetAddrColorTableII 256 + .ind
   380                          }
   381                          
   382                          ; -----------------------------------------------------------------------------
   383                          ; tmsSetAddrColorTableIIBank2: Initialise address for color table index (mode II)
   384                          ; -----------------------------------------------------------------------------
   385                          !macro tmsSetAddrColorTableIIBank2 .ind {
   386                                  +tmsSetAddrColorTableII 512 + .ind
   387                          }
   388                          
   389                          ; -----------------------------------------------------------------------------
   390                          ; tmsSetAddrSpriteAttrTable: Initialise address for sprite attributes table
   391                          ; -----------------------------------------------------------------------------
   392                          !macro tmsSetAddrSpriteAttrTable {
   393                                  +tmsSetAddrSpriteAttrTable 0
   394                          }
   395                          
   396                          ; -----------------------------------------------------------------------------
   397                          ; tmsSetAddrSpriteAttrTable: Initialise address for sprite attributes table
   398                          ; -----------------------------------------------------------------------------
   399                          !macro tmsSetAddrSpriteAttrTable .index {
   400                                  +tmsSetAddressWrite TMS_VRAM_SPRITE_ATTR_ADDRESS + .index * 4
   401                          }
   402                          
   403                          ; -----------------------------------------------------------------------------
   404                          ; tmsSetAddrSpritePattTable: Initialise address for sprite pattern table
   405                          ; -----------------------------------------------------------------------------
   406                          !macro tmsSetAddrSpritePattTable {
   407                                  +tmsSetAddrSpritePattTable 0
   408                          }
   409                          
   410                          ; -----------------------------------------------------------------------------
   411                          ; tmsSetAddrSpritePattTable: Initialise address for sprite pattern table
   412                          ; -----------------------------------------------------------------------------
   413                          !macro tmsSetAddrSpritePattTable .index {
   414                                  +tmsSetAddressWrite TMS_VRAM_SPRITE_PATT_ADDRESS + .index * 8
   415                          }
   416                          
   417                          
   418                          ; -----------------------------------------------------------------------------
   419                          ; tmsCreateSpritePattern: Create a sprite pattern (.spriteDataAddr is 8 bytes)
   420                          ; -----------------------------------------------------------------------------
   421                          !macro tmsCreateSpritePattern .pattInd, .spriteDataAddr {
   422                          
   423                                  
   424                          
   425                                  ; sprite pattern table
   426                                  +tmsSetAddrSpritePattTable .pattInd
   427                          
   428                                  ldx #0
   429                          -
   430                                  lda .spriteDataAddr,x
   431                                  +tmsPut
   432                                  inx
   433                                  cpx #8
   434                          
   435                                  
   436                          
   437                                  bne -
   438                          }
   439                          
   440                          ; -----------------------------------------------------------------------------
   441                          ; tmsCreateSpritePatternQuad: Create a (size 1) sprite pattern 
   442                          ;   (.spriteDataAddr is 32 bytes)
   443                          ; -----------------------------------------------------------------------------
   444                          !macro tmsCreateSpritePatternQuad .pattInd, .spriteDataAddr {
   445                          
   446                                  
   447                          
   448                                  ; sprite pattern table
   449                                  +tmsSetAddrSpritePattTable .pattInd * 4
   450                          
   451                                  ldx #0
   452                          -
   453                                  lda .spriteDataAddr,x
   454                                  +tmsPut 
   455                                  inx
   456                                  cpx #32
   457                          
   458                                  
   459                          
   460                                  bne -
   461                          }
   462                          
   463                          
   464                          !macro tmsCreateSpritePatternImm .ind, .b0, .b1, .b2, .b3, .b4, .b5, .b6, .b7 {
   465                          
   466                                  ; sprite pattern table
   467                                  +tmsSetAddrSpritePattTable .ind
   468                                  +tmsPut .b0
   469                                  +tmsPut .b2
   470                                  +tmsPut .b2
   471                                  +tmsPut .b3
   472                                  +tmsPut .b4
   473                                  +tmsPut .b5
   474                                  +tmsPut .b6
   475                                  +tmsPut .b7
   476                          }
   477                          
   478                          !macro tmsCreatePatternImm .ind, .b0, .b1, .b2, .b3, .b4, .b5, .b6, .b7 {
   479                          
   480                                  ; sprite pattern table
   481                                  +tmsSetAddrPattTable .ind
   482                                  +tmsPut .b0
   483                                  +tmsPut .b2
   484                                  +tmsPut .b2
   485                                  +tmsPut .b3
   486                                  +tmsPut .b4
   487                                  +tmsPut .b5
   488                                  +tmsPut .b6
   489                                  +tmsPut .b7
   490                          }
   491                          
   492                          
   493                          ; -----------------------------------------------------------------------------
   494                          ; tmsCreateSprite: Create a sprite
   495                          ; -----------------------------------------------------------------------------
   496                          !macro tmsCreateSprite .ind, .pattInd, .xPos, .yPos, .color {
   497                          
   498                                  ; sprite attr table
   499                                  +tmsSetAddrSpriteAttrTable .ind
   500                          
   501                                  +tmsPut .yPos
   502                                  +tmsPut .xPos
   503                                  +tmsPut .pattInd
   504                                  +tmsPut .color
   505                          }
   506                          
   507                          ; -----------------------------------------------------------------------------
   508                          ; tmsSpritePos: Set a sprite position
   509                          ; -----------------------------------------------------------------------------
   510                          !macro tmsSpritePos .ind, .xPos, .yPos {
   511                                  
   512                          
   513                                  ; sprite attr table
   514                                  +tmsSetAddrSpriteAttrTable .ind
   515                          
   516                                  +tmsPut .yPos
   517                                  +tmsPut .xPos        
   518                          }
   519                          
   520                          
   521                          ; -----------------------------------------------------------------------------
   522                          ; tmsSetLastSprite: Mark a sprite as the last sprite (set next ypos to )
   523                          ; -----------------------------------------------------------------------------
   524                          !macro tmsSetLastSprite .ind {
   525                                  +tmsSpritePos .ind + 1, 0, $d0
   526                          }
   527                          
   528                          
   529                          ; -----------------------------------------------------------------------------
   530                          ; tmsSpritePosXYReg: Set a sprite position from x/y registers
   531                          ; -----------------------------------------------------------------------------
   532                          !macro tmsSpritePosXYReg .ind {
   533                                  
   534                          
   535                                  ; sprite attr table
   536                                  +tmsSetAddrSpriteAttrTable .ind
   537                          
   538                                  tya
   539                                  +tmsPut 
   540                                  txa
   541                                  +tmsPut 
   542                          }
   543                          
   544                          
   545                          ; -----------------------------------------------------------------------------
   546                          ; tmsSetAddrSpriteColor: Change a sprite color
   547                          ; -----------------------------------------------------------------------------
   548                          !macro tmsSetAddrSpriteColor .ind {
   549                          
   550                                  ; sprite attr table
   551                                  +tmsSetAddressWrite TMS_VRAM_SPRITE_ATTR_ADDRESS + (.ind * 4) + 3
   552                          }
   553                          ; -----------------------------------------------------------------------------
   554                          ; tmsSpriteColor: Change a sprite color
   555                          ; -----------------------------------------------------------------------------
   556                          !macro tmsSpriteColor .ind, .color {
   557                          
   558                                  +tmsSetAddrSpriteColor .ind
   559                          
   560                                  +tmsPut .color
   561                          }
   562                          
   563                          
   564                          ; -----------------------------------------------------------------------------
   565                          ; tmsSetPosWrite: Set cursor position
   566                          ; -----------------------------------------------------------------------------
   567                          !macro tmsSetPosWrite .x, .y {
   568                                  +tmsSetAddressWrite (TMS_VRAM_NAME_ADDRESS + .y * 32 + .x)
   569                          }
   570                          
   571                          ; -----------------------------------------------------------------------------
   572                          ; tmsSetPosRead: Set read cursor position
   573                          ; -----------------------------------------------------------------------------
   574                          !macro tmsSetPosRead .x, .y {
   575                                  +tmsSetAddressRead (TMS_VRAM_NAME_ADDRESS + .y * 32 + .x)
   576                          }
   577                          
   578                          ; -----------------------------------------------------------------------------
   579                          ; tmsPrint: Print immediate text
   580                          ; -----------------------------------------------------------------------------
   581                          ; Inputs:
   582                          ;  str: String to print
   583                          ;  x: x position
   584                          ;  y: y position
   585                          ; -----------------------------------------------------------------------------
   586                          !macro tmsPrint .str, .x, .y {
   587                          	jmp .afterText
   588                          .textAddr
   589                          	!text .str,0
   590                          .afterText        
   591                          
   592                                  +tmsSetPosWrite .x, .y
   593                          
   594                                  lda #<.textAddr
   595                                  sta STR_ADDR_L
   596                                  lda #>.textAddr
   597                                  sta STR_ADDR_H
   598                                  jsr tmsPrint        
   599                          }
   600                          
   601                          
   602                          ; -----------------------------------------------------------------------------
   603                          ; tmsPrintCentre: Print centre-aligned immediate text
   604                          ; -----------------------------------------------------------------------------
   605                          ; Inputs:
   606                          ;  str: String to print
   607                          ;  y: y position
   608                          ; -----------------------------------------------------------------------------
   609                          !macro tmsPrintCentre .str, .y {
   610                          	jmp .afterText
   611                          .textAddr
   612                          	!text .str,0
   613                          .afterText        
   614                          
   615                                  +tmsSetPosWrite (32 - ((.afterText - 1) - .textAddr)) / 2, .y
   616                          
   617                                  lda #<.textAddr
   618                                  sta STR_ADDR_L
   619                                  lda #>.textAddr
   620                                  sta STR_ADDR_H
   621                                  jsr tmsPrint        
   622                          }
   623                          
   624                          
   625                          ; -----------------------------------------------------------------------------
   626                          ; tmsPrintZ: Print text
   627                          ; -----------------------------------------------------------------------------
   628                          ; Inputs:
   629                          ;  str: Address of zero-terminated string to print
   630                          ;  x: x position
   631                          ;  y: y position
   632                          ; -----------------------------------------------------------------------------
   633                          !macro tmsPrintZ .textAddr, .x, .y {
   634                                  +tmsSetPosWrite .x, .y
   635                          
   636                                  lda #<.textAddr
   637                                  sta STR_ADDR_L
   638                                  lda #>.textAddr
   639                                  sta STR_ADDR_H
   640                                  jsr tmsPrint        
   641                          }

; ******** Source: ../lib\gfx\tms9918.asm
    13                          
    14                          
    15                          TMS_FONT_DATA:

; ******** Source: ../lib\gfx\fonts\hbc56font.asm
     1                          ; 6502 - HBC-56 Font
     2                          ;
     3                          ; Copyright (c) 2021 Troy Schrapel
     4                          ;
     5                          ; This code is licensed under the MIT license
     6                          ;
     7                          ; https://github.com/visrealm/hbc-56
     8                          ;
     9                          
    10                          
    11                          
    12                          
    13                          
    14                          
    15                          
    16                          
    17                          
    18                          
    19                          
    20                          
    21                          
    22                          
    23                          
    24                          
    25                          
    26                          
    27                          
    28                          
    29                          
    30                          
    31                          
    32  e271 0000000000000000   !byte $00,$00,$00,$00,$00,$00,$00,$00 ; <SPACE>
    33  e279 1818181818001800   !byte $18,$18,$18,$18,$18,$00,$18,$00 ; !
    34  e281 6c6c6c0000000000   !byte $6C,$6C,$6C,$00,$00,$00,$00,$00 ; "
    35  e289 6c6cfe6cfe6c6c00   !byte $6C,$6C,$FE,$6C,$FE,$6C,$6C,$00 ; #
    36  e291 187ec07c06fc1800   !byte $18,$7E,$C0,$7C,$06,$FC,$18,$00 ; $
    37  e299 00c6cc183066c600   !byte $00,$C6,$CC,$18,$30,$66,$C6,$00 ; %
    38  e2a1 386c3876dccc7600   !byte $38,$6C,$38,$76,$DC,$CC,$76,$00 ; &
    39  e2a9 3030600000000000   !byte $30,$30,$60,$00,$00,$00,$00,$00 ; '
    40  e2b1 0c18303030180c00   !byte $0C,$18,$30,$30,$30,$18,$0C,$00 ; (
    41  e2b9 30180c0c0c183000   !byte $30,$18,$0C,$0C,$0C,$18,$30,$00 ; )
    42  e2c1 00663cff3c660000   !byte $00,$66,$3C,$FF,$3C,$66,$00,$00 ; *
    43  e2c9 0018187e18180000   !byte $00,$18,$18,$7E,$18,$18,$00,$00 ; +
    44  e2d1 0000000000181830   !byte $00,$00,$00,$00,$00,$18,$18,$30 ; ,
    45  e2d9 0000007e00000000   !byte $00,$00,$00,$7E,$00,$00,$00,$00 ; -
    46  e2e1 0000000000181800   !byte $00,$00,$00,$00,$00,$18,$18,$00 ; .
    47  e2e9 060c183060c08000   !byte $06,$0C,$18,$30,$60,$C0,$80,$00 ; /
    48  e2f1 7ccedef6e6c67c00   !byte $7C,$CE,$DE,$F6,$E6,$C6,$7C,$00 ; 0
    49  e2f9 1838181818187e00   !byte $18,$38,$18,$18,$18,$18,$7E,$00 ; 1
    50  e301 7cc6067cc0c0fe00   !byte $7C,$C6,$06,$7C,$C0,$C0,$FE,$00 ; 2
    51  e309 fc06063c0606fc00   !byte $FC,$06,$06,$3C,$06,$06,$FC,$00 ; 3
    52  e311 0cccccccfe0c0c00   !byte $0C,$CC,$CC,$CC,$FE,$0C,$0C,$00 ; 4
    53  e319 fec0fc0606c67c00   !byte $FE,$C0,$FC,$06,$06,$C6,$7C,$00 ; 5
    54  e321 7cc0c0fcc6c67c00   !byte $7C,$C0,$C0,$FC,$C6,$C6,$7C,$00 ; 6
    55  e329 fe06060c18303000   !byte $FE,$06,$06,$0C,$18,$30,$30,$00 ; 7
    56  e331 7cc6c67cc6c67c00   !byte $7C,$C6,$C6,$7C,$C6,$C6,$7C,$00 ; 8
    57  e339 7cc6c67e06067c00   !byte $7C,$C6,$C6,$7E,$06,$06,$7C,$00 ; 9
    58  e341 0018180000181800   !byte $00,$18,$18,$00,$00,$18,$18,$00 ; :
    59  e349 0018180000181830   !byte $00,$18,$18,$00,$00,$18,$18,$30 ; ;
    60  e351 0c18306030180c00   !byte $0C,$18,$30,$60,$30,$18,$0C,$00 ; <
    61  e359 00007e007e000000   !byte $00,$00,$7E,$00,$7E,$00,$00,$00 ; =
    62  e361 30180c060c183000   !byte $30,$18,$0C,$06,$0C,$18,$30,$00 ; >
    63  e369 3c660c1818001800   !byte $3C,$66,$0C,$18,$18,$00,$18,$00 ; ?
    64  e371 7cc6dededec07e00   !byte $7C,$C6,$DE,$DE,$DE,$C0,$7E,$00 ; @
    65  e379 386cc6c6fec6c600   !byte $38,$6C,$C6,$C6,$FE,$C6,$C6,$00 ; A
    66  e381 fcc6c6fcc6c6fc00   !byte $FC,$C6,$C6,$FC,$C6,$C6,$FC,$00 ; B
    67  e389 7cc6c0c0c0c67c00   !byte $7C,$C6,$C0,$C0,$C0,$C6,$7C,$00 ; C
    68  e391 f8ccc6c6c6ccf800   !byte $F8,$CC,$C6,$C6,$C6,$CC,$F8,$00 ; D
    69  e399 fec0c0f8c0c0fe00   !byte $FE,$C0,$C0,$F8,$C0,$C0,$FE,$00 ; E
    70  e3a1 fec0c0f8c0c0c000   !byte $FE,$C0,$C0,$F8,$C0,$C0,$C0,$00 ; F
    71  e3a9 7cc6c0c0cec67c00   !byte $7C,$C6,$C0,$C0,$CE,$C6,$7C,$00 ; G
    72  e3b1 c6c6c6fec6c6c600   !byte $C6,$C6,$C6,$FE,$C6,$C6,$C6,$00 ; H
    73  e3b9 7e18181818187e00   !byte $7E,$18,$18,$18,$18,$18,$7E,$00 ; I
    74  e3c1 0606060606c67c00   !byte $06,$06,$06,$06,$06,$C6,$7C,$00 ; J
    75  e3c9 c6ccd8f0d8ccc600   !byte $C6,$CC,$D8,$F0,$D8,$CC,$C6,$00 ; K
    76  e3d1 c0c0c0c0c0c0fe00   !byte $C0,$C0,$C0,$C0,$C0,$C0,$FE,$00 ; L
    77  e3d9 c6eefefed6c6c600   !byte $C6,$EE,$FE,$FE,$D6,$C6,$C6,$00 ; M
    78  e3e1 c6e6f6decec6c600   !byte $C6,$E6,$F6,$DE,$CE,$C6,$C6,$00 ; N
    79  e3e9 7cc6c6c6c6c67c00   !byte $7C,$C6,$C6,$C6,$C6,$C6,$7C,$00 ; O
    80  e3f1 fcc6c6fcc0c0c000   !byte $FC,$C6,$C6,$FC,$C0,$C0,$C0,$00 ; P
    81  e3f9 7cc6c6c6d6de7c06   !byte $7C,$C6,$C6,$C6,$D6,$DE,$7C,$06 ; Q
    82  e401 fcc6c6fcd8ccc600   !byte $FC,$C6,$C6,$FC,$D8,$CC,$C6,$00 ; R
    83  e409 7cc6c07c06c67c00   !byte $7C,$C6,$C0,$7C,$06,$C6,$7C,$00 ; S
    84  e411 ff18181818181800   !byte $FF,$18,$18,$18,$18,$18,$18,$00 ; T
    85  e419 c6c6c6c6c6c6fe00   !byte $C6,$C6,$C6,$C6,$C6,$C6,$FE,$00 ; U
    86  e421 c6c6c6c6c67c3800   !byte $C6,$C6,$C6,$C6,$C6,$7C,$38,$00 ; V
    87  e429 c6c6c6c6d6fe6c00   !byte $C6,$C6,$C6,$C6,$D6,$FE,$6C,$00 ; W
    88  e431 c6c66c386cc6c600   !byte $C6,$C6,$6C,$38,$6C,$C6,$C6,$00 ; X
    89  e439 c6c6c67c1830e000   !byte $C6,$C6,$C6,$7C,$18,$30,$E0,$00 ; Y
    90  e441 fe060c183060fe00   !byte $FE,$06,$0C,$18,$30,$60,$FE,$00 ; Z
    91  e449 3c30303030303c00   !byte $3C,$30,$30,$30,$30,$30,$3C,$00 ; [
    92  e451 c06030180c060200   !byte $C0,$60,$30,$18,$0C,$06,$02,$00 ; \
    93  e459 3c0c0c0c0c0c3c00   !byte $3C,$0C,$0C,$0C,$0C,$0C,$3C,$00 ; ]
    94  e461 10386cc600000000   !byte $10,$38,$6C,$C6,$00,$00,$00,$00 ; ^
    95  e469 00000000000000ff   !byte $00,$00,$00,$00,$00,$00,$00,$FF ; _
    96  e471 18180c0000000000   !byte $18,$18,$0C,$00,$00,$00,$00,$00 ; `
    97  e479 00007c067ec67e00   !byte $00,$00,$7C,$06,$7E,$C6,$7E,$00 ; a
    98  e481 c0c0c0fcc6c6fc00   !byte $C0,$C0,$C0,$FC,$C6,$C6,$FC,$00 ; b
    99  e489 00007cc6c0c67c00   !byte $00,$00,$7C,$C6,$C0,$C6,$7C,$00 ; c
   100  e491 0606067ec6c67e00   !byte $06,$06,$06,$7E,$C6,$C6,$7E,$00 ; d
   101  e499 00007cc6fec07c00   !byte $00,$00,$7C,$C6,$FE,$C0,$7C,$00 ; e
   102  e4a1 1c36307830307800   !byte $1C,$36,$30,$78,$30,$30,$78,$00 ; f
   103  e4a9 00007ec6c67e06fc   !byte $00,$00,$7E,$C6,$C6,$7E,$06,$FC ; g
   104  e4b1 c0c0fcc6c6c6c600   !byte $C0,$C0,$FC,$C6,$C6,$C6,$C6,$00 ; h
   105  e4b9 1800381818183c00   !byte $18,$00,$38,$18,$18,$18,$3C,$00 ; i
   106  e4c1 060006060606c67c   !byte $06,$00,$06,$06,$06,$06,$C6,$7C ; j
   107  e4c9 c0c0ccd8f8ccc600   !byte $C0,$C0,$CC,$D8,$F8,$CC,$C6,$00 ; k
   108  e4d1 3818181818183c00   !byte $38,$18,$18,$18,$18,$18,$3C,$00 ; l
   109  e4d9 0000ccfefed6d600   !byte $00,$00,$CC,$FE,$FE,$D6,$D6,$00 ; m
   110  e4e1 0000fcc6c6c6c600   !byte $00,$00,$FC,$C6,$C6,$C6,$C6,$00 ; n
   111  e4e9 00007cc6c6c67c00   !byte $00,$00,$7C,$C6,$C6,$C6,$7C,$00 ; o
   112  e4f1 0000fcc6c6fcc0c0   !byte $00,$00,$FC,$C6,$C6,$FC,$C0,$C0 ; p
   113  e4f9 00007ec6c67e0606   !byte $00,$00,$7E,$C6,$C6,$7E,$06,$06 ; q
   114  e501 0000fcc6c0c0c000   !byte $00,$00,$FC,$C6,$C0,$C0,$C0,$00 ; r
   115  e509 00007ec07c06fc00   !byte $00,$00,$7E,$C0,$7C,$06,$FC,$00 ; s
   116  e511 18187e1818180e00   !byte $18,$18,$7E,$18,$18,$18,$0E,$00 ; t
   117  e519 0000c6c6c6c67e00   !byte $00,$00,$C6,$C6,$C6,$C6,$7E,$00 ; u
   118  e521 0000c6c6c67c3800   !byte $00,$00,$C6,$C6,$C6,$7C,$38,$00 ; v
   119  e529 0000c6c6d6fe6c00   !byte $00,$00,$C6,$C6,$D6,$FE,$6C,$00 ; w
   120  e531 0000c66c386cc600   !byte $00,$00,$C6,$6C,$38,$6C,$C6,$00 ; x
   121  e539 0000c6c6c67e06fc   !byte $00,$00,$C6,$C6,$C6,$7E,$06,$FC ; y
   122  e541 0000fe0c3860fe00   !byte $00,$00,$FE,$0C,$38,$60,$FE,$00 ; z
   123  e549 0e18187018180e00   !byte $0E,$18,$18,$70,$18,$18,$0E,$00 ; {
   124  e551 1818180018181800   !byte $18,$18,$18,$00,$18,$18,$18,$00 ; |
   125  e559 7018180e18187000   !byte $70,$18,$18,$0E,$18,$18,$70,$00 ; }
   126  e561 76dc000000000000   !byte $76,$DC,$00,$00,$00,$00,$00,$00 ; ~

; ******** Source: ../lib\gfx\tms9918.asm
    16  e569 ffffffffffffffff   
    17                          
    18                          HAVE_TMS9918 = 1
    19                          
    20                          ; -------------------------
    21                          ; Constants
    22                          ; -------------------------
    23                          !ifndef TMS9918_IO_PORT { TMS9918_IO_PORT = $10
    24                                  !warn "TMS9918_IO_PORT not provided. Defaulting to ", TMS9918_IO_PORT
    25                          }
    26                          
    27                          !ifndef TMS9918_ZP_START { TMS9918_ZP_START = $30
    28                                  !warn "TMS9918_ZP_START not provided. Defaulting to ", TMS9918_ZP_START
    29                          }
    30                          
    31                          !ifndef TMS9918_RAM_START { TMS9918_RAM_START = $7ba0
    32                                  !warn "TMS9918_RAM_START not provided. Defaulting to ", TMS9918_RAM_START
    33                          }
    34                          
    35                          ; -----------------------------------------------------------------------------
    36                          ; Zero page
    37                          ; -----------------------------------------------------------------------------
    38                          TMS_TMP_ADDRESS         = TMS9918_ZP_START      ; 2 bytes
    39                          TMS9918_ZP_SIZE         = 2                     ; LAST ZP ADDRESS
    40                          
    41                          ; -----------------------------------------------------------------------------
    42                          ; High RAM
    43                          ; -----------------------------------------------------------------------------
    44                          .TMS9918_REG0_SHADOW_ADDR = TMS9918_RAM_START
    45                          .TMS9918_REG1_SHADOW_ADDR = TMS9918_RAM_START + 1
    46                          
    47                          TMS9918_CONSOLE_X         = TMS9918_RAM_START + 2
    48                          TMS9918_CONSOLE_Y         = TMS9918_RAM_START + 3
    49                          TMS9918_CONSOLE_SIZE_X    = TMS9918_RAM_START + 4
    50                          TMS9918_CONSOLE_LINE_LEN  = TMS9918_RAM_START + 5
    51                          .TMS9918_REGX             = TMS9918_RAM_START + 6
    52                          .TMS9918_REGY             = TMS9918_RAM_START + 7
    53                          .TMS9918_TMP_READ_ROW     = TMS9918_RAM_START + 8
    54                          .TMS9918_TMP_WRITE_ROW    = TMS9918_RAM_START + 9
    55                          
    56                          TMS9918_TMP_BUFFER        = TMS9918_RAM_START + 10 ; 40 bytes 
    57                          TMS9918_RAM_SIZE          = 50
    58                          
    59                          
    60                          
    61                          !if TMS9918_ZP_END < (TMS9918_ZP_START + TMS9918_ZP_SIZE) {
    62                          	!error "TMS9918_ZP requires ",TMS9918_ZP_SIZE," bytes. Allocated ",TMS9918_ZP_END - TMS9918_ZP_START
    63                          }
    64                          
    65                          !if TMS9918_RAM_END < (TMS9918_RAM_START + TMS9918_RAM_SIZE) {
    66                          	!error "TMS9918_RAM requires ",.TMS9918_RAM_SIZE," bytes. Allocated ",TMS9918_RAM_END - TMS9918_RAM_START
    67                          }
    68                          
    69                          
    70                          ; IO Ports
    71                          TMS9918_RAM     = IO_PORT_BASE_ADDRESS | TMS9918_IO_PORT
    72                          TMS9918_REG     = IO_PORT_BASE_ADDRESS | TMS9918_IO_PORT | $01
    73                          
    74                          
    75                          ; -----------------------------------------------------------------------------
    76                          ; VRAM addresses
    77                          ; -----------------------------------------------------------------------------
    78                          TMS_VRAM_NAME_ADDRESS           = $3800
    79                          TMS_VRAM_COLOR_ADDRESS          = $0000
    80                          TMS_VRAM_PATT_ADDRESS           = $2000
    81                          TMS_VRAM_SPRITE_ATTR_ADDRESS    = $3B00
    82                          TMS_VRAM_SPRITE_PATT_ADDRESS    = $1800
    83                          
    84                          ; -----------------------------------------------------------------------------
    85                          ; Register values
    86                          ; -----------------------------------------------------------------------------
    87                          TMS_R0_MODE_GRAPHICS_I          = $00
    88                          TMS_R0_MODE_GRAPHICS_II         = $02
    89                          TMS_R0_MODE_MULTICOLOR          = $00
    90                          TMS_R0_MODE_TEXT                = $00
    91                          TMS_R0_EXT_VDP_ENABLE           = $01
    92                          TMS_R0_EXT_VDP_DISABLE          = $00
    93                          
    94                          TMS_R1_RAM_16K                  = $80
    95                          TMS_R1_RAM_4K                   = $00
    96                          TMS_R1_DISP_BLANK               = $00
    97                          TMS_R1_DISP_ACTIVE              = $40
    98                          TMS_R1_INT_ENABLE               = $20
    99                          TMS_R1_INT_DISABLE              = $00
   100                          TMS_R1_MODE_GRAPHICS_I          = $00
   101                          TMS_R1_MODE_GRAPHICS_II         = $00
   102                          TMS_R1_MODE_MULTICOLOR          = $08
   103                          TMS_R1_MODE_TEXT                = $10
   104                          TMS_R1_SPRITE_8                 = $00
   105                          TMS_R1_SPRITE_16                = $02
   106                          TMS_R1_SPRITE_MAG1              = $00
   107                          TMS_R1_SPRITE_MAG2              = $01
   108                          
   109                          ; -----------------------------------------------------------------------------
   110                          ; Color palette
   111                          ; -----------------------------------------------------------------------------
   112                          TMS_TRANSPARENT         = $00
   113                          TMS_BLACK               = $01
   114                          TMS_MED_GREEN           = $02
   115                          TMS_LT_GREEN            = $03
   116                          TMS_DK_BLUE             = $04
   117                          TMS_LT_BLUE             = $05
   118                          TMS_DK_RED              = $06
   119                          TMS_CYAN                = $07
   120                          TMS_MED_RED             = $08
   121                          TMS_LT_RED              = $09
   122                          TMS_DK_YELLOW           = $0a
   123                          TMS_LT_YELLOW           = $0b
   124                          TMS_DK_GREEN            = $0c
   125                          TMS_MAGENTA             = $0d
   126                          TMS_GREY                = $0e
   127                          TMS_WHITE               = $0f
   128                          
   129                          TMS_GFX_TILE_WIDTH      = 8
   130                          TMS_GFX_TILE_HEIGHT     = 8
   131                          TMS_GFX_TILES_X         = 32
   132                          TMS_GFX_TILES_Y         = 24
   133                          TMS_GFX_PIXELS_X        = TMS_GFX_TILES_X * TMS_GFX_TILE_WIDTH
   134                          TMS_GFX_PIXELS_Y        = TMS_GFX_TILES_Y * TMS_GFX_TILE_HEIGHT
   135                          
   136                          TMS_TXT_TILE_WIDTH      = 6
   137                          TMS_TXT_TILE_HEIGHT     = 8
   138                          TMS_TXT_TILES_X         = 40
   139                          TMS_TXT_TILES_Y         = 24
   140                          TMS_TXT_PIXELS_X        = TMS_TXT_TILES_X * TMS_TXT_TILE_WIDTH
   141                          TMS_TXT_PIXELS_Y        = TMS_TXT_TILES_Y * TMS_TXT_TILE_HEIGHT
   142                          
   143                          TMS_SPRITE_SIZE         = 8
   144                          TMS_SPRITE_SIZE2X       = TMS_SPRITE_SIZE * 2
   145                          
   146                          !ifndef TMS_MODEL {
   147                          	!warn "Set TMS_MODEL to one of: 9918, 9929. Defaulting to 9918"
   148                          	TMS_MODEL = 9918
   149                          } 
   150                          
   151                          ; -------------------------
   152                          ; Constants
   153                          ; -------------------------
   154                          
   155                          !if TMS_MODEL = 9918 {
   156                          	TMS_FPS = 60
   157                          } else { !if TMS_MODEL = 9929 {
   158                          	TMS_FPS = 50
   159                          } else {
   160                          	!error "Unknown TMS_MODEL. Must be one of: 9918 or 9929"
   161                          }}
   162                          
   163                          ; -----------------------------------------------------------------------------
   164                          ; Default register values
   165                          ; -----------------------------------------------------------------------------
   166                          TMS_REGISTER_DATA:
   167  e571 00                 !byte TMS_R0_EXT_VDP_DISABLE
   168  e572 80                 !byte TMS_R1_RAM_16K
   169  e573 0e                 !byte TMS_VRAM_NAME_ADDRESS >> 10
   170  e574 00                 !byte TMS_VRAM_COLOR_ADDRESS >> 6
   171  e575 04                 !byte TMS_VRAM_PATT_ADDRESS >> 11
   172  e576 76                 !byte TMS_VRAM_SPRITE_ATTR_ADDRESS >> 7
   173  e577 03                 !byte TMS_VRAM_SPRITE_PATT_ADDRESS >> 11
   174  e578 11                 !byte TMS_BLACK << 4 | TMS_BLACK
   175                          
   176                          
   177                          ; -----------------------------------------------------------------------------
   178                          ; Delay subroutines required for TMS9918 CPU access windows
   179                          ; -----------------------------------------------------------------------------
   180                          ;      CONDITION          MODE    VDP DELAY       WAIT TIME          TOTAL TIME
   181                          ; -----------------------------------------------------------------------------
   182                          ;  Active Display Area   Text        2uS          0 - 1.1uS           2 - 3.1uS      
   183                          ;  Active Display Area   GFX I, II   2uS          0 - 5.95uS          2 - 8uS      
   184                          ;  4300uS after VSYNC    All         2uS             0uS                2uS      
   185                          ;  Reg 1 Blank Bit 0     All         2uS             0uS                2uS      
   186                          ;  Active Display Area   Multicolor  2uS          0 - 1.5uS           2 - 3.5uS      
   187                          ; -----------------------------------------------------------------------------
   188                          _tmsWaitData:
   189  e579 ea                         nop
   190  e57a ea                         nop
   191  e57b ea                         nop
   192  e57c ea                         nop
   193  e57d ea                         nop
   194  e57e ea                         nop
   195  e57f ea                         nop
   196  e580 ea                         nop
   197  e581 ea                         nop
   198                          _tmsWaitReg:
   199  e582 ea                         nop
   200  e583 ea                         nop
   201  e584 ea                         nop
   202  e585 60                         rts
   203                          
   204                          tmsSetAddressNextRow:
   205  e586 a524                       lda TMS_TMP_ADDRESS
   206  e588 18                         clc
   207  e589 6920                       adc #32
   208  e58b 8524                       sta TMS_TMP_ADDRESS
   209  e58d 9002                       bcc +
   210  e58f e625                       inc TMS_TMP_ADDRESS + 1
   211                          +
   212  e591 60                         rts
   213                          
   214                          ; -----------------------------------------------------------------------------
   215                          ; tmsSetAddressWrite: Set an address in the TMS9918 
   216                          ; -----------------------------------------------------------------------------
   217                          ; TMS_TMP_ADDRESS: Address to set
   218                          ; -----------------------------------------------------------------------------
   219                          tmsSetAddressWrite:
   220  e592 08                         php
   221  e593 78                         sei                     ; we can't be interrupted here
   222  e594 a524                       lda TMS_TMP_ADDRESS
   223  e596 8d117f                     sta TMS9918_REG
   224                                  +tmsWaitReg
   225  e599 a525                       lda TMS_TMP_ADDRESS + 1
   226  e59b 0940                       ora #$40
   227  e59d 8d117f                     sta TMS9918_REG
   228                                  +tmsWaitReg
   229  e5a0 28                         plp
   230  e5a1 60                         rts
   231                          
   232                          ; -----------------------------------------------------------------------------
   233                          ; tmsSetAddressRead: Set an address to read from the TMS9918 
   234                          ; -----------------------------------------------------------------------------
   235                          ; TMS_TMP_ADDRESS: Address to read
   236                          ; -----------------------------------------------------------------------------
   237                          tmsSetAddressRead:
   238  e5a2 08                         php
   239  e5a3 78                         sei                     ; we can't be interrupted here
   240  e5a4 a524                       lda TMS_TMP_ADDRESS
   241  e5a6 8d117f                     sta TMS9918_REG
   242                                  +tmsWaitReg
   243  e5a9 a525                       lda TMS_TMP_ADDRESS + 1
   244  e5ab 8d117f                     sta TMS9918_REG
   245                                  +tmsWaitReg
   246  e5ae 28                         plp
   247  e5af 60                         rts
   248                          
   249                          
   250                          ; -----------------------------------------------------------------------------
   251                          ; tmsSetRegister: Set a register value
   252                          ; -----------------------------------------------------------------------------
   253                          ; Inputs:
   254                          ;  A: The value to set
   255                          ;  X: The register (0 - 7)
   256                          ; -----------------------------------------------------------------------------
   257                          tmsSetRegister:
   258  e5b0 08                         php
   259  e5b1 78                         sei             ; we can't be interrupted here
   260  e5b2 8d117f                     sta TMS9918_REG
   261                                  +tmsWaitReg
   262  e5b5 8a                         txa
   263  e5b6 0980                       ora #$80
   264  e5b8 8d117f                     sta TMS9918_REG
   265                                  +tmsWaitReg
   266  e5bb 28                         plp
   267  e5bc 60                         rts
   268                          
   269                          ; -----------------------------------------------------------------------------
   270                          ; tmsSetBackground: Set the background color (R7)
   271                          ; -----------------------------------------------------------------------------
   272                          ; Outputs:
   273                          ;  A: Color. High nibble = FG. Low nibble = BG
   274                          ; -----------------------------------------------------------------------------
   275                          tmsSetBackground:
   276  e5bd a207                       ldx #7
   277  e5bf d0ef                       bne tmsSetRegister
   278                          
   279                          ; -----------------------------------------------------------------------------
   280                          ; tmsReg0Set: Set register 0
   281                          ; -----------------------------------------------------------------------------
   282                          ; Outputs:
   283                          ;  A: Field values to set (will be OR'd with existing Reg0)
   284                          ; -----------------------------------------------------------------------------
   285                          tmsReg0SetFields:
   286  e5c1 0d267b                     ora .TMS9918_REG0_SHADOW_ADDR
   287                          .tmsReg0SetFields:
   288  e5c4 8d267b                     sta .TMS9918_REG0_SHADOW_ADDR
   289  e5c7 a200                       ldx #0
   290  e5c9 f0e5                       beq tmsSetRegister
   291                                  
   292                          ; -----------------------------------------------------------------------------
   293                          ; tmsReg0Clear: Clear register 0 
   294                          ; -----------------------------------------------------------------------------
   295                          ; Outputs:
   296                          ;  A: Field values to cleared (will be XOR'd with existing Reg0)
   297                          ; -----------------------------------------------------------------------------
   298                          tmsReg0ClearFields:
   299  e5cb 49ff                       eor #$ff
   300  e5cd 2d267b                     and .TMS9918_REG0_SHADOW_ADDR
   301  e5d0 4cc4e5                     jmp .tmsReg0SetFields
   302                          
   303                          
   304                          ; -----------------------------------------------------------------------------
   305                          ; tmsReg1Set: Set register 0
   306                          ; -----------------------------------------------------------------------------
   307                          ; Outputs:
   308                          ;  A: Field values to set (will be OR'd with existing Reg1)
   309                          ; -----------------------------------------------------------------------------
   310                          tmsReg1SetFields:
   311  e5d3 0d277b                     ora .TMS9918_REG1_SHADOW_ADDR
   312                          .tmsReg1SetFields:
   313  e5d6 8d277b                     sta .TMS9918_REG1_SHADOW_ADDR
   314  e5d9 a201                       ldx #1
   315  e5db d0d3                       bne tmsSetRegister
   316                                  
   317                          ; -----------------------------------------------------------------------------
   318                          ; tmsReg1Clear: Clear register 1
   319                          ; -----------------------------------------------------------------------------
   320                          ; Outputs:
   321                          ;  A: Field values to cleared (will be XOR'd with existing Reg1)
   322                          ; -----------------------------------------------------------------------------
   323                          tmsReg1ClearFields:
   324  e5dd 49ff                       eor #$ff
   325  e5df 2d277b                     and .TMS9918_REG1_SHADOW_ADDR
   326  e5e2 4cd6e5                     jmp .tmsReg1SetFields
   327                          
   328                          
   329                          ; -----------------------------------------------------------------------------
   330                          ; tmsModeReset: Reset graphics Mode
   331                          ; -----------------------------------------------------------------------------
   332                          tmsModeReset:
   333  e5e5 a903                       lda #$03
   334  e5e7 20cbe5                     jsr tmsReg0ClearFields
   335                          
   336  e5ea a918                       lda #$18
   337  e5ec 20dde5                     jsr tmsReg1ClearFields
   338                          
   339                                  ; if we were in Graphics II, then we need to reset
   340                                  ; the color and pattern table addresses
   341  e5ef a900                       lda #<(TMS_VRAM_COLOR_ADDRESS >> 6)
   342  e5f1 a203                       ldx #3
   343  e5f3 20b0e5                     jsr tmsSetRegister
   344                          
   345  e5f6 a904                       lda #<(TMS_VRAM_PATT_ADDRESS >> 11)
   346  e5f8 a204                       ldx #4
   347  e5fa 20b0e5                     jsr tmsSetRegister
   348  e5fd 60                         rts
   349                          
   350                          ; -----------------------------------------------------------------------------
   351                          ; tmsModeGraphicsI: Set up for Graphics I mode
   352                          ; -----------------------------------------------------------------------------
   353                          tmsModeGraphicsI:
   354  e5fe 20e5e5                     jsr tmsModeReset
   355                          
   356  e601 a900                       lda #TMS_R0_MODE_GRAPHICS_I
   357  e603 20c1e5                     jsr tmsReg0SetFields
   358                          
   359  e606 a900                       lda #TMS_R1_MODE_GRAPHICS_I
   360  e608 20d3e5                     jsr tmsReg1SetFields
   361                          
   362  e60b a920                       lda #32
   363  e60d 8d2a7b                     sta TMS9918_CONSOLE_SIZE_X
   364  e610 60                         rts
   365                          
   366                          ; -----------------------------------------------------------------------------
   367                          ; tmsModeBitmap: Set up for Graphics II mode and set up name table for bitmap
   368                          ; -----------------------------------------------------------------------------
   369                          tmsModeBitmap:
   370  e611 08                         php
   371  e612 78                         sei
   372                                          ; clear the name table
   373  e613 0878a9008d117fa9...        +tmsSetAddrNameTable
   374  e620 a003                       ldy #3
   375  e622 a900                       lda #0
   376                          -
   377  e624 8d107f2079e5               +tmsPut
   378  e62a 1a                         inc
   379  e62b d0f7                       bne -
   380  e62d 88                         dey
   381  e62e d0f4                       bne -
   382                          
   383                                  ; set all color table entries to transparent
   384  e630 0878a9008d117fa9...        +tmsSetAddrColorTable
   385  e63d a9f1                       +tmsColorFgBg TMS_WHITE, TMS_BLACK
   386  e63f 20f1e6                     jsr _tmsSendKb
   387  e642 20f1e6                     jsr _tmsSendKb
   388  e645 20f1e6                     jsr _tmsSendKb
   389  e648 20f1e6                     jsr _tmsSendKb
   390  e64b 20f1e6                     jsr _tmsSendKb
   391  e64e 20f1e6                     jsr _tmsSendKb        
   392                          
   393                                  ; clear the pattern table
   394  e651 0878a9008d117fa9...        +tmsSetAddrPattTable
   395  e65e a900                       lda #0
   396  e660 20f1e6                     jsr _tmsSendKb
   397  e663 20f1e6                     jsr _tmsSendKb
   398  e666 20f1e6                     jsr _tmsSendKb
   399  e669 20f1e6                     jsr _tmsSendKb
   400  e66c 20f1e6                     jsr _tmsSendKb
   401  e66f 20f1e6                     jsr _tmsSendKb
   402                          
   403  e672 28                         plp
   404                                  
   405                                  ; flow on through
   406                          
   407                          ; -----------------------------------------------------------------------------
   408                          ; tmsModeGraphicsII: Set up for Graphics II mode
   409                          ; -----------------------------------------------------------------------------
   410                          tmsModeGraphicsII:
   411  e673 20e5e5                     jsr tmsModeReset
   412                          
   413  e676 a902                       lda #TMS_R0_MODE_GRAPHICS_II
   414  e678 20c1e5                     jsr tmsReg0SetFields
   415                          
   416  e67b a900                       lda #TMS_R1_MODE_GRAPHICS_II
   417  e67d 20d3e5                     jsr tmsReg1SetFields
   418                          
   419                                  ; in Graphics II, Registers 3 and 4 work differently
   420                                  ;
   421                                  ; reg3 - Color table
   422                                  ;   $7f = $0000
   423                                  ;   $ff = $2000
   424                                  ;
   425                                  ; reg4 - Pattern table
   426                                  ;  $03 = $0000
   427                                  ;  $07 = $2000
   428                          
   429                                  ; set color table to $0000
   430  e680 a97f                       lda #$7f
   431  e682 a203                       ldx #3
   432  e684 20b0e5                     jsr tmsSetRegister
   433                          
   434                                  ; set pattern table to $2000
   435  e687 a907                       lda #$07
   436  e689 a204                       ldx #4
   437  e68b 20b0e5                     jsr tmsSetRegister
   438                          
   439  e68e a920                       lda #32
   440  e690 8d2a7b                     sta TMS9918_CONSOLE_SIZE_X
   441                          
   442  e693 60                         rts
   443                          
   444                          ; -----------------------------------------------------------------------------
   445                          ; tmsModeText: Set up for Text mode
   446                          ; -----------------------------------------------------------------------------
   447                          tmsModeText:
   448  e694 20e5e5                     jsr tmsModeReset
   449                          
   450  e697 a900                       lda #TMS_R0_MODE_TEXT
   451  e699 20c1e5                     jsr tmsReg0SetFields
   452                          
   453  e69c a910                       lda #TMS_R1_MODE_TEXT
   454  e69e 20d3e5                     jsr tmsReg1SetFields
   455                          
   456  e6a1 a928                       lda #40
   457  e6a3 8d2a7b                     sta TMS9918_CONSOLE_SIZE_X
   458                          
   459  e6a6 60                         rts
   460                          
   461                          ; -----------------------------------------------------------------------------
   462                          ; tmsModeMulticolor: Set up for Multicolor mode
   463                          ; -----------------------------------------------------------------------------
   464                          tmsModeMulticolor:
   465  e6a7 20e5e5                     jsr tmsModeReset
   466                          
   467  e6aa a900                       lda #TMS_R0_MODE_MULTICOLOR
   468  e6ac 20c1e5                     jsr tmsReg0SetFields
   469                          
   470  e6af a908                       lda #TMS_R1_MODE_MULTICOLOR
   471  e6b1 20d3e5                     jsr tmsReg1SetFields
   472  e6b4 60                         rts
   473                          
   474                          ; -----------------------------------------------------------------------------
   475                          ; tmsInit: Initialise the registers
   476                          ; -----------------------------------------------------------------------------
   477                          tmsInit:
   478  e6b5 08                         php
   479  e6b6 78                         sei                             ; we can't be interrupted here
   480  e6b7 ad71e5                     lda TMS_REGISTER_DATA
   481  e6ba 8d267b                     sta .TMS9918_REG0_SHADOW_ADDR
   482  e6bd ad72e5                     lda TMS_REGISTER_DATA + 1
   483  e6c0 8d277b                     sta .TMS9918_REG1_SHADOW_ADDR
   484                          
   485  e6c3 a900                       lda #0
   486  e6c5 8d287b                     sta TMS9918_CONSOLE_X
   487  e6c8 8d297b                     sta TMS9918_CONSOLE_Y
   488                          
   489                                  ; set up the registers
   490  e6cb a200                       ldx #0
   491                          
   492                          @regLoop
   493  e6cd bd71e5                             lda TMS_REGISTER_DATA, x
   494  e6d0 8d117f                             sta TMS9918_REG
   495                                          +tmsWaitReg
   496  e6d3 8a                                 txa
   497  e6d4 0980                               ora #$80
   498  e6d6 8d117f                             sta TMS9918_REG
   499                                          +tmsWaitReg
   500  e6d9 e8                                 inx
   501  e6da e008                               cpx #8
   502  e6dc d0ef                               bne @regLoop
   503                                  
   504  e6de 20fee5                     jsr tmsModeGraphicsI
   505                          
   506                                  ; load all data into VRAM
   507  e6e1 2043e7                     jsr tmsInitPattTable
   508                          
   509  e6e4 207de7                     jsr tmsInitTextTable
   510                                  
   511  e6e7 a917                       +tmsColorFgBg TMS_BLACK, TMS_CYAN
   512  e6e9 209be7                     jsr tmsInitEntireColorTable
   513                          
   514  e6ec 20b6e7                     jsr tmsInitSpriteTable
   515                          
   516  e6ef 28                         plp
   517                                  
   518  e6f0 60                         rts
   519                          
   520                          ; -----------------------------------------------------------------------------
   521                          ; _tmsSendPage: Send A for a kilobyte
   522                          ; -----------------------------------------------------------------------------
   523                          _tmsSendKb
   524  e6f1 20fae6                     jsr _tmsSendPage
   525  e6f4 20fae6                     jsr _tmsSendPage
   526  e6f7 20fae6                     jsr _tmsSendPage
   527                                  ; flow through
   528                                  
   529                          ; -----------------------------------------------------------------------------
   530                          ; _tmsSendPage: Send A for a whole page
   531                          ; -----------------------------------------------------------------------------
   532                          _tmsSendPage:
   533  e6fa a220                       ldx #32
   534                          _tmsSendX8:
   535  e6fc 8d107f2079e5               +tmsPut
   536  e702 8d107f2079e5               +tmsPut
   537  e708 8d107f2079e5               +tmsPut
   538  e70e 8d107f2079e5               +tmsPut
   539  e714 8d107f2079e5               +tmsPut
   540  e71a 8d107f2079e5               +tmsPut
   541  e720 8d107f2079e5               +tmsPut
   542  e726 8d107f2079e5               +tmsPut
   543  e72c ca                         dex
   544  e72d d0cd                       bne _tmsSendX8
   545  e72f 60                         rts
   546                          
   547                          ; -----------------------------------------------------------------------------
   548                          ; _tmsSendEmptyPage: Send an empty page of data
   549                          ; -----------------------------------------------------------------------------
   550                          _tmsSendEmptyPage:
   551  e730 a900                       lda #0
   552  e732 f0c6                       beq _tmsSendPage ; rts in here
   553                          
   554                          ; -----------------------------------------------------------------------------
   555                          ; tmsSendBytes: Send bytes to the TMS (up to 1 page)
   556                          ; -----------------------------------------------------------------------------
   557                          ; Inputs:
   558                          ;   TMS_TMP_ADDRESS:    Holds source address
   559                          ;   X:                  Number of bytes (1 to 256)
   560                          ; -----------------------------------------------------------------------------
   561                          tmsSendBytes:
   562  e734 a000                       ldy #0
   563                          -
   564  e736 b124                       lda (TMS_TMP_ADDRESS), Y
   565  e738 8d107f2079e5               +tmsPut
   566  e73e c8                         iny
   567  e73f ca                         dex
   568  e740 d0f4                       bne -
   569  e742 60                         rts
   570                          
   571                          ; -----------------------------------------------------------------------------
   572                          ; tmsInitPattTable: Initialise the pattern table
   573                          ; -----------------------------------------------------------------------------
   574                          tmsInitPattTable:
   575                                  
   576                          
   577                                  ; pattern table
   578  e743 0878a9008d117fa9...        +tmsSetAddrPattTable
   579                          
   580                                  ; (0 - 31) all empty
   581  e750 2030e7                     jsr _tmsSendEmptyPage
   582                          
   583  e753 a9718524a9e28525...        +tmsSendData TMS_FONT_DATA, $300
   584                          
   585                                  ; (128 - 159) all empty
   586  e770 2030e7                     jsr _tmsSendEmptyPage
   587                          
   588                                  ; (160 - 191) all empty
   589  e773 2030e7                     jsr _tmsSendEmptyPage
   590                          
   591                                  ; (192 - 223) all empty
   592  e776 2030e7                     jsr _tmsSendEmptyPage
   593                          
   594                                  ; (224 - 255) all empty
   595  e779 2030e7                     jsr _tmsSendEmptyPage
   596                          
   597                                  
   598                          
   599  e77c 60                         rts
   600                          
   601                          ; -----------------------------------------------------------------------------
   602                          ; tmsInitTextTable: Initialise the text (tilemap) table
   603                          ; -----------------------------------------------------------------------------
   604                          tmsInitTextTable:
   605                                  
   606                          
   607                                  ; text table table
   608  e77d 0878a9008d117fa9...        +tmsSetAddrNameTable
   609                          
   610                          
   611  e78a 18                         clc
   612  e78b ad2a7b                     lda TMS9918_CONSOLE_SIZE_X
   613  e78e 6d2a7b                     adc TMS9918_CONSOLE_SIZE_X
   614  e791 6d2a7b                     adc TMS9918_CONSOLE_SIZE_X
   615  e794 aa                         tax
   616  e795 a900                       lda #0
   617  e797 20fce6                     jsr _tmsSendX8
   618                          
   619  e79a 60                         rts
   620                          
   621                          
   622                          ; -----------------------------------------------------------------------------
   623                          ; tmsInitEntireColorTable: Initialise the full color table
   624                          ; -----------------------------------------------------------------------------
   625                          ; Inputs:
   626                          ;   A: Color (fg/bg) to initialise
   627                          
   628                          tmsInitEntireColorTable:
   629  e79b a220                       ldx #32
   630                          
   631                          ; tmsInitColorTable: Initialise the color table
   632                          
   633                          ; Inputs:
   634                          ;   A: Color (fg/bg) to initialise
   635                          ;   X: Number of elements to initialise (1 to 32)
   636                          ; -----------------------------------------------------------------------------
   637                          tmsInitColorTable:
   638                                  
   639  e79d 48                         pha
   640                          
   641                                  ; color table
   642  e79e 0878a9008d117fa9...        +tmsSetAddrColorTable
   643                          
   644  e7ab 68                         pla
   645                          -
   646  e7ac 8d107f2079e5               +tmsPut
   647  e7b2 ca                         dex
   648  e7b3 d0f7                       bne -
   649                          
   650  e7b5 60                         rts
   651                          
   652                          ; -----------------------------------------------------------------------------
   653                          ; tmsInitSpriteTable: Initialise the sprite table
   654                          ; -----------------------------------------------------------------------------
   655                          tmsInitSpriteTable:
   656                                  
   657                          
   658                                  ; sprites table
   659  e7b6 0878a9008d117fa9...        +tmsSetAddrSpriteAttrTable
   660                          
   661  e7c3 a220                       ldx #32
   662                          -
   663                                  ; Vertical position
   664  e7c5 a9d08d107f2079e5           +tmsPut $D0        ; 208 ($D0) stops processing of sprites
   665  e7cd a9008d107f2079e5           +tmsPut $00        ; Horizontal position
   666                          
   667                                  ; Index (A still 0)
   668  e7d5 8d107f2079e5               +tmsPut
   669                                  ; Early Clock / Color  (A still 0)
   670  e7db 8d107f2079e5               +tmsPut
   671  e7e1 ca                         dex
   672  e7e2 d0e1                       bne -
   673                          
   674                                  
   675                          
   676  e7e4 60                         rts
   677                          
   678                          ; -----------------------------------------------------------------------------
   679                          ; tmsTileXyAtPixelXy: Return tile position at pixel position
   680                          ; -----------------------------------------------------------------------------
   681                          ; Inputs:
   682                          ;  X: Pixel position X
   683                          ;  Y: Pixel position Y
   684                          ; Outputs:
   685                          ;  X: Tile position X
   686                          ;  Y: Tile position Y
   687                          ; -----------------------------------------------------------------------------
   688                          tmsTileXyAtPixelXy:
   689  e7e5 48                         pha
   690  e7e6 8a                         txa
   691  e7e7 4a4a4a                     +div8
   692  e7ea aa                         tax
   693                          
   694  e7eb 98                         tya
   695  e7ec 4a4a4a                     +div8
   696  e7ef a8                         tay
   697  e7f0 68                         pla
   698  e7f1 60                         rts
   699                          
   700                          ; -----------------------------------------------------------------------------
   701                          ; tmsHex8: Output an 8-bit byte as hexadecimal
   702                          ; -----------------------------------------------------------------------------
   703                          ; Inputs:
   704                          ;  A: The value to output
   705                          ; -----------------------------------------------------------------------------
   706                          tmsHex8:
   707  e7f2 48                 	pha
   708  e7f3 4a4a4a4a                   +lsr4
   709  e7f7 aa                 	tax
   710  e7f8 bd0fe8             	lda .H2, x
   711  e7fb 8d107f2079e5               +tmsPut 
   712  e801 68                 	pla
   713  e802 290f               	and #$0f
   714  e804 aa                 	tax
   715  e805 bd0fe8             	lda .H2, x
   716  e808 8d107f2079e5               +tmsPut 
   717                                  
   718  e80e 60                 	rts
   719                          
   720  e80f 3031323334353637....H2 !text "0123456789abcdef"
   721                          
   722                          
   723                          ; -----------------------------------------------------------------------------
   724                          ; tmsSetSpriteTmpAddress: Set TMS_TMP_ADDRESS for a given sprite attributes
   725                          ; -----------------------------------------------------------------------------
   726                          ; Inputs:
   727                          ;   A: sprite index (0-31)
   728                          ; -----------------------------------------------------------------------------
   729                          tmsSetSpriteTmpAddress:
   730  e81f 0a                         asl
   731  e820 0a                         asl
   732  e821 8524                       sta TMS_TMP_ADDRESS
   733                          
   734  e823 a93b                       lda #>TMS_VRAM_SPRITE_ATTR_ADDRESS
   735  e825 8525                       sta TMS_TMP_ADDRESS + 1
   736  e827 60                         rts
   737                          
   738                          ; -----------------------------------------------------------------------------
   739                          ; tmsSetPosTmpAddress: Set TMS_TMP_ADDRESS for a given text position
   740                          ; -----------------------------------------------------------------------------
   741                          ; Inputs:
   742                          ;   X: X position (0 - 31)
   743                          ;   Y: Y position (0 - 23)
   744                          ; -----------------------------------------------------------------------------
   745                          tmsSetPosTmpAddress:
   746  e828 a938                       lda #>TMS_VRAM_NAME_ADDRESS
   747  e82a 8525                       sta TMS_TMP_ADDRESS + 1
   748                                  
   749                                  ; this can be better. rotate and save, perhaps
   750                          
   751  e82c 98                         tya
   752  e82d 4a4a4a                     +div8
   753  e830 18                         clc
   754  e831 6525                       adc TMS_TMP_ADDRESS + 1
   755  e833 8525                       sta TMS_TMP_ADDRESS + 1
   756  e835 98                         tya
   757  e836 2907                       and #$07
   758  e838 0a0a0a0a0a                 +mul32
   759  e83d 8524                       sta TMS_TMP_ADDRESS
   760  e83f 8a                         txa
   761  e840 0524                       ora TMS_TMP_ADDRESS
   762  e842 8524                       sta TMS_TMP_ADDRESS
   763  e844 60                         rts
   764                          
   765                          ; -----------------------------------------------------------------------------
   766                          ; tmsSetPosTmpAddressText: Set TMS_TMP_ADDRESS for a given text position
   767                          ; -----------------------------------------------------------------------------
   768                          ; Inputs:
   769                          ;   X: X position (0 - 39)
   770                          ;   Y: Y position (0 - 23)
   771                          ; -----------------------------------------------------------------------------
   772                          tmsSetPosTmpAddressText:
   773  e845 a938                       lda #>TMS_VRAM_NAME_ADDRESS
   774  e847 8525                       sta TMS_TMP_ADDRESS + 1
   775  e849 a900                       lda #<TMS_VRAM_NAME_ADDRESS
   776  e84b 8524                       sta TMS_TMP_ADDRESS
   777                          
   778                          .tmsSetPosTmpAddressTextLoop
   779  e84d c000                       cpy #0
   780  e84f f00e                       beq ++
   781  e851 18                         clc
   782  e852 a524                       lda TMS_TMP_ADDRESS
   783  e854 6928                       adc #40
   784  e856 8524                       sta TMS_TMP_ADDRESS
   785  e858 9002                       bcc +
   786  e85a e625                       inc TMS_TMP_ADDRESS + 1
   787                          +
   788  e85c 88                         dey
   789  e85d d0ee                       bne .tmsSetPosTmpAddressTextLoop
   790                          ++
   791  e85f 18                         clc
   792  e860 8a                         txa
   793  e861 6524                       adc TMS_TMP_ADDRESS
   794  e863 8524                       sta TMS_TMP_ADDRESS
   795  e865 9002                       bcc +
   796  e867 e625                       inc TMS_TMP_ADDRESS + 1
   797                          +
   798  e869 60                         rts
   799                          
   800                          
   801                          tmsConsoleScrollLine:
   802  e86a a900                       lda #0
   803  e86c 8d2f7b                     sta .TMS9918_TMP_WRITE_ROW
   804  e86f a901                       lda #1
   805  e871 8d2e7b                     sta .TMS9918_TMP_READ_ROW
   806                          .nextRow:
   807                          
   808  e874 ac2e7b                     ldy .TMS9918_TMP_READ_ROW
   809  e877 a200                       ldx #0
   810  e879 a928                       lda #40
   811  e87b cd2a7b                     cmp TMS9918_CONSOLE_SIZE_X
   812  e87e f006                       beq +
   813  e880 2028e8                     jsr tmsSetPosTmpAddress
   814  e883 4c89e8                     jmp ++
   815                          +
   816  e886 2045e8                     jsr tmsSetPosTmpAddressText
   817                          ++
   818  e889 20a2e5                     jsr tmsSetAddressRead
   819                          
   820  e88c 20bae8                     jsr .tmsBufferIn
   821                          
   822  e88f a200                       ldx #0
   823  e891 ac2f7b                     ldy .TMS9918_TMP_WRITE_ROW
   824  e894 a200                       ldx #0
   825  e896 a928                       lda #40
   826  e898 cd2a7b                     cmp TMS9918_CONSOLE_SIZE_X
   827  e89b f006                       beq +
   828  e89d 2028e8                     jsr tmsSetPosTmpAddress
   829  e8a0 4ca6e8                     jmp ++
   830                          +
   831  e8a3 2045e8                     jsr tmsSetPosTmpAddressText
   832                          ++
   833  e8a6 2092e5                     jsr tmsSetAddressWrite
   834                          
   835  e8a9 20cce8                     jsr .tmsBufferOut
   836                          
   837                          
   838  e8ac ee2f7b                     inc .TMS9918_TMP_WRITE_ROW
   839  e8af ee2e7b                     inc .TMS9918_TMP_READ_ROW
   840                          
   841  e8b2 ad2e7b                     lda .TMS9918_TMP_READ_ROW
   842  e8b5 c919                       cmp #25
   843                          
   844  e8b7 d0bb                       bne .nextRow
   845                          
   846                          
   847                                  ; copy to buffer 32 bytes at a time, write back  24 rows for gfx, 30 "rows" for text
   848  e8b9 60                         rts
   849                          
   850                          .tmsBufferIn:
   851  e8ba a200                       ldx #0
   852                          -
   853  e8bc ad107f2079e5               +tmsGet
   854  e8c2 9d307b                     sta TMS9918_TMP_BUFFER, x
   855  e8c5 e8                         inx
   856  e8c6 ec2a7b                     cpx TMS9918_CONSOLE_SIZE_X
   857  e8c9 d0f1                       bne -
   858  e8cb 60                         rts
   859                          
   860                          .tmsBufferOut:
   861  e8cc a200                       ldx #0
   862                          
   863                          -
   864  e8ce bd307b                     lda TMS9918_TMP_BUFFER, x
   865  e8d1 8d107f2079e5               +tmsPut
   866  e8d7 e8                         inx
   867  e8d8 ec2a7b                     cpx TMS9918_CONSOLE_SIZE_X
   868  e8db d0f1                       bne -
   869  e8dd 60                         rts
   870                          
   871                          ; -----------------------------------------------------------------------------
   872                          ; tmsIncPosConsole: Increment console position
   873                          ; -----------------------------------------------------------------------------
   874                          tmsIncPosConsole:
   875  e8de ee287b                     inc TMS9918_CONSOLE_X
   876  e8e1 ad287b                     lda TMS9918_CONSOLE_X
   877  e8e4 cd2a7b                     cmp TMS9918_CONSOLE_SIZE_X
   878  e8e7 d008                       bne +
   879  e8e9 a900                       lda #0
   880  e8eb 8d287b                     sta TMS9918_CONSOLE_X
   881  e8ee ee297b                     inc TMS9918_CONSOLE_Y
   882                          +
   883  e8f1 ad297b                     lda TMS9918_CONSOLE_Y
   884  e8f4 c918                       cmp #24
   885  e8f6 9006                       bcc +
   886  e8f8 ce297b                     dec TMS9918_CONSOLE_Y
   887  e8fb 4c6ae8                     jmp tmsConsoleScrollLine
   888                          +
   889  e8fe 60                         rts
   890                          
   891                          
   892                          ; -----------------------------------------------------------------------------
   893                          ; tmsDecPosConsole: Increment console position
   894                          ; -----------------------------------------------------------------------------
   895                          tmsDecPosConsole:
   896  e8ff ce287b                     dec TMS9918_CONSOLE_X
   897  e902 1017                       bpl ++
   898  e904 ad2a7b                     lda TMS9918_CONSOLE_SIZE_X
   899  e907 8d287b                     sta TMS9918_CONSOLE_X
   900  e90a ce287b                     dec TMS9918_CONSOLE_X
   901  e90d a900                       lda #0
   902  e90f cd297b                     cmp TMS9918_CONSOLE_Y
   903  e912 d004                       bne +
   904  e914 8d287b                     sta TMS9918_CONSOLE_X
   905  e917 60                         rts        
   906                          +
   907  e918 ce297b                     dec TMS9918_CONSOLE_Y
   908                          ++
   909  e91b 60                         rts
   910                          
   911                          ; -----------------------------------------------------------------------------
   912                          ; tmsConsoleCls: Clear the screen and reset the console location
   913                          ; -----------------------------------------------------------------------------
   914                          tmsConsoleCls:
   915  e91c 207de7                     jsr tmsInitTextTable
   916                          
   917                                  ; flow through
   918                          
   919                          ; -----------------------------------------------------------------------------
   920                          ; tmsConsoleHome: Set cursor position top left
   921                          ; -----------------------------------------------------------------------------
   922                          tmsConsoleHome:
   923  e91f 9c287b                     stz TMS9918_CONSOLE_X
   924  e922 9c297b                     stz TMS9918_CONSOLE_Y
   925                          
   926                                  ; flow through
   927                          
   928                          ; -----------------------------------------------------------------------------
   929                          ; tmsSetPosConsole: Set cursor position to console position
   930                          ; -----------------------------------------------------------------------------
   931                          tmsSetPosConsole:
   932  e925 ae287b                     ldx TMS9918_CONSOLE_X
   933  e928 ac297b                     ldy TMS9918_CONSOLE_Y
   934                          
   935                                  ; flow through
   936                          
   937                          ; -----------------------------------------------------------------------------
   938                          ; tmsSetPosWrite: Set cursor position
   939                          ; -----------------------------------------------------------------------------
   940                          ; Inputs:
   941                          ;   X: X position (0 - 31)
   942                          ;   Y: Y position (0 - 23)
   943                          ; -----------------------------------------------------------------------------
   944                          tmsSetPosWrite:
   945  e92b a910                       lda #TMS_R1_MODE_TEXT
   946  e92d 2c277b                     bit .TMS9918_REG1_SHADOW_ADDR
   947  e930 d006                       bne tmsSetPosWriteText
   948  e932 2028e8                     jsr tmsSetPosTmpAddress
   949  e935 4c92e5                     jmp tmsSetAddressWrite
   950                          
   951                          ; -----------------------------------------------------------------------------
   952                          ; tmsSetPosWrite: Set cursor position (text mode)
   953                          ; -----------------------------------------------------------------------------
   954                          ; Inputs:
   955                          ;   X: X position (0 - 39)
   956                          ;   Y: Y position (0 - 23)
   957                          ; -----------------------------------------------------------------------------
   958                          tmsSetPosWriteText:
   959  e938 2045e8                     jsr tmsSetPosTmpAddressText
   960  e93b 4c92e5                     jmp tmsSetAddressWrite
   961                          
   962                          ; -----------------------------------------------------------------------------
   963                          ; tmsSetPosRead: Set cursor position to read from
   964                          ; -----------------------------------------------------------------------------
   965                          ; Inputs:
   966                          ;   X: X position (0 - 31)
   967                          ;   Y: Y position (0 - 23)
   968                          ; -----------------------------------------------------------------------------
   969                          tmsSetPosRead:
   970  e93e 2028e8                     jsr tmsSetPosTmpAddress
   971  e941 4ca2e5                     jmp tmsSetAddressRead
   972                          ; -----------------------------------------------------------------------------
   973                          ; tmsSetColorTmpAddressII: Set TMS_TMP_ADDRESS for a given mode II color definition
   974                          ; -----------------------------------------------------------------------------
   975                          ; Inputs:
   976                          ;   X: X position
   977                          ;   Y: Y position
   978                          ; -----------------------------------------------------------------------------
   979                          tmsSetColorTmpAddressII:
   980  e944 a900                       lda #>TMS_VRAM_COLOR_ADDRESS
   981  e946 8002                       bra .addXYToAddress
   982                          
   983                          ; -----------------------------------------------------------------------------
   984                          ; tmsSetPatternTmpAddress: Set TMS_TMP_ADDRESS for a given mode II pattern definition
   985                          ; -----------------------------------------------------------------------------
   986                          ; Inputs:
   987                          ;   X: X position
   988                          ;   Y: Y position
   989                          ; -----------------------------------------------------------------------------
   990                          tmsSetPatternTmpAddressII:
   991  e948 a920                       lda #>TMS_VRAM_PATT_ADDRESS
   992                          
   993                          .addXYToAddress:
   994  e94a 8525                       sta TMS_TMP_ADDRESS + 1
   995                          
   996  e94c 98                         tya
   997  e94d 4a4a4a                     +lsr3
   998  e950 0525                       ora TMS_TMP_ADDRESS + 1
   999  e952 8525                       sta TMS_TMP_ADDRESS + 1
  1000                          
  1001  e954 8a                         txa
  1002  e955 29f8                       and #$f8
  1003  e957 8524                       sta TMS_TMP_ADDRESS
  1004                          
  1005  e959 98                         tya
  1006  e95a 2907                       and #$07
  1007  e95c 0524                       ora TMS_TMP_ADDRESS
  1008  e95e 8524                       sta TMS_TMP_ADDRESS
  1009                          
  1010  e960 60                         rts
  1011                          
  1012                          ; -----------------------------------------------------------------------------
  1013                          ; tmsSetPatternTmpAddress: Set TMS_TMP_ADDRESS for a given pattern definition
  1014                          ; -----------------------------------------------------------------------------
  1015                          ; Inputs:
  1016                          ;   A: Pattern number
  1017                          ;   Y: Y offset (row) in the pattern
  1018                          ; -----------------------------------------------------------------------------
  1019                          tmsSetPatternTmpAddressBank0:
  1020                          tmsSetPatternTmpAddress:
  1021  e961 48                         pha
  1022  e962 a920                       lda #>TMS_VRAM_PATT_ADDRESS
  1023  e964 8525                       sta TMS_TMP_ADDRESS + 1
  1024                                  
  1025  e966 68                         pla
  1026  e967 48                         pha
  1027                          
  1028  e968 4a4a4a4a4a                 +div32
  1029  e96d 18                         clc
  1030  e96e 6525                       adc TMS_TMP_ADDRESS + 1
  1031  e970 8525                       sta TMS_TMP_ADDRESS + 1
  1032  e972 68                         pla
  1033  e973 0a0a0a                     +mul8
  1034  e976 8524                       sta TMS_TMP_ADDRESS
  1035  e978 98                         tya
  1036  e979 0524                       ora TMS_TMP_ADDRESS
  1037  e97b 8524                       sta TMS_TMP_ADDRESS
  1038  e97d 60                         rts
  1039                          
  1040                          ; -----------------------------------------------------------------------------
  1041                          ; tmsSetPatternTmpAddressBank1: Set TMS_TMP_ADDRESS for a given pattern 
  1042                          ;                               definition in bank 1 (GFX II)
  1043                          ; -----------------------------------------------------------------------------
  1044                          ; Inputs:
  1045                          ;   A: Pattern number
  1046                          ;   Y: Y offset (row) in the pattern
  1047                          ; -----------------------------------------------------------------------------
  1048                          tmsSetPatternTmpAddressBank1:
  1049  e97e 2061e9                     jsr tmsSetPatternTmpAddress
  1050  e981 a525                       lda TMS_TMP_ADDRESS + 1
  1051  e983 18                         clc
  1052  e984 6908                       adc #8
  1053  e986 8525                       sta TMS_TMP_ADDRESS + 1
  1054  e988 60                         rts
  1055                          
  1056                          ; -----------------------------------------------------------------------------
  1057                          ; tmsSetPatternTmpAddressBank2: Set TMS_TMP_ADDRESS for a given pattern 
  1058                          ;                               definition in bank 2 (GFX II)
  1059                          ; -----------------------------------------------------------------------------
  1060                          ; Inputs:
  1061                          ;   A: Pattern number
  1062                          ;   Y: Y offset (row) in the pattern
  1063                          ; -----------------------------------------------------------------------------
  1064                          tmsSetPatternTmpAddressBank2:
  1065  e989 2061e9                     jsr tmsSetPatternTmpAddress
  1066  e98c a525                       lda TMS_TMP_ADDRESS + 1
  1067  e98e 18                         clc
  1068  e98f 6910                       adc #16
  1069  e991 8525                       sta TMS_TMP_ADDRESS + 1
  1070  e993 60                         rts        
  1071                          
  1072                          ; -----------------------------------------------------------------------------
  1073                          ; tmsSetPatternWrite: Set pattern definition to write to
  1074                          ; -----------------------------------------------------------------------------
  1075                          ; Inputs:
  1076                          ;   A: Pattern number
  1077                          ;   Y: Y offset (row) in the pattern
  1078                          ; -----------------------------------------------------------------------------
  1079                          tmsSetPatternWrite:
  1080  e994 2061e9                     jsr tmsSetPatternTmpAddress
  1081  e997 4c92e5                     jmp tmsSetAddressWrite
  1082                          
  1083                          ; -----------------------------------------------------------------------------
  1084                          ; tmsSetPatternRead: Set pattern definition to read from
  1085                          ; -----------------------------------------------------------------------------
  1086                          ; Inputs:
  1087                          ;   A: Pattern number
  1088                          ;   Y: Y offset (row) in the pattern
  1089                          ; -----------------------------------------------------------------------------
  1090                          tmsSetPatternRead:
  1091  e99a 2061e9                     jsr tmsSetPatternTmpAddress
  1092  e99d 4ca2e5                     jmp tmsSetAddressRead
  1093                          
  1094                          
  1095                          ; -----------------------------------------------------------------------------
  1096                          ; tmsPrint: Print a null-terminated string
  1097                          ; -----------------------------------------------------------------------------
  1098                          ; Inputs:
  1099                          ;  STR_ADDR: Contains address of null-terminated string
  1100                          ; Prerequisites:
  1101                          ;  TMS address already set using +tmsSetAddressWrite
  1102                          ; -----------------------------------------------------------------------------
  1103                          tmsPrint:
  1104  e9a0 a000               	ldy #0
  1105                          -
  1106  e9a2 2079e5             	+tmsWaitData
  1107  e9a5 b132               	lda (STR_ADDR), y
  1108  e9a7 f009               	beq +
  1109  e9a9 8d107f2079e5               +tmsPut 
  1110  e9af c8                 	iny
  1111  e9b0 d0f0               	bne -
  1112                          +
  1113  e9b2 60                 	rts
  1114                          
  1115                          
  1116                          ; -----------------------------------------------------------------------------
  1117                          ; tmsConsoleOut: Print a null-terminated string
  1118                          ; -----------------------------------------------------------------------------
  1119                          ; Inputs:
  1120                          ;  'A': Character to output to console
  1121                          ; -----------------------------------------------------------------------------
  1122                          tmsConsoleOut:
  1123  e9b3 8e2c7b                     stx .TMS9918_REGX
  1124  e9b6 8c2d7b                     sty .TMS9918_REGY
  1125  e9b9 08                         php
  1126  e9ba 78                         sei
  1127  e9bb c90d                       cmp #$0d ; enter
  1128  e9bd f021                       beq .tmsConsoleNewline
  1129  e9bf c90a                       cmp #$0a ; enter
  1130  e9c1 f01d                       beq .tmsConsoleNewline
  1131                          
  1132  e9c3 c908                       cmp #$08 ; backspace
  1133  e9c5 f01e                       beq .tmsConsoleBackspace
  1134                          
  1135  e9c7 48                         pha
  1136  e9c8 2025e9                     jsr tmsSetPosConsole
  1137  e9cb 68                         pla
  1138  e9cc 8d107f2079e5               +tmsPut
  1139  e9d2 20dee8                     jsr tmsIncPosConsole
  1140  e9d5 ee2b7b                     inc TMS9918_CONSOLE_LINE_LEN
  1141                          
  1142                          .endConsoleOut
  1143  e9d8 28                         plp
  1144  e9d9 ac2d7b                     ldy .TMS9918_REGY
  1145  e9dc ae2c7b                     ldx .TMS9918_REGX
  1146  e9df 60                         rts
  1147                          
  1148                          .tmsConsoleNewline
  1149  e9e0 20fae9                     jsr tmsConsoleNewline
  1150  e9e3 80f3                       bra .endConsoleOut
  1151                          
  1152                          .tmsConsoleBackspace
  1153  e9e5 2021ea                     jsr tmsConsoleBackspace
  1154  e9e8 80ee                       bra .endConsoleOut
  1155                          
  1156                          
  1157                          ; -----------------------------------------------------------------------------
  1158                          ; tmsConsolePrint: Print a null-terminated string (console mode)
  1159                          ; -----------------------------------------------------------------------------
  1160                          ; Inputs:
  1161                          ;  STR_ADDR: Contains address of null-terminated string
  1162                          ; Prerequisites:
  1163                          ;  TMS address already set using +tmsSetAddressWrite
  1164                          ; -----------------------------------------------------------------------------
  1165                          tmsConsolePrint:
  1166  e9ea a000               	ldy #0
  1167                          -
  1168  e9ec 2079e5             	+tmsWaitData
  1169  e9ef b132               	lda (STR_ADDR), y
  1170  e9f1 f006               	beq +
  1171  e9f3 20b3e9                     jsr tmsConsoleOut
  1172  e9f6 c8                 	iny
  1173  e9f7 d0f3               	bne -
  1174                          +
  1175  e9f9 60                 	rts
  1176                          
  1177                          ; -----------------------------------------------------------------------------
  1178                          ; tmsConsoleNewline: Output a newline to the console (scrolls if on last line)
  1179                          ; -----------------------------------------------------------------------------
  1180                          tmsConsoleNewline:
  1181  e9fa 2025e9                     jsr tmsSetPosConsole
  1182  e9fd a9208d107f2079e5           +tmsPut ' '
  1183  ea05 ad287b                     lda TMS9918_CONSOLE_X
  1184  ea08 d008                       bne +
  1185  ea0a ad2b7b                     lda TMS9918_CONSOLE_LINE_LEN
  1186  ea0d f003                       beq +
  1187  ea0f 60                         rts
  1188  ea10 f000                       beq +
  1189                          +
  1190  ea12 ad2a7b                     lda TMS9918_CONSOLE_SIZE_X
  1191  ea15 8d287b                     sta TMS9918_CONSOLE_X
  1192  ea18 ce287b                     dec TMS9918_CONSOLE_X
  1193  ea1b 9c2b7b                     stz TMS9918_CONSOLE_LINE_LEN
  1194  ea1e 4cdee8                     jmp tmsIncPosConsole
  1195                          
  1196                          
  1197                          ; -----------------------------------------------------------------------------
  1198                          ; tmsConsoleBackspace: Output a backspace to the console
  1199                          ; -----------------------------------------------------------------------------
  1200                          tmsConsoleBackspace:
  1201  ea21 20ffe8                     jsr tmsDecPosConsole
  1202  ea24 a92020b3e9                 +tmsConsoleOut ' '
  1203  ea29 a9208d107f2079e5           +tmsPut ' '
  1204  ea31 ce2b7b                     dec TMS9918_CONSOLE_LINE_LEN
  1205  ea34 4cffe8                     jmp tmsDecPosConsole

; ******** Source: kernel.asm
   158                          
   159                          }
   160                          
   161                          !ifndef HBC56_DISABLE_SFXMAN {
   162                                  !src "sfx/sfxman.asm"
   163                          }
   164                          
   165                          !ifndef HBC56_DISABLE_LCD {
   166                                  !ifndef LCD_MODEL { LCD_MODEL = 12864 }
   167                                  !src "gfx/bitmap.asm"
   168                                  !src "lcd/lcd.asm"
   169                                  !src "gfx/tilemap.asm"
   170                          }
   171                          
   172                          !ifndef HBC56_DISABLE_UART {

; ******** Source: ../lib\ser\uart.asm
     1                          ; 6502 - MC68B50 UART
     2                          ;
     3                          ; Copyright (c) 2021 Troy Schrapel
     4                          ;
     5                          ; This code is licensed under the MIT license
     6                          ;
     7                          ; https://github.com/visrealm/hbc-56
     8                          ;
     9                          
    10                          HAVE_UART = 1
    11                          
    12                          ; -------------------------
    13                          ; Constants
    14                          ; -------------------------
    15                          !ifndef UART_IO_PORT { UART_IO_PORT = $20
    16                                  !warn "UART_IO_PORT not provided. Defaulting to ", UART_IO_PORT
    17                          }
    18                          
    19                          !ifndef UART_ZP_START { UART_ZP_START = $40
    20                                  !warn "UART_ZP_START not provided. Defaulting to ", UART_ZP_START
    21                          }
    22                          
    23                          !ifndef UART_RAM_START { UART_RAM_START = $7c80
    24                                  !warn "UART_RAM_START not provided. Defaulting to ", UART_RAM_START
    25                          }
    26                          
    27                          
    28                          ; -----------------------------------------------------------------------------
    29                          ; Zero page
    30                          ; -----------------------------------------------------------------------------
    31                          UART_RX_BUFFER_HEAD  = UART_ZP_START            ; head of circular buffer
    32                          UART_RX_BUFFER_TAIL  = UART_ZP_START + 1        ; tail of circular buffer
    33                          UART_RX_BUFFER_BYTES = UART_ZP_START + 2        ; bytes in buffer
    34                          UART_RX_FLAGS        = UART_ZP_START + 3        ; flags
    35                          @UART_ZP_END         = UART_ZP_START + 4
    36                          
    37                          !if (.UART_ZP_SIZE < @UART_ZP_END - UART_ZP_START) {
    38                                  !error "UART ZP allocation insufficient. Allocated: ", .UART_ZP_SIZE, " Require: ", (@UART_ZP_END - UART_ZP_START)
    39                          }
    40                          
    41                          ; -----------------------------------------------------------------------------
    42                          ; High RAM
    43                          ; -----------------------------------------------------------------------------
    44                          UART_RX_BUFFER       = UART_RAM_START
    45                          UART_RX_BUFFER_SIZE  = $100
    46                          
    47                          @UART_RAM_END        = UART_RAM_START + UART_RX_BUFFER_SIZE
    48                          
    49                          !if (.UART_RAM_SIZE < @UART_RAM_END - UART_RAM_START) {
    50                                  !error "UART RAM allocation insufficient. Allocated: ", .UART_RAM_SIZE, " Require: ", (@UART_RAM_END - UART_RAM_START)
    51                          }
    52                          
    53                          
    54                          ; IO Ports
    55                          UART_REG      = IO_PORT_BASE_ADDRESS | UART_IO_PORT
    56                          UART_DATA     = IO_PORT_BASE_ADDRESS | UART_IO_PORT | $01
    57                          
    58                          ; -----------------------------------------------------------------------------
    59                          ; Constants
    60                          ; -----------------------------------------------------------------------------
    61                          UART_CTL_MASTER_RESET       = %00000011
    62                          UART_CTL_CLOCK_DIV_16       = %00000001
    63                          UART_CTL_CLOCK_DIV_64       = %00000010
    64                          UART_CTL_WORD_7BIT_EPB_2SB  = %00000000
    65                          UART_CTL_WORD_7BIT_OPB_2SB  = %00000100
    66                          UART_CTL_WORD_7BIT_EPB_1SB  = %00001000
    67                          UART_CTL_WORD_7BIT_OPB_1SB  = %00001100
    68                          UART_CTL_WORD_8BIT_2SB      = %00010000
    69                          UART_CTL_WORD_8BIT_1SB      = %00010100
    70                          UART_CTL_WORD_8BIT_EPAR_1SB = %00011000
    71                          UART_CTL_WORD_8BIT_OPAR_1SB = %00011100
    72                          UART_CTL_RX_INT_ENABLE      = %10000000
    73                          
    74                          UART_STATUS_RX_REG_FULL     = %00000001
    75                          UART_STATUS_TX_REG_EMPTY    = %00000010
    76                          UART_STATUS_CARRIER_DETECT  = %00000100
    77                          UART_STATUS_CLEAR_TO_SEND   = %00001000
    78                          UART_STATUS_FRAMING_ERROR   = %00010000
    79                          UART_STATUS_RCVR_OVERRUN    = %00100000
    80                          UART_STATUS_PARITY_ERROR    = %01000000
    81                          UART_STATUS_IRQ             = %10000000
    82                          
    83                          UART_FLOWCTRL_XON           = $11
    84                          UART_FLOWCTRL_XOFF          = $13
    85                          
    86                          UART_RX_BUFFER_XOFF_SIZE    = 192
    87                          UART_RX_BUFFER_XON_SIZE     = 4
    88                          
    89                          
    90                          ; -----------------------------------------------------------------------------
    91                          ; uartInit: Initialise the UART
    92                          ; -----------------------------------------------------------------------------
    93                          uartInit:
    94  ea37 a900                       lda #0
    95  ea39 8528                       sta UART_RX_BUFFER_HEAD
    96  ea3b 8529                       sta UART_RX_BUFFER_TAIL
    97  ea3d 852a                       sta UART_RX_BUFFER_BYTES
    98  ea3f 852b                       sta UART_RX_FLAGS
    99                          
   100  ea41 a903                       lda #UART_CTL_MASTER_RESET
   101  ea43 8d207f                     sta UART_REG
   102  ea46 ea                         nop
   103  ea47 ea                         nop
   104                          
   105  ea48 a992                       lda #(UART_CTL_CLOCK_DIV_64 | UART_CTL_WORD_8BIT_2SB | UART_CTL_RX_INT_ENABLE)
   106  ea4a 8d207f                     sta UART_REG
   107  ea4d ea                         nop
   108  ea4e ea                         nop
   109                          
   110  ea4f 2077ea                     jsr uartFlowCtrlXon
   111                          
   112  ea52 60                         rts
   113                          
   114                          ; -----------------------------------------------------------------------------
   115                          ; uartIrq: Standard UART IRQ handler
   116                          ; -----------------------------------------------------------------------------
   117                          uartIrq:
   118  ea53 a901                       lda #UART_STATUS_RX_REG_FULL
   119  ea55 2c207f                     bit UART_REG
   120  ea58 f01c                       beq @endFlowControlCheck
   121  ea5a ea                         nop
   122  ea5b ea                         nop
   123                          
   124  ea5c da                         phx
   125  ea5d a628                       ldx UART_RX_BUFFER_HEAD
   126  ea5f ad217f                     lda UART_DATA
   127  ea62 9d587b                     sta UART_RX_BUFFER, x
   128  ea65 e628                       inc UART_RX_BUFFER_HEAD
   129  ea67 e62a                       inc UART_RX_BUFFER_BYTES
   130  ea69 fa                         plx
   131                          
   132                          @flowControlCheck
   133                                  ; check flow control
   134  ea6a ff2b09                     bbs7 UART_RX_FLAGS, @endFlowControlCheck    ; if already xoff, just leave
   135  ea6d a9c0                       lda #UART_RX_BUFFER_XOFF_SIZE               ; otherwise, should we ask for xoff?
   136  ea6f c52a                       cmp UART_RX_BUFFER_BYTES
   137  ea71 b003                       bcs @endFlowControlCheck                    ; all good
   138  ea73 2082ea                     jsr uartFlowCtrlXoff                        ; stop please.
   139                          
   140                          @endFlowControlCheck
   141  ea76 60                         rts
   142                          
   143                          ; -----------------------------------------------------------------------------
   144                          ; uartFlowCtrlXon: Allow client to send data
   145                          ; -----------------------------------------------------------------------------
   146                          uartFlowCtrlXon:
   147  ea77 772b                       rmb7 UART_RX_FLAGS        
   148  ea79 a911                       lda #UART_FLOWCTRL_XON
   149  ea7b ea                         nop
   150  ea7c ea                         nop
   151  ea7d ea                         nop
   152  ea7e ea                         nop
   153  ea7f 4cb8ea                     jmp uartOut
   154                          
   155                          ; -----------------------------------------------------------------------------
   156                          ; uartFlowCtrlXoff: Stop client to sending data
   157                          ; -----------------------------------------------------------------------------
   158                          uartFlowCtrlXoff
   159  ea82 f72b                       smb7 UART_RX_FLAGS
   160  ea84 a913                       lda #UART_FLOWCTRL_XOFF
   161  ea86 ea                         nop
   162  ea87 ea                         nop
   163  ea88 4cbeea                     jmp uartOutNoBsCheck
   164                          
   165                          ; -----------------------------------------------------------------------------
   166                          ; uartInWait: Input a byte from the UART (wait forever)
   167                          ; -----------------------------------------------------------------------------
   168                          ; Outputs:
   169                          ;   A: Value of the buffer
   170                          ; -----------------------------------------------------------------------------
   171                          uartInWait:
   172  ea8b a528                       lda UART_RX_BUFFER_HEAD
   173  ea8d c529                       cmp UART_RX_BUFFER_TAIL
   174  ea8f f0fa                       beq uartInWait
   175  ea91 08                         php
   176  ea92 78                         sei
   177  ea93 8008                       bra .uartIncheckFlowControl
   178                          
   179                          ; -----------------------------------------------------------------------------
   180                          ; uartInNoWait: Input a byte from the UART (don't wait)
   181                          ; -----------------------------------------------------------------------------
   182                          ; Outputs:
   183                          ;   A: Value of the buffer
   184                          ;   C: Set if a byte is read
   185                          ; -----------------------------------------------------------------------------
   186                          uartInNoWait:
   187  ea95 08                         php
   188  ea96 78                         sei
   189  ea97 a528                       lda UART_RX_BUFFER_HEAD
   190  ea99 c529                       cmp UART_RX_BUFFER_TAIL
   191  ea9b f018                       beq @noData
   192                          
   193                          .uartIncheckFlowControl
   194                                  ; check flow control
   195  ea9d 7f2b09                     bbr7 UART_RX_FLAGS, @readUartValue  ; if already xon, just exit again
   196  eaa0 a904                       lda #UART_RX_BUFFER_XON_SIZE        ; otherwise, should we ask for xon?
   197  eaa2 c52a                       cmp UART_RX_BUFFER_BYTES
   198  eaa4 9003                       bcc @readUartValue                  ; all good
   199  eaa6 2077ea                     jsr uartFlowCtrlXon                 ; continue sending please.
   200                          
   201                          @readUartValue
   202  eaa9 a629                       ldx UART_RX_BUFFER_TAIL
   203  eaab bd587b                     lda UART_RX_BUFFER, x
   204  eaae e629                       inc UART_RX_BUFFER_TAIL
   205  eab0 c62a                       dec UART_RX_BUFFER_BYTES
   206  eab2 28                         plp
   207  eab3 38                         sec
   208  eab4 60                         rts
   209                          @noData
   210  eab5 28                         plp
   211  eab6 18                         clc
   212  eab7 60                         rts
   213                          
   214                          
   215                          ; -----------------------------------------------------------------------------
   216                          ; uartOut: Output a byte to the UART
   217                          ; -----------------------------------------------------------------------------
   218                          ; Inputs:
   219                          ;   A: Value to output
   220                          ; -----------------------------------------------------------------------------
   221                          uartOut:
   222  eab8 c908                       cmp #$08        ; bs
   223  eaba d002                       bne uartOutNoBsCheck
   224  eabc a97f                       lda #$7f        ; del
   225                          uartOutNoBsCheck:
   226  eabe 48                         pha
   227  eabf a902                       lda #UART_STATUS_TX_REG_EMPTY
   228                          
   229                          @aciaTestSend
   230  eac1 2c207f                     bit UART_REG
   231  eac4 ea                         nop
   232  eac5 ea                         nop
   233  eac6 d002                       bne +
   234  eac8 80f7                       bra @aciaTestSend
   235                          
   236                          +
   237  eaca 68                         pla
   238  eacb 8d217f                     sta UART_DATA
   239  eace 60                         rts
   240                          
   241                          
   242                          ; -----------------------------------------------------------------------------
   243                          ; uartOutString: Output a string to the UART
   244                          ; -----------------------------------------------------------------------------
   245                          ; Inputs:
   246                          ;   A: Value to output
   247                          ; -----------------------------------------------------------------------------
   248                          uartOutString:
   249  eacf a000               	ldy #0
   250                          -
   251  ead1 b132               	lda (STR_ADDR), y
   252  ead3 f006               	beq +
   253  ead5 20beea                     jsr uartOutNoBsCheck
   254  ead8 c8                 	iny
   255  ead9 d0f6               	bne -
   256                          +
   257  eadb 60                         rts

; ******** Source: kernel.asm
   173                          
   174                          }
   175                          
   176                          !ifndef HBC56_DISABLE_NES {

; ******** Source: ../lib\inp\nes.asm
     1                          ; 6502 NES Controllers - HBC-56
     2                          ;
     3                          ; Copyright (c) 2021 Troy Schrapel
     4                          ;
     5                          ; This code is licensed under the MIT license
     6                          ;
     7                          ; https://github.com/visrealm/hbc-56
     8                          ;
     9                          
    10                          
    11                          !ifndef NES_IO_PORT { NES_IO_PORT = $82
    12                                  !warn "NES_IO_PORT not provided. Defaulting to ", NES_IO_PORT
    13                          }
    14                          
    15                          !ifndef NES_RAM_START { NES_RAM_START = $7ea1
    16                                  !warn "NES_RAM_START not provided. Defaulting to ", NES_RAM_START
    17                          }
    18                          
    19                          ; -------------------------
    20                          ; High RAM
    21                          ; -------------------------
    22                          NES_TMP        = NES_RAM_START
    23                          NES_RAM_SIZE   = 1
    24                          
    25                          
    26                          !if NES_RAM_END < (NES_RAM_START + NES_RAM_SIZE) {
    27                          	!error "NES_RAM requires ",NES_RAM_SIZE," bytes. Allocated ",NES_RAM_END - NES_RAM_START
    28                          }
    29                          
    30                          
    31                          ; IO Ports
    32                          NES1_IO_ADDR     = IO_PORT_BASE_ADDRESS | NES_IO_PORT
    33                          NES2_IO_ADDR     = IO_PORT_BASE_ADDRESS | NES_IO_PORT | $01
    34                          
    35                          
    36                          NES_RIGHT       = %00000001
    37                          NES_LEFT        = %00000010
    38                          NES_DOWN        = %00000100
    39                          NES_UP          = %00001000
    40                          NES_START       = %00010000
    41                          NES_SELECT      = %00100000
    42                          NES_B           = %01000000
    43                          NES_A           = %10000000
    44                          
    45                          ; -----------------------------------------------------------------------------
    46                          ; nesWaitForPress: Wait for a NES button press (either port)
    47                          ; -----------------------------------------------------------------------------
    48                          nesWaitForPress:
    49  eadc a9ff                       lda #$ff
    50                          @notPressed
    51  eade cd827f                     cmp NES1_IO_ADDR
    52  eae1 d005                       bne @pressed
    53  eae3 cd837f                     cmp NES2_IO_ADDR
    54  eae6 f0f6                       beq @notPressed
    55                          @pressed
    56  eae8 60                         rts
    57                          
    58                          ; -----------------------------------------------------------------------------
    59                          ; nes1Pressed: Is a button pressed?
    60                          ; -----------------------------------------------------------------------------
    61                          ; Inputs:
    62                          ;   A: Button to test
    63                          ; Outputs:
    64                          ;   Carry set if pressed, Carry clear if not
    65                          nes1Pressed:
    66  eae9 2c827f                     bit NES1_IO_ADDR
    67  eaec 18                         clc
    68  eaed d001                       bne +
    69  eaef 38                         sec
    70                          +
    71  eaf0 60                         rts
    72                          
    73                          ; -----------------------------------------------------------------------------
    74                          ; nes2Pressed: Is a button pressed?
    75                          ; -----------------------------------------------------------------------------
    76                          ; Inputs:
    77                          ;   A: Button to test
    78                          ; Outputs:
    79                          ;   Carry set if pressed, Carry clear if not
    80                          nes2Pressed:
    81  eaf1 2c837f                     bit NES2_IO_ADDR
    82  eaf4 18                         clc
    83  eaf5 d001                       bne +
    84  eaf7 38                         sec
    85                          +
    86  eaf8 60                         rts
    87                          
    88                          
    89                          
    90                          

; ******** Source: kernel.asm
   177                          
   178                          }
   179                          
   180                          !ifndef HBC56_DISABLE_KEYBOARD {

; ******** Source: ../lib\inp\keyboard.asm
     1                          ; 6502 KB Controller - HBC-56
     2                          ;
     3                          ; Copyright (c) 2021 Troy Schrapel
     4                          ;
     5                          ; This code is licensed under the MIT license
     6                          ;
     7                          ; https://github@com/visrealm/hbc-56
     8                          ;
     9                          
    10                          !ifndef HAVE_MATH_INC { !src "ut/math.inc" }
    11                          
    12                          HAVE_KEYBOARD = 1
    13                          
    14                          ; -------------------------
    15                          ; Constants
    16                          ; -------------------------
    17                          !ifndef KB_IO_PORT { KB_IO_PORT = $80
    18                                  !warn "KB_IO_PORT not provided@ Defaulting to ", KB_IO_PORT
    19                          }
    20                          
    21                          !ifndef KB_RAM_START { KB_RAM_START = $7ea1
    22                                  !warn "KB_RAM_START not provided@ Defaulting to ", KB_RAM_START
    23                          }
    24                          
    25                          ; -------------------------
    26                          ; High RAM
    27                          ; -------------------------
    28                          KB_FLAGS          = KB_RAM_START
    29                          KB_TMP_X          = KB_RAM_START + 1
    30                          KB_TMP_Y          = KB_RAM_START + 2
    31                          KB_CB_PRESSED     = KB_RAM_START + 3
    32                          KB_CB_RELEASED    = KB_RAM_START + 5
    33                          KB_CURRENT_STATE  = KB_RAM_START + 7
    34                          KB_BUFFER_HEAD    = KB_RAM_START + 8         ; head of circular buffer
    35                          KB_BUFFER_TAIL    = KB_RAM_START + 9         ; tail of circular buffer
    36                          KB_BUFFER         = KB_RAM_START + 10
    37                          KB_BUFFER_SIZE    = (1 << 4)
    38                          KB_BUFFER_MASK    = KB_BUFFER_SIZE - 1
    39                          KB_PRESSED_MAP    = KB_BUFFER + KB_BUFFER_SIZE
    40                          
    41                          KB_PRESSED_MAP_SIZE = $fd + 1
    42                          KB_PRESSED_MAP_BYTES = 32
    43                          
    44                          KB_RAM_SIZE     = (KB_PRESSED_MAP + KB_PRESSED_MAP_BYTES) - KB_RAM_START
    45                          
    46                          
    47                          !if KB_RAM_END < (KB_RAM_START + KB_RAM_SIZE) {
    48                          	!error "KB_RAM requires ",KB_RAM_SIZE," bytes@ Allocated ",KB_RAM_END - KB_RAM_START
    49                          }
    50                          
    51                          ; -------------------------
    52                          ; Contants
    53                          ; -------------------------
    54                          KB_SHIFT_DOWN   = %00000001
    55                          KB_CTRL_DOWN    = %00000010
    56                          KB_ALT_DOWN     = %00000100
    57                          KB_CAPS_LOCK    = %00001000
    58                          KB_NUM_LOCK     = %00010000
    59                          
    60                          KB_RELEASE      = $f0
    61                          KB_EXT_KEY      = $e0
    62                          KB_PAUSE_KEY    = $e1
    63                          
    64                          KB_SCANCODE_0 = $45
    65                          KB_SCANCODE_1 = $16
    66                          KB_SCANCODE_2 = $1E
    67                          KB_SCANCODE_3 = $26
    68                          KB_SCANCODE_4 = $25
    69                          KB_SCANCODE_5 = $2E
    70                          KB_SCANCODE_6 = $36
    71                          KB_SCANCODE_7 = $3D
    72                          KB_SCANCODE_8 = $3E
    73                          KB_SCANCODE_9 = $46
    74                          KB_SCANCODE_A = $1C
    75                          KB_SCANCODE_B = $32
    76                          KB_SCANCODE_C = $21
    77                          KB_SCANCODE_D = $23
    78                          KB_SCANCODE_E = $24
    79                          KB_SCANCODE_F = $2B
    80                          KB_SCANCODE_G = $34
    81                          KB_SCANCODE_H = $33
    82                          KB_SCANCODE_I = $43
    83                          KB_SCANCODE_J = $3B
    84                          KB_SCANCODE_K = $42
    85                          KB_SCANCODE_L = $4B
    86                          KB_SCANCODE_M = $3A
    87                          KB_SCANCODE_N = $31
    88                          KB_SCANCODE_O = $44
    89                          KB_SCANCODE_P = $4D
    90                          KB_SCANCODE_Q = $15
    91                          KB_SCANCODE_R = $2D
    92                          KB_SCANCODE_S = $1B
    93                          KB_SCANCODE_T = $2C
    94                          KB_SCANCODE_U = $3C
    95                          KB_SCANCODE_V = $2A
    96                          KB_SCANCODE_W = $1D
    97                          KB_SCANCODE_X = $22
    98                          KB_SCANCODE_Y = $35
    99                          KB_SCANCODE_Z = $1A
   100                          KB_SCANCODE_F1 = $05
   101                          KB_SCANCODE_F2 = $06
   102                          KB_SCANCODE_F3 = $04
   103                          KB_SCANCODE_F4 = $0C
   104                          KB_SCANCODE_F5 = $03
   105                          KB_SCANCODE_F6 = $0B
   106                          KB_SCANCODE_F7 = $83
   107                          KB_SCANCODE_F8 = $0A
   108                          KB_SCANCODE_F9 = $01
   109                          KB_SCANCODE_F10 = $09
   110                          KB_SCANCODE_F11 = $78
   111                          KB_SCANCODE_F12 = $07
   112                          KB_SCANCODE_NUMPAD_0 = $70
   113                          KB_SCANCODE_NUMPAD_1 = $69
   114                          KB_SCANCODE_NUMPAD_2 = $72
   115                          KB_SCANCODE_NUMPAD_3 = $7A
   116                          KB_SCANCODE_NUMPAD_4 = $6B
   117                          KB_SCANCODE_NUMPAD_5 = $73
   118                          KB_SCANCODE_NUMPAD_6 = $74
   119                          KB_SCANCODE_NUMPAD_7 = $6C
   120                          KB_SCANCODE_NUMPAD_8 = $75
   121                          KB_SCANCODE_NUMPAD_9 = $7D
   122                          KB_SCANCODE_NUMPAD_DIVIDE = $CA
   123                          KB_SCANCODE_NUMPAD_ENTER = $DA
   124                          KB_SCANCODE_NUMPAD_MINUS = $7B
   125                          KB_SCANCODE_NUMPAD_MULTIPLY = $7C
   126                          KB_SCANCODE_NUMPAD_PERIOD = $71
   127                          KB_SCANCODE_NUMPAD_PLUS = $79
   128                          KB_SCANCODE_NUM_LOCK = $77
   129                          KB_SCANCODE_ALT_LEFT = $11
   130                          KB_SCANCODE_ALT_RIGHT_ = $91
   131                          KB_SCANCODE_APOS = $52
   132                          KB_SCANCODE_ARROW_DOWN = $F2
   133                          KB_SCANCODE_ARROW_LEFT = $EB
   134                          KB_SCANCODE_ARROW_RIGHT = $F4
   135                          KB_SCANCODE_ARROW_UP = $F5
   136                          KB_SCANCODE_BACKSPACE = $66
   137                          KB_SCANCODE_CAPS_LOCK = $58
   138                          KB_SCANCODE_COMMA = $41
   139                          KB_SCANCODE_CTRL_LEFT = $14
   140                          KB_SCANCODE_CTRL_RIGHT = $94
   141                          KB_SCANCODE_DELETE = $F1
   142                          KB_SCANCODE_END = $E9
   143                          KB_SCANCODE_ENTER = $5A
   144                          KB_SCANCODE_EQUAL = $55
   145                          KB_SCANCODE_ESC = $76
   146                          KB_SCANCODE_HOME = $EC
   147                          KB_SCANCODE_INSERT = $F0
   148                          KB_SCANCODE_MENU = $AF
   149                          KB_SCANCODE_MINUS = $4E
   150                          KB_SCANCODE_PAGE_DOWN = $FA
   151                          KB_SCANCODE_PAGE_UP = $FD
   152                          KB_SCANCODE_PAUSE = $E1
   153                          KB_SCANCODE_PERIOD = $49
   154                          KB_SCANCODE_PRTSCR = $92
   155                          KB_SCANCODE_SCROLL_LOCK = $7E
   156                          KB_SCANCODE_SEMICOLON = $4C
   157                          KB_SCANCODE_SHIFT_LEFT = $12
   158                          KB_SCANCODE_SHIFT_RIGHT = $59
   159                          KB_SCANCODE_SLASH_BACK = $5D
   160                          KB_SCANCODE_SLASH_FORWARD = $4A
   161                          KB_SCANCODE_SPACEBAR = $29
   162                          KB_SCANCODE_SQUARE_LEFT = $54
   163                          KB_SCANCODE_SQUARE_RIGHT = $5B
   164                          KB_SCANCODE_TAB = $0D
   165                          KB_SCANCODE_TILDE = $0E
   166                          KB_SCANCODE_WINDOWS_LEFT = $9F
   167                          KB_SCANCODE_WINDOWS_RIGHT = $A7
   168                          
   169                          
   170                          KB_SHIFT_LEFT_MAP_BYTE = KB_SCANCODE_SHIFT_LEFT >> 3
   171                          KB_SHIFT_LEFT_MAP_BIT  = $80 >> (KB_SCANCODE_SHIFT_LEFT & $07)
   172                          
   173                          KB_SHIFT_RIGHT_MAP_BYTE = KB_SCANCODE_SHIFT_RIGHT >> 3
   174                          KB_SHIFT_RIGHT_MAP_BIT  = $80 >> (KB_SCANCODE_SHIFT_RIGHT & $07)
   175                          
   176                          
   177                          ; IO Ports
   178                          KB_IO_ADDR         = IO_PORT_BASE_ADDRESS | KB_IO_PORT
   179                          KB_STATUS_ADDR     = IO_PORT_BASE_ADDRESS | KB_IO_PORT | $01
   180                          
   181                          ; -----------------------------------------------------------------------------
   182                          ; kbInit: Initialise the keyboard
   183                          ; -----------------------------------------------------------------------------
   184                          kbInit:
   185  eaf9 a900                       lda #$00
   186  eafb 8d5c7c                     sta KB_FLAGS
   187                          
   188  eafe a210                       ldx #16 ;buffer size
   189                                  
   190                                  ; ensure the hardware keyboard buffer is clear
   191                          -
   192  eb00 8e5d7c                     stx KB_TMP_X
   193  eb03 20b4eb                     jsr .kbReadByte
   194  eb06 ae5d7c                     ldx KB_TMP_X
   195  eb09 ca                         dex
   196  eb0a d0f4                       bne -
   197                          
   198  eb0c a220a900ca9d767c...        +memset KB_PRESSED_MAP, 0, KB_PRESSED_MAP_BYTES
   199                          
   200  eb18 9c647c                     stz KB_BUFFER_HEAD
   201  eb1b 9c657c                     stz KB_BUFFER_TAIL
   202                          
   203  eb1e a900                       lda #.KB_STATE_DEFAULT
   204  eb20 8d637c                     sta KB_CURRENT_STATE
   205                          
   206                                  ; flow through
   207                          
   208                          kbResetCallbacks:
   209  eb23 a933                       lda #<.kbDummyCb
   210  eb25 8d5f7c                     sta KB_CB_PRESSED
   211  eb28 8d617c                     sta KB_CB_RELEASED
   212                                  
   213  eb2b a9eb                       lda #>.kbDummyCb
   214  eb2d 8d607c                     sta KB_CB_PRESSED + 1
   215  eb30 8d627c                     sta KB_CB_RELEASED + 1
   216                          
   217                                  ; flow through
   218                          
   219                          .kbDummyCb:
   220  eb33 60                         rts
   221                          
   222                          ; -----------------------------------------------------------------------------
   223                          ; kbIntHandler: Standard keyboard interrupt handler
   224                          ; -----------------------------------------------------------------------------
   225                          kbIntHandler:
   226  eb34 20b4eb                     jsr .kbReadByte
   227  eb37 e000                       cpx #0
   228  eb39 f0f8                       beq .kbDummyCb
   229                          
   230  eb3b 8a                         txa     ; acc now holds scancode
   231                          
   232  eb3c ae637c                     ldx KB_CURRENT_STATE
   233                          
   234  eb3f 7c42eb                     jmp (.kbStateHandlers, x)
   235                          
   236                          .KB_STATE_DEFAULT          = 0
   237                          .KB_STATE_RELEASE          = 2
   238                          .KB_STATE_EXTENDED         = 4
   239                          .KB_STATE_EXTENDED_RELEASE = 6
   240                          .KB_STATE_PAUSE_SEQ        = 8
   241                          
   242                          .kbStateHandlers:
   243  eb42 4ceb72eb7feb70eb...!word .stdKeyHandler, .relKeyHandler, .extKeyHandler, .extRelKeyHandler, .pauseKeyHandler
   244                          
   245                          ; default scancode handler
   246                          .stdKeyHandler
   247  eb4c c9f0                       cmp #KB_RELEASE
   248  eb4e d006                       bne +
   249  eb50 a902                       lda #.KB_STATE_RELEASE
   250  eb52 8d637c                     sta KB_CURRENT_STATE
   251  eb55 60                         rts
   252                          +
   253  eb56 c9e0                       cmp #KB_EXT_KEY
   254  eb58 d006                       bne +
   255  eb5a a904                       lda #.KB_STATE_EXTENDED
   256  eb5c 8d637c                     sta KB_CURRENT_STATE
   257  eb5f 60                         rts
   258                          +
   259  eb60 c9e1                       cmp #KB_PAUSE_KEY
   260  eb62 d006                       bne +
   261  eb64 a908                       lda #.KB_STATE_PAUSE_SEQ
   262  eb66 8d637c                     sta KB_CURRENT_STATE
   263  eb69 60                         rts
   264                          +
   265                                  ; a regular key was pressed 
   266                                  ; TODO: bit field rather than a byte per key?
   267  eb6a 20c6eb                     jsr .kbSetKey
   268                          
   269  eb6d 6c5f7c                     jmp (KB_CB_PRESSED)
   270                                  ; subroutine returns above
   271                          
   272                          ; extended release scancode handler
   273                          .extRelKeyHandler:
   274  eb70 0980                       ora #$80
   275                                  ; flow through
   276                          
   277                          ;  release scancode handler
   278                          .relKeyHandler:
   279  eb72 aa                         tax
   280  eb73 20fbeb                     jsr .kbClearKey
   281                          
   282  eb76 a900                       lda #.KB_STATE_DEFAULT
   283  eb78 8d637c                     sta KB_CURRENT_STATE
   284  eb7b 8a                         txa
   285                          
   286  eb7c 6c617c                     jmp (KB_CB_RELEASED)
   287                          
   288                          ; extended scancode handler
   289                          .extKeyHandler:
   290  eb7f c9f0                       cmp #KB_RELEASE
   291  eb81 d006                       bne +
   292  eb83 a906                       lda #.KB_STATE_EXTENDED_RELEASE
   293  eb85 8d637c                     sta KB_CURRENT_STATE
   294  eb88 60                         rts
   295                          +
   296  eb89 0980                       ora #$80
   297                                  
   298  eb8b 20c6eb                     jsr .kbSetKey
   299                          
   300  eb8e a900                       lda #.KB_STATE_DEFAULT
   301  eb90 8d637c                     sta KB_CURRENT_STATE
   302  eb93 8a                         txa
   303                          
   304  eb94 6c5f7c                     jmp (KB_CB_PRESSED)
   305                          
   306                          ; pause/break sequence scancode handler
   307                          .pauseKeyHandler:
   308  eb97 c977                       cmp #$77
   309  eb99 d018                       bne @notLastByte
   310  eb9b aa                         tax
   311  eb9c ad577d                     lda KB_PRESSED_MAP + KB_SCANCODE_PAUSE
   312  eb9f d006                       bne +
   313  eba1 8e577d                     stx KB_PRESSED_MAP + KB_SCANCODE_PAUSE
   314  eba4 6c5f7c                     jmp (KB_CB_PRESSED)
   315                          +
   316  eba7 9c577d                     stz KB_PRESSED_MAP + KB_SCANCODE_PAUSE
   317                          
   318  ebaa a900                       lda #.KB_STATE_DEFAULT
   319  ebac 8d637c                     sta KB_CURRENT_STATE
   320  ebaf 8a                         txa
   321                          
   322  ebb0 6c617c                     jmp (KB_CB_RELEASED)
   323                          
   324                          @notLastByte
   325  ebb3 60                         rts
   326                          
   327                          ; -----------------------------------------------------------------------------
   328                          ; Outputs:
   329                          ;   A: Value of the KB Status (0 if no key)
   330                          ;   X: PS/2 Scancode byte
   331                          ; -----------------------------------------------------------------------------
   332                          .kbReadByte:        
   333  ebb4 a200                       ldx #0
   334  ebb6 a904                       lda #$04
   335  ebb8 2c817f                     bit KB_STATUS_ADDR
   336  ebbb f008                       beq @end
   337                          
   338  ebbd a020                       ldy #32         ; TODO: this could probably be smaller
   339                          -
   340  ebbf 88                 	dey
   341  ebc0 d0fd               	bne -
   342                          
   343  ebc2 ae807f                     ldx KB_IO_ADDR
   344                          @end
   345  ebc5 60                         rts
   346                          
   347                          
   348                          ; -----------------------------------------------------------------------------
   349                          ; .kbSetKey: Set a key is pressed in KB_PRESSED_MAP
   350                          ; Inputs:
   351                          ;    A - scancode
   352                          ; -----------------------------------------------------------------------------
   353                          .kbSetKey:
   354  ebc6 ae647c                     ldx KB_BUFFER_HEAD      ; store at head of buffer
   355  ebc9 9d667c                     sta KB_BUFFER, x
   356                          
   357  ebcc 8d5d7c                     sta KB_TMP_X            ; find byte in map
   358  ebcf 4a4a4a                     +lsr3
   359  ebd2 aa                         tax
   360  ebd3 ad5d7c                     lda KB_TMP_X
   361  ebd6 2907                       and #$07
   362  ebd8 a8                         tay
   363  ebd9 bd767c                     lda KB_PRESSED_MAP, x
   364  ebdc 1930e1                     ora tableBitFromLeft, y ; set bit in map byte
   365  ebdf 9d767c                     sta KB_PRESSED_MAP, x   ; update map
   366                          
   367                                  ; check for toggle keys
   368  ebe2 ae5d7c                     ldx KB_TMP_X
   369  ebe5 e058                       cpx #KB_SCANCODE_CAPS_LOCK
   370  ebe7 d008                       bne +
   371  ebe9 a908                       lda #KB_CAPS_LOCK
   372  ebeb 4d5c7c                     eor KB_FLAGS
   373  ebee 8d5c7c                     sta KB_FLAGS
   374                          +
   375                          
   376  ebf1 ad647c                     lda KB_BUFFER_HEAD      ; increment (and mask) buffer head
   377  ebf4 1a                         inc
   378  ebf5 290f                       and #KB_BUFFER_MASK
   379  ebf7 8d647c                     sta KB_BUFFER_HEAD
   380  ebfa 60                         rts
   381                          
   382                          ; -----------------------------------------------------------------------------
   383                          ; .kbClearKey: Clear a key is pressed in KB_PRESSED_MAP
   384                          ; Inputs:
   385                          ;    A - scancode
   386                          ; -----------------------------------------------------------------------------
   387                          .kbClearKey:
   388  ebfb 8d5d7c                     sta KB_TMP_X
   389  ebfe 4a4a4a                     +lsr3
   390  ec01 aa                         tax
   391  ec02 ad5d7c                     lda KB_TMP_X
   392  ec05 2907                       and #$07
   393  ec07 a8                         tay
   394  ec08 bd767c                     lda KB_PRESSED_MAP, x
   395  ec0b 3938e1                     and tableInvBitFromLeft, y
   396  ec0e 9d767c                     sta KB_PRESSED_MAP, x
   397  ec11 60                         rts
   398                          
   399                          
   400                          ; -----------------------------------------------------------------------------
   401                          ; .kbPopTail: Pop a scancode from the tail of the buffer
   402                          ; Inputs:
   403                          ;    A - scancode
   404                          ; -----------------------------------------------------------------------------
   405                          .kbPopTail:
   406  ec12 ad657c                     lda KB_BUFFER_TAIL
   407  ec15 aa                         tax
   408  ec16 1a                         inc
   409  ec17 290f                       and #KB_BUFFER_MASK
   410  ec19 8d657c                     sta KB_BUFFER_TAIL
   411  ec1c bd667c                     lda KB_BUFFER, x
   412  ec1f 60                         rts
   413                          
   414                          ; -----------------------------------------------------------------------------
   415                          ; kbIsPressed: Is a key pressed right now?
   416                          ; Inputs:
   417                          ;    X - scancode
   418                          ; Returns:
   419                          ;    Z - clear if pressed, set if not pressed
   420                          ; -----------------------------------------------------------------------------
   421                          kbIsPressed:
   422  ec20 08                         php
   423  ec21 78                         sei
   424  ec22 8e5d7c                     stx KB_TMP_X
   425  ec25 8a                         txa
   426  ec26 4a4a4a                     +lsr3
   427  ec29 aa                         tax
   428  ec2a ad5d7c                     lda KB_TMP_X
   429  ec2d 2907                       and #$07
   430  ec2f a8                         tay
   431  ec30 b930e1                     lda tableBitFromLeft, y
   432  ec33 3d767c                     and KB_PRESSED_MAP, x
   433  ec36 ae5d7c                     ldx KB_TMP_X
   434  ec39 28                         plp
   435  ec3a c900                       cmp #0
   436  ec3c 60                         rts
   437                          
   438                          
   439                          ; -----------------------------------------------------------------------------
   440                          ; kbWaitForScancode: Wait for a key press
   441                          ; Returns:
   442                          ;    A - scancode
   443                          ; -----------------------------------------------------------------------------
   444                          kbWaitForScancode:
   445  ec3d 08                         php
   446  ec3e 78                         sei        
   447  ec3f 38                         sec
   448  ec40 ad647c                     lda KB_BUFFER_HEAD
   449  ec43 ed657c                     sbc KB_BUFFER_TAIL
   450  ec46 28                         plp
   451  ec47 c900                       cmp #0
   452  ec49 f0f2                       beq kbWaitForScancode
   453  ec4b 08                         php
   454  ec4c 78                         sei
   455  ec4d 2012ec                     jsr .kbPopTail
   456  ec50 28                         plp
   457  ec51 60                         rts
   458                          
   459                          ; -----------------------------------------------------------------------------
   460                          ; kbNextScancode: Return the next scancode in the buffer or zero if empty
   461                          ; Returns:
   462                          ;    A - scancode (or zero)
   463                          ; -----------------------------------------------------------------------------
   464                          kbNextScancode:
   465  ec52 08                         php
   466  ec53 78                         sei
   467  ec54 ad647c                     lda KB_BUFFER_HEAD
   468  ec57 cd657c                     cmp KB_BUFFER_TAIL
   469  ec5a f007                       beq @noScancode
   470  ec5c 2012ec                     jsr .kbPopTail
   471  ec5f 28                         plp
   472  ec60 c900                       cmp #0
   473  ec62 60                         rts
   474                          
   475                          @noScancode
   476  ec63 28                         plp
   477  ec64 a900                       lda #0
   478  ec66 60                         rts
   479                          
   480                          ; -----------------------------------------------------------------------------
   481                          ; kbScancodeToAscii: Convert a scancode to ascii. shift/caps lock is honoured
   482                          ; Inputs:
   483                          ;    A - scancode (or zero)
   484                          ; Returns:
   485                          ;    A - ascii character
   486                          ;    C - set if valid character in A
   487                          ; -----------------------------------------------------------------------------
   488                          kbScancodeToAscii:
   489  ec67 da                         phx
   490  ec68 8d5d7c                     sta KB_TMP_X
   491  ec6b 18                         clc
   492  ec6c 1002                       bpl +
   493  ec6e fa                         plx
   494  ec6f 60                         rts
   495                          +
   496  ec70 08                         php
   497  ec71 78                         sei
   498  ec72 a202                       ldx #KB_SHIFT_LEFT_MAP_BYTE
   499  ec74 a920                       lda #KB_SHIFT_LEFT_MAP_BIT
   500  ec76 3c767c                     bit KB_PRESSED_MAP, x
   501  ec79 f003                       beq +
   502  ec7b 38                         sec
   503  ec7c 800a                       bra @doneShiftCheck
   504                          +
   505                          
   506  ec7e a20b                       ldx #KB_SHIFT_RIGHT_MAP_BYTE
   507  ec80 a940                       lda #KB_SHIFT_RIGHT_MAP_BIT
   508  ec82 3c767c                     bit KB_PRESSED_MAP, x
   509  ec85 f001                       beq +
   510  ec87 38                         sec
   511                          +
   512                          
   513                          @doneShiftCheck:
   514  ec88 b008                       bcs @shiftedKeys:
   515  ec8a ae5d7c                     ldx KB_TMP_X
   516  ec8d bdcbec                     lda KEY_MAP, x
   517  ec90 8006                       bra @end
   518                          
   519                          @shiftedKeys:
   520  ec92 ae5d7c                     ldx KB_TMP_X
   521  ec95 bd4bed                     lda KEY_MAP_SHIFTED, x
   522                          
   523                          @end
   524  ec98 2018e0                     jsr isAlpha
   525  ec9b 9014                       bcc @afterAlphaCheck
   526  ec9d 8d5d7c                     sta KB_TMP_X
   527  eca0 a908                       lda #KB_CAPS_LOCK
   528  eca2 2d5c7c                     and KB_FLAGS
   529  eca5 f007                       beq +
   530  eca7 ad5d7c                     lda KB_TMP_X
   531  ecaa 4920                       eor #$20
   532  ecac 8003                       bra @afterAlphaCheck
   533                          +
   534  ecae ad5d7c                     lda KB_TMP_X
   535                          @afterAlphaCheck
   536  ecb1 28                         plp
   537  ecb2 fa                         plx
   538  ecb3 c9ff                       cmp #$ff
   539  ecb5 38                         sec
   540  ecb6 d001                       bne +
   541  ecb8 18                         clc
   542                          +        
   543  ecb9 60                         rts
   544                          
   545                          ; -----------------------------------------------------------------------------
   546                          ; kbReadAscii: Read an ASCII caharacter from the keyboard queue
   547                          ; Returns:
   548                          ;    A - ascii character
   549                          ;    C - set if valid character in A
   550                          ; -----------------------------------------------------------------------------
   551                          kbReadAscii:
   552  ecba 08                         php
   553  ecbb 78                         sei
   554  ecbc da                         phx
   555  ecbd 2052ec                     jsr kbNextScancode
   556  ecc0 f005                       beq @noKey
   557  ecc2 fa                         plx
   558  ecc3 28                         plp
   559  ecc4 4c67ec                     jmp kbScancodeToAscii
   560                          @noKey
   561  ecc7 fa                         plx
   562  ecc8 28                         plp
   563  ecc9 18                         clc
   564  ecca 60                         rts
   565                          
   566                          
   567                          KEY_MAP:
   568                          ;      0   1   2   3   4   5   6   7   8   9   a   b   c   d   e   f
   569  eccb ffffffffffffffff...!byte $ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$09,$60,$ff; 0
   570  ecdb ffffffffff7131ff...!byte $ff,$ff,$ff,$ff,$ff,$71,$31,$ff,$ff,$ff,$7a,$73,$61,$77,$32,$ff; 1
   571  eceb ff637864653433ff...!byte $ff,$63,$78,$64,$65,$34,$33,$ff,$ff,$20,$76,$66,$74,$72,$35,$ff; 2
   572  ecfb ff6e6268677936ff...!byte $ff,$6e,$62,$68,$67,$79,$36,$ff,$ff,$ff,$6d,$6a,$75,$37,$38,$ff; 3
   573  ed0b ff2c6b696f3039ff...!byte $ff,$2c,$6b,$69,$6f,$30,$39,$ff,$ff,$2e,$2f,$6c,$3b,$70,$2d,$ff; 4
   574  ed1b ffff27ff5b3dffff...!byte $ff,$ff,$27,$ff,$5b,$3d,$ff,$ff,$ff,$ff,$0d,$5d,$ff,$5c,$ff,$ff; 5
   575  ed2b ffffffffffff08ff...!byte $ff,$ff,$ff,$ff,$ff,$ff,$08,$ff,$ff,$31,$ff,$34,$37,$ff,$ff,$ff; 6
   576  ed3b 30ff323536381bff...!byte $30,$ff,$32,$35,$36,$38,$1b,$ff,$ff,$ff,$33,$2d,$ff,$39,$ff,$ff; 7
   577                          
   578                          KEY_MAP_SHIFTED:
   579                          ;      0   1   2   3   4   5   6   7   8   9   a   b   c   d   e   f
   580  ed4b ffffffffffffffff...!byte $ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$09,$7e,$ff; 0
   581  ed5b ffffffffff5121ff...!byte $ff,$ff,$ff,$ff,$ff,$51,$21,$ff,$ff,$ff,$5a,$53,$41,$57,$40,$ff; 1
   582  ed6b ff435844452423ff...!byte $ff,$43,$58,$44,$45,$24,$23,$ff,$ff,$20,$56,$46,$54,$52,$25,$ff; 2
   583  ed7b ff4e424847595eff...!byte $ff,$4e,$42,$48,$47,$59,$5e,$ff,$ff,$ff,$4d,$4a,$55,$26,$2a,$ff; 3
   584  ed8b ff3c4b494f2928ff...!byte $ff,$3c,$4b,$49,$4f,$29,$28,$ff,$ff,$3e,$3f,$4c,$3a,$50,$5f,$ff; 4
   585  ed9b ffff22ff7b2bffff...!byte $ff,$ff,$22,$ff,$7b,$2b,$ff,$ff,$ff,$ff,$0d,$7d,$ff,$7c,$ff,$ff; 5
   586  edab ffffffffffff08ff...!byte $ff,$ff,$ff,$ff,$ff,$ff,$08,$ff,$ff,$31,$ff,$34,$37,$ff,$ff,$ff; 6
   587  edbb 30ff323536381bff...!byte $30,$ff,$32,$35,$36,$38,$1b,$ff,$ff,$ff,$33,$2d,$ff,$39,$ff,$ff; 7

; ******** Source: kernel.asm
   181                          
   182                          }
   183                          

; ******** Source: ../lib\io\via.asm
     1                          ; 65(C)22 VIA - HBC-56
     2                          ;
     3                          ; Copyright (c) 2022 Troy Schrapel
     4                          ;
     5                          ; This code is licensed under the MIT license
     6                          ;
     7                          ; https://github.com/visrealm/hbc-56
     8                          ;
     9                          
    10                          
    11                          !ifndef VIA_IO_PORT { VIA_IO_PORT = $f0
    12                                  !warn "VIA_IO_PORT not provided. Defaulting to ", VIA_IO_PORT
    13                          }
    14                          
    15                          !ifndef VIA_RAM_START { VIA_RAM_START = $7d80
    16                                  !warn "VIA_RAM_START not provided. Defaulting to ", VIA_RAM_START
    17                          }
    18                          
    19                          ; -------------------------
    20                          ; High RAM
    21                          ; -------------------------
    22                          VIA_TMP        = VIA_RAM_START
    23                          VIA_RAM_SIZE   = 1
    24                          
    25                          
    26                          !if VIA_RAM_END < (VIA_RAM_START + VIA_RAM_SIZE) {
    27                          	!error "VIA_RAM requires ",VIA_RAM_SIZE," bytes. Allocated ",VIA_RAM_END - VIA_RAM_START
    28                          }
    29                          
    30                          
    31                          VIA_REG_PORT_B  = $00
    32                          VIA_REG_PORT_A  = $01
    33                          VIA_REG_DDR_B   = $02
    34                          VIA_REG_DDR_A   = $03
    35                          VIA_REG_T1C_L   = $04
    36                          VIA_REG_T1C_H   = $05
    37                          VIA_REG_T1L_L   = $06
    38                          VIA_REG_T1L_H   = $07
    39                          VIA_REG_T2C_L   = $08
    40                          VIA_REG_T2C_H   = $09
    41                          VIA_REG_SR      = $0a
    42                          VIA_REG_ACR     = $0b
    43                          VIA_REG_PFR     = $0c
    44                          VIA_REG_IFR     = $0d
    45                          VIA_REG_IER     = $0e
    46                          VIA_REG_PORT_Ax = $0f
    47                          
    48                          
    49                          ; IO Ports
    50                          VIA_IO_ADDR     = IO_PORT_BASE_ADDRESS | VIA_IO_PORT
    51                          
    52                          VIA_IO_ADDR_PORT_B      = VIA_IO_ADDR | VIA_REG_PORT_B
    53                          VIA_IO_ADDR_PORT_A      = VIA_IO_ADDR | VIA_REG_PORT_A
    54                          VIA_IO_ADDR_DDR_B       = VIA_IO_ADDR | VIA_REG_DDR_B
    55                          VIA_IO_ADDR_DDR_A       = VIA_IO_ADDR | VIA_REG_DDR_A
    56                          VIA_IO_ADDR_T1C_L       = VIA_IO_ADDR | VIA_REG_T1C_L
    57                          VIA_IO_ADDR_T1C_H       = VIA_IO_ADDR | VIA_REG_T1C_H
    58                          VIA_IO_ADDR_T1L_L       = VIA_IO_ADDR | VIA_REG_T1L_L
    59                          VIA_IO_ADDR_T1L_H       = VIA_IO_ADDR | VIA_REG_T1L_H
    60                          VIA_IO_ADDR_T2C_L       = VIA_IO_ADDR | VIA_REG_T2C_L
    61                          VIA_IO_ADDR_T2C_H       = VIA_IO_ADDR | VIA_REG_T2C_H
    62                          VIA_IO_ADDR_ACR         = VIA_IO_ADDR | VIA_REG_ACR
    63                          VIA_IO_ADDR_IFR         = VIA_IO_ADDR | VIA_REG_IFR
    64                          VIA_IO_ADDR_IER         = VIA_IO_ADDR | VIA_REG_IER
    65                          
    66                          ; Constants
    67                          VIA_DIR_INPUT   = $00
    68                          VIA_DIR_OUTPUT  = $ff
    69                          
    70                          
    71                          
    72                          viaIntHandler:
    73                          
    74  edcb 6cbb7c                     jmp (HBC56_VIA_CALLBACK)

; ******** Source: kernel.asm
   184                          
   185                          
   186  edce 6769746875622e63...+hbc56Title "github.com/visrealm/hbc-56"
   187                          

; ******** Source: bootscreen.asm
     1                          ; 6502 - HBC-56 - Memory tests
     2                          ;
     3                          ; Copyright (c) 2021 Troy Schrapel
     4                          ;
     5                          ; This code is licensed under the MIT license
     6                          ;
     7                          ; https://github.com/visrealm/hbc-56
     8                          ;
     9                          ;
    10                          
    11                          ; can be anywhere. we own the place at this stage
    12                          LOGO_BUFFER = $3000     
    13                          
    14                          !ifdef HAVE_TMS9918 {
    15                                  HBC56_BORDER     = TMS_DK_BLUE 
    16                                  HBC56_BACKGROUND = TMS_WHITE
    17                                  HBC56_LOGO       = TMS_DK_BLUE 
    18                                  HBC56_TEXT       = TMS_DK_BLUE
    19                          }
    20                          
    21                          !ifdef HBC56_TITLE_TEXT {
    22                                  HBC56_TITLE     = HBC56_TITLE_TEXT
    23                                  HBC56_TITLE_LEN = HBC56_TITLE_TEXT_LEN
    24                          }
    25                          
    26                          .HBC56_PRESS_ANY_KEY_TEXT:
    27  ede9 505245535320414e...        !text "PRESS ANY KEY...",0
    28                          .HBC56_PRESS_ANY_KEY_TEXT_LEN = *-.HBC56_PRESS_ANY_KEY_TEXT-1
    29                          
    30                          .HBC56_PRESS_ANY_NES_TEXT:
    31  edfa 5052455353204120...        !text "PRESS A TO BEGIN...",0
    32                          .HBC56_PRESS_ANY_NES_TEXT_LEN = *-.HBC56_PRESS_ANY_NES_TEXT-1
    33                          
    34                          !ifdef HAVE_GRAPHICS_LCD {
    35                                  !align 255, 0
    36                          hbc56FontLcd:
    37                                  !bin "lcd/fonts/c64-alnum.bin"
    38                          hbc56LogoLcd:
    39                                  !bin "res/hbc56lcd.bin"
    40                          }
    41                          
    42                          !ifdef HAVE_TMS9918 {
    43                          hbc56LogoInd:
    44  ee0e c8c9cacbcccdcecf...        !bin "res/hbc56boot.ind"
    45                          hbc56LogoPatt:
    46  ee50 fefefefefefefefe...        !bin "res/hbc56boot.patt"
    47                          hbc56LogoPattEnd:        
    48                          }
    49                          
    50                          hbc56BootScreen:
    51                          
    52                          !ifdef HAVE_TMS9918 {
    53  efc8 0878a9108d117fa9...        +tmsSetAddrColorTable 16
    54  efd5 a94f                       +tmsColorFgBg HBC56_LOGO, HBC56_BACKGROUND
    55  efd7 a202                       ldx #2
    56  efd9 20fce6                     jsr _tmsSendX8
    57  efdc a94f                       +tmsColorFgBg HBC56_TEXT, HBC56_BACKGROUND
    58  efde a210                       ldx #16
    59  efe0 209de7                     jsr tmsInitColorTable
    60                          
    61  efe3 0878a9a58d117fa9...        +tmsSetPosWrite 5,5
    62  eff0 a90e8524a9ee8525...        +tmsSendData hbc56LogoInd, 22
    63  effd 0878a9c58d117fa9...        +tmsSetPosWrite 5,6
    64  f00a a9248524a9ee8525...        +tmsSendData hbc56LogoInd + 22, 22
    65  f017 0878a9e58d117fa9...        +tmsSetPosWrite 5,7
    66  f024 a93a8524a9ee8525...        +tmsSendData hbc56LogoInd + 44, 22
    67                          
    68  f031 0878a9408d117fa9...        +tmsSetAddrPattTable 200
    69  f03e a9508524a9ee8525...        +tmsSendData hbc56LogoPatt, $178
    70                          
    71  f054 0878a9c88d117fa9...        +tmsPrintZ HBC56_META_TITLE, 8, 14
    72                          
    73                          
    74                                  !ifdef HBC56_TITLE_TEXT {
    75  f06c 0878a9c38d117fa9...                +tmsPrintZ HBC56_TITLE, (32 - HBC56_TITLE_LEN) / 2, 22
    76                                  }
    77                          
    78  f084 a9e4                       +tmsColorFgBg TMS_GREY, HBC56_BORDER
    79  f086 20bde5                     jsr tmsSetBackground
    80                          }
    81                          
    82                          !ifdef HAVE_LCD {
    83                                  jsr lcdDetect
    84                                  bcc @noLcd
    85                                  !ifdef HAVE_GRAPHICS_LCD {
    86                                          jsr lcdGraphicsMode
    87                                          +memset LOGO_BUFFER, $00, 1024
    88                                          +memcpy LOGO_BUFFER + 128, hbc56LogoLcd, 256
    89                                          lda #>LOGO_BUFFER
    90                                          sta BITMAP_ADDR_H
    91                                          jsr lcdImage
    92                          
    93                                          +memset LOGO_BUFFER, $0, 128
    94                                          +tilemapCreateDefault (TILEMAP_SIZE_X_16 | TILEMAP_SIZE_Y_8), hbc56FontLcd-(32*8)
    95                                          +memset TILEMAP_DEFAULT_BUFFER_ADDRESS, ' ', 128
    96                          
    97                                          +memcpy TILEMAP_DEFAULT_BUFFER_ADDRESS + 16*4, HBC56_META_TITLE, 16
    98                          
    99                                          ldy #4
   100                                          jsr tilemapRenderRowToLcd
   101                          
   102                                  } else {
   103                                          !if LCD_ROWS > 2 { +lcdPrint "\n" }
   104                                          !if LCD_COLUMNS > 16 { +lcdPrint "  " }
   105                                          +lcdPrint "     HBC-56\n"
   106                                          !if LCD_COLUMNS > 16 { +lcdPrint "  " }
   107                                          lda #<HBC56_META_TITLE
   108                                          sta STR_ADDR_L
   109                                          lda #>HBC56_META_TITLE
   110                                          sta STR_ADDR_H
   111                                          !if LCD_ROWS = 2 {
   112                                                  jsr lcdLineTwo
   113                                          }                
   114                                          jsr lcdPrint
   115                                          !if LCD_ROWS = 2 {
   116                                                  jsr lcdLineTwo
   117                                          } else {
   118                                                  jsr lcdLineThree
   119                                          }                
   120                                          !if LCD_COLUMNS > 16 { +lcdConsolePrint "  " }
   121                                  }
   122                          @noLcd:
   123                          }
   124  f089 60                         rts

; ******** Source: kernel.asm
   188                          

; ******** Source: kernel.inc
     1                          ; 6502 - HBC-56 Kernel Macros
     2                          ;
     3                          ; Copyright (c) 2021 Troy Schrapel
     4                          ;
     5                          ; This code is licensed under the MIT license
     6                          ;
     7                          ; https://github.com/visrealm/hbc-56
     8                          ;
     9                          ;
    10                          
    11                          !macro setIntHandler .address {
    12                                  lda #<.address
    13                                  sta HBC56_INT_VECTOR + 1
    14                                  lda #>.address
    15                                  sta HBC56_INT_VECTOR + 2
    16                                  lda #JMP_OPCODE
    17                                  sta HBC56_INT_VECTOR
    18                          }
    19                          
    20                          !macro setNmiHandler .address {
    21                                  lda #<.address
    22                                  sta HBC56_NMI_VECTOR + 1
    23                                  lda #>.address
    24                                  sta HBC56_NMI_VECTOR + 2
    25                                  lda #JMP_OPCODE
    26                                  sta HBC56_NMI_VECTOR
    27                          }
    28                          
    29                          !macro setHbcMetaNES {
    30                                  lda #HBC56_CONSOLE_FLAG_NES
    31                                  ora HBC56_CONSOLE_FLAGS
    32                                  sta HBC56_CONSOLE_FLAGS
    33                          }
    34                          
    35                          !macro setHbcMetaNoWait {
    36                                  lda #HBC56_CONSOLE_FLAG_NOWAIT
    37                                  ora HBC56_CONSOLE_FLAGS
    38                                  sta HBC56_CONSOLE_FLAGS
    39                          }
    40                          
    41                          
    42                          !macro hbc56SetVsyncCallback .vsync {
    43                                  lda #<.vsync
    44                                  sta HBC56_VSYNC_CALLBACK
    45                                  lda #>.vsync
    46                                  sta HBC56_VSYNC_CALLBACK + 1
    47                          }
    48                          
    49                          !macro hbc56SetViaCallback .cb {
    50                                  lda #<.cb
    51                                  sta HBC56_VIA_CALLBACK
    52                                  lda #>.cb
    53                                  sta HBC56_VIA_CALLBACK + 1
    54                          }
    55                          
    56                          
    57                          !macro setHbcMetaTitle .titleStr {
    58                                  jmp .hbcMetaTitleOut
    59                          .titleStrLabel:
    60                                  !text .titleStr
    61                          .titleStrLabelLen = * - .titleStrLabel
    62                                  !byte 0 ; nul terminator for game name
    63                          
    64                          !if .titleStrLabelLen > HBC56_META_TITLE_MAX_LEN {
    65                                  !error "setHbcMetaTitle: Title metadata limited to ",HBC56_META_TITLE_MAX_LEN,"bytes"
    66                          }
    67                          .hbcMetaTitleOut:
    68                                  +memcpy HBC56_META_TITLE + (HBC56_META_TITLE_MAX_LEN-.titleStrLabelLen)/2, .titleStrLabel, .titleStrLabelLen
    69                                  lda #.titleStrLabelLen
    70                                  sta HBC56_META_TITLE_LEN
    71                          }
    72                          
    73                          !macro consoleEnableCursor {
    74                                  lda HBC56_CONSOLE_FLAGS
    75                                  ora #HBC56_CONSOLE_FLAG_CURSOR
    76                                  sta HBC56_CONSOLE_FLAGS
    77                          }
    78                          
    79                          !macro consoleDisableCursor {
    80                                  lda HBC56_CONSOLE_FLAGS
    81                                  and #!HBC56_CONSOLE_FLAG_CURSOR & $ff
    82                                  sta HBC56_CONSOLE_FLAGS
    83                          }
    84                          
    85                          !macro consoleLCDMode {
    86                                  lda HBC56_CONSOLE_FLAGS
    87                                  ora #HBC56_CONSOLE_FLAG_LCD
    88                                  sta HBC56_CONSOLE_FLAGS
    89                          }
    90                          
    91                          !macro setBreakpoint {
    92                                 !byte $db 
    93                          }
    94                          
    95                          !macro hbc56CustomDelay .delay {
    96                                  ldy #.delay
    97                                  jsr hbc56CustomDelay
    98                          }
    99                          
   100                          !macro hbc56DelayUs .us {
   101                          !if .us = 1 {
   102                                  nop
   103                                  nop
   104                          }
   105                          }
   106                          !macro hbc56DelayMs .ms {
   107                                  lda #<.ms
   108                                  sta DELAY_L
   109                                  lda #>.ms
   110                                  sta DELAY_H
   111                          
   112                                  jsr hbc56CustomDelayMs

; ******** Source: kernel.asm
   189                          

; ******** Source: interrupts.asm
     1                          ; 6502 - HBC-56 Kernel Interrupt Handling
     2                          ;
     3                          ; Copyright (c) 2021 Troy Schrapel
     4                          ;
     5                          ; This code is licensed under the MIT license
     6                          ;
     7                          ; https://github.com/visrealm/hbc-56
     8                          ;
     9                          ;
    10                          
    11                          ; -------------------------
    12                          ; Interrupts
    13                          ; -------------------------
    14                          TMS9918_IRQ            = 1      ; /INT
    15                          KB_IRQ                 = 2      ; RES1
    16                          UART_IRQ               = 3      ; RES2
    17                          VIA_IRQ                = 5      ; Onboard
    18                          
    19                          TMS9918_IRQ_BIT = (1 << (TMS9918_IRQ - 1))
    20                          KB_IRQ_BIT      = (1 << (KB_IRQ - 1))
    21                          UART_IRQ_BIT    = (1 << (UART_IRQ - 1))
    22                          VIA_IRQ_BIT     = (1 << (VIA_IRQ - 1))
    23                          
    24                          INT_CTRL_ADDRESS    = IO_PORT_BASE_ADDRESS | INT_IO_PORT
    25                          
    26                          ; -----------------------------------------------------------------------------
    27                          ; HBC-56 Interrupt handler
    28                          ; -----------------------------------------------------------------------------
    29                          hbc56IntHandler:
    30  f08a 48                         pha
    31  f08b da                         phx
    32  f08c 5a                         phy
    33                          
    34  f08d addf7f                     lda INT_CTRL_ADDRESS
    35                          
    36                          !ifdef HAVE_UART {
    37  f090 8904                       bit #UART_IRQ_BIT
    38  f092 f005                       beq +
    39  f094 2053ea                     jsr uartIrq        
    40  f097 8027                       bra @endIntHandler
    41                          +
    42                          }
    43                          
    44                          !ifdef HAVE_TMS9918 {
    45  f099 8901                       bit #TMS9918_IRQ_BIT
    46  f09b f008                       beq +
    47  f09d 20c4f0                     jsr hbc56Tms9918Int
    48  f0a0 2c117f                     +tmsReadStatus
    49  f0a3 801b                       bra @endIntHandler
    50                          +
    51                          }
    52                          
    53  f0a5 8910                       bit #VIA_IRQ_BIT
    54  f0a7 f005                       beq +
    55  f0a9 20cbed                     jsr viaIntHandler
    56  f0ac 8012                       bra @endIntHandler
    57                          +
    58                          
    59                          !ifdef HAVE_KEYBOARD {
    60  f0ae 8902                       bit #KB_IRQ_BIT
    61  f0b0 f005                       beq +
    62  f0b2 2034eb                     jsr kbIntHandler
    63  f0b5 8009                       bra @endIntHandler
    64                          +
    65                          }
    66                          
    67  f0b7 8910                       bit #VIA_IRQ_BIT
    68  f0b9 f005                       beq +
    69  f0bb 20cbed                     jsr viaIntHandler
    70  f0be 8000                       bra @endIntHandler
    71                          +
    72                                  
    73                          @endIntHandler:
    74  f0c0 7a                         ply
    75  f0c1 fa                         plx
    76  f0c2 68                         pla      
    77  f0c3 40                         rti
    78                          
    79                          
    80                          
    81                          ; -----------------------------------------------------------------------------
    82                          ; HBC-56 TMS9918 VSYNC Interrupt handler
    83                          ; -----------------------------------------------------------------------------
    84                          !ifdef HAVE_TMS9918 {
    85                          hbc56Tms9918Int:
    86                          
    87                                  ; update ticks and seconds
    88  f0c4 ee9f7c                     inc HBC56_TICKS
    89  f0c7 ad9f7c                     lda HBC56_TICKS
    90  f0ca c93c                       cmp #TMS_FPS
    91  f0cc d00d                       bne +
    92  f0ce a900                       lda #0
    93  f0d0 8d9f7c                     sta HBC56_TICKS
    94  f0d3 eea07cd003eea17c           +inc16 HBC56_SECONDS_L
    95                          +
    96                                  ; "tick" for sfx manager
    97                                  !ifdef HAVE_SFX_MAN {
    98                                          jsr sfxManTick
    99                                  }
   100                          
   101                                  ; handle console if enabled
   102  f0db 2ca37c                     bit HBC56_CONSOLE_FLAGS
   103  f0de 1003                       bpl +
   104  f0e0 20e6f0                     jsr .consoleVsyncCallback
   105                          +
   106                          
   107                                  ; rely on callback rts to return
   108  f0e3 6cb97c                     jmp (HBC56_VSYNC_CALLBACK)
   109                          
   110                          
   111                          ; -----------------------------------------------------------------------------
   112                          ; HBC-56 TMS9918 Console update
   113                          ; -----------------------------------------------------------------------------
   114                          .consoleVsyncCallback:
   115                          
   116  f0e6 ad9f7c                     lda HBC56_TICKS
   117  f0e9 f007                       beq .doCursor
   118  f0eb c91e                       cmp #30
   119  f0ed f003                       beq .doCursor
   120  f0ef 4c13f1                     jmp @endConsoleCallback
   121                          
   122                          .doCursor:
   123  f0f2 8ea47c                     stx HBC56_TMP_X
   124  f0f5 8ca57c                     sty HBC56_TMP_Y
   125  f0f8 2025e9                     jsr tmsSetPosConsole
   126  f0fb ad9f7c                     lda HBC56_TICKS
   127  f0fe f00b                       beq +
   128  f100 a920                       lda #' '
   129  f102 8d107f2079e5               +tmsPut
   130  f108 4c13f1                     jmp @endConsoleCallback
   131                          + 
   132  f10b a97f                       lda #$7f
   133  f10d 8d107f2079e5               +tmsPut
   134                          
   135                          @endConsoleCallback
   136                          
   137                          .nullCallbackFunction:
   138  f113 60                         rts
   139                          }

; ******** Source: kernel.asm
   190                          
   191                          
   192                          ; -----------------------------------------------------------------------------
   193                          ; HBC-56 Main entry point (reset vector)
   194                          ; -----------------------------------------------------------------------------
   195                          kernelMain:
   196  f114 78                         sei
   197  f115 d8                         cld     ; make sure we're not in decimal mode
   198  f116 a2ff                       ldx #$ff
   199  f118 9a                         txs
   200                                  
   201  f119 a940                       lda #RTI_OPCODE
   202  f11b 8d007e                     sta HBC56_INT_VECTOR
   203  f11e 8d047e                     sta HBC56_NMI_VECTOR
   204                          
   205  f121 a210a920ca9da67c...        +memset HBC56_META_TITLE, ' ', HBC56_META_TITLE_MAX_LEN
   206                          
   207  f12d a900                       lda #0
   208  f12f 8d9f7c                     sta HBC56_TICKS
   209  f132 8da07c                     sta HBC56_SECONDS_L
   210  f135 8da17c                     sta HBC56_SECONDS_H
   211  f138 8da37c                     sta HBC56_CONSOLE_FLAGS
   212                          
   213  f13b 8db67c                     sta HBC56_META_TITLE + HBC56_META_TITLE_MAX_LEN
   214                          
   215                          
   216  f13e 20fcdf                     jsr HBC56_META_VECTOR   ; user program metadata
   217                          
   218                                  !ifdef HAVE_KEYBOARD {
   219  f141 20f9ea                             jsr kbInit
   220                                  }
   221                          
   222                                  !ifdef HAVE_AY3891X {
   223  f144 2058e1                             jsr ayInit
   224                                  }
   225                          
   226                                  !ifdef HAVE_SFXMAN {
   227                                          jsr sfxManInit  ; requires TMS interrupts
   228                                  }
   229                          
   230                                  !ifdef HAVE_TMS9918 {
   231  f147 20b5e6                             jsr tmsInit
   232                          
   233  f14a a94020dde5                         +tmsDisableOutput
   234                          
   235                                          ; dummy callback
   236  f14f a9138db97ca9f18d...                +hbc56SetVsyncCallback .nullCallbackFunction
   237                                  }
   238                          
   239  f159 a9138dbb7ca9f18d...        +hbc56SetViaCallback .nullCallbackFunction
   240                          
   241                                  !ifdef HAVE_LCD {
   242                                          jsr lcdDetect
   243                                          bcc @noLcd1                
   244                                          jsr lcdInit
   245                                          jsr hbc56Delay
   246                                          jsr lcdDisplayOn
   247                                          jsr hbc56Delay
   248                          @noLcd1:
   249                                  }
   250                          
   251  f163 20c8ef                     jsr hbc56BootScreen
   252                          
   253  f166 a98a8d017ea9f08d...        +setIntHandler hbc56IntHandler
   254                          
   255                                  !ifdef HAVE_TMS9918 {
   256  f175 a94020d3e5                         +tmsEnableOutput
   257  f17a a92020dde5                         +tmsDisableInterrupts
   258                                  }
   259                          
   260  f17f a914                       lda #20
   261  f181 8da27c                     sta HBC56_TMP
   262                          -
   263  f184 20e1ff                     jsr hbc56Delay
   264  f187 cea27c                     dec HBC56_TMP
   265  f18a d0f8                       bne -
   266                                 
   267                                  !ifdef HAVE_TMS9918 {
   268  f18c a92020d3e5                         +tmsEnableInterrupts
   269                                  }
   270  f191 58                         cli
   271                          
   272  f192 20f1f1                     jsr hbc56HighBell
   273                          
   274  f195 a910                       lda #HBC56_CONSOLE_FLAG_NOWAIT
   275  f197 2ca37c                     bit HBC56_CONSOLE_FLAGS
   276  f19a d044                       bne .afterInput
   277                          
   278  f19c a940                       lda #HBC56_CONSOLE_FLAG_NES
   279  f19e 2da37c                     and HBC56_CONSOLE_FLAGS
   280  f1a1 f020                       beq .keyboardInput
   281                          
   282                          
   283                                  ; NES input
   284  f1a3 78                         sei
   285                                  !ifdef HAVE_TMS9918 {
   286  f1a4 0878a9268d117fa9...                +tmsPrintZ .HBC56_PRESS_ANY_NES_TEXT, (32 - .HBC56_PRESS_ANY_NES_TEXT_LEN) / 2, 17
   287                                  }
   288                          
   289                                  !ifdef HAVE_LCD {
   290                                          jsr lcdDetect
   291                                          bcc @noLcd2
   292                                          !ifdef HAVE_GRAPHICS_LCD {
   293                                                  +memcpy TILEMAP_DEFAULT_BUFFER_ADDRESS + 16*6, .HBC56_PRESS_ANY_NES_TEXT, 16
   294                                                  ldy #6
   295                                                  jsr tilemapRenderRowToLcd
   296                                          } else {
   297                                                  lda #<.HBC56_PRESS_ANY_NES_TEXT
   298                                                  sta STR_ADDR_L
   299                                                  lda #>.HBC56_PRESS_ANY_NES_TEXT
   300                                                  sta STR_ADDR_H
   301                                                  jsr lcdPrint
   302                                          }
   303                          @noLcd2:
   304                                  }
   305  f1bc 58                         cli
   306  f1bd 20dcea                     jsr nesWaitForPress
   307  f1c0 4ce0f1                     jmp .afterInput
   308                          
   309                          .keyboardInput
   310                          !ifdef HAVE_KEYBOARD {
   311                                  ; Keyboard  input
   312  f1c3 78                         sei
   313                                  !ifdef HAVE_TMS9918 {
   314  f1c4 0878a9288d117fa9...                +tmsPrintZ .HBC56_PRESS_ANY_KEY_TEXT, (32 - .HBC56_PRESS_ANY_KEY_TEXT_LEN) / 2, 17
   315                                  }
   316                          
   317                                  !ifdef HAVE_LCD {
   318                                          jsr lcdDetect
   319                                          bcc @noLcd3
   320                                          !ifdef HAVE_GRAPHICS_LCD {
   321                                                  +memcpy TILEMAP_DEFAULT_BUFFER_ADDRESS + 16*6, .HBC56_PRESS_ANY_KEY_TEXT, 16
   322                                                  ldy #6
   323                                                  jsr tilemapRenderRowToLcd
   324                                          } else {
   325                                                  lda #<.HBC56_PRESS_ANY_KEY_TEXT
   326                                                  sta STR_ADDR_L
   327                                                  lda #>.HBC56_PRESS_ANY_KEY_TEXT
   328                                                  sta STR_ADDR_H
   329                                                  jsr lcdPrint        
   330                                          }
   331                          @noLcd3:
   332                                  }
   333  f1dc 58                         cli
   334  f1dd 203dec                     jsr kbWaitForScancode
   335                          }
   336                          
   337                          .afterInput
   338                          
   339                                  !ifdef HAVE_LCD {
   340                                          ;jsr lcdDetect
   341                                          ;bcc @noLcd4
   342                                          jsr lcdInit
   343                                          !ifdef HAVE_GRAPHICS_LCD {
   344                                                  jsr lcdTextMode
   345                                          }
   346                                          jsr lcdClear
   347                                          jsr lcdHome
   348                          @noLcd4:
   349                                  }
   350                          
   351                                  !ifdef HAVE_TMS9918 {
   352  f1e0 207de7                             jsr tmsInitTextTable ; clear output
   353  f1e3 a94020dde5                         +tmsDisableOutput
   354  f1e8 a92020dde5                         +tmsDisableInterrupts
   355                                  }
   356                                  ; no interrupts until the user code says so
   357  f1ed 78                         sei
   358                          
   359  f1ee 200080                     jsr DEFAULT_HBC56_RST_VECTOR
   360                          
   361                          ; -----------------------------------------------------------------------------
   362                          ; Beep (higher tone)
   363                          ; -----------------------------------------------------------------------------
   364                          hbc56HighBell:
   365                                  !ifdef HAVE_AY3891X {
   366  f1f1 a9078d407fad427f...                +ayToneEnable AY_PSG0, AY_CHC
   367  f203 a90a8d407fa90f8d...                +aySetVolume AY_PSG0, AY_CHC, $ff
   368  f20d a9048d407fa9b28d...                +ayPlayNote AY_PSG0, AY_CHC, NOTE_FREQ_F5
   369                                  }
   370  f221 8032                       bra .noteTimeout
   371                          
   372                          ; -----------------------------------------------------------------------------
   373                          ; Beep (lower tone)
   374                          ; -----------------------------------------------------------------------------
   375                          hbc56Bell:
   376                                  !ifdef HAVE_AY3891X {
   377  f223 a9078d407fad427f...                +ayToneEnable AY_PSG0, AY_CHC
   378  f235 a90a8d407fa90f8d...                +aySetVolume AY_PSG0, AY_CHC, $ff
   379  f23f a9048d407fa9f68d...                +ayPlayNote AY_PSG0, AY_CHC, NOTE_FREQ_E3
   380                                  }
   381  f253 8000                       bra .noteTimeout
   382                          
   383                          .noteTimeout
   384                                  !ifdef HAVE_SFXMAN {
   385                                          lda HBC56_CONSOLE_FLAGS
   386                                          and #HBC56_CONSOLE_FLAG_LCD
   387                                          bne @skipSfxMan
   388                                          +sfxManSetChannelTimeout  AY_PSG0, AY_CHC, 0.16
   389                                          rts
   390                                  }
   391                          @skipSfxMan
   392                                  !ifdef HAVE_AY3891X {
   393  f255 20e1ff                             jsr hbc56Delay
   394  f258 20e1ff                             jsr hbc56Delay
   395  f25b a9048d407fa9008d...                +ayStop AY_PSG0, AY_CHC
   396                                  }
   397                          
   398  f26f 60                         rts
   399                          
   400                          ; -----------------------------------------------------------------------------
   401                          ; Software reset
   402                          ; -----------------------------------------------------------------------------
   403                          hbc56Reset:
   404  f270 4c14f1                     jmp kernelMain
   405                          
   406                          ; -----------------------------------------------------------------------------
   407                          ; Stop (loop forever)
   408                          ; -----------------------------------------------------------------------------
   409                          hbc56Stop:
   410  f273 cb                         wai
   411  f274 4c73f2                     jmp hbc56Stop
   412                          
   413                          ; -----------------------------------------------------------------------------
   414                          ; Delay function
   415                          ; -----------------------------------------------------------------------------
   416                          hbc56CustomDelayMs:
   417  f277 e635                       inc DELAY_H
   418                          -
   419  f279 a003                       ldy #3
   420  f27b 20e3ff                     jsr hbc56CustomDelay
   421  f27e c634               	dec DELAY_L
   422  f280 d0f7               	bne -
   423  f282 a900               	lda #0
   424  f284 8534                       sta DELAY_L
   425  f286 c635               	dec DELAY_H
   426  f288 d0ef               	bne -
   427  f28a 60                 	rts
   428                          
   429                          
   430                          ;!warn "Kernel size: ", *-$f000
