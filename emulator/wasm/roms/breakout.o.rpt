
; ******** Source: breakout.asm
     1                          ; Troy's HBC-56 - Breakout
     2                          ;
     3                          ; Copyright (c) 2022 Troy Schrapel
     4                          ;
     5                          ; This code is licensed under the MIT license
     6                          ;
     7                          ; https://github.com/visrealm/hbc-56
     8                          ;
     9                          

; ******** Source: ../kernel\hbc56kernel.inc
     1                          ; 6502 - HBC-56 Kernel Include file for user code
     2                          ;
     3                          ; Copyright (c) 2021 Troy Schrapel
     4                          ;
     5                          ; This code is licensed under the MIT license
     6                          ;
     7                          ; https://github.com/visrealm/hbc-56
     8                          ;
     9                          ;
    10                          
    11                          !cpu w65c02
    12                          !initmem $FF
    13                          cputype = $65c02
    14                          

; ******** Source: ../kernel\kernel.o.lmap
     1                          	HBC56_RST_VECTOR	= $fcab	; ?
     2                          	AY_ENV_SHAPE_SAW1	= $8	; unused
     3                          	tmsConsoleBackspace	= $ea63	; ?
     4                          	NES_RAM_SIZE	= $1
     5                          	UART_ZP_START	= $2a
     6                          	TMS_LT_RED	= $9	; unused
     7                          	UART_STATUS_RCVR_OVERRUN	= $20	; unused
     8                          	HBC56_TMP	= $7ccc
     9                          	TILEMAP_SIZE	= $1
    10                          	lcdDisplayOff	= $edf1	; ?
    11                          	KB_SCANCODE_ESC	= $76	; unused
    12                          	AY_ENV_SHAPE_SAW2	= $c	; unused
    13                          	TILEMAP_TMP_OUTPUT_ROW	= $7a83
    14                          	TMS_GFX_TILE_WIDTH	= $8
    15                          	lcdCurrentLine	= $ef25	; ?
    16                          	LCD_RAM_END	= $7b82
    17                          	LCD_ZP_SIZE	= $2
    18                          	TMS_SPRITE_SIZE	= $8
    19                          	KB_SCANCODE_ARROW_RIGHT	= $f4	; unused
    20                          	LCD_EXTENDED	= $3c	; ?
    21                          	LCD_CMD_SHIFT_DISPLAY	= $8	; unused
    22                          	KB_CAPS_LOCK	= $8
    23                          	KB_EXT_KEY	= $e0
    24                          	VIA_RAM_SIZE	= $1
    25                          	HBC56_VSYNC_CALLBACK	= $7ce3
    26                          	isLower	= $e000
    27                          	TMS_R1_SPRITE_MAG2	= $1	; unused
    28                          	bitmapLineH	= $eb06
    29                          	KB_BUFFER_MASK	= $f
    30                          	KB_SCANCODE_SLASH_FORWARD	= $4a	; unused
    31                          	AY_PORTB	= $f	; unused
    32                          	TMS_R1_RAM_16K	= $80
    33                          	lcdLineFour	= $efea	; ?
    34                          	lcdConsolePrint	= $f0a7	; unused
    35                          	AY_PORTA	= $e	; unused
    36                          	TMS_R1_SPRITE_MAG1	= $0	; unused
    37                          	TMS_FPS	= $3c
    38                          	lcdLineThreeEnd	= $ef7b	; ?
    39                          	kbInit	= $f2bd
    40                          	VIA_TMP	= $7c82	; unused
    41                          	tmsSetAddressNextRow	= $e586	; unused
    42                          	START_BYTE	= $7b1f
    43                          	UART_IRQ_BIT	= $4
    44                          	tmsModeText	= $e6b8	; unused
    45                          	VIA_REG_IFR	= $d
    46                          	bitmapLineV	= $eb97
    47                          	_bitmapLineWide	= $ec27	; ?
    48                          	lcdCharScroll	= $ee53
    49                          	LCD_CMD_SET_CGRAM_ADDR	= $40	; unused
    50                          	_tmsSendKb	= $e71b	; ?
    51                          	UART_STATUS_RX_REG_FULL	= $1
    52                          	tmsReg1SetFields	= $e5e5
    53                          	BITMAP_ZP_START	= $1e
    54                          	BITMAP_LINE_STYLE_ODD	= $7b1e
    55                          	END_BYTE	= $7b20
    56                          	JMP_OPCODE	= $4c
    57                          	hbc56IntHandler	= $fc2a
    58                          	TILEMAP_RAM_START	= $7a00
    59                          	KB_SCANCODE_SCROLL_LOCK	= $7e	; unused
    60                          	KB_RAM_END	= $7cc6
    61                          	AY_ENV_SHAPE_HOLD	= $1
    62                          	TMS_R0_MODE_GRAPHICS_II	= $2
    63                          	TILEMAP_ADDR	= $18
    64                          	KB_SHIFT_LEFT_MAP_BYTE	= $2
    65                          	VIA_IO_ADDR_IFR	= $7ffd	; unused
    66                          	TILEMAP_SIZE_Y_8	= $0
    67                          	VIA_IO_ADDR_T1C_H	= $7ff5	; unused
    68                          	MEMORY_ZP_END	= $34
    69                          	TMS_R1_SPRITE_8	= $0	; unused
    70                          	VIA_REG_T1L_H	= $7
    71                          	BITMAP_X	= $7b17
    72                          	BITMAP_Y	= $7b18
    73                          	KB_SCANCODE_PRTSCR	= $92	; unused
    74                          	LCD_BASIC	= $38	; ?	; unused
    75                          	KB_SCANCODE_SLASH_BACK	= $5d	; unused
    76                          	VIA_IO_ADDR_T1C_L	= $7ff4	; unused
    77                          	TILEMAP_SIZE_X_64	= $2
    78                          	AY_WRITE	= $1
    79                          	UART_STATUS_CARRIER_DETECT	= $4	; unused
    80                          	VIA_REG_T1L_L	= $6
    81                          	KB_PRESSED_MAP	= $7ca0
    82                          	TMS9918_ZP_START	= $24
    83                          	tmsDecPosConsole	= $e941
    84                          	UART_CTL_WORD_8BIT_1SB	= $14	; unused
    85                          	HBC56_CONSOLE_FLAG_LCD	= $20	; unused
    86                          	TMS_CYAN	= $7
    87                          	ASCII_NEWLINE	= $a
    88                          	HBC56_TITLE	= $f592
    89                          	memcpyMultiPage	= $e0bf	; unused
    90                          	LCD_ROWS	= $4
    91                          	KB_SCANCODE_NUM_LOCK	= $77	; unused
    92                          	TILEMAP_RAM_END	= $7b16
    93                          	lcdGraphicsMode	= $ed2a
    94                          	VIA_DIR_OUTPUT	= $ff	; unused
    95                          	TILEMAP_ZP_SIZE	= $6
    96                          	lcdPrint	= $ee30
    97                          	KB_BUFFER_TAIL	= $7c8f
    98                          	tmsSetRegister	= $e5bc
    99                          	hbc56Tms9918Int	= $fc5b	; ?
   100                          	lcdGotoLineEnd	= $ef28	; ?
   101                          	KB_SCANCODE_NUMPAD_ENTER	= $da	; unused
   102                          	TILEMAP_FIXED_ADDRESS	= $7b00
   103                          	UART_STATUS_TX_REG_EMPTY	= $2
   104                          	UART_RX_BUFFER_XOFF_SIZE	= $c0
   105                          	KB_FLAGS	= $7c86
   106                          	lcdGotoLine	= $efbf	; ?
   107                          	HBC56_NMI_VECTOR	= $7e04
   108                          	KB_SCANCODE_SQUARE_LEFT	= $54	; unused
   109                          	LCD_CMD_SHIFT_CURSOR	= $0	; unused
   110                          	lcdRead	= $ee29
   111                          	BITMAP_ZP_END	= $24
   112                          	lcdLineOne	= $efd2	; ?
   113                          	UART_CTL_CLOCK_DIV_64	= $2
   114                          	toUpper	= $e06b	; unused
   115                          	VIA_IO_ADDR	= $7ff0
   116                          	tableBitsFromLeft	= $e150	; unused
   117                          	LCD_CMD_ENTRY_MODE	= $4	; unused
   118                          	NES_TMP	= $7cc6	; unused
   119                          	HBC56_META_TITLE_END	= $7ce1
   120                          	uartFlowCtrlXoff	= $f246	; ?
   121                          	SFXMAN_RAM_START	= $7c83
   122                          	uartInWait	= $f24f
   123                          	uartOutString	= $f293	; unused
   124                          	RTI_OPCODE	= $40
   125                          	KB_SCANCODE_PAGE_UP	= $fd	; unused
   126                          	AY_ENV_SHAPE_FADE_OUT	= $9	; unused
   127                          	tmsModeBitmap	= $e623	; unused
   128                          	lcdReadLine	= $f011
   129                          	LINE_WIDTH	= $7b1f
   130                          	TMS_VRAM_SPRITE_ATTR_ADDRESS	= $3b00
   131                          	LCD_CMD_SET_DRAM_ADDR	= $80
   132                          	NOTE_FREQ_AS8	= 7458.619999999999890860635787248611	; unused
   133                          	HBC56_TMP_Y	= $7ccf
   134                          	KB_SCANCODE_TILDE	= $e	; unused
   135                          	HBC56_TITLE_LEN	= $1a
   136                          	UART_IO_PORT	= $20
   137                          	TMS9918_RAM_END	= $7b58
   138                          	AY_S0_ADDR	= $7f40	; unused
   139                          	TMS9918_ZP_SIZE	= $2
   140                          	HBC56_TMP_X	= $7cce
   141                          	NOTE_FREQ_AS5	= 932.330000000000040927261579781771	; unused
   142                          	TMS_MED_GREEN	= $2	; unused
   143                          	TMS_WHITE	= $f
   144                          	LCD_CMD_DISPLAY_CURSOR_BLINK	= $1
   145                          	LCD_ADDR_LINE2	= $10
   146                          	KB_SCANCODE_WINDOWS_RIGHT	= $a7	; unused
   147                          	HBC56_KERNEL_ZP_END	= $38
   148                          	AY_S1_WRITE	= $7f45	; unused
   149                          	NOTE_FREQ_AS4	= 466.160000000000025011104298755527	; unused
   150                          	LCD_CMD_SHIFT	= $10
   151                          	VIA_REG_DDR_B	= $2
   152                          	LCD_ADDR_LINE3	= $8
   153                          	NOTE_FREQ_AS7	= 3729.309999999999945430317893624306	; unused
   154                          	TMS_TMP_ADDRESS	= $24
   155                          	KB_SCANCODE_PERIOD	= $49	; unused
   156                          	VIA_REG_DDR_A	= $3
   157                          	tableBitFromLeft	= $e130
   158                          	NOTE_FREQ_AS6	= 1864.660000000000081854523159563541	; unused
   159                          	LCD_ADDR_LINE1	= $0
   160                          	AY_NOISE_GEN	= $6	; unused
   161                          	NOTE_FREQ_AS1	= 58.270000000000003126388037344441	; unused
   162                          	BITMAP_X2	= $7b19
   163                          	AY_S0_WRITE	= $7f41	; unused
   164                          	NOTE_FREQ_AS0	= 29.140000000000000568434188608080	; unused
   165                          	tmsSetAddressRead	= $e5a8
   166                          	VIA_RAM_START	= $7c82
   167                          	LCD_CMD_CLEAR	= $1
   168                          	NOTE_FREQ_AS3	= 233.080000000000012505552149377763	; unused
   169                          	UART_RX_BUFFER_TAIL	= $2b
   170                          	tmsSetPatternRead	= $e9dc	; unused
   171                          	LCD_ADDR_LINE4	= $18
   172                          	AY_S1_ADDR	= $7f44	; unused
   173                          	NOTE_FREQ_AS2	= 116.540000000000006252776074688882	; unused
   174                          	BITMAP_X1	= $7b17
   175                          	UART_RX_BUFFER	= $7b82
   176                          	TMS_R1_SPRITE_16	= $2	; unused
   177                          	TMS_GFX_PIXELS_Y	= $c0	; unused
   178                          	TMS_GFX_PIXELS_X	= $100	; unused
   179                          	KB_SCANCODE_NUMPAD_MULTIPLY	= $7c	; unused
   180                          	HBC56_DISABLE_SFXMAN	= $1
   181                          	tmsSetAddressWrite	= $e592
   182                          	D	= $7b24
   183                          	TMS_MAGENTA	= $d	; unused
   184                          	LCD_GRAPHICS	= $1
   185                          	LCD_IO_PORT	= $2
   186                          	tmsConsoleScrollLine	= $e8ac
   187                          	KB_SCANCODE_CTRL_RIGHT	= $94	; unused
   188                          	_tmsSendEmptyPage	= $e75a
   189                          	HAVE_GRAPHICS_LCD	= $1
   190                          	KB_BUFFER_SIZE	= $10
   191                          	KB_SCANCODE_COMMA	= $41	; unused
   192                          	HBC56_TITLE_TEXT	= $f592
   193                          	AY_R10	= $a
   194                          	BITMAP_TMP1	= $7b1f
   195                          	LCD_CMD_12864B_EXTENDED	= $4
   196                          	AY_IO_PORT	= $40
   197                          	AY_R11	= $b
   198                          	NES_LEFT	= $2	; unused
   199                          	AY_R12	= $c
   200                          	TMS_R1_DISP_BLANK	= $0	; unused
   201                          	LCD_RAM_SIZE	= $2a
   202                          	KB_NUM_LOCK	= $10	; unused
   203                          	BITMAP_TMP3	= $7b21
   204                          	hbc56LogoPatt	= $f942
   205                          	kernelMain	= $fcab	; ?
   206                          	AY_R13	= $d
   207                          	hbc56LogoPattEnd	= $faba	; unused
   208                          	BITMAP_TMP2	= $7b20
   209                          	tilemapSetActive	= $f12c	; ?
   210                          	ASCII_CR	= $d
   211                          	AY_R14	= $e
   212                          	KB_SCANCODE_PAGE_DOWN	= $fa	; unused
   213                          	BITMAP_TMP5	= $7b23
   214                          	kbIntHandler	= $f2f8
   215                          	IO_PORT_BASE_ADDRESS	= $7f00
   216                          	AY_R15	= $f
   217                          	BITMAP_TMP4	= $7b22
   218                          	isDigit	= $e01e
   219                          	AY_R16	= $10	; unused
   220                          	HAVE_TMS9918	= $1
   221                          	UART_CTL_MASTER_RESET	= $3
   222                          	AY_R17	= $11	; unused
   223                          	BITMAP_TMP6	= $7b24
   224                          	KB_SCANCODE_TAB	= $d	; unused
   225                          	HBC56_KERNEL_ZP_START	= $18
   226                          	TMS9918_IRQ_BIT	= $1
   227                          	HBC56_BORDER	= $4
   228                          	TMS_R1_MODE_MULTICOLOR	= $8
   229                          	lcdTextMode	= $ed3b
   230                          	TMS_R0_MODE_MULTICOLOR	= $0
   231                          	lcdNextLine2	= $f004	; unused
   232                          	TMS_DK_BLUE	= $4
   233                          	LCD_CMD_DISPLAY_CURSOR	= $2
   234                          	lcdClear	= $edd6	; ?
   235                          	TMS_VRAM_SPRITE_PATT_ADDRESS	= $1800
   236                          	lcdNextLine4	= $eff2
   237                          	HBC56_CONSOLE_FLAG_NOWAIT	= $10
   238                          	lcdGraphicsSetRow	= $ed4c
   239                          	KB_SCANCODE_ENTER	= $5a	; unused
   240                          	KB_IO_PORT	= $80
   241                          	AY_ENV_SHAPE_ATTACK	= $4
   242                          	UART_STATUS_IRQ	= $80	; unused
   243                          	X	= $7b21
   244                          	TILEMAP_INVERT_ADDR	= $3
   245                          	NES_DOWN	= $4	; unused
   246                          	tmsReg1ClearFields	= $e5ef
   247                          	Y	= $7b21
   248                          	NES_SELECT	= $20	; unused
   249                          	LCD_CMD_ENTRY_MODE_SHIFT	= $1	; unused
   250                          	TILEMAP_RAM_SIZE	= $107
   251                          	hbc56Stop	= $fe61
   252                          	lcdChar	= $ee4c
   253                          	lcdInt8	= $eea4	; unused
   254                          	UART_RX_BUFFER_SIZE	= $100
   255                          	KB_BUFFER	= $7c90
   256                          	DEFAULT_HBC56_NMI_VECTOR	= $ffe0	; unused
   257                          	COL_BYTE	= $7b1f
   258                          	HAVE_TILEMAP	= $1	; unused
   259                          	TILEMAP_HEIGHT_TILES	= $6
   260                          	NES1_IO_ADDR	= $7f82
   261                          	lcdDetect	= $ee15
   262                          	UART_CTL_WORD_7BIT_OPB_1SB	= $c	; unused
   263                          	KB_SCANCODE_NUMPAD_PLUS	= $79	; unused
   264                          	NES2_IO_ADDR	= $7f83
   265                          	BITMAP_RAM_END	= $7b26
   266                          	BITMAP_ZP_SIZE	= $4
   267                          	KB_SCANCODE_F2	= $6	; unused
   268                          	lcdCursorBlinkOn	= $ee0c
   269                          	HBC56_TITLE_TEXT_LEN	= $1a
   270                          	lcdConsoleOut	= $f081
   271                          	NES_UP	= $8	; unused
   272                          	KB_SCANCODE_F3	= $4	; unused
   273                          	VIA_DIR_INPUT	= $0	; unused
   274                          	DELAY_L	= $36
   275                          	TMS_TXT_TILES_X	= $28
   276                          	ASCII_BACKSPACE	= $8
   277                          	TMS_TXT_TILES_Y	= $18
   278                          	KB_SCANCODE_F1	= $5	; unused
   279                          	KB_SCANCODE_SEMICOLON	= $4c	; unused
   280                          	c	= $20
   281                          	KB_SCANCODE_F6	= $b	; unused
   282                          	TMS_R1_DISP_ACTIVE	= $40
   283                          	tmsInitColorTable	= $e7d3
   284                          	KB_SCANCODE_F7	= $83	; unused
   285                          	KB_SCANCODE_HOME	= $ec	; unused
   286                          	DELAY_H	= $37
   287                          	KB_SCANCODE_F4	= $c	; unused
   288                          	tmsSetPosTmpAddress	= $e86a
   289                          	uartInNoWait	= $f259	; unused
   290                          	hbc56Reset	= $fe5e	; unused
   291                          	KB_SCANCODE_F5	= $3	; unused
   292                          	hbc56CustomDelayMs	= $fe65	; unused
   293                          	lcdLineThree	= $efe2	; ?
   294                          	_tmsWaitReg	= $e582
   295                          	uartOut	= $f27c	; ?
   296                          	KB_TMP_X	= $7c87
   297                          	KB_SCANCODE_F8	= $a	; unused
   298                          	hbc56LogoLcd	= $f800
   299                          	HBC56_KERNEL_RAM_START	= $7a00
   300                          	KB_TMP_Y	= $7c88	; unused
   301                          	KB_SCANCODE_F9	= $1	; unused
   302                          	tmsConsolePrint	= $ea2c	; unused
   303                          	lcdLineTwo	= $efda	; ?
   304                          	tmsConsoleCls	= $e95e	; unused
   305                          	uartIrq	= $f217
   306                          	TILEMAP_BUFFER_ADDR	= $0
   307                          	TMS_BLACK	= $1
   308                          	TILEMAP_WIDTH_TILES	= $5
   309                          	HAVE_LCD	= $1
   310                          	HBC56_META_TITLE	= $7cd0
   311                          	KB_SCANCODE_SQUARE_RIGHT	= $5b	; unused
   312                          	tmsConsoleNewline	= $ea3c	; ?
   313                          	LCD_CMD_8BITMODE	= $10
   314                          	AY_S1	= $7f44
   315                          	NOTE_FREQ_C8	= 4186.010000000000218278728425502777	; unused
   316                          	KB_IRQ_BIT	= $2
   317                          	tmsModeGraphicsII	= $e697	; unused
   318                          	AY_S0	= $7f40
   319                          	NOTE_FREQ_A8	= $1b80	; unused
   320                          	HBC56_TICKS	= $7cc9
   321                          	HBC56_SECONDS_H	= $7ccb
   322                          	memcpySinglePage	= $e0a3	; unused
   323                          	tmsModeGraphicsI	= $e610
   324                          	NOTE_FREQ_G8	= 6271.930000000000291038304567337036	; unused
   325                          	AY_ADDR	= $0
   326                          	NOTE_FREQ_E8	= 5274.039999999999963620211929082870	; unused
   327                          	TMS_R1_RAM_4K	= $0	; unused
   328                          	AY_ENV_SHAPE_ALTERNATE	= $2
   329                          	NOTE_FREQ_DS8	= 4978.029999999999745341483503580093	; unused
   330                          	tmsInitEntireColorTable	= $e7d1	; ?
   331                          	TILEMAP_TMP_BUFFER_ADDR	= $1a
   332                          	TMS_GREY	= $e
   333                          	NES_B	= $40	; unused
   334                          	HBC56_SECONDS_L	= $7cca
   335                          	AY_PSG1	= $4
   336                          	UART_CTL_WORD_7BIT_EPB_1SB	= $8	; unused
   337                          	NES_A	= $80	; unused
   338                          	LCD_COLUMNS	= $10
   339                          	TMS9918_IO_PORT	= $10
   340                          	UART_RAM_END	= $7c82
   341                          	AY_PSG0	= $0
   342                          	UART_FLOWCTRL_XON	= $11
   343                          	LCD_CMD_FUNCTIONSET	= $20
   344                          	DEFAULT_HBC56_RST_VECTOR	= $8000
   345                          	NOTE_FREQ_C0	= 16.350000000000001421085471520200	; unused
   346                          	NOTE_FREQ_A1	= $37	; unused
   347                          	NOTE_FREQ_G2	= $62	; unused
   348                          	NOTE_FREQ_E3	= 164.810000000000002273736754432321
   349                          	NOTE_FREQ_DS4	= 311.129999999999995452526491135359	; unused
   350                          	KB_SCANCODE_CTRL_LEFT	= $14	; unused
   351                          	lcdImageVflip	= $ed92	; unused
   352                          	TILE_SIZE	= $8	; unused
   353                          	NOTE_FREQ_A0	= 27.500000000000000000000000000000	; unused
   354                          	NOTE_FREQ_E2	= 82.409999999999996589394868351519	; unused
   355                          	NOTE_FREQ_DS5	= 622.250000000000000000000000000000	; unused
   356                          	tmsReg0ClearFields	= $e5dd
   357                          	LCD_CMD_HOME	= $2
   358                          	UART_STATUS_CLEAR_TO_SEND	= $8	; unused
   359                          	NOTE_FREQ_G3	= $c4	; unused
   360                          	NOTE_FREQ_C1	= 32.700000000000002842170943040401	; unused
   361                          	NOTE_FREQ_G0	= 24.500000000000000000000000000000	; unused
   362                          	NOTE_FREQ_E1	= 41.200000000000002842170943040401	; unused
   363                          	NOTE_FREQ_DS6	= 1244.509999999999990905052982270718	; unused
   364                          	UART_DATA	= $7f21
   365                          	VIA_IO_ADDR_T2C_H	= $7ff9	; unused
   366                          	NOTE_FREQ_C2	= 65.409999999999996589394868351519	; unused
   367                          	NOTE_FREQ_A3	= $dc	; unused
   368                          	NOTE_FREQ_E0	= 20.600000000000001421085471520200	; unused
   369                          	NOTE_FREQ_DS7	= 2489.019999999999981810105964541435	; unused
   370                          	TMS9918_TMP_BUFFER	= $7b30
   371                          	NOTE_FREQ_G1	= $31	; unused
   372                          	NOTE_FREQ_A2	= $6e	; unused
   373                          	NOTE_FREQ_C3	= 130.810000000000002273736754432321	; unused
   374                          	UART_ZP_END	= $2e
   375                          	NOTE_FREQ_DS0	= 19.449999999999999289457264239900	; unused
   376                          	NOTE_FREQ_C4	= 261.629999999999995452526491135359	; unused
   377                          	NOTE_FREQ_A5	= $370	; unused
   378                          	NOTE_FREQ_G6	= 1567.980000000000018189894035458565	; unused
   379                          	NOTE_FREQ_E7	= 2637.019999999999981810105964541435	; unused
   380                          	NOTE_FREQ_DS1	= 38.890000000000000568434188608080	; unused
   381                          	HAVE_KEYBOARD	= $1
   382                          	NOTE_FREQ_A4	= $1b8	; unused
   383                          	NOTE_FREQ_E6	= 1318.509999999999990905052982270718	; unused
   384                          	_bitmapLineTall	= $ec78	; ?
   385                          	hbc56HighBell	= $fddf	; ?
   386                          	NOTE_FREQ_G7	= 3135.960000000000036379788070917130	; unused
   387                          	NOTE_FREQ_C5	= 523.250000000000000000000000000000	; unused
   388                          	tmsConsoleHome	= $e961	; unused
   389                          	_bitmapOffset	= $eab8
   390                          	NOTE_FREQ_DS2	= 77.780000000000001136868377216160	; unused
   391                          	NOTE_FREQ_G4	= $188	; unused
   392                          	NOTE_FREQ_E5	= 659.250000000000000000000000000000	; unused
   393                          	VIA_IO_ADDR_T2C_L	= $7ff8	; unused
   394                          	NOTE_FREQ_C6	= 1046.500000000000000000000000000000	; unused
   395                          	NOTE_FREQ_A7	= $dc0	; unused
   396                          	BCD_RAM_START	= $7c83
   397                          	HBC56_META_TITLE_MAX_LEN	= $10
   398                          	isDigitX	= $e030	; unused
   399                          	NOTE_FREQ_DS3	= 155.560000000000002273736754432321	; unused
   400                          	NOTE_FREQ_E4	= 329.629999999999995452526491135359	; unused
   401                          	NOTE_FREQ_G5	= 783.990000000000009094947017729282	; unused
   402                          	NOTE_FREQ_A6	= $6e0	; unused
   403                          	NOTE_FREQ_C7	= $82d	; unused
   404                          	VIA_RAM_END	= $7c83
   405                          	AY_INACTIVE	= $3	; unused
   406                          	TMS_SPRITE_SIZE2X	= $10	; unused
   407                          	tmsSetPosWriteText	= $e97a	; ?
   408                          	KB_SCANCODE_F11	= $78	; unused
   409                          	AY_S0_READ	= $7f42	; unused
   410                          	tmsInitTextTable	= $e7ad	; ?
   411                          	LCD_TMP2	= $29
   412                          	lcdCursorOn	= $edfa	; unused
   413                          	KB_SCANCODE_F10	= $9	; unused
   414                          	VIA_REG_PORT_A	= $1
   415                          	LCD_TMP1	= $28
   416                          	KB_SCANCODE_NUMPAD_PERIOD	= $71	; unused
   417                          	VIA_REG_PORT_B	= $0
   418                          	KB_SCANCODE_F12	= $7	; unused
   419                          	kbNextScancode	= $f416
   420                          	lcdBackspace	= $ee70
   421                          	KB_SCANCODE_WINDOWS_LEFT	= $9f	; unused
   422                          	BCD_RAM_END	= $7c86
   423                          	ASCII_RETURN	= $a
   424                          	lcdWaitPreserve	= $ee23
   425                          	TILEMAP_TILES_ADDR	= $2
   426                          	tilemapRenderToLcd	= $f169	; unused
   427                          	LCD_CMD_DISPLAY	= $8
   428                          	TILEMAP_TMP_TILE_SIZE	= $7a88
   429                          	TMS_R1_INT_ENABLE	= $20
   430                          	lcdLineOneEnd	= $ef37	; ?
   431                          	bitmapLine	= $ebe0	; unused
   432                          	UART_CTL_WORD_8BIT_OPAR_1SB	= $1c	; unused
   433                          	isSpace	= $e049	; unused
   434                          	hbc56BootScreen	= $faba
   435                          	AY_S1_READ	= $7f46	; unused
   436                          	KB_SCANCODE_END	= $e9	; unused
   437                          	TMS_GFX_TILE_HEIGHT	= $8
   438                          	KB_SCANCODE_SHIFT_RIGHT	= $59
   439                          	TMS_LT_BLUE	= $5	; unused
   440                          	TMS_R0_EXT_VDP_ENABLE	= $1	; unused
   441                          	TILEMAP_STRUCTURE_SIZE	= $7
   442                          	uartOutNoBsCheck	= $f282	; ?
   443                          	KB_SCANCODE_ALT_LEFT	= $11	; unused
   444                          	lcdLineTwoEnd	= $ef59	; ?
   445                          	HBC56_INT_VECTOR	= $7e00
   446                          	LINE_HEIGHT	= $7b20
   447                          	VIA_REG_IER	= $e
   448                          	tmsIncPosConsole	= $e920
   449                          	INT_IO_PORT	= $df
   450                          	KB_PRESSED_MAP_BYTES	= $20
   451                          	VIA_REG_ACR	= $b
   452                          	STR_ADDR_H	= $35
   453                          	NES_RAM_END	= $7cc9
   454                          	memsetSinglePage	= $e101
   455                          	TMS_FONT_DATA	= $e271
   456                          	tmsSetPatternTmpAddressII	= $e98a	; unused
   457                          	kbWaitForScancode	= $f401
   458                          	LCD_CMD_SHIFT_LEFT	= $0
   459                          	tmsReg0SetFields	= $e5d3
   460                          	tmsPrint	= $e9e2
   461                          	KB_SCANCODE_APOS	= $52	; unused
   462                          	STR_ADDR_L	= $34
   463                          	tmsSetPosConsole	= $e967
   464                          	KB_SHIFT_RIGHT_MAP_BYTE	= $b
   465                          	AY_CLOCK_FREQ	= $1e8480
   466                          	tmsSetBackground	= $e5cf
   467                          	BITMAP_ADDR_H	= $20
   468                          	TMS_R1_MODE_GRAPHICS_II	= $0
   469                          	UART_RX_BUFFER_XON_SIZE	= $4
   470                          	VIA_IO_ADDR_ACR	= $7ffb	; unused
   471                          	uartFlowCtrlXon	= $f23b	; ?
   472                          	TILEMAP_SIZE_X_32	= $1
   473                          	VIA_IO_ADDR_IER	= $7ffe	; unused
   474                          	ASCII_BELL	= $7	; unused
   475                          	BCD_TMP3	= $7c85
   476                          	TMS_MED_RED	= $8	; unused
   477                          	DISPLAY_MODE	= $c
   478                          	UART_CTL_WORD_8BIT_EPAR_1SB	= $18	; unused
   479                          	BCD_TMP2	= $7c84
   480                          	LCD_ZP_END	= $2a
   481                          	toLower	= $e073	; unused
   482                          	BCD_TMP1	= $7c83
   483                          	MEM_SRC	= $30
   484                          	AY_ENABLES	= $7
   485                          	lcdWait	= $ee1d	; ?
   486                          	UART_CTL_WORD_7BIT_OPB_2SB	= $4	; unused
   487                          	lcdInit	= $edc4
   488                          	LCD_RAM_START	= $7b58
   489                          	TMS_LT_GREEN	= $3	; unused
   490                          	_tmsWaitData	= $e579
   491                          	tmsSetColorTmpAddressII	= $e986	; unused
   492                          	TILEMAP_SIZE_X_16	= $0
   493                          	HAVE_MATH_INC	= $1
   494                          	TILEMAP_TMP_TILES_W	= $7a86
   495                          	KB_SCANCODE_B	= $32	; unused
   496                          	hbc56Bell	= $fe11	; unused
   497                          	KB_SCANCODE_C	= $21	; unused
   498                          	TMS_TXT_PIXELS_X	= $f0	; unused
   499                          	lcdCursorOff	= $ee03
   500                          	HBC56_KERNEL_RAM_SIZE	= $2e7	; unused
   501                          	TMS_TXT_PIXELS_Y	= $c0	; unused
   502                          	lcdLineFourEnd	= $ef9d	; ?
   503                          	KB_SCANCODE_A	= $1c	; unused
   504                          	TMS_GFX_TILES_Y	= $18
   505                          	KB_PRESSED_MAP_SIZE	= $fe	; unused
   506                          	KB_SCANCODE_F	= $2b	; unused
   507                          	kbIsPressed	= $f3e4	; unused
   508                          	TMS_R0_MODE_TEXT	= $0
   509                          	TMS_GFX_TILES_X	= $20
   510                          	TILEMAP_DIRTY_ADDR	= $4
   511                          	KB_SCANCODE_G	= $34	; unused
   512                          	TMS_R0_MODE_GRAPHICS_I	= $0
   513                          	tmsSetSpriteTmpAddress	= $e861	; unused
   514                          	bitmapClear	= $ea79	; unused
   515                          	KB_CB_RELEASED	= $7c8b
   516                          	KB_SCANCODE_D	= $23	; unused
   517                          	TMS_R1_MODE_GRAPHICS_I	= $0
   518                          	KB_SCANCODE_E	= $24	; unused
   519                          	TILEMAP_ZP_START	= $18
   520                          	KB_SHIFT_DOWN	= $1	; unused
   521                          	KB_SCANCODE_J	= $3b	; unused
   522                          	KB_CB_PRESSED	= $7c89
   523                          	KB_SCANCODE_K	= $42	; unused
   524                          	KB_SHIFT_RIGHT_MAP_BIT	= $40
   525                          	HBC56_CONSOLE_FLAGS	= $7ccd
   526                          	AY_ENV_SHAPE	= $d
   527                          	LCD_CMD_ENTRY_MODE_DECREMENT	= $0	; unused
   528                          	KB_SCANCODE_H	= $33	; unused
   529                          	kbReadAscii	= $f47e	; unused
   530                          	KB_BUFFER_HEAD	= $7c8e
   531                          	KB_SCANCODE_I	= $43	; unused
   532                          	viaIntHandler	= $f58f
   533                          	KB_SCANCODE_N	= $31	; unused
   534                          	tmsTileXyAtPixelXy	= $e827	; unused
   535                          	UART_CTL_CLOCK_DIV_16	= $1	; unused
   536                          	nesWaitForPress	= $f2a0
   537                          	hbc56LogoInd	= $f900
   538                          	KB_SCANCODE_O	= $44	; unused
   539                          	memcpyMultiPagePort	= $e0e1	; unused
   540                          	KB_SCANCODE_L	= $4b	; unused
   541                          	bin2bcd8	= $e07b	; unused
   542                          	KB_SCANCODE_M	= $3a	; unused
   543                          	KB_SCANCODE_ARROW_UP	= $f5	; unused
   544                          	lcdCurrentLine2	= $ef18	; unused
   545                          	UART_RX_BUFFER_HEAD	= $2a
   546                          	KB_SCANCODE_R	= $2d	; unused
   547                          	_tmsSendPage	= $e724	; ?
   548                          	LCD_CMD_ENTRY_MODE_INCREMENT	= $2	; unused
   549                          	tmsSetPosWrite	= $e96d	; unused
   550                          	KB_SCANCODE_S	= $1b	; unused
   551                          	hbc56FontLcd	= $f600
   552                          	tilemapRenderRowToLcd	= $f142
   553                          	KB_SCANCODE_P	= $4d	; unused
   554                          	TMS_DK_RED	= $6	; unused
   555                          	LCD_CMD_SHIFT_RIGHT	= $4	; unused
   556                          	TILEMAP_TMP_BUF_ROW	= $7a80
   557                          	KB_SCANCODE_Q	= $15	; unused
   558                          	NOTE_FREQ_GS8	= 6644.880000000000109139364212751389	; unused
   559                          	BITMAP_LINE_STYLE	= $7b1d
   560                          	KB_CURRENT_STATE	= $7c8d
   561                          	KB_SCANCODE_V	= $2a	; unused
   562                          	NOTE_FREQ_CS8	= 4434.920000000000072759576141834259	; unused
   563                          	KB_SCANCODE_W	= $1d	; unused
   564                          	HBC56_CONSOLE_FLAG_NES	= $40
   565                          	lcdCurrentLine4	= $ef03
   566                          	UART_CTL_WORD_7BIT_EPB_2SB	= $0	; unused
   567                          	kbScancodeToAscii	= $f42b
   568                          	LCD_CMD	= $7f02
   569                          	KB_SCANCODE_T	= $2c	; unused
   570                          	KB_SHIFT_LEFT_MAP_BIT	= $20
   571                          	TMS_TRANSPARENT	= $0	; unused
   572                          	TILEMAP_TMP_TILES_ADDR	= $1c
   573                          	KB_SCANCODE_U	= $3c	; unused
   574                          	SFXMAN_RAM_END	= $7c83
   575                          	NOTE_FREQ_GS4	= 415.300000000000011368683772161603	; unused
   576                          	tmsSendBytes	= $e75e
   577                          	NOTE_FREQ_CS5	= 554.370000000000004547473508864641	; unused
   578                          	VIA_REG_T2C_H	= $9
   579                          	lcdHex8	= $eeda	; unused
   580                          	KB_SCANCODE_Z	= $1a	; unused
   581                          	LCD_ZP_START	= $28
   582                          	NOTE_FREQ_CS4	= 277.180000000000006821210263296962	; unused
   583                          	NOTE_FREQ_GS5	= 830.610000000000013642420526593924	; unused
   584                          	KB_SCANCODE_MINUS	= $4e	; unused
   585                          	isUpper	= $e00c
   586                          	TMS_VRAM_NAME_ADDRESS	= $3800
   587                          	UART_IRQ	= $3
   588                          	NES_RAM_START	= $7cc6
   589                          	LCD_CMD_2LINE	= $8
   590                          	NOTE_FREQ_GS6	= 1661.220000000000027284841053187847	; unused
   591                          	NOTE_FREQ_CS7	= 2217.460000000000036379788070917130	; unused
   592                          	KB_SCANCODE_X	= $22	; unused
   593                          	KB_SCANCODE_PAUSE	= $e1
   594                          	KB_IO_ADDR	= $7f80
   595                          	TILEMAP_SIZE_Y_32	= $8
   596                          	memcpySinglePagePort	= $e0b1	; unused
   597                          	NOTE_FREQ_CS6	= 1108.730000000000018189894035458565	; unused
   598                          	NOTE_FREQ_GS7	= 3322.440000000000054569682106375694	; unused
   599                          	TMS_REGISTER_DATA	= $e571
   600                          	TMS_MODEL	= $26be
   601                          	KB_SCANCODE_Y	= $35	; unused
   602                          	NOTE_FREQ_GS0	= 25.960000000000000852651282912120	; unused
   603                          	NOTE_FREQ_CS1	= 34.649999999999998578914528479800	; unused
   604                          	HAVE_BITMAP	= $1	; unused
   605                          	BITMAP_Y2	= $7b1a
   606                          	bitmapFilledRect	= $ecf2	; unused
   607                          	VIA_REG_T2C_L	= $8
   608                          	ROM_BANK_REG	= $8	; unused
   609                          	HBC56_USER_ZP_START	= $38	; unused
   610                          	NOTE_FREQ_CS0	= 17.320000000000000284217094304040	; unused
   611                          	NOTE_FREQ_GS1	= 51.909999999999996589394868351519	; unused
   612                          	LCD_CMD_EXT_GRAPHICS_ENABLE	= $2
   613                          	UART_CTL_RX_INT_ENABLE	= $80
   614                          	KB_SCANCODE_CAPS_LOCK	= $58
   615                          	tableInvBitFromRight	= $e148	; unused
   616                          	tmsInitPattTable	= $e76d	; ?
   617                          	TMS9918_IRQ	= $1
   618                          	HBC56_CONSOLE_FLAG_CURSOR	= $80	; unused
   619                          	NOTE_FREQ_GS2	= 103.829999999999998294697434175760	; unused
   620                          	NOTE_FREQ_CS3	= 138.590000000000003410605131648481	; unused
   621                          	tmsModeMulticolor	= $e6cb	; unused
   622                          	NOTE_FREQ_CS2	= 69.299999999999997157829056959599	; unused
   623                          	NOTE_FREQ_GS3	= 207.650000000000005684341886080801	; unused
   624                          	BITMAP_Y1	= $7b18
   625                          	TILEMAP_TMP_TILES_H	= $7a87
   626                          	TILEMAP_SIZE_Y_16	= $4
   627                          	KB_IRQ	= $2
   628                          	VIA_IO_PORT	= $f0
   629                          	HBC56_VIA_CALLBACK	= $7ce5
   630                          	_tmsSendX8	= $e726
   631                          	KB_SCANCODE_NUMPAD_5	= $73	; unused
   632                          	AY_CHA	= $0
   633                          	lcdImage	= $ed67
   634                          	KB_SCANCODE_ALT_RIGHT_	= $91	; unused
   635                          	bitmapFill	= $ea80	; unused
   636                          	bitmapXor	= $ea9d	; unused
   637                          	KB_SCANCODE_NUMPAD_4	= $6b	; unused
   638                          	AY_CHB	= $1
   639                          	lcdNextLine	= $f00e	; ?
   640                          	KB_RAM_SIZE	= $3a
   641                          	tmsSetPatternWrite	= $e9d6	; unused
   642                          	lcdDisplayOn	= $ede8
   643                          	KB_SCANCODE_NUMPAD_7	= $6c	; unused
   644                          	UART_RAM_START	= $7b82
   645                          	AY_CHC	= $2
   646                          	KB_SCANCODE_NUMPAD_6	= $74	; unused
   647                          	MEMORY_ZP_SIZE	= $6
   648                          	tilemapInit	= $f0b4
   649                          	KB_SCANCODE_NUMPAD_1	= $69	; unused
   650                          	KEY_MAP_SHIFTED	= $f50f	; ?
   651                          	AY_READ	= $2
   652                          	KB_SCANCODE_NUMPAD_0	= $70	; unused
   653                          	KB_SCANCODE_NUMPAD_3	= $7a	; unused
   654                          	HBC56_LOGO	= $4
   655                          	VIA_IRQ	= $5
   656                          	tableBitFromRight	= $e140	; unused
   657                          	KB_SCANCODE_NUMPAD_2	= $72	; unused
   658                          	TMS9918_CONSOLE_LINE_LEN	= $7b2b
   659                          	KB_SCANCODE_NUMPAD_MINUS	= $7b	; unused
   660                          	BITMAP_RAM_START	= $7b16
   661                          	TILEMAP_TMP_TILE_ROW	= $7a82
   662                          	uartInit	= $f1fb	; unused
   663                          	hbc56CustomDelay	= $ffe3
   664                          	UART_STATUS_FRAMING_ERROR	= $10	; unused
   665                          	HBC56_BACKGROUND	= $f
   666                          	AY_ENV_SHAPE_FADE_IN_STOP	= $4	; unused
   667                          	HAVE_UART	= $1
   668                          	MEM_DST	= $2e
   669                          	TMS_DK_YELLOW	= $a	; unused
   670                          	TILEMAP_TMP_2	= $7a85
   671                          	UART_STATUS_PARITY_ERROR	= $40	; unused
   672                          	lcdScrollUp	= $f022	; ?
   673                          	KB_SCANCODE_NUMPAD_9	= $7d	; unused
   674                          	LCD_INITIALIZE	= $38	; ?
   675                          	KB_SCANCODE_NUMPAD_8	= $75	; unused
   676                          	AY_CHN	= $3	; unused
   677                          	AY_ENV_SHAPE_TRIANGLE	= $e	; unused
   678                          	hbc56Delay	= $ffe1
   679                          	tableInvBitFromLeft	= $e138
   680                          	TILEMAP_TMP_1	= $7a84
   681                          	STYLE_BYTE	= $7b20
   682                          	KB_SCANCODE_2	= $1e	; unused
   683                          	AY_CHB_TONE_H	= $3	; unused
   684                          	KB_SCANCODE_3	= $26	; unused
   685                          	kbResetCallbacks	= $f2e7	; unused
   686                          	NES_IO_PORT	= $82
   687                          	TMS9918_RAM_SIZE	= $32
   688                          	KB_SCANCODE_0	= $45	; unused
   689                          	TMS9918_RAM_START	= $7b26
   690                          	AY_CHA_TONE_L	= $0
   691                          	AY_CHC_TONE_H	= $5	; unused
   692                          	AY_ENV_SHAPE_CONTINUE	= $8
   693                          	KB_SCANCODE_1	= $16	; unused
   694                          	HBC56_TEXT	= $4
   695                          	HBC56_META_VECTOR	= $dffc
   696                          	cputype	= $65c02	; unused
   697                          	KB_SCANCODE_6	= $36	; unused
   698                          	HBC56_KERNEL_RAM_END	= $7ce7
   699                          	AY_CHB_TONE_L	= $2	; unused
   700                          	KB_SCANCODE_7	= $3d	; unused
   701                          	AY_ENV_SHAPE_FADE_IN	= $d	; unused
   702                          	tmsModeReset	= $e5f7
   703                          	KB_SCANCODE_DELETE	= $f1	; unused
   704                          	KB_SCANCODE_4	= $25	; unused
   705                          	KB_SCANCODE_MENU	= $af	; unused
   706                          	KB_SCANCODE_SPACEBAR	= $29	; unused
   707                          	AY_CHA_TONE_H	= $1
   708                          	AY_CHC_TONE_L	= $4	; unused
   709                          	KB_SCANCODE_5	= $2e	; unused
   710                          	MEMORY_ZP_START	= $2e
   711                          	tmsSetPosRead	= $e980	; unused
   712                          	nes1Pressed	= $f2ad	; unused
   713                          	VIA_REG_T1C_H	= $5
   714                          	INT_CTRL_ADDRESS	= $7fdf
   715                          	STR_ADDR	= $34
   716                          	AY_ENV_PERIOD_H	= $c
   717                          	tmsHex8	= $e834	; unused
   718                          	VIA_IO_ADDR_T1L_H	= $7ff7	; unused
   719                          	TILEMAP_ZP_END	= $1e
   720                          	KEY_MAP	= $f48f	; ?
   721                          	KB_SCANCODE_8	= $3e	; unused
   722                          	KB_RAM_START	= $7c86
   723                          	KB_SCANCODE_9	= $46	; unused
   724                          	TILEMAP_DEFAULT_BUFFER_ADDRESS	= $7a00
   725                          	VIA_REG_T1C_L	= $4
   726                          	AY_ENV_PERIOD_L	= $b
   727                          	bitmapClearPixel	= $eaf0	; unused
   728                          	KB_PAUSE_KEY	= $e1
   729                          	VIA_IO_ADDR_T1L_L	= $7ff6	; unused
   730                          	KB_CTRL_DOWN	= $2	; unused
   731                          	NES_RIGHT	= $1	; unused
   732                          	nes2Pressed	= $f2b5	; unused
   733                          	MEM_LEN	= $32
   734                          	bitmapRect	= $ecc9	; unused
   735                          	VIA_IO_ADDR_PORT_A	= $7ff1	; unused
   736                          	UART_CTL_WORD_8BIT_2SB	= $10
   737                          	NES_START	= $10	; unused
   738                          	HBC56_META_TITLE_LEN	= $7ce2
   739                          	memsetMultiPage	= $e10d
   740                          	UART_REG	= $7f20
   741                          	LCD_MODEL	= $3240
   742                          	KB_SCANCODE_SHIFT_LEFT	= $12
   743                          	VIA_IO_ADDR_PORT_B	= $7ff0	; unused
   744                          	isAlNum	= $e02a	; unused
   745                          	AY_CHA_AMPL	= $8
   746                          	LAST_MODULE_RAM_END	= $7cc9
   747                          	TMS_R1_MODE_TEXT	= $10
   748                          	tmsConsoleOut	= $e9f5
   749                          	TMS9918_REG	= $7f11
   750                          	BITMAP_RAM_SIZE	= $10
   751                          	bitmapXorPixel	= $eafb	; unused
   752                          	KB_SCANCODE_NUMPAD_DIVIDE	= $ca	; unused
   753                          	DEFAULT_HBC56_INT_VECTOR	= $ffe0
   754                          	VIA_IRQ_BIT	= $10
   755                          	TMS_VRAM_PATT_ADDRESS	= $2000
   756                          	bitmapSetPixel	= $eae5
   757                          	KB_SCANCODE_EQUAL	= $55	; unused
   758                          	KB_RELEASE	= $f0
   759                          	tmsInitSpriteTable	= $e7f2	; ?
   760                          	KB_SCANCODE_ARROW_DOWN	= $f2	; unused
   761                          	LCD_CMD_EXT_GRAPHICS_ADDR	= $80
   762                          	TILEMAP_TMP_BUF_COL	= $7a81
   763                          	END_OFFSET	= $7b21
   764                          	UART_RX_BUFFER_BYTES	= $2c
   765                          	lcdHome	= $eddf	; ?
   766                          	isAlpha	= $e018
   767                          	ayInit	= $e158
   768                          	TMS9918_RAM	= $7f10
   769                          	LCD_CMD_DISPLAY_ON	= $4
   770                          	UART_RX_FLAGS	= $2d
   771                          	AY_R1	= $1
   772                          	NOTE_FREQ_B8	= 7902.130000000000109139364212751389	; unused
   773                          	LCD_DATA	= $7f03
   774                          	KB_STATUS_ADDR	= $7f81
   775                          	AY_R0	= $0
   776                          	AY_R3	= $3
   777                          	NOTE_FREQ_F8	= 5587.649999999999636202119290828705	; unused
   778                          	AY_R2	= $2
   779                          	NOTE_FREQ_D8	= 4698.630000000000109139364212751389	; unused
   780                          	TMS_DK_GREEN	= $c	; unused
   781                          	AY_R5	= $5
   782                          	AY_CHC_AMPL	= $a	; unused
   783                          	NOTE_FREQ_FS8	= 5919.909999999999854480847716331482	; unused
   784                          	AY_R4	= $4
   785                          	AY_R7	= $7
   786                          	KB_ALT_DOWN	= $4	; unused
   787                          	AY_R6	= $6
   788                          	TMS_TXT_TILE_HEIGHT	= $8
   789                          	AY_R9	= $9
   790                          	NOTE_FREQ_B0	= 30.870000000000000994759830064140	; unused
   791                          	NOTE_FREQ_F2	= 87.310000000000002273736754432321	; unused
   792                          	NOTE_FREQ_D3	= 146.830000000000012505552149377763	; unused
   793                          	NOTE_FREQ_FS4	= 369.990000000000009094947017729282	; unused
   794                          	TMS_VRAM_COLOR_ADDRESS+2	= $0
   795                          	tmsSetPatternTmpAddressBank1	= $e9c0	; unused
   796                          	VIA_IO_ADDR_DDR_A	= $7ff3	; unused
   797                          	AY_R8	= $8
   798                          	NOTE_FREQ_B1	= 61.740000000000001989519660128281	; unused
   799                          	NOTE_FREQ_D2	= 73.420000000000001705302565824240	; unused
   800                          	NOTE_FREQ_FS5	= 739.990000000000009094947017729282	; unused
   801                          	UART_FLOWCTRL_XOFF	= $13
   802                          	TMS_R0_EXT_VDP_DISABLE	= $0
   803                          	tmsSetPatternTmpAddressBank0	= $e9a3	; unused
   804                          	NOTE_FREQ_F3	= 174.610000000000013642420526593924	; unused
   805                          	NOTE_FREQ_F0	= 21.829999999999998294697434175760	; unused
   806                          	NOTE_FREQ_D1	= 36.710000000000000852651282912120	; unused
   807                          	NOTE_FREQ_FS6	= 1479.980000000000018189894035458565	; unused
   808                          	TMS9918_CONSOLE_Y	= $7b29
   809                          	TMS_LT_YELLOW	= $b	; unused
   810                          	KB_SCANCODE_ARROW_LEFT	= $eb	; unused
   811                          	NOTE_FREQ_B2	= 123.469999999999998863131622783840	; unused
   812                          	NOTE_FREQ_D0	= 18.350000000000001421085471520200	; unused
   813                          	NOTE_FREQ_FS7	= 2959.960000000000036379788070917130	; unused
   814                          	TMS9918_CONSOLE_X	= $7b28
   815                          	PIX_ADDR	= $1e
   816                          	tmsSetPatternTmpAddressBank2	= $e9cb	; unused
   817                          	VIA_IO_ADDR_DDR_B	= $7ff2	; unused
   818                          	NOTE_FREQ_F1	= 43.649999999999998578914528479800	; unused
   819                          	NOTE_FREQ_B3	= 246.939999999999997726263245567679	; unused
   820                          	TILEMAP_TILE_SIZE_PX	= $7
   821                          	HBC56_KERNEL_START	= $e000
   822                          	TMS9918_ZP_END	= $28
   823                          	HAVE_AY3891X	= $1
   824                          	NOTE_FREQ_FS0	= 23.120000000000000994759830064140	; unused
   825                          	TMS_R1_INT_DISABLE	= $0	; unused
   826                          	AY_CHB_AMPL	= $9	; unused
   827                          	NOTE_FREQ_B4	= 493.879999999999995452526491135359	; unused
   828                          	NOTE_FREQ_F6	= 1396.910000000000081854523159563541	; unused
   829                          	NOTE_FREQ_D7	= 2349.320000000000163709046319127083	; unused
   830                          	NOTE_FREQ_FS1	= 46.250000000000000000000000000000	; unused
   831                          	NOTE_FREQ_B5	= 987.769999999999981810105964541435	; unused
   832                          	NOTE_FREQ_D6	= 1174.660000000000081854523159563541	; unused
   833                          	TMS_TXT_TILE_WIDTH	= $6
   834                          	tmsSetPosTmpAddressText	= $e887
   835                          	tmsSetPatternTmpAddress	= $e9a3
   836                          	NOTE_FREQ_F7	= 2793.829999999999927240423858165741	; unused
   837                          	NOTE_FREQ_FS2	= 92.500000000000000000000000000000	; unused
   838                          	NOTE_FREQ_F4	= 349.230000000000018189894035458565	; unused
   839                          	NOTE_FREQ_D5	= 587.330000000000040927261579781771	; unused
   840                          	LOGO_BUFFER	= $3000
   841                          	NOTE_FREQ_B6	= 1975.529999999999972715158946812153	; unused
   842                          	TMS9918_CONSOLE_SIZE_X	= $7b2a
   843                          	KB_SCANCODE_BACKSPACE	= $66	; unused
   844                          	NOTE_FREQ_FS3	= $b9	; unused
   845                          	NOTE_FREQ_D4	= 293.660000000000025011104298755527	; unused
   846                          	tmsInit	= $e6d9
   847                          	TMP_STYLE	= $7b23
   848                          	NOTE_FREQ_F5	= 698.460000000000036379788070917130
   849                          	NOTE_FREQ_B7	= 3951.070000000000163709046319127083	; unused
   850                          	KB_SCANCODE_INSERT	= $f0	; unused

; ******** Source: ../kernel\hbc56kernel.inc
    15                          
    16                          

; ******** Source: ../lib\ut\math.inc
     1                          ; 6502
     2                          ;
     3                          ; Math macros
     4                          ;
     5                          ; Copyright (c) 2020 Troy Schrapel
     6                          ;
     7                          ; This code is licensed under the MIT license
     8                          ;
     9                          ; https://github.com/visrealm/hbc-56
    10                          ;
    11                          ;
    12                          
    13                          HAVE_MATH_INC = 1
    14                          
    15                          !macro lsr2 {
    16                                  lsr
    17                                  lsr
    18                          }
    19                          
    20                          !macro lsr3 {
    21                                  +lsr2
    22                                  lsr
    23                          }
    24                          
    25                          !macro lsr4 {
    26                                  +lsr3
    27                                  lsr
    28                          }
    29                          
    30                          !macro lsr5 {
    31                                  +lsr4
    32                                  lsr
    33                          }
    34                          
    35                          !macro lsr6 {
    36                                  +lsr5
    37                                  lsr
    38                          }
    39                          
    40                          !macro lsr7 {
    41                                  +lsr6
    42                                  lsr
    43                          }
    44                          
    45                          !macro div2   { lsr }
    46                          !macro div4   { +lsr2 }
    47                          !macro div8   { +lsr3 }
    48                          !macro div16  { +lsr4 }
    49                          !macro div32  { +lsr5 }
    50                          !macro div64  { +lsr6 }
    51                          !macro div128 { +lsr7 }
    52                          
    53                          !macro asl2 {
    54                                  asl
    55                                  asl
    56                          }
    57                          
    58                          !macro asl3 {
    59                                  +asl2
    60                                  asl
    61                          }
    62                          
    63                          !macro asl4 {
    64                                  +asl3
    65                                  asl
    66                          }
    67                          
    68                          !macro asl5 {
    69                                  +asl4
    70                                  asl
    71                          }
    72                          
    73                          !macro asl6 {
    74                                  +asl5
    75                                  asl
    76                          }
    77                          
    78                          !macro asl7 {
    79                                  +asl6
    80                                  asl
    81                          }
    82                          
    83                          !macro mul2   { asl }
    84                          !macro mul4   { +asl2 }
    85                          !macro mul8   { +asl3 }
    86                          !macro mul16  { +asl4 }
    87                          !macro mul32  { +asl5 }
    88                          !macro mul64  { +asl6 }
    89                          !macro mul128 { +asl7 }
    90                          
    91                          
    92                          
    93                          ; -----------------------------------------------------------------------------
    94                          ; +dec16: decement a 16-bit value
    95                          ; -----------------------------------------------------------------------------
    96                          ; Inputs:
    97                          ;  addr: address containing LSB of value to decrement
    98                          ; -----------------------------------------------------------------------------
    99                          !macro dec16 .addr {
   100                            lda .addr
   101                            bne +
   102                            dec .addr + 1
   103                          +
   104                            dec .addr
   105                          }
   106                          
   107                          ; -----------------------------------------------------------------------------
   108                          ; +inc16: increment a 16-bit value
   109                          ; -----------------------------------------------------------------------------
   110                          ; Inputs:
   111                          ;  addr: address containing LSB of value to increment
   112                          ; -----------------------------------------------------------------------------
   113                          !macro inc16 .addr {
   114                            inc .addr
   115                            bne +
   116                            inc .addr + 1
   117                          +
   118                          }
   119                          
   120                          ; -----------------------------------------------------------------------------
   121                          ; +cmp16: compare two 16-bit values in memory
   122                          ; -----------------------------------------------------------------------------
   123                          ; Inputs:
   124                          ;  left:  address containing LSB of left value to comapre
   125                          ;  right: address containing LSB of right value to comapre
   126                          ; Outputs:
   127                          ;  C set if right < left
   128                          ;  Z set if right == left
   129                          ; -----------------------------------------------------------------------------
   130                          !macro cmp16 .left, .right {
   131                            lda .left + 1
   132                            cmp .right + 1
   133                          	bne +
   134                          	lda .left
   135                          	cmp .right
   136                          +
   137                          }
   138                          
   139                          ; -----------------------------------------------------------------------------
   140                          ; +cmp16: compare two 16-bit values in memory
   141                          ; -----------------------------------------------------------------------------
   142                          ; Inputs:
   143                          ;  value: immediate value to compare
   144                          ;  x:     msb
   145                          ;  a:     lsb
   146                          ; -----------------------------------------------------------------------------
   147                          !macro cmp16xa .value {
   148                            cpx #>.value
   149                          	bne .doneCmpXa
   150                          	cmp #<.value
   151                          .doneCmpXa
   152                          }
   153                          
   154                          ; -----------------------------------------------------------------------------
   155                          ; +sub16: subtract 16 bit numbers
   156                          ; -----------------------------------------------------------------------------
   157                          ; Inputs:
   158                          ;  left:  address containing LSB of left value
   159                          ;  right: address containing LSB of right value
   160                          ; Outputs:
   161                          ;  res:   address containing LSB of result
   162                          ; -----------------------------------------------------------------------------
   163                          !macro sub16 .left, .right, .res {
   164                            sec
   165                            lda .left
   166                            sbc .right
   167                            sta .res
   168                            lda .left + 1
   169                            sbc .right + 1
   170                            sta .res + 1
   171                          }
   172                          
   173                          ; -----------------------------------------------------------------------------
   174                          ; +sub16: subtract 16 bit numbers - result in ax registers
   175                          ; -----------------------------------------------------------------------------
   176                          ; Inputs:
   177                          ;  left:  address containing LSB of left value
   178                          ;  right: address containing LSB of right value
   179                          ; Outputs:
   180                          ;  a:     result msb
   181                          ;  x:     result lsb
   182                          ; -----------------------------------------------------------------------------
   183                          !macro sub16 .left, .right {
   184                            sec
   185                            lda .left
   186                            sbc .right
   187                            tax
   188                            lda .left + 1
   189                            sbc .right + 1
   190                          }
   191                          
   192                          
   193                          ; -----------------------------------------------------------------------------
   194                          ; +add16: add 16 bit numbers - result in ax registers
   195                          ; -----------------------------------------------------------------------------
   196                          ; Inputs:
   197                          ;  left:  address containing LSB of left value
   198                          ;  right: address containing LSB of right value
   199                          ; Outputs:
   200                          ;  a:     result msb
   201                          ;  x:     result lsb
   202                          ; -----------------------------------------------------------------------------
   203                          !macro add16 .left, .right {
   204                            clc
   205                            lda .left
   206                            adc .right
   207                            tax
   208                            lda .left + 1
   209                            adc .right + 1
   210                          }
   211                          
   212                          
   213                          ; -----------------------------------------------------------------------------
   214                          ; +add16Imm: add 16 bit numbers - result stored to res
   215                          ; -----------------------------------------------------------------------------
   216                          ; Inputs:
   217                          ;  left:  address containing LSB of left value
   218                          ;  imm:   immediate value to add
   219                          ; Outputs:
   220                          ;  res: address to store result
   221                          ; -----------------------------------------------------------------------------
   222                          !macro add16Imm .left, .imm, .res {
   223                            clc
   224                            lda .left
   225                            adc #<.imm
   226                            sta .res
   227                            lda .left + 1
   228                            adc #>.imm
   229                            sta .res + 1
   230                          }
   231                          
   232                          
   233                          ; -----------------------------------------------------------------------------
   234                          ; +subImm8From16: subtract an 8 bit number from a 16 bit number
   235                          ; -----------------------------------------------------------------------------
   236                          ; Inputs:
   237                          ;  left:  address containing LSB of left value
   238                          ;  right: immediate 8-bit value
   239                          ; Outputs:
   240                          ;  res:   address containing LSB of result
   241                          ; -----------------------------------------------------------------------------
   242                          !macro subImm8From16 .left, .right, .res {
   243                            sec
   244                            lda .left
   245                            sbc #.right
   246                            sta .res
   247                            lda .left + 1
   248                            sbc #0
   249                            sta .res + 1
   250                          }
   251                          
   252                          ; -----------------------------------------------------------------------------
   253                          ; +incBcd: increment a BCD byte (inc instruction doesn't work in bcd mode)
   254                          ; -----------------------------------------------------------------------------
   255                          ; Inputs:
   256                          ;  addr:  address containing BCD value
   257                          ; -----------------------------------------------------------------------------
   258                          !macro incBcd .addr {
   259                            lda .addr
   260                            sed
   261                            clc
   262                            adc #1
   263                            cld
   264                            sta .addr
   265                          }
   266                          
   267                          ; -----------------------------------------------------------------------------
   268                          ; +decBcd: decrement a BCD byte (inc instruction doesn't work in bcd mode)
   269                          ; -----------------------------------------------------------------------------
   270                          ; Inputs:
   271                          ;  addr:  address containing BCD value
   272                          ; -----------------------------------------------------------------------------
   273                          !macro decBcd .addr {
   274                            lda .addr
   275                            sed
   276                            sec
   277                            sbc #1
   278                            cld
   279                            sta .addr

; ******** Source: ../kernel\hbc56kernel.inc
    17                          

; ******** Source: ../lib\ut\memory.inc
     1                          ; 6502
     2                          ;
     3                          ; Memory subroutines and macros
     4                          ;
     5                          ; Copyright (c) 2020 Troy Schrapel
     6                          ;
     7                          ; This code is licensed under the MIT license
     8                          ;
     9                          ; https://github.com/visrealm/hbc-56
    10                          ;
    11                          ;
    12                          
    13                          ; -----------------------------------------------------------------------------
    14                          ; store16: Write a 16-bit immediate value to memory
    15                          ; -----------------------------------------------------------------------------
    16                          ; Inputs:
    17                          ;	.dst: destination address
    18                          ;	.val16: 16-bit value
    19                          ; -----------------------------------------------------------------------------
    20                          !macro store16 .dst, .val16 {
    21                                  lda #<.val16
    22                                  sta .addr
    23                                  lda #>.val16
    24                                  sta .addr + 1
    25                          }
    26                          
    27                          ; -----------------------------------------------------------------------------
    28                          ; memcpy: Copy a fixed number of bytes from .src to dest
    29                          ; -----------------------------------------------------------------------------
    30                          ; Inputs:
    31                          ;	.src: source address
    32                          ;	.dst: destination address
    33                          ;	.cnt: number of bytes
    34                          ; -----------------------------------------------------------------------------
    35                          !macro memcpy .dst, .src, .cnt {
    36                          !if .cnt <= 0 {
    37                          	!error "memcpy: invalid count: ", .cnt
    38                          } else if .cnt <= 8 {
    39                          	!for i, 0, .cnt - 1 {
    40                          		lda .src + i
    41                          		sta .dst + i
    42                          	}
    43                          } else { !if .cnt <= 256 {
    44                          	ldx #0
    45                          -
    46                          	lda .src, x
    47                          	sta .dst, x
    48                          	inx
    49                          	cpx #(.cnt & $ff)	
    50                          	bne -
    51                          } else {
    52                          	lda #<.src
    53                          	sta MEM_SRC
    54                          	lda #>.src
    55                          	sta MEM_SRC + 1
    56                          
    57                          	lda #<.dst
    58                          	sta MEM_DST
    59                          	lda #>.dst
    60                          	sta MEM_DST + 1
    61                          
    62                          
    63                          		lda #<.cnt
    64                          		sta MEM_LEN
    65                          		lda #>.cnt
    66                          		sta MEM_LEN + 1
    67                          		jsr memcpyMultiPage
    68                          	}
    69                          }
    70                          }
    71                          
    72                          !macro setMemCpySrc .src {
    73                          	lda #<.src
    74                          	sta MEM_SRC
    75                          	lda #>.src
    76                          	sta MEM_SRC + 1
    77                          }
    78                          
    79                          !macro setMemCpyDst .dst {
    80                          	lda #<.dst
    81                          	sta MEM_DST
    82                          	lda #>.dst
    83                          	sta MEM_DST + 1
    84                          }
    85                          
    86                          !macro setMemCpySrcInd .srcRef {
    87                          	lda .srcRef
    88                          	sta MEM_SRC
    89                          	lda .srcRef + 1
    90                          	sta MEM_SRC + 1
    91                          }
    92                          
    93                          !macro setMemCpyDstInd .dstRef {
    94                          	lda .dstRef
    95                          	sta MEM_DST
    96                          	lda .dstRef + 1
    97                          	sta MEM_DST + 1
    98                          }
    99                          
   100                          !macro memcpySinglePage .bytes {
   101                          
   102                          	!if .bytes <= 0 {
   103                          		!error "memcpySinglePage: invalid count: ", .bytes
   104                          	}	
   105                          
   106                          	ldy #.bytes
   107                          	jsr memcpySinglePage
   108                          }
   109                          
   110                          
   111                          ; -----------------------------------------------------------------------------
   112                          ; memcpyPort: Copy a fixed number of bytes from .src ram to dest port
   113                          ; -----------------------------------------------------------------------------
   114                          ; Inputs:
   115                          ;	.src: source address
   116                          ;	.dst: destination address
   117                          ;	.cnt: number of bytes
   118                          ; -----------------------------------------------------------------------------
   119                          !macro memcpyPort .dst, .src, .cnt {
   120                          	!if .cnt <= 0 {
   121                          		!error "memcpyPort: invalid count: ", .cnt
   122                          	}
   123                          	
   124                          	lda #<.src
   125                          	sta MEM_SRC
   126                          	lda #>.src
   127                          	sta MEM_SRC + 1
   128                          
   129                          	lda #<.dst
   130                          	sta MEM_DST
   131                          	lda #>.dst
   132                          	sta MEM_DST + 1
   133                          
   134                          	!if .cnt <= 256 {
   135                          		ldy #<.cnt					
   136                          		jsr memcpySinglePagePort
   137                          	} else {
   138                          		lda #<.cnt
   139                          		sta MEM_LEN
   140                          		lda #>.cnt
   141                          		sta MEM_LEN + 1
   142                          		jsr memcpyMultiPagePort
   143                          	}
   144                          }
   145                          
   146                          !zone {
   147                          
   148                          ; -----------------------------------------------------------------------------
   149                          ; memset: Set a fixed number of bytes to a single value
   150                          ; -----------------------------------------------------------------------------
   151                          ; Inputs:
   152                          ;	.dst: destination address
   153                          ;	val: the byte value
   154                          ;	.cnt: number of bytes
   155                          ; -----------------------------------------------------------------------------
   156                          !macro memset .dst, .val, .cnt {
   157                          !if .cnt <= 0 {
   158                          	!error "memset: invalid count: ", .cnt
   159                          } else if .cnt <= 8 {
   160                          	lda #.val
   161                          	!for i, 0, .cnt - 1 {
   162                          	sta .dst + i
   163                          	}
   164                          } else if .cnt <= 256 {
   165                          	ldx #<.cnt
   166                          	lda #.val
   167                          -
   168                          	dex
   169                          	sta .dst, x
   170                          	cpx #0
   171                          	bne -
   172                          } else {
   173                          	lda #<.dst
   174                          	sta MEM_DST
   175                          	lda #>.dst
   176                          	sta MEM_DST + 1
   177                          	lda #<.cnt
   178                          	sta MEM_LEN
   179                          	lda #>.cnt
   180                          	sta MEM_LEN + 1
   181                          	lda #.val
   182                          	jsr memsetMultiPage
   183                          }
   184                          }
   185                          
   186                          

; ******** Source: ../kernel\hbc56kernel.inc
    18                          

; ******** Source: ../lib\gfx\tms9918.inc
     1                          ; 6502 - TMS9918 VDP Macros
     2                          ;
     3                          ; Copyright (c) 2021 Troy Schrapel
     4                          ;
     5                          ; This code is licensed under the MIT license
     6                          ;
     7                          ; https://github.com/visrealm/hbc-56
     8                          ;
     9                          
    10                          
    11                          
    12                          
    13                          ; -----------------------------------------------------------------------------
    14                          ; tmsWaitReg: Not sure how much delay we need so make a macro for now
    15                          ; -----------------------------------------------------------------------------
    16                          !macro tmsWaitReg {
    17                                  jsr _tmsWaitReg
    18                          }
    19                          
    20                          ; -----------------------------------------------------------------------------
    21                          ; tmsWaitData: Not sure how much delay we need so make a macro for now
    22                          ; -----------------------------------------------------------------------------
    23                          !macro tmsWaitData {
    24                                  jsr _tmsWaitData
    25                          }
    26                          
    27                          ; -----------------------------------------------------------------------------
    28                          ; tmsSetAddressWrite: Set an address in the TMS9918
    29                          ; -----------------------------------------------------------------------------
    30                          !macro tmsSetAddressWrite .addr {
    31                                  +tmsSetAddressRead ($4000 | .addr)
    32                          }
    33                          
    34                          ; -----------------------------------------------------------------------------
    35                          ; tmsSetAddressRead: Set an address to read from the TMS9918
    36                          ; -----------------------------------------------------------------------------
    37                          !macro tmsSetAddressRead .addr {
    38                                  php
    39                                  sei             ; we can't be interrupted here
    40                                  lda #<(.addr)
    41                                  sta TMS9918_REG
    42                                  +tmsWaitReg
    43                                  lda #>(.addr)
    44                                  sta TMS9918_REG
    45                                  +tmsWaitReg
    46                                  plp
    47                          }
    48                          
    49                          ; -----------------------------------------------------------------------------
    50                          ; tmsGet: Get a byte of data from the TMS9918
    51                          ; -----------------------------------------------------------------------------
    52                          !macro tmsGet {
    53                                  lda TMS9918_RAM
    54                                  +tmsWaitData
    55                          }
    56                          
    57                          ; -----------------------------------------------------------------------------
    58                          ; tmsPut: Send a byte of data to the TMS9918
    59                          ; -----------------------------------------------------------------------------
    60                          !macro tmsPut .byte {
    61                                  lda #(.byte & 0xff)
    62                                  +tmsPut
    63                          }
    64                          
    65                          
    66                          ; -----------------------------------------------------------------------------
    67                          ; tmsPut: Send a byte (A) of data to the TMS9918
    68                          ; -----------------------------------------------------------------------------
    69                          !macro tmsPut {
    70                                  sta TMS9918_RAM
    71                                  +tmsWaitData
    72                          }
    73                          
    74                          ; -----------------------------------------------------------------------------
    75                          ; tmsSetColor: Set current fg/bg color
    76                          ; -----------------------------------------------------------------------------
    77                          !macro tmsSetColor .color {
    78                                  lda #.color
    79                                  jsr tmsSetBackground
    80                          }
    81                          
    82                          ; -----------------------------------------------------------------------------
    83                          ; tmsSetColorFgBg: Set current fg/bg color
    84                          ; -----------------------------------------------------------------------------
    85                          !macro tmsSetColorFgBg .fg, .bg {
    86                                  +tmsColorFgBg .fg, .bg
    87                                  jsr tmsSetBackground
    88                          }
    89                          
    90                          ; -----------------------------------------------------------------------------
    91                          ; byteTmsColorFgBg: Output a data byte
    92                          ; -----------------------------------------------------------------------------
    93                          !macro byteTmsColorFgBg .fg, .bg {
    94                          !byte (.fg << 4 | .bg)
    95                          }
    96                          
    97                          
    98                          ; -----------------------------------------------------------------------------
    99                          ; tmsDisableOutput: Disable the TMS9918 output
   100                          ; -----------------------------------------------------------------------------
   101                          !macro tmsDisableOutput {
   102                                  lda #TMS_R1_DISP_ACTIVE
   103                                  jsr tmsReg1ClearFields
   104                          }
   105                          
   106                          ; -----------------------------------------------------------------------------
   107                          ; tmsEnableOutput: Enable the TMS9918 output
   108                          ; -----------------------------------------------------------------------------
   109                          !macro tmsEnableOutput {
   110                                  lda #TMS_R1_DISP_ACTIVE
   111                                  jsr tmsReg1SetFields
   112                          }
   113                          
   114                          ; -
   115                          !macro tmsEnableInterrupts {
   116                                  lda #TMS_R1_INT_ENABLE
   117                                  jsr tmsReg1SetFields
   118                          }
   119                          
   120                          !macro tmsDisableInterrupts {
   121                                  lda #TMS_R1_INT_ENABLE
   122                                  jsr tmsReg1ClearFields
   123                          }
   124                          
   125                          !macro tmsConsoleOut .char {
   126                                  lda #.char
   127                                  jsr tmsConsoleOut
   128                          }
   129                          
   130                          
   131                          ; -----------------------------------------------------------------------------
   132                          ; tmsConsolePrintAddr: Print text to console
   133                          ; -----------------------------------------------------------------------------
   134                          ; Inputs:
   135                          ;  textAddr: Address of null-terminated string to print
   136                          ; -----------------------------------------------------------------------------
   137                          !macro tmsConsolePrintAddr .textAddr {
   138                                  lda #<.textAddr
   139                                  sta STR_ADDR_L
   140                                  lda #>.textAddr
   141                                  sta STR_ADDR_H
   142                                  jsr tmsConsolePrint        
   143                          }
   144                          
   145                          ; -----------------------------------------------------------------------------
   146                          ; tmsConsolePrint: Print immediate text to console
   147                          ; -----------------------------------------------------------------------------
   148                          ; Inputs:
   149                          ;  str: String to print
   150                          ; -----------------------------------------------------------------------------
   151                          !macro tmsConsolePrint .str {
   152                          	jmp .afterText
   153                          .textAddr
   154                          	!text .str,0
   155                          .afterText        
   156                                  +tmsConsolePrintAddr .textAddr
   157                          }
   158                          
   159                          ; -----------------------------------------------------------------------------
   160                          ; +tmsColorFgBg: Set A to the given FG / BG color
   161                          ; -----------------------------------------------------------------------------
   162                          !macro tmsColorFgBg .fg, .bg {
   163                                  lda #(.fg << 4 | .bg)
   164                          }
   165                          
   166                          ; -----------------------------------------------------------------------------
   167                          ; tmsReadStatus: Read status - clear interrupt
   168                          ; -----------------------------------------------------------------------------
   169                          !macro tmsReadStatus  {
   170                                  bit TMS9918_REG
   171                          }
   172                          
   173                          ; -----------------------------------------------------------------------------
   174                          ; tmsSendData: Send # bytes from .sourceAddr to tms9918 data port
   175                          ; -----------------------------------------------------------------------------
   176                          !macro tmsSendData .sourceAddr, .numBytes {
   177                                  lda #<.sourceAddr
   178                                  sta TMS_TMP_ADDRESS
   179                                  lda #>.sourceAddr
   180                                  sta TMS_TMP_ADDRESS + 1
   181                          
   182                                  !if .numBytes < 256 {
   183                                          ldx #.numBytes
   184                                          jsr tmsSendBytes
   185                                  } else {
   186                                          !do while .numBytes > 0 {
   187                                                  !if .numBytes > 255 {
   188                                                          ldx #0
   189                                                          !set .numBytes = .numBytes - 256
   190                                                  } else {
   191                                                          ldx #.numBytes
   192                                                          !set .numBytes = 0
   193                                                  }
   194                                                  jsr tmsSendBytes
   195                                                  inc TMS_TMP_ADDRESS + 1
   196                                          }
   197                                  }
   198                          
   199                          }
   200                          
   201                          ; -----------------------------------------------------------------------------
   202                          ; tmsSendDataRpt: Send # bytes from .sourceAddr to tms9918 data port .rpt times
   203                          ; -----------------------------------------------------------------------------
   204                          !macro tmsSendDataRpt .sourceAddr, .numBytes, .rpt {
   205                                  lda #<.sourceAddr
   206                                  sta TMS_TMP_ADDRESS
   207                                  lda #>.sourceAddr
   208                                  sta TMS_TMP_ADDRESS + 1
   209                          
   210                                  !if .numBytes < 256 {
   211                                          !if .rpt < 5 {
   212                                                  !for i,1,.rpt {
   213                                                          ldx #.numBytes
   214                                                          jsr tmsSendBytes
   215                                                  }
   216                                          } else {
   217                                                  lda #.rpt
   218                                                  sta TMS9918_TMP_BUFFER
   219                          -
   220                                                  ldx #.numBytes
   221                                                  jsr tmsSendBytes
   222                                                  dec TMS9918_TMP_BUFFER
   223                                                  bne -
   224                                          }
   225                                  } else {
   226                                          !error "tmsSendDataRpt supports <256 bytes only"
   227                                  }
   228                          }
   229                          
   230                          
   231                          ; -----------------------------------------------------------------------------
   232                          ; tmsPutRpt: Send value .rpt times
   233                          ; -----------------------------------------------------------------------------
   234                          !macro tmsPutRpt .value, .rpt {
   235                                  ldx #.rpt
   236                                  lda #.value
   237                          -
   238                                  +tmsPut
   239                                  dex
   240                                  bne -
   241                          }
   242                          
   243                          !macro tmsPutSeq .from, .count {
   244                                  lda #.from
   245                          -
   246                                  +tmsPut
   247                                  inc
   248                                  cmp #<(.from + .count)
   249                                  bne -
   250                          }
   251                          
   252                          !macro tmsSetSourceAddressInd .addr {
   253                          	lda .addr
   254                          	sta TMS_TMP_ADDRESS
   255                          	lda .addr + 1
   256                          	sta TMS_TMP_ADDRESS + 1
   257                          }
   258                          
   259                          !macro tmsSetSourceAddressIndOffset .addr, .offset {
   260                                  clc
   261                          	lda .addr
   262                                  adc #<.offset
   263                          	sta TMS_TMP_ADDRESS
   264                          	lda .addr + 1
   265                                  adc #>.offset
   266                          	sta TMS_TMP_ADDRESS + 1
   267                          }
   268                          
   269                          
   270                          !macro tmsSendBytes .bytes {
   271                                  ldx #.bytes
   272                                  jsr tmsSendBytes
   273                          }
   274                          
   275                          
   276                          ; -----------------------------------------------------------------------------
   277                          ; tmsSetAddrPattTable: Initialise address for font table
   278                          ; -----------------------------------------------------------------------------
   279                          !macro tmsSetAddrPattTable {
   280                                  +tmsSetAddrPattTable 0
   281                          }
   282                          
   283                          ; -----------------------------------------------------------------------------
   284                          ; tmsSetAddrPattTable: Initialise address for pattern table
   285                          ; -----------------------------------------------------------------------------
   286                          !macro tmsSetAddrPattTable .ind {
   287                                  +tmsSetAddressWrite TMS_VRAM_PATT_ADDRESS + (8 * .ind)
   288                          }
   289                          
   290                          ; -----------------------------------------------------------------------------
   291                          ; tmsSetAddrPattTable: Initialise address for pattern table
   292                          ; -----------------------------------------------------------------------------
   293                          !macro tmsSetAddrPattTable .ind, .row {
   294                                  +tmsSetAddressWrite TMS_VRAM_PATT_ADDRESS + (8 * .ind) + .row
   295                          }
   296                          
   297                          ; -----------------------------------------------------------------------------
   298                          ; tmsSetAddrPattTableIIBank0: Initialise address for pattern table
   299                          ; -----------------------------------------------------------------------------
   300                          !macro tmsSetAddrPattTableIIBank0 .ind {
   301                                  +tmsSetAddrPattTable .ind
   302                          }
   303                          
   304                          ; -----------------------------------------------------------------------------
   305                          ; tmsSetAddrPattTableIIBank1: Initialise address for pattern table
   306                          ; -----------------------------------------------------------------------------
   307                          !macro tmsSetAddrPattTableIIBank1 .ind {
   308                                  +tmsSetAddrPattTable 256 + .ind
   309                          }
   310                          
   311                          ; -----------------------------------------------------------------------------
   312                          ; tmsSetAddrPattTableIIBank2: Initialise address for pattern table
   313                          ; -----------------------------------------------------------------------------
   314                          !macro tmsSetAddrPattTableIIBank2 .ind {
   315                                  +tmsSetAddrPattTable 512 + .ind
   316                          }
   317                          
   318                          ; -----------------------------------------------------------------------------
   319                          ; tmsSetAddrPattTableRead: Initialise address for pattern table to read
   320                          ; -----------------------------------------------------------------------------
   321                          !macro tmsSetAddrPattTableRead .ind {
   322                                  +tmsSetAddressRead TMS_VRAM_PATT_ADDRESS + (8 * .ind)
   323                          }
   324                          
   325                          ; -----------------------------------------------------------------------------
   326                          ; tmsSetAddrPattTableRowRead: Initialise address for pattern table to read
   327                          ; -----------------------------------------------------------------------------
   328                          !macro tmsSetAddrPattTableRead .ind, .row {
   329                                  +tmsSetAddressRead TMS_VRAM_PATT_ADDRESS + (8 * .ind) + .row
   330                          }
   331                          
   332                          ; -----------------------------------------------------------------------------
   333                          ; tmsUpdateFont: Update the pattern table with a given font
   334                          ; -----------------------------------------------------------------------------
   335                          !macro tmsUpdateFont .fontAddr {
   336                                  +tmsSetAddrPattTable 32
   337                                  +tmsSendData .fontAddr, $300
   338                          }
   339                          
   340                          ; -----------------------------------------------------------------------------
   341                          ; tmsSetAddrNameTable: Initialise address for base (text) table
   342                          ; -----------------------------------------------------------------------------
   343                          !macro tmsSetAddrNameTable {
   344                                  +tmsSetAddressWrite TMS_VRAM_NAME_ADDRESS
   345                          }
   346                          
   347                          ; -----------------------------------------------------------------------------
   348                          ; tmsSetAddrColorTable: Initialise address for color table
   349                          ; -----------------------------------------------------------------------------
   350                          !macro tmsSetAddrColorTable {
   351                                  +tmsSetAddressWrite TMS_VRAM_COLOR_ADDRESS
   352                          }
   353                          
   354                          ; -----------------------------------------------------------------------------
   355                          ; tmsSetAddrColorTable: Initialise address for color table index
   356                          ; -----------------------------------------------------------------------------
   357                          !macro tmsSetAddrColorTable .ind {
   358                                  +tmsSetAddressWrite TMS_VRAM_COLOR_ADDRESS + .ind
   359                          }
   360                          
   361                          ; -----------------------------------------------------------------------------
   362                          ; tmsSetAddrColorTableII: Initialise address for color table index (mode II)
   363                          ; -----------------------------------------------------------------------------
   364                          !macro tmsSetAddrColorTableII .ind {
   365                                  +tmsSetAddressWrite TMS_VRAM_COLOR_ADDRESS + .ind * 8
   366                          }
   367                          
   368                          ; -----------------------------------------------------------------------------
   369                          ; tmsSetAddrColorTableIIBank0: Initialise address for color table index (mode II)
   370                          ; -----------------------------------------------------------------------------
   371                          !macro tmsSetAddrColorTableIIBank0 .ind {
   372                                  +tmsSetAddrColorTableII .ind
   373                          }
   374                          
   375                          ; -----------------------------------------------------------------------------
   376                          ; tmsSetAddrColorTableIIBank1: Initialise address for color table index (mode II)
   377                          ; -----------------------------------------------------------------------------
   378                          !macro tmsSetAddrColorTableIIBank1 .ind {
   379                                  +tmsSetAddrColorTableII 256 + .ind
   380                          }
   381                          
   382                          ; -----------------------------------------------------------------------------
   383                          ; tmsSetAddrColorTableIIBank2: Initialise address for color table index (mode II)
   384                          ; -----------------------------------------------------------------------------
   385                          !macro tmsSetAddrColorTableIIBank2 .ind {
   386                                  +tmsSetAddrColorTableII 512 + .ind
   387                          }
   388                          
   389                          ; -----------------------------------------------------------------------------
   390                          ; tmsSetAddrSpriteAttrTable: Initialise address for sprite attributes table
   391                          ; -----------------------------------------------------------------------------
   392                          !macro tmsSetAddrSpriteAttrTable {
   393                                  +tmsSetAddrSpriteAttrTable 0
   394                          }
   395                          
   396                          ; -----------------------------------------------------------------------------
   397                          ; tmsSetAddrSpriteAttrTable: Initialise address for sprite attributes table
   398                          ; -----------------------------------------------------------------------------
   399                          !macro tmsSetAddrSpriteAttrTable .index {
   400                                  +tmsSetAddressWrite TMS_VRAM_SPRITE_ATTR_ADDRESS + .index * 4
   401                          }
   402                          
   403                          ; -----------------------------------------------------------------------------
   404                          ; tmsSetAddrSpritePattTable: Initialise address for sprite pattern table
   405                          ; -----------------------------------------------------------------------------
   406                          !macro tmsSetAddrSpritePattTable {
   407                                  +tmsSetAddrSpritePattTable 0
   408                          }
   409                          
   410                          ; -----------------------------------------------------------------------------
   411                          ; tmsSetAddrSpritePattTable: Initialise address for sprite pattern table
   412                          ; -----------------------------------------------------------------------------
   413                          !macro tmsSetAddrSpritePattTable .index {
   414                                  +tmsSetAddressWrite TMS_VRAM_SPRITE_PATT_ADDRESS + .index * 8
   415                          }
   416                          
   417                          
   418                          ; -----------------------------------------------------------------------------
   419                          ; tmsCreateSpritePattern: Create a sprite pattern (.spriteDataAddr is 8 bytes)
   420                          ; -----------------------------------------------------------------------------
   421                          !macro tmsCreateSpritePattern .pattInd, .spriteDataAddr {
   422                          
   423                                  
   424                          
   425                                  ; sprite pattern table
   426                                  +tmsSetAddrSpritePattTable .pattInd
   427                          
   428                                  ldx #0
   429                          -
   430                                  lda .spriteDataAddr,x
   431                                  +tmsPut
   432                                  inx
   433                                  cpx #8
   434                          
   435                                  
   436                          
   437                                  bne -
   438                          }
   439                          
   440                          ; -----------------------------------------------------------------------------
   441                          ; tmsCreateSpritePatternQuad: Create a (size 1) sprite pattern 
   442                          ;   (.spriteDataAddr is 32 bytes)
   443                          ; -----------------------------------------------------------------------------
   444                          !macro tmsCreateSpritePatternQuad .pattInd, .spriteDataAddr {
   445                          
   446                                  
   447                          
   448                                  ; sprite pattern table
   449                                  +tmsSetAddrSpritePattTable .pattInd * 4
   450                          
   451                                  ldx #0
   452                          -
   453                                  lda .spriteDataAddr,x
   454                                  +tmsPut 
   455                                  inx
   456                                  cpx #32
   457                          
   458                                  
   459                          
   460                                  bne -
   461                          }
   462                          
   463                          
   464                          !macro tmsCreateSpritePatternImm .ind, .b0, .b1, .b2, .b3, .b4, .b5, .b6, .b7 {
   465                          
   466                                  ; sprite pattern table
   467                                  +tmsSetAddrSpritePattTable .ind
   468                                  +tmsPut .b0
   469                                  +tmsPut .b2
   470                                  +tmsPut .b2
   471                                  +tmsPut .b3
   472                                  +tmsPut .b4
   473                                  +tmsPut .b5
   474                                  +tmsPut .b6
   475                                  +tmsPut .b7
   476                          }
   477                          
   478                          !macro tmsCreatePatternImm .ind, .b0, .b1, .b2, .b3, .b4, .b5, .b6, .b7 {
   479                          
   480                                  ; sprite pattern table
   481                                  +tmsSetAddrPattTable .ind
   482                                  +tmsPut .b0
   483                                  +tmsPut .b2
   484                                  +tmsPut .b2
   485                                  +tmsPut .b3
   486                                  +tmsPut .b4
   487                                  +tmsPut .b5
   488                                  +tmsPut .b6
   489                                  +tmsPut .b7
   490                          }
   491                          
   492                          
   493                          ; -----------------------------------------------------------------------------
   494                          ; tmsCreateSprite: Create a sprite
   495                          ; -----------------------------------------------------------------------------
   496                          !macro tmsCreateSprite .ind, .pattInd, .xPos, .yPos, .color {
   497                          
   498                                  ; sprite attr table
   499                                  +tmsSetAddrSpriteAttrTable .ind
   500                          
   501                                  +tmsPut .yPos
   502                                  +tmsPut .xPos
   503                                  +tmsPut .pattInd
   504                                  +tmsPut .color
   505                          }
   506                          
   507                          ; -----------------------------------------------------------------------------
   508                          ; tmsSpritePos: Set a sprite position
   509                          ; -----------------------------------------------------------------------------
   510                          !macro tmsSpritePos .ind, .xPos, .yPos {
   511                                  
   512                          
   513                                  ; sprite attr table
   514                                  +tmsSetAddrSpriteAttrTable .ind
   515                          
   516                                  +tmsPut .yPos
   517                                  +tmsPut .xPos        
   518                          }
   519                          
   520                          
   521                          ; -----------------------------------------------------------------------------
   522                          ; tmsSetLastSprite: Mark a sprite as the last sprite (set next ypos to )
   523                          ; -----------------------------------------------------------------------------
   524                          !macro tmsSetLastSprite .ind {
   525                                  +tmsSpritePos .ind + 1, 0, $d0
   526                          }
   527                          
   528                          
   529                          ; -----------------------------------------------------------------------------
   530                          ; tmsSpritePosXYReg: Set a sprite position from x/y registers
   531                          ; -----------------------------------------------------------------------------
   532                          !macro tmsSpritePosXYReg .ind {
   533                                  
   534                          
   535                                  ; sprite attr table
   536                                  +tmsSetAddrSpriteAttrTable .ind
   537                          
   538                                  tya
   539                                  +tmsPut 
   540                                  txa
   541                                  +tmsPut 
   542                          }
   543                          
   544                          
   545                          ; -----------------------------------------------------------------------------
   546                          ; tmsSetAddrSpriteColor: Change a sprite color
   547                          ; -----------------------------------------------------------------------------
   548                          !macro tmsSetAddrSpriteColor .ind {
   549                          
   550                                  ; sprite attr table
   551                                  +tmsSetAddressWrite TMS_VRAM_SPRITE_ATTR_ADDRESS + (.ind * 4) + 3
   552                          }
   553                          ; -----------------------------------------------------------------------------
   554                          ; tmsSpriteColor: Change a sprite color
   555                          ; -----------------------------------------------------------------------------
   556                          !macro tmsSpriteColor .ind, .color {
   557                          
   558                                  +tmsSetAddrSpriteColor .ind
   559                          
   560                                  +tmsPut .color
   561                          }
   562                          
   563                          
   564                          ; -----------------------------------------------------------------------------
   565                          ; tmsSetPosWrite: Set cursor position
   566                          ; -----------------------------------------------------------------------------
   567                          !macro tmsSetPosWrite .x, .y {
   568                                  +tmsSetAddressWrite (TMS_VRAM_NAME_ADDRESS + .y * 32 + .x)
   569                          }
   570                          
   571                          ; -----------------------------------------------------------------------------
   572                          ; tmsSetPosRead: Set read cursor position
   573                          ; -----------------------------------------------------------------------------
   574                          !macro tmsSetPosRead .x, .y {
   575                                  +tmsSetAddressRead (TMS_VRAM_NAME_ADDRESS + .y * 32 + .x)
   576                          }
   577                          
   578                          ; -----------------------------------------------------------------------------
   579                          ; tmsPrint: Print immediate text
   580                          ; -----------------------------------------------------------------------------
   581                          ; Inputs:
   582                          ;  str: String to print
   583                          ;  x: x position
   584                          ;  y: y position
   585                          ; -----------------------------------------------------------------------------
   586                          !macro tmsPrint .str, .x, .y {
   587                          	jmp .afterText
   588                          .textAddr
   589                          	!text .str,0
   590                          .afterText        
   591                          
   592                                  +tmsSetPosWrite .x, .y
   593                          
   594                                  lda #<.textAddr
   595                                  sta STR_ADDR_L
   596                                  lda #>.textAddr
   597                                  sta STR_ADDR_H
   598                                  jsr tmsPrint        
   599                          }
   600                          
   601                          
   602                          ; -----------------------------------------------------------------------------
   603                          ; tmsPrintCentre: Print centre-aligned immediate text
   604                          ; -----------------------------------------------------------------------------
   605                          ; Inputs:
   606                          ;  str: String to print
   607                          ;  y: y position
   608                          ; -----------------------------------------------------------------------------
   609                          !macro tmsPrintCentre .str, .y {
   610                          	jmp .afterText
   611                          .textAddr
   612                          	!text .str,0
   613                          .afterText        
   614                          
   615                                  +tmsSetPosWrite (32 - ((.afterText - 1) - .textAddr)) / 2, .y
   616                          
   617                                  lda #<.textAddr
   618                                  sta STR_ADDR_L
   619                                  lda #>.textAddr
   620                                  sta STR_ADDR_H
   621                                  jsr tmsPrint        
   622                          }
   623                          
   624                          
   625                          ; -----------------------------------------------------------------------------
   626                          ; tmsPrintZ: Print text
   627                          ; -----------------------------------------------------------------------------
   628                          ; Inputs:
   629                          ;  str: Address of zero-terminated string to print
   630                          ;  x: x position
   631                          ;  y: y position
   632                          ; -----------------------------------------------------------------------------
   633                          !macro tmsPrintZ .textAddr, .x, .y {
   634                                  +tmsSetPosWrite .x, .y
   635                          
   636                                  lda #<.textAddr
   637                                  sta STR_ADDR_L
   638                                  lda #>.textAddr
   639                                  sta STR_ADDR_H
   640                                  jsr tmsPrint        
   641                          }

; ******** Source: ../kernel\hbc56kernel.inc
    19                          

; ******** Source: ../lib\gfx\tilemap.inc
     1                          ; 6502 - Tilemap
     2                          ;
     3                          ; Copyright (c) 2021 Troy Schrapel
     4                          ;
     5                          ; This code is licensed under the MIT license
     6                          ;
     7                          ; https://github.com/visrealm/hbc-56
     8                          ;
     9                          ;
    10                          
    11                          
    12                          
    13                          !macro tilemapCreate .tilemapStructAddr, .bufferAddr, .tilesetAddr, .sizeFlags, .tileSizePx, .invertAddr, .dirtyAddr {
    14                          	!if <.tilesetAddr != 0 { !error "tilemapCreate: Tileset address must be page-aligned",.tilesetAddr }
    15                          	!if >.tilesetAddr < 3 { !error "tilemapCreate: Tileset address must be greater than $2ff",.tilesetAddr }
    16                          	!if <.bufferAddr != 0 { !error "tilemapCreate: Buffer address must be page-aligned",.bufferAddr }
    17                          	!if >.bufferAddr < 3 { !error "tilemapCreate: Buffer address must be greater than $2ff",.bufferAddr }
    18                          	!if .invertAddr != 0 and <.invertAddr != 0  {!error "tilemapCreate: Invert address must be page-aligned", .invertAddr}
    19                          	!if .invertAddr != 0 and >.invertAddr < 3  {!error "tilemapCreate: Invert address must be greater than $2ff", .invertAddr}
    20                          	!if .dirtyAddr != 0 and <.dirtyAddr != 0  {!error "tilemapCreate: Dirty address must be page-aligned", .dirtyAddr}
    21                          	!if .dirtyAddr != 0 and >.dirtyAddr < 3  {!error "tilemapCreate: Dirty address must be greater than $2ff", .dirtyAddr}
    22                          	!if .tileSizePx != 4 and .tileSizePx != 8 {!error "tilemapCreate: Tile size must be 4 or 8 pixels",.tileSizePx}
    23                          
    24                          	lda #<.tilemapStructAddr
    25                          	sta TILEMAP_ADDR
    26                          	lda #>.tilemapStructAddr
    27                          	sta TILEMAP_ADDR + 1
    28                          
    29                          	lda #>.bufferAddr
    30                          	sta .tilemapStructAddr + TILEMAP_BUFFER_ADDR
    31                          	lda #.sizeFlags
    32                          	sta .tilemapStructAddr + TILEMAP_SIZE
    33                          	lda #>.tilesetAddr
    34                          	sta .tilemapStructAddr + TILEMAP_TILES_ADDR
    35                          	lda #>.invertAddr
    36                          	sta .tilemapStructAddr + TILEMAP_INVERT_ADDR
    37                          	lda #>.dirtyAddr
    38                          	sta .tilemapStructAddr + TILEMAP_DIRTY_ADDR
    39                          	lda #.tileSizePx
    40                          	sta .tilemapStructAddr + TILEMAP_TILE_SIZE_PX
    41                          
    42                          	jsr tilemapInit
    43                          }
    44                          
    45                          !macro tilemapCreateDefault .sizeFlags, .tilesetAddr {
    46                          	+tilemapCreate TILEMAP_FIXED_ADDRESS, TILEMAP_DEFAULT_BUFFER_ADDRESS, .tilesetAddr, .sizeFlags, 8, $0, $0
    47                          }
    48                          
    49                          !macro tilemapSetActive .tilemapStructAddr {
    50                          	lda #<.tilemapStructAddr
    51                          	sta TILEMAP_ADDR
    52                          	lda #>.tilemapStructAddr
    53                          	sta TILEMAP_ADDR + 1
    54                          
    55                          	jsr tilemapSetActive

; ******** Source: ../kernel\hbc56kernel.inc
    20                          

; ******** Source: ../lib\lcd\lcd.inc
     1                          ; 6502 LCD Macros - HBC-56
     2                          ;
     3                          ; Copyright (c) 2021 Troy Schrapel
     4                          ;
     5                          ; This code is licensed under the MIT license
     6                          ;
     7                          ; https://github.com/visrealm/hbc-56
     8                          ;
     9                          
    10                          ; -----------------------------------------------------------------------------
    11                          ; lcdPrint: Print immediate text
    12                          ; -----------------------------------------------------------------------------
    13                          ; Inputs:
    14                          ;  str: String to print
    15                          ; -----------------------------------------------------------------------------
    16                          !macro lcdPrint str {
    17                          	jmp +
    18                          .textAddr
    19                          	!text str,0
    20                          +
    21                          	lda #<.textAddr
    22                          	sta STR_ADDR_L
    23                          	lda #>.textAddr
    24                          	sta STR_ADDR_H
    25                          	jsr lcdPrint
    26                          }
    27                          
    28                          
    29                          ; -----------------------------------------------------------------------------
    30                          ; lcdChar: Print immediate character
    31                          ; -----------------------------------------------------------------------------
    32                          ; Inputs:
    33                          ;  c: Character to print
    34                          ; -----------------------------------------------------------------------------
    35                          !macro lcdChar c {
    36                          	pha
    37                          	lda #c
    38                          	jsr lcdChar
    39                          	pla
    40                          }
    41                          
    42                          
    43                          ; -----------------------------------------------------------------------------
    44                          ; lcdConsolePrint: Print immediate text to console
    45                          ; -----------------------------------------------------------------------------
    46                          ; Inputs:
    47                          ;  str: String to print
    48                          ; -----------------------------------------------------------------------------
    49                          !macro lcdConsolePrint .str {
    50                          	jmp .afterText
    51                          .textAddr
    52                          	!text .str,0
    53                          .afterText        
    54                          
    55                                  lda #<.textAddr
    56                                  sta STR_ADDR_L
    57                                  lda #>.textAddr
    58                                  sta STR_ADDR_H
    59                                  jsr lcdConsolePrint        

; ******** Source: ../kernel\hbc56kernel.inc
    21                          

; ******** Source: ../lib\inp\nes.inc
     1                          ; 6502 NES Controller Macros - HBC-56
     2                          ;
     3                          ; Copyright (c) 2021 Troy Schrapel
     4                          ;
     5                          ; This code is licensed under the MIT license
     6                          ;
     7                          ; https://github.com/visrealm/hbc-56
     8                          ;
     9                          ; Dependencies:
    10                          ;  - hbc56.asm
    11                          
    12                          
    13                          !macro nes1BranchIfPressed .buttonMask, .addr {
    14                                  pha
    15                                  lda #(.buttonMask)
    16                                  jsr nes1Pressed
    17                                  pla
    18                                  bcs .addr
    19                          }
    20                          
    21                          !macro nes1BranchIfNotPressed .buttonMask, .addr {
    22                                  pha
    23                                  lda #(.buttonMask)
    24                                  jsr nes1Pressed
    25                                  pla
    26                                  bcc .addr
    27                          }
    28                          
    29                          !macro nes2BranchIfPressed .buttonMask, addr {
    30                                  pha
    31                                  lda #(.buttonMask)
    32                                  jsr nes2Pressed
    33                                  pla
    34                                  bcs addr
    35                          }
    36                          
    37                          !macro nes2BranchIfNotPressed .buttonMask, addr {
    38                                  pha
    39                                  lda #(.buttonMask)
    40                                  jsr nes2Pressed
    41                                  pla
    42                                  bcc addr
    43                          }

; ******** Source: ../kernel\hbc56kernel.inc
    22                          

; ******** Source: ../lib\inp\keyboard.inc
     1                          ; 6502 KB Controller Macros - HBC-56
     2                          ;
     3                          ; Copyright (c) 2021 Troy Schrapel
     4                          ;
     5                          ; This code is licensed under the MIT license
     6                          ;
     7                          ; https://github.com/visrealm/hbc-56
     8                          ;
     9                          ; Dependencies:
    10                          ;  - hbc56.asm
    11                          
    12                          
    13                          !macro kbBranchIfNotPressed .scancode, .addr {
    14                                  ldx #.scancode
    15                                  jsr kbReadAscii
    16                                  beq .addr
    17                          }
    18                          
    19                          !macro kbBranchIfPressed .scancode, .addr {
    20                                  ldx #.scancode
    21                                  jsr kbIsPressed
    22                                  bne .addr
    23                          }
    24                          
    25                          !macro kbSetEventHandlerPressed .cb {
    26                                  lda #<.cb
    27                                  sta KB_CB_PRESSED
    28                                  lda #>.cb
    29                                  sta KB_CB_PRESSED + 1
    30                          }
    31                          
    32                          !macro kbSetEventHandlerReleased .cb {
    33                                  lda #<.cb
    34                                  sta KB_CB_RELEASED
    35                                  lda #>.cb
    36                                  sta KB_CB_RELEASED + 1

; ******** Source: ../kernel\hbc56kernel.inc
    23                          

; ******** Source: ../lib\sfx\ay3891x.inc
     1                          ; 6502 - AY-3-819x PSG
     2                          ;
     3                          ; Copyright (c) 2021 Troy Schrapel
     4                          ;
     5                          ; This code is licensed under the MIT license
     6                          ;
     7                          ; https://github.com/visrealm/hbc-56
     8                          ;
     9                          
    10                          
    11                          
    12                          !macro ayWrite .dev, .reg, .val {
    13                                  lda #.reg
    14                                  sta IO_PORT_BASE_ADDRESS | AY_IO_PORT | AY_ADDR | .dev
    15                                  lda #.val
    16                                  sta IO_PORT_BASE_ADDRESS | AY_IO_PORT | AY_WRITE | .dev
    17                          }        
    18                          
    19                          !macro ayRead .dev, .reg {
    20                                  lda #.reg
    21                                  sta IO_PORT_BASE_ADDRESS | AY_IO_PORT | AY_ADDR | .dev
    22                                  lda IO_PORT_BASE_ADDRESS | AY_IO_PORT | AY_READ | .dev
    23                          }        
    24                          
    25                          
    26                          !macro ayWriteX .dev, .reg {
    27                                  lda #.reg
    28                                  sta IO_PORT_BASE_ADDRESS | AY_IO_PORT | AY_ADDR | .dev
    29                                  stx IO_PORT_BASE_ADDRESS | AY_IO_PORT | AY_WRITE | .dev
    30                          }
    31                          
    32                          !macro ayWriteA .dev, .reg {
    33                                  ldx #.reg
    34                                  stx IO_PORT_BASE_ADDRESS | AY_IO_PORT | AY_ADDR | .dev
    35                                  sta IO_PORT_BASE_ADDRESS | AY_IO_PORT | AY_WRITE | .dev
    36                          }
    37                          
    38                          !macro ayPlayNote .dev, .chan, .freq {
    39                                  !if .freq <= 0 {
    40                                          .val = 0
    41                                  } else {
    42                                          .val = AY_CLOCK_FREQ / (32.0 * .freq)
    43                                  }
    44                                  +ayWrite .dev, AY_CHA_TONE_L + (.chan * 2), <.val
    45                                  +ayWrite .dev, AY_CHA_TONE_H + (.chan * 2), >.val
    46                          }
    47                          
    48                          !macro ayToneWord .freq {
    49                                  !word (AY_CLOCK_FREQ / (32.0 * .freq))
    50                          }
    51                          
    52                          !macro ayToneByteL .freq {
    53                                  !byte <(AY_CLOCK_FREQ / (32.0 * .freq))
    54                          }
    55                          
    56                          !macro ayToneByteH .freq {
    57                                  !byte >(AY_CLOCK_FREQ / (32.0 * .freq))
    58                          }
    59                          
    60                          
    61                          !macro ayToneEnable .dev, .chan {
    62                                  +ayRead .dev, AY_ENABLES
    63                                  and #!($01 << .chan)
    64                                  +ayWriteA .dev, AY_ENABLES
    65                          }
    66                          
    67                          !macro ayToneDisable .dev, .chan {
    68                                  +ayRead .dev, AY_ENABLES
    69                                  ora #($01 << .chan)
    70                                  +ayWriteA .dev, AY_ENABLES
    71                          }
    72                          
    73                          !macro ayNoiseEnable .dev, .chan {
    74                                  +ayRead .dev, AY_ENABLES
    75                                  eor #($08 << .chan)
    76                                  +ayWriteA .dev, AY_ENABLES
    77                          }
    78                          
    79                          !macro ayNoiseDisable .dev, .chan {
    80                                  +ayRead .dev, AY_ENABLES
    81                                  ora #($08 << .chan)
    82                                  +ayWriteA .dev, AY_ENABLES
    83                          }
    84                          
    85                          !macro aySetVolume .dev, .chan, .vol {
    86                                  +ayWrite .dev, (AY_CHA_AMPL + .chan), (.vol >> 4)
    87                          }
    88                          
    89                          !macro aySetVolumeEnvelope .dev, .chan {
    90                                  +ayWrite .dev, (AY_CHA_AMPL + .chan), $10
    91                          }
    92                          
    93                          !macro aySetEnvelopePeriod .dev, .period {
    94                                  +ayWrite .dev, AY_ENV_PERIOD_L, <.period
    95                                  +ayWrite .dev, AY_ENV_PERIOD_H, >.period
    96                          }
    97                          
    98                          !macro aySetEnvShape .dev, .shape {
    99                                  +ayWrite .dev, AY_ENV_SHAPE, .shape
   100                          }
   101                          
   102                          !macro aySetNoise .dev, .freq {
   103                                  +ayWrite .dev, AY_ENV_SHAPE, .freq >> 3
   104                          }
   105                          
   106                          !macro ayStop .dev, .chan {
   107                                  +ayPlayNote .dev, .chan, 0
   108                             ;     +ayWrite .dev, (AY_CHA_AMPL + .chan), 0
   109                          }

; ******** Source: ../kernel\hbc56kernel.inc
    24                          

; ******** Source: ../lib\ser\uart.inc
     1                          ; 6502 - MC68B50 UART Macros
     2                          ;
     3                          ; Copyright (c) 2021 Troy Schrapel
     4                          ;
     5                          ; This code is licensed under the MIT license
     6                          ;
     7                          ; https://github.com/visrealm/hbc-56
     8                          ;
     9                          
    10                          ; -----------------------------------------------------------------------------
    11                          ; uartOutStringAddr: Output a string to the uart
    12                          ; -----------------------------------------------------------------------------
    13                          ; Inputs:
    14                          ;  .addr: Address of null-terminated string to print
    15                          ; -----------------------------------------------------------------------------
    16                          !macro uartOutStringAddr .addr {
    17                                  lda #<.addr
    18                                  sta STR_ADDR_L
    19                                  lda #>.addr
    20                                  sta STR_ADDR_H
    21                                  jsr uartOutString        
    22                          }
    23                          
    24                          
    25                          ; -----------------------------------------------------------------------------
    26                          ; uartOutString: Output an immediate string to the uart
    27                          ; -----------------------------------------------------------------------------
    28                          ; Inputs:
    29                          ;  .str: String to output
    30                          ; -----------------------------------------------------------------------------
    31                          !macro uartOutString .str {
    32                          	jmp @afterText
    33                          @textAddr
    34                          	!text .str,0
    35                          @afterText        
    36                                  +uartOutStringAddr @textAddr
    37                          }
    38                          

; ******** Source: ../kernel\hbc56kernel.inc
    25                          

; ******** Source: ../kernel\kernel.inc
     1                          ; 6502 - HBC-56 Kernel Macros
     2                          ;
     3                          ; Copyright (c) 2021 Troy Schrapel
     4                          ;
     5                          ; This code is licensed under the MIT license
     6                          ;
     7                          ; https://github.com/visrealm/hbc-56
     8                          ;
     9                          ;
    10                          
    11                          !macro setIntHandler .address {
    12                                  lda #<.address
    13                                  sta HBC56_INT_VECTOR + 1
    14                                  lda #>.address
    15                                  sta HBC56_INT_VECTOR + 2
    16                                  lda #JMP_OPCODE
    17                                  sta HBC56_INT_VECTOR
    18                          }
    19                          
    20                          !macro setNmiHandler .address {
    21                                  lda #<.address
    22                                  sta HBC56_NMI_VECTOR + 1
    23                                  lda #>.address
    24                                  sta HBC56_NMI_VECTOR + 2
    25                                  lda #JMP_OPCODE
    26                                  sta HBC56_NMI_VECTOR
    27                          }
    28                          
    29                          !macro setHbcMetaNES {
    30                                  lda #HBC56_CONSOLE_FLAG_NES
    31                                  ora HBC56_CONSOLE_FLAGS
    32                                  sta HBC56_CONSOLE_FLAGS
    33                          }
    34                          
    35                          !macro setHbcMetaNoWait {
    36                                  lda #HBC56_CONSOLE_FLAG_NOWAIT
    37                                  ora HBC56_CONSOLE_FLAGS
    38                                  sta HBC56_CONSOLE_FLAGS
    39                          }
    40                          
    41                          
    42                          !macro hbc56SetVsyncCallback .vsync {
    43                                  lda #<.vsync
    44                                  sta HBC56_VSYNC_CALLBACK
    45                                  lda #>.vsync
    46                                  sta HBC56_VSYNC_CALLBACK + 1
    47                          }
    48                          
    49                          !macro hbc56SetViaCallback .cb {
    50                                  lda #<.cb
    51                                  sta HBC56_VIA_CALLBACK
    52                                  lda #>.cb
    53                                  sta HBC56_VIA_CALLBACK + 1
    54                          }
    55                          
    56                          
    57                          !macro setHbcMetaTitle .titleStr {
    58                                  jmp .hbcMetaTitleOut
    59                          .titleStrLabel:
    60                                  !text .titleStr
    61                          .titleStrLabelLen = * - .titleStrLabel
    62                                  !byte 0 ; nul terminator for game name
    63                          
    64                          !if .titleStrLabelLen > HBC56_META_TITLE_MAX_LEN {
    65                                  !error "setHbcMetaTitle: Title metadata limited to ",HBC56_META_TITLE_MAX_LEN,"bytes"
    66                          }
    67                          .hbcMetaTitleOut:
    68                                  +memcpy HBC56_META_TITLE + (HBC56_META_TITLE_MAX_LEN-.titleStrLabelLen)/2, .titleStrLabel, .titleStrLabelLen
    69                                  lda #.titleStrLabelLen
    70                                  sta HBC56_META_TITLE_LEN
    71                          }
    72                          
    73                          !macro consoleEnableCursor {
    74                                  lda HBC56_CONSOLE_FLAGS
    75                                  ora #HBC56_CONSOLE_FLAG_CURSOR
    76                                  sta HBC56_CONSOLE_FLAGS
    77                          }
    78                          
    79                          !macro consoleDisableCursor {
    80                                  lda HBC56_CONSOLE_FLAGS
    81                                  and #!HBC56_CONSOLE_FLAG_CURSOR & $ff
    82                                  sta HBC56_CONSOLE_FLAGS
    83                          }
    84                          
    85                          !macro consoleLCDMode {
    86                                  lda HBC56_CONSOLE_FLAGS
    87                                  ora #HBC56_CONSOLE_FLAG_LCD
    88                                  sta HBC56_CONSOLE_FLAGS
    89                          }
    90                          
    91                          !macro setBreakpoint {
    92                                 !byte $db 
    93                          }
    94                          
    95                          !macro hbc56CustomDelay .delay {
    96                                  ldy #.delay
    97                                  jsr hbc56CustomDelay
    98                          }
    99                          
   100                          !macro hbc56DelayUs .us {
   101                          !if .us = 1 {
   102                                  nop
   103                                  nop
   104                          }
   105                          }
   106                          !macro hbc56DelayMs .ms {
   107                                  lda #<.ms
   108                                  sta DELAY_L
   109                                  lda #>.ms
   110                                  sta DELAY_H
   111                          
   112                                  jsr hbc56CustomDelayMs

; ******** Source: ../kernel\hbc56kernel.inc
    26                          
    27                          
    28                          !ifndef HBC_56_EXCLUDE_KERNEL_ROM {
    29                          
    30                                  ; if the program requires the kernal image
    31                                  ; then... include it
    32                          
    33                                  *=HBC56_META_VECTOR
    34                                  !ifdef hbc56Meta {
    35  dffc 4c0380                             jmp hbc56Meta
    36                                  } else {
    37                                          rts
    38                                  }
    39                          
    40                                  *=HBC56_KERNEL_START
    41  e000 c9619005c97b9002...        !bin "kernel.o"
    42                          
    43                                  *=DEFAULT_HBC56_RST_VECTOR
    44  8000 4c2d80                     jmp hbc56Main
    45                          
    46                          } else {
    47                          
    48                                  ; otherwise, place the program in RAM
    49                          
    50                                  *=$0400

; ******** Source: breakout.asm
    10                          
    11                          
    12                          ; Zero page addresses
    13                          ; -------------------------
    14                          ZP0 = HBC56_USER_ZP_START
    15                          
    16                          ; ball position
    17                          POSX        = ZP0
    18                          POSX_SUB    = ZP0 + 1
    19                          POSY        = ZP0 + 2
    20                          POSY_SUB    = ZP0 + 3
    21                          
    22                          ; ball speed
    23                          SPDX        = ZP0 + 4
    24                          SPDX_SUB    = ZP0 + 5
    25                          SPDY        = ZP0 + 6
    26                          SPDY_SUB    = ZP0 + 7
    27                          
    28                          ; ball direction
    29                          DIRX        = ZP0 + 8
    30                          DIRY        = ZP0 + 9
    31                          
    32                          ; paddle position and width
    33                          PADX        = ZP0 + 10
    34                          PADW        = ZP0 + 11
    35                          
    36                          ; current level
    37                          LEVEL       = ZP0 + 12
    38                          
    39                          ; current score
    40                          SCORE_H     = ZP0 + 13
    41                          SCORE_M     = ZP0 + 14
    42                          SCORE_L     = ZP0 + 15
    43                          
    44                          ; ball count
    45                          BALLS       = ZP0 + 16
    46                          
    47                          ; score multiplier (number of blocks hit since paddle)
    48                          MULT        = ZP0 + 17
    49                          
    50                          ; blocks remaining
    51                          BLOCKS_LEFT = ZP0 + 18
    52                          
    53                          ; paddle speed (for ball acceleration)
    54                          PADSPD     = ZP0 + 19
    55                          PADSPD_SUB = ZP0 + 20
    56                          
    57                          START_TIME = ZP0 + 21
    58                          
    59                          ; temporary storage
    60                          TMP        = ZP0 + 22
    61                          TMP8       = TMP + 8
    62                          TMP9       = TMP + 9
    63                          TMP_SIZE   = 10
    64                          
    65                          ; Ball constants
    66                          ; -------------------------
    67                          BALL_BASE         = TMS_WHITE
    68                          BALL_SHADE        = TMS_GREY
    69                          BALL_SIZE         = 6
    70                          BALL_SPRITE_INDEX = 0
    71                          BALL_SHADOW_INDEX = 1
    72                          
    73                          INITIAL_BALLS = 4
    74                          
    75                          ; Paddle constants
    76                          ; -------------------------
    77                          PADDLE_WIDTH       = 32
    78                          PADDLE_SPEED       = 1
    79                          PADDLE_SPEED_SUB   = 0
    80                          PADDLE_L_SPRITE_INDEX = 2
    81                          PADDLE_R_SPRITE_INDEX = 3
    82                          PADDLE_ROW         = 23
    83                          PADDLE_SPRITE_Y    = PADDLE_ROW * 8 + 3
    84                          
    85                          PADDLE_COLOR_HIGH  = TMS_WHITE
    86                          PADDLE_COLOR_BASE  = TMS_CYAN
    87                          PADDLE_COLOR_SHADE = TMS_LT_BLUE
    88                          
    89                          ; Level constants
    90                          ; -------------------------
    91                          BRICKS_TILE_INDEX = 12
    92                          BRICKS_WIDTH      = 3
    93                          BRICK_TYPES       = 4
    94                          LEVEL_HEIGHT      = 12
    95                          LEVEL_WIDTH       = 7
    96                          LEVEL_STRIDE      = 8
    97                          NO_BRICK          = 255
    98                          
    99                          GAME_AREA_LEFT    = 8
   100                          GAME_AREA_WIDTH   = 8 * BRICKS_WIDTH * LEVEL_WIDTH
   101                          GAME_AREA_RIGHT   = GAME_AREA_LEFT + GAME_AREA_WIDTH
   102                          LEVEL_SIZE        = LEVEL_HEIGHT * LEVEL_STRIDE
   103                          
   104                          ; UI constants
   105                          ; -------------------------
   106                          TITLE_WIDTH        = 9
   107                          TITLE_HEIGHT       = 2
   108                          TITLE_TILE_INDEX   = 128
   109                          TITLE_X            = 23
   110                          TITLE_Y            = 0
   111                          
   112                          LABEL_WIDTH        = 7
   113                          
   114                          LEVEL_TILE_INDEX   = 146
   115                          LEVEL_LABEL_X      = 24
   116                          LEVEL_LABEL_Y      = 5
   117                          LEVEL_X            = 26
   118                          LEVEL_Y            = LEVEL_LABEL_Y + 2
   119                          
   120                          SCORE_TILE_INDEX   = LEVEL_TILE_INDEX + LABEL_WIDTH
   121                          SCORE_LABEL_X      = 24
   122                          SCORE_LABEL_Y      = 10
   123                          SCORE_X            = 25
   124                          SCORE_Y            = SCORE_LABEL_Y + 2
   125                          
   126                          BALLS_TILE_INDEX   = SCORE_TILE_INDEX + LABEL_WIDTH
   127                          BALLS_LABEL_X      = 24
   128                          BALLS_LABEL_Y      = 15
   129                          BALLS_X            = 26
   130                          BALLS_Y            = BALLS_LABEL_Y + 2
   131                          
   132                          BORDER_TILE_INDEX = 26
   133                          BORDER_TL_INDEX   = BORDER_TILE_INDEX
   134                          BORDER_TOP_INDEX  = BORDER_TILE_INDEX + 1
   135                          BORDER_TR_INDEX   = BORDER_TILE_INDEX + 2
   136                          BORDER_L_INDEX    = BORDER_TILE_INDEX + 3
   137                          BORDER_R_INDEX    = BORDER_TILE_INDEX + 4
   138                          BORDER_LB_INDEX   = BORDER_TILE_INDEX + 5
   139                          BORDER_RB_INDEX   = BORDER_TILE_INDEX + 6
   140                          BORDER_BL_INDEX   = BORDER_TILE_INDEX + 7
   141                          BORDER_BR_INDEX   = BORDER_TILE_INDEX + 8
   142                          BORDER_B_INDEX    = BORDER_TILE_INDEX + 9
   143                          BORDER_TILES      = 7
   144                          BORDER_X          = 0
   145                          BORDER_Y          = 0
   146                          BORDER_WIDTH      = (BRICKS_WIDTH * LEVEL_WIDTH) + 2
   147                          BORDER_HEIGHT     = 24
   148                          
   149                          BOX_X             = 4
   150                          BOX_Y             = 7
   151                          BOX_W             = 15
   152                          BOX_H             = 10
   153                          
   154                          BOX_TITLE_X       = BOX_X + 3
   155                          BOX_TITLE_Y       = BOX_Y + 2
   156                          BOX_LABEL_X       = BOX_TITLE_X + 1
   157                          BOX_LABEL_Y       = BOX_TITLE_Y + 3
   158                          
   159                          NEW_LEVEL_TIMEOUT = 2
   160                          
   161                          
   162                          ; Audio constants
   163                          ; -------------------------
   164                          TONE_PADDLE       = 6
   165                          TONE_WALL         = 2
   166                          TONE_BRICK        = 4
   167                          AUDIO_TONE_PERIOD = 400
   168                          
   169                          ; RAM locations
   170                          ; -------------------------
   171                          LEVEL_DATA   = $0400
   172                          
   173                          
   174                          ; -----------------------------------------------------------------------------
   175                          ; HBC-56 Program Metadata
   176                          ; -----------------------------------------------------------------------------
   177                          hbc56Meta:
   178  8003 4c1280425245414b...        +setHbcMetaTitle "BREAKOUT-56"
   179  8024 a9400dcd7c8dcd7c           +setHbcMetaNES
   180  802c 60                         rts
   181                          
   182                          ; -----------------------------------------------------------------------------
   183                          ; HBC-56 Program Entry
   184                          ; -----------------------------------------------------------------------------
   185                          hbc56Main:
   186                          
   187  802d 78                         sei
   188                          
   189                                  ; go to graphics II mode
   190  802e 2097e6                     jsr tmsModeGraphicsII
   191                          
   192                                  ; disable display during init
   193  8031 a92020efe5                 +tmsDisableInterrupts
   194  8036 a94020efe5                 +tmsDisableOutput
   195                          
   196                                  ; set backrground
   197  803b a9f120cfe5                 +tmsSetColorFgBg TMS_WHITE, TMS_BLACK
   198                          
   199                                  ; set up graphics
   200  8040 204d80                     jsr initVram
   201                          
   202                                  ; set up audio
   203  8043 205687                     jsr initAudio
   204                          
   205                                  ; reset the game
   206  8046 20d588                     jsr resetGame
   207                          
   208  8049 58                         cli
   209                          
   210  804a 4c61fe                     jmp hbc56Stop
   211                          
   212                          
   213                          ; -----------------------------------------------------------------------------
   214                          ; Initialise TMS9918 VRAM
   215                          ; -----------------------------------------------------------------------------
   216                          initVram:
   217                          
   218  804d 205d80                     jsr clearVram
   219                          
   220                                  ; load the brick graphics
   221  8050 20ca80                     jsr brickTilesToVram
   222                          
   223                                  ; load the ui graphics
   224  8053 204384                     jsr uiTilesToVram
   225                          
   226  8056 20ea82                     jsr initSprites
   227                          
   228  8059 201782                     jsr generatePaddleGlyphs
   229                          
   230  805c 60                         rts
   231                          
   232                          ; -----------------------------------------------------------------------------
   233                          ; Clear/reset VRAM
   234                          ; -----------------------------------------------------------------------------
   235                          clearVram:
   236                                  ; clear the name table
   237  805d 0878a9008d117f20...        +tmsSetAddrNameTable
   238  8070 a900                       lda #0
   239  8072 2024e7                     jsr _tmsSendPage        
   240  8075 2024e7                     jsr _tmsSendPage
   241  8078 2024e7                     jsr _tmsSendPage
   242                          
   243                                  ; set all color table entries to transparent
   244  807b 0878a9008d117f20...        +tmsSetAddrColorTable
   245  808e a900                       +tmsColorFgBg TMS_TRANSPARENT, TMS_TRANSPARENT
   246  8090 201be7                     jsr _tmsSendKb
   247  8093 201be7                     jsr _tmsSendKb
   248  8096 201be7                     jsr _tmsSendKb
   249  8099 201be7                     jsr _tmsSendKb
   250  809c 201be7                     jsr _tmsSendKb
   251  809f 201be7                     jsr _tmsSendKb        
   252                          
   253                                  ; clear the pattern table
   254  80a2 0878a9008d117f20...        +tmsSetAddrPattTable
   255  80b5 a900                       lda #0
   256  80b7 201be7                     jsr _tmsSendKb
   257  80ba 201be7                     jsr _tmsSendKb
   258  80bd 201be7                     jsr _tmsSendKb
   259  80c0 201be7                     jsr _tmsSendKb
   260  80c3 201be7                     jsr _tmsSendKb
   261  80c6 201be7                     jsr _tmsSendKb
   262  80c9 60                         rts
   263                          
   264                          ; -----------------------------------------------------------------------------
   265                          ; Write brick data to VRAM
   266                          ; -----------------------------------------------------------------------------
   267                          brickTilesToVram:
   268                          
   269                                  ; brick patterns (for each bank)
   270  80ca 0878a9608d117f20...        +tmsSetAddrPattTableIIBank0 BRICKS_TILE_INDEX
   271  80dd a9e98524a9908525...        +tmsSendDataRpt block, 8 * BRICKS_WIDTH, BRICK_TYPES
   272                          
   273  80f9 0878a9608d117f20...        +tmsSetAddrPattTableIIBank1 BRICKS_TILE_INDEX
   274  810c a9e98524a9908525...        +tmsSendDataRpt block, 8 * BRICKS_WIDTH, BRICK_TYPES
   275                          
   276  8128 0878a9608d117f20...        +tmsSetAddrPattTableIIBank2 BRICKS_TILE_INDEX
   277  813b a9e98524a9908525...        +tmsSendDataRpt block, 8 * BRICKS_WIDTH, BRICK_TYPES
   278                          
   279                                  ; brick colors (for each bank)
   280  8157 0878a9608d117f20...        +tmsSetAddrColorTableIIBank0 BRICKS_TILE_INDEX
   281  816a 209a81                     jsr @sendBlocksPal
   282                          
   283  816d 0878a9608d117f20...        +tmsSetAddrColorTableIIBank1 BRICKS_TILE_INDEX
   284  8180 209a81                     jsr @sendBlocksPal
   285                          
   286  8183 0878a9608d117f20...        +tmsSetAddrColorTableIIBank2 BRICKS_TILE_INDEX
   287  8196 209a81                     jsr @sendBlocksPal
   288                          
   289  8199 60                         rts
   290                          
   291                          @sendBlocksPal:
   292  819a a9318524a9918525...        +tmsSendData    redBlockPal, 8
   293  81a7 a9398524a9918525...        +tmsSendDataRpt redBlockPal + 8, 8, 2
   294  81b9 a9218524a9918525...        +tmsSendData    yellowBlockPal, 8
   295  81c6 a9298524a9918525...        +tmsSendDataRpt yellowBlockPal + 8, 8, 2
   296  81d8 a9118524a9918525...        +tmsSendData    greenBlockPal, 8
   297  81e5 a9198524a9918525...        +tmsSendDataRpt greenBlockPal + 8, 8, 2
   298  81f7 a9018524a9918525...        +tmsSendData    blueBlockPal, 8
   299  8204 a9098524a9918525...        +tmsSendDataRpt blueBlockPal + 8, 8, 2
   300  8216 60                         rts
   301                          
   302                          ; -----------------------------------------------------------------------------
   303                          ; Generate paddle graphics
   304                          ; -----------------------------------------------------------------------------
   305                          generatePaddleGlyphs:
   306  8217 0878a9008d117f20...        +tmsSetAddrPattTableIIBank2 256 - 32
   307                          
   308                                  ; copy paddle left to ram
   309  822a adc090854eadc190...        +memcpy TMP, paddlePatt, 8
   310                          
   311  8252 a908                       lda #8
   312  8254 8556                       sta TMP8
   313                          @generateNextPaddleLeft
   314                                  ; store in vram
   315  8256 a94e8524a9008525...        +tmsSendData TMP, 8
   316  8263 a207                       ldx #7
   317                          
   318                                  ; shift each row right one pixel
   319                          @nextPaddleRowL
   320  8265 564e                       lsr TMP, x
   321  8267 ca                         dex
   322  8268 10fb                       bpl @nextPaddleRowL
   323                          
   324                                  ; next tile?
   325  826a c656                       dec TMP8
   326  826c d0e8                       bne @generateNextPaddleLeft
   327                          
   328                                  ; send paddle centre to vram
   329  826e a9c88524a9908525...        +tmsSendData paddlePatt + 8, 8
   330                          
   331                                  ; copy paddle right to ram
   332  827b add090854eadd190...        +memcpy TMP, paddlePatt + 16, 8
   333                          
   334                          
   335  82a3 a908                       lda #8
   336  82a5 8556                       sta TMP8
   337                          @generateNextPaddleRight
   338                          
   339                                  ; store in vram
   340  82a7 a94e8524a9008525...        +tmsSendData TMP, 8
   341  82b4 a207                       ldx #7
   342                          
   343                                  ; shift each row left one pixel
   344                          @nextPaddleRow
   345  82b6 164e                       asl TMP, x
   346  82b8 ca                         dex
   347  82b9 10fb                       bpl @nextPaddleRow
   348                          
   349                                  ; next tile?
   350  82bb c656                       dec TMP8
   351  82bd d0e8                       bne @generateNextPaddleRight
   352                          
   353                                  ; set up paddle row colors
   354  82bf 0878a9008d117f20...        +tmsSetAddrColorTableIIBank2 256 - 32
   355  82d2 a9a88524a9908525...        +tmsSendDataRpt paddlePal, 8, 32
   356  82e9 60                         rts
   357                          
   358                          ; -----------------------------------------------------------------------------
   359                          ; Initialise sprites
   360                          ; -----------------------------------------------------------------------------
   361                          initSprites:
   362                                  ; create ball pattern
   363  82ea 0878a9008d117f20...        +tmsCreateSpritePattern BALL_SPRITE_INDEX, ballPattern
   364  830d 0878a9088d117f20...        +tmsCreateSpritePattern BALL_SHADOW_INDEX, ballPattern + 8
   365                          
   366                                  ; create paddle highlight patterns
   367  8330 0878a9108d117f20...        +tmsCreateSpritePattern PADDLE_L_SPRITE_INDEX, paddleLeftSpr
   368  8353 0878a9188d117f20...        +tmsCreateSpritePattern PADDLE_R_SPRITE_INDEX, paddleRightSpr
   369                                  
   370                                  ; create ball sprites
   371  8376 0878a9008d117f20...        +tmsCreateSprite 0, 0, 0, $d0, BALL_BASE
   372  83a9 0878a9048d117f20...        +tmsCreateSprite 1, 1, 0, $d0, BALL_SHADE
   373                          
   374                                  ; create paddle highlight sprites
   375  83dc 0878a9088d117f20...        +tmsCreateSprite 2, 2, 0, 0, PADDLE_COLOR_HIGH
   376  840f 0878a90c8d117f20...        +tmsCreateSprite 3, 3, 0, 0, PADDLE_COLOR_SHADE
   377  8442 60                         rts
   378                          
   379                          ; -----------------------------------------------------------------------------
   380                          ; Write UI elements to VRAM
   381                          ; -----------------------------------------------------------------------------
   382                          uiTilesToVram:
   383                                  ; border patterns
   384  8443 0878a9d08d117f20...        +tmsSetAddrPattTableIIBank0 BORDER_TILE_INDEX
   385  8456 a9468524a9918525...        +tmsSendData borderTL, 10 * 8
   386  8463 0878a9d08d117f20...        +tmsSetAddrPattTableIIBank1 BORDER_TILE_INDEX
   387  8476 a9468524a9918525...        +tmsSendData borderTL, 10 * 8
   388  8483 0878a9d08d117f20...        +tmsSetAddrPattTableIIBank2 BORDER_TILE_INDEX
   389  8496 a9468524a9918525...        +tmsSendData borderTL, 10 * 8
   390                          
   391                                  ; border palette
   392  84a3 0878a9d08d117f20...        +tmsSetAddrColorTableIIBank0 BORDER_TILE_INDEX
   393  84b6 201a87                     jsr @sendBorderPal
   394  84b9 0878a9d08d117f20...        +tmsSetAddrColorTableIIBank1 BORDER_TILE_INDEX
   395  84cc 201a87                     jsr @sendBorderPal
   396  84cf 0878a9d08d117f20...        +tmsSetAddrColorTableIIBank2 BORDER_TILE_INDEX
   397  84e2 201a87                     jsr @sendBorderPal
   398                          
   399                                  ; title data
   400  84e5 0878a9008d117f20...        +tmsSetAddrPattTableIIBank0 TITLE_TILE_INDEX
   401  84f8 a9a08524a9918525...        +tmsSendData titlePatt, 8 * TITLE_WIDTH * TITLE_HEIGHT
   402                          
   403  8505 0878a9008d117f20...        +tmsSetAddrPattTableIIBank1 TITLE_TILE_INDEX
   404  8518 a9a08524a9918525...        +tmsSendData titlePatt, 8 * TITLE_WIDTH * TITLE_HEIGHT
   405                          
   406  8525 0878a9008d117f20...        +tmsSetAddrColorTableIIBank0 128
   407  8538 a9308524a9928525...        +tmsSendDataRpt titlePal, 8, TITLE_WIDTH
   408  854f a9388524a9928525...        +tmsSendDataRpt titlePal + 8, 8, TITLE_WIDTH
   409                          
   410  8566 0878a9008d117f20...        +tmsSetAddrColorTableIIBank1 128
   411  8579 a9308524a9928525...        +tmsSendDataRpt titlePal, 8, TITLE_WIDTH
   412  8590 a9388524a9928525...        +tmsSendDataRpt titlePal + 8, 8, TITLE_WIDTH
   413                          
   414                                  ; label data
   415  85a7 0878a9908d117f20...        +tmsSetAddrPattTableIIBank0 LEVEL_TILE_INDEX
   416  85ba a9408524a9928525...        +tmsSendData levelPatt, 8 *LABEL_WIDTH * 3
   417                          
   418  85c7 0878a9908d117f20...        +tmsSetAddrPattTableIIBank1 LEVEL_TILE_INDEX
   419  85da a9408524a9928525...        +tmsSendData levelPatt, 8 * LABEL_WIDTH * 3
   420                          
   421  85e7 0878a9908d117f20...        +tmsSetAddrColorTableIIBank0 LEVEL_TILE_INDEX
   422  85fa a9e88524a9928525...        +tmsSendDataRpt labelPal, 8, LABEL_WIDTH * 3
   423                          
   424  8611 0878a9908d117f20...        +tmsSetAddrColorTableIIBank1 LEVEL_TILE_INDEX
   425  8624 a9e88524a9928525...        +tmsSendDataRpt labelPal, 8, LABEL_WIDTH * 3
   426                          
   427                                  ; digits data
   428                                  NUM_DIGITS = 10
   429  863b 0878a9808d117f20...        +tmsSetAddrPattTableIIBank0 '0'
   430  864e a9f08524a9928525...        +tmsSendData digitsPatt, 8 * NUM_DIGITS
   431  865b 0878a9808d117f20...        +tmsSetAddrPattTableIIBank1 '0'
   432  866e a9f08524a9928525...        +tmsSendData digitsPatt, 8 * NUM_DIGITS
   433  867b 0878a9808d117f20...        +tmsSetAddrPattTableIIBank2 '0'
   434  868e a9f08524a9928525...        +tmsSendData digitsPatt, 8 * NUM_DIGITS
   435                          
   436  869b 0878a9808d117f20...        +tmsSetAddrColorTableIIBank0 '0'
   437  86ae a9408524a9938525...        +tmsSendDataRpt digitsPal, 8, NUM_DIGITS
   438                          
   439  86c5 0878a9808d117f20...        +tmsSetAddrColorTableIIBank1 '0'
   440  86d8 a9408524a9938525...        +tmsSendDataRpt digitsPal, 8, NUM_DIGITS
   441                          
   442  86ef 0878a9808d117f20...        +tmsSetAddrColorTableIIBank2 '0'
   443  8702 a9408524a9938525...        +tmsSendDataRpt digitsPal, 8, NUM_DIGITS
   444  8719 60                         rts
   445                          
   446                          @sendBorderPal
   447  871a a9978524a9918525...        +tmsSendDataRpt borderPal + 1, 8, 3
   448  8731 a9988524a9918525...        +tmsSendDataRpt borderPal + 2, 8, 6
   449  8748 a9968524a9918525...        +tmsSendDataRpt borderPal,     8, 1
   450  8755 60                         rts
   451                          
   452                          ; -----------------------------------------------------------------------------
   453                          ; Add two subpixel values
   454                          ; -----------------------------------------------------------------------------
   455                          !macro addSubPixel pos, spd, dir {
   456                                  bit dir
   457                                  bpl @posDir
   458                          @negDir
   459                                  clc
   460                                  lda pos + 1
   461                                  adc spd + 1
   462                                  sta pos + 1
   463                                  lda pos
   464                                  bcs +
   465                                  dec
   466                          +
   467                                  sec
   468                                  sbc spd
   469                                  sta pos
   470                                  bra @end
   471                          @posDir
   472                                  clc
   473                                  lda pos + 1
   474                                  adc spd + 1
   475                                  sta pos + 1
   476                                  
   477                                  lda pos
   478                                  adc spd
   479                                  sta pos
   480                          @end
   481                          }
   482                          
   483                          ; -----------------------------------------------------------------------------
   484                          ; Initialise audio
   485                          ; -----------------------------------------------------------------------------
   486                          initAudio:
   487  8756 a9078d407fad427f...        +ayToneEnable AY_PSG0, AY_CHC
   488  8768 a90a8d407fa9008d...        +aySetVolume AY_PSG0, AY_CHC, $00
   489  8772 a90d8d407fa9098d...        +aySetEnvShape AY_PSG0,AY_ENV_SHAPE_FADE_OUT
   490  877c 60                         rts
   491                          
   492                          ; -----------------------------------------------------------------------------
   493                          ; Play a note from the notes tables
   494                          ; Inputs:
   495                          ;   X = index into notes tables
   496                          ; -----------------------------------------------------------------------------
   497                          playNote:
   498  877d 854e                       sta TMP
   499                          
   500  877f a900                       lda #0
   501  8781 a2048e407f8d417f           +ayWriteA AY_PSG0, AY_CHC_TONE_L
   502  8789 a2058e407f8d417f           +ayWriteA AY_PSG0, AY_CHC_TONE_H
   503                          
   504  8791 a64e                       ldx TMP
   505  8793 bd4893                     lda notesL, x
   506  8796 a2048e407f8d417f           +ayWriteA AY_PSG0, AY_CHC_TONE_L
   507  879e bd6693                     lda notesH, x
   508  87a1 a2058e407f8d417f           +ayWriteA AY_PSG0, AY_CHC_TONE_H
   509                          
   510  87a9 a90a8d407fa9108d...        +aySetVolumeEnvelope AY_PSG0, AY_CHC
   511  87b3 a90d8d407fa9098d...        +aySetEnvShape AY_PSG0,AY_ENV_SHAPE_FADE_OUT
   512  87bd a90b8d407fa9908d...        +aySetEnvelopePeriod AY_PSG0, AUDIO_TONE_PERIOD
   513                          
   514  87d1 60                         rts
   515                          
   516                          
   517                          ; -----------------------------------------------------------------------------
   518                          ; Load level data from ROM
   519                          ; Inputs:
   520                          ;   LEVEL = level number to load
   521                          ; -----------------------------------------------------------------------------
   522                          loadLevel:
   523  87d2 a544                       lda LEVEL
   524  87d4 3a                         dec
   525  87d5 2903                       and #$03
   526  87d7 0a                         asl
   527  87d8 aa                         tax
   528                          
   529  87d9 bd8493                     lda levelMap, x
   530  87dc 8530                       sta MEM_SRC
   531  87de e8                         inx
   532  87df bd8493                     lda levelMap, X
   533  87e2 8531                       sta MEM_SRC + 1
   534                          
   535  87e4 a900852ea904852f           +setMemCpyDst LEVEL_DATA
   536                          
   537  87ec a060                       ldy #LEVEL_SIZE
   538                          
   539  87ee 20a3e0                     jsr memcpySinglePage
   540                          
   541  87f1 60                         rts
   542                          
   543                          ; -----------------------------------------------------------------------------
   544                          ; Render the level
   545                          ; -----------------------------------------------------------------------------
   546                          renderLevel:
   547  87f2 644a                       stz BLOCKS_LEFT
   548                          
   549  87f4 a200                       ldx #0
   550                          -
   551  87f6 200688                     jsr renderBlock
   552  87f9 bd0004                     lda LEVEL_DATA, x
   553  87fc f002                       beq +
   554  87fe e64a                       inc BLOCKS_LEFT
   555                          +
   556  8800 e8                         inx
   557  8801 e060                       cpx #LEVEL_SIZE
   558  8803 d0f1                       bne -
   559  8805 60                         rts
   560                          
   561                          
   562                          ; -----------------------------------------------------------------------------
   563                          ; Render a level brick
   564                          ; Inputs:
   565                          ;   X = level brick index
   566                          ; -----------------------------------------------------------------------------
   567                          renderBlock:
   568  8806 da                         phx
   569                          
   570                                  ; calculate y tile
   571  8807 864e                       stx TMP
   572  8809 8a                         txa
   573  880a 4a4a4a                     +div8   ; divide by level stride
   574  880d 1a                         inc ; start at row 1
   575  880e a8                         tay
   576                          
   577                                  ; calculate x tile
   578  880f a54e                       lda TMP
   579  8811 2907                       and #$07
   580  8813 c907                       cmp #LEVEL_WIDTH
   581  8815 b02a                       bcs @endRender
   582  8817 854e                       sta TMP
   583  8819 0a                         asl
   584  881a 38                         sec
   585  881b 654e                       adc TMP
   586  881d aa                         tax
   587                          
   588                                  ; set tms address
   589  881e 206ae8                     jsr tmsSetPosTmpAddress
   590  8821 2092e5                     jsr tmsSetAddressWrite
   591                          
   592  8824 fa                         plx
   593  8825 da                         phx
   594                          
   595                                  ; get brick type
   596  8826 bd0004                     lda LEVEL_DATA, x
   597  8829 aa                         tax
   598                          
   599                                  ; get brick tile index
   600  882a bd4191                     lda tileData, x
   601                          
   602                                  ; render the three brick tiles
   603  882d 8d107f2079e5               +tmsPut
   604  8833 1a                         inc
   605  8834 8d107f2079e5               +tmsPut
   606  883a 1a                         inc
   607  883b 8d107f2079e5               +tmsPut
   608                          
   609                          @endRender:
   610  8841 fa                         plx
   611  8842 60                         rts
   612                          
   613                          ; -----------------------------------------------------------------------------
   614                          ; Reset paddle and ball - start a round
   615                          ; -----------------------------------------------------------------------------
   616                          resetPaddle:
   617                          
   618                                  ; reset paddle position an dsize
   619  8843 a94c                       lda #(GAME_AREA_WIDTH - PADDLE_WIDTH) / 2 + GAME_AREA_LEFT
   620  8845 8542                       sta PADX
   621  8847 a920                       lda #PADDLE_WIDTH
   622  8849 8543                       sta PADW
   623                          
   624                                  ; reset ball position and speed
   625  884b 6439                       stz POSX_SUB
   626  884d 643b                       stz POSY_SUB
   627                          
   628  884f 643c                       stz SPDX
   629  8851 a902                       lda #2
   630  8853 853e                       sta SPDY
   631                          
   632  8855 643d                       stz SPDX_SUB
   633  8857 643f                       stz SPDY_SUB
   634                          
   635  8859 a901                       lda #1
   636  885b 8540                       sta DIRX
   637  885d a9ff                       lda #-1
   638  885f 8541                       sta DIRY
   639                          
   640  8861 a959                       lda #GAME_AREA_WIDTH / 2 + GAME_AREA_LEFT - 3
   641  8863 8538                       sta POSX
   642                          
   643  8865 a9b5                       lda #PADDLE_SPRITE_Y - 6
   644  8867 853a                       sta POSY
   645                          
   646                                  ; clear the paddle row
   647  8869 0878a9e18d117f20...        +tmsSetPosWrite 1, PADDLE_ROW
   648  887c a215a9008d107f20...        +tmsPutRpt 0, LEVEL_WIDTH * BRICKS_WIDTH
   649                          
   650  8889 20c08c                     jsr renderPaddle
   651                          
   652                                  ; output ball count
   653  888c 0878a93a8d117f20...        +tmsSetPosWrite BALLS_X, BALLS_Y
   654  889f a9308d107f2079e5           +tmsPut '0'
   655  88a7 a548                       lda BALLS
   656  88a9 20c489                     jsr outputBCD
   657                          
   658  88ac 60                         rts
   659                          
   660                          ; -----------------------------------------------------------------------------
   661                          ; Ball lost
   662                          ; -----------------------------------------------------------------------------
   663                          loseBall:
   664                                  ; reset multiplier
   665  88ad a901                       lda #1
   666  88af 8549                       sta MULT
   667                                  
   668                                  ; lose a ball
   669  88b1 c648                       dec BALLS
   670                          
   671                                  ; last ball?
   672  88b3 3012                       bmi endGame
   673                          
   674  88b5 204388                     jsr resetPaddle
   675                          
   676  88b8 a94b8de37ca98f8d...        +hbc56SetVsyncCallback gameLoopWaitForStart
   677                          
   678  88c2 60                         rts
   679                          
   680                          ; -----------------------------------------------------------------------------
   681                          ; Advance a level
   682                          ; -----------------------------------------------------------------------------
   683                          nextLevel
   684  88c3 e644                       inc LEVEL
   685  88c5 8026                       bra startGameLevel
   686                          
   687                          
   688                          ; -----------------------------------------------------------------------------
   689                          ; End game
   690                          ; -----------------------------------------------------------------------------
   691                          endGame:
   692  88c7 203a8c                     jsr renderEndGameBox
   693  88ca a98f8de37ca98f8d...        +hbc56SetVsyncCallback gameLoopGameOver
   694  88d4 60                         rts
   695                          
   696                          
   697                          ; -----------------------------------------------------------------------------
   698                          ; Reset the game - new game
   699                          ; -----------------------------------------------------------------------------
   700                          resetGame:
   701                                  ; level 1
   702  88d5 a901                       lda #1
   703  88d7 8544                       sta LEVEL
   704                          
   705                                  ; score 0
   706  88d9 a900                       lda #0
   707  88db 8547                       sta SCORE_L
   708  88dd 8546                       sta SCORE_M
   709  88df 8545                       sta SCORE_H
   710                          
   711                                  ; ball count
   712  88e1 a904                       lda #INITIAL_BALLS
   713  88e3 8548                       sta BALLS
   714                          
   715  88e5 a901                       lda #PADDLE_SPEED
   716  88e7 854b                       sta PADSPD
   717  88e9 a900                       lda #PADDLE_SPEED_SUB
   718  88eb 854c                       sta PADSPD_SUB
   719                          
   720                          ; -----------------------------------------------------------------------------
   721                          ; Start a new level
   722                          ; -----------------------------------------------------------------------------
   723                          startGameLevel:
   724                          
   725  88ed a92020efe5                 +tmsDisableInterrupts
   726  88f2 a94020efe5                 +tmsDisableOutput
   727                          
   728  88f7 0878a9008d117f20...        +tmsSpritePos 0, 0, $d0
   729  891a 0878a9048d117f20...        +tmsSpritePos 1, 0, $d0
   730                          
   731  893d 204388                     jsr resetPaddle
   732                          
   733  8940 20d287                     jsr loadLevel
   734                          
   735  8943 20f287                     jsr renderLevel
   736                          
   737  8946 20df89                     jsr renderBorder
   738                          
   739  8949 20b68b                     jsr renderLevelBox
   740                          
   741                                  ; output level number
   742  894c 0878a9fa8d117f20...        +tmsSetPosWrite LEVEL_X, LEVEL_Y
   743  895f a9308d107f2079e5           +tmsPut '0'
   744  8967 a544                       lda LEVEL
   745  8969 20c489                     jsr outputBCD
   746                          
   747  896c a900                       lda #0
   748  896e 208b89                     jsr addScore
   749                          
   750                                  ; set up game loop as vsync callback
   751  8971 adca7c                     lda HBC56_SECONDS_L
   752  8974 854d                       sta START_TIME
   753                          
   754  8976 a9268de37ca98f8d...        +hbc56SetVsyncCallback gameLoopNewLevel
   755                          
   756  8980 a94020e5e5                 +tmsEnableOutput
   757  8985 a92020e5e5                 +tmsEnableInterrupts
   758                          
   759  898a 60                         rts
   760                          
   761                          ; -----------------------------------------------------------------------------
   762                          ; Add to the score
   763                          ; Inputs:
   764                          ;   A = BCD encoded points to add
   765                          ; -----------------------------------------------------------------------------
   766                          addScore:
   767  898b f8                         sed
   768  898c 6547                       adc SCORE_L
   769  898e 8547                       sta SCORE_L
   770  8990 900e                       bcc @endAddScore
   771  8992 a900                       lda #0
   772  8994 6546                       adc SCORE_M
   773  8996 8546                       sta SCORE_M
   774  8998 9006                       bcc @endAddScore
   775  899a a900                       lda #0
   776  899c 6545                       adc SCORE_H
   777  899e 8545                       sta SCORE_H
   778                          
   779                          @endAddScore
   780  89a0 d8                         cld
   781                          
   782                                  ; output score
   783  89a1 0878a9998d117f20...        +tmsSetPosWrite SCORE_X, SCORE_Y
   784  89b4 a545                       lda SCORE_H
   785  89b6 20d489                     jsr outputBCDLow
   786  89b9 a546                       lda SCORE_M
   787  89bb 20c489                     jsr outputBCD
   788  89be a547                       lda SCORE_L
   789  89c0 20c489                     jsr outputBCD
   790  89c3 60                         rts
   791                          
   792                          ; -----------------------------------------------------------------------------
   793                          ; Output two BCD digits to current location
   794                          ; Inputs:
   795                          ;   A = BCD encoded value
   796                          ; -----------------------------------------------------------------------------
   797                          outputBCD:
   798  89c4 854e                       sta TMP
   799  89c6 4a4a4a4a                   +lsr4
   800  89ca 0930                       ora #'0'
   801  89cc 8d107f2079e5               +tmsPut
   802  89d2 a54e                       lda TMP
   803                          outputBCDLow:
   804  89d4 290f                       and #$0f
   805  89d6 0930                       ora #'0'
   806  89d8 8d107f2079e5               +tmsPut
   807  89de 60                         rts
   808                          
   809                          ; -----------------------------------------------------------------------------
   810                          ; Render the game border and ui
   811                          ; -----------------------------------------------------------------------------
   812                          renderBorder:
   813                                  ; border top
   814  89df 0878a9008d117f20...        +tmsSetPosWrite BORDER_X, BORDER_Y
   815  89f2 a91a8d107f2079e5           +tmsPut BORDER_TL_INDEX
   816  89fa a215a91b8d107f20...        +tmsPutRpt BORDER_TOP_INDEX, BORDER_WIDTH - 2
   817  8a07 a91c8d107f2079e5           +tmsPut BORDER_TR_INDEX
   818                          
   819                                  ; left border
   820  8a0f a200                       ldx #BORDER_X
   821  8a11 a001                       ldy #BORDER_Y + 1
   822  8a13 206ae8                     jsr tmsSetPosTmpAddress
   823  8a16 2092e5                     jsr tmsSetAddressWrite
   824  8a19 a216                       ldx #BORDER_HEIGHT - 2
   825                          -
   826  8a1b a91d8d107f2079e5           +tmsPut BORDER_L_INDEX
   827  8a23 2086e5                     jsr tmsSetAddressNextRow
   828  8a26 2092e5                     jsr tmsSetAddressWrite
   829  8a29 ca                         dex
   830  8a2a d0ef                       bne -
   831  8a2c a91f8d107f2079e5           +tmsPut BORDER_LB_INDEX
   832                          
   833                                  ; right border
   834  8a34 a216                       ldx #BORDER_X + BORDER_WIDTH - 1
   835  8a36 a001                       ldy #BORDER_Y + 1
   836  8a38 206ae8                     jsr tmsSetPosTmpAddress
   837  8a3b 2092e5                     jsr tmsSetAddressWrite
   838  8a3e a216                       ldx #BORDER_HEIGHT - 2
   839                          -
   840  8a40 a91e8d107f2079e5           +tmsPut BORDER_R_INDEX
   841  8a48 2086e5                     jsr tmsSetAddressNextRow
   842  8a4b 2092e5                     jsr tmsSetAddressWrite
   843  8a4e ca                         dex
   844  8a4f d0ef                       bne -
   845  8a51 a9208d107f2079e5           +tmsPut BORDER_RB_INDEX
   846                          
   847                                  ; render title
   848  8a59 0878a9178d117f20...        +tmsSetPosWrite TITLE_X, TITLE_Y
   849  8a6c a9808d107f2079e5...        +tmsPutSeq TITLE_TILE_INDEX, TITLE_WIDTH
   850  8a79 0878a9378d117f20...        +tmsSetPosWrite TITLE_X, TITLE_Y + 1
   851  8a8c a9898d107f2079e5...        +tmsPutSeq TITLE_TILE_INDEX + TITLE_WIDTH, TITLE_WIDTH
   852                          
   853                                  ; render labels
   854  8a99 0878a9b88d117f20...        +tmsSetPosWrite LEVEL_LABEL_X, LEVEL_LABEL_Y
   855  8aac a9928d107f2079e5...        +tmsPutSeq LEVEL_TILE_INDEX, LABEL_WIDTH
   856                          
   857  8ab9 0878a9588d117f20...        +tmsSetPosWrite SCORE_LABEL_X, SCORE_LABEL_Y
   858  8acc a9998d107f2079e5...        +tmsPutSeq SCORE_TILE_INDEX, LABEL_WIDTH
   859                          
   860  8ad9 0878a9f88d117f20...        +tmsSetPosWrite BALLS_LABEL_X, BALLS_LABEL_Y
   861  8aec a9a08d107f2079e5...        +tmsPutSeq BALLS_TILE_INDEX, LABEL_WIDTH
   862                          
   863  8af9 60                         rts
   864                          
   865                          ; -----------------------------------------------------------------------------
   866                          ; Render dialog box
   867                          ; -----------------------------------------------------------------------------
   868                          renderBox:
   869                                  ; border top
   870  8afa 0878a9e48d117f20...        +tmsSetPosWrite BOX_X, BOX_Y
   871  8b0d a91a8d107f2079e5           +tmsPut BORDER_TL_INDEX
   872  8b15 a20da91b8d107f20...        +tmsPutRpt BORDER_TOP_INDEX, BOX_W - 2
   873  8b22 a91c8d107f2079e5           +tmsPut BORDER_TR_INDEX
   874                          
   875  8b2a a908                       lda #BOX_H - 2
   876  8b2c 854e                       sta TMP
   877                          
   878  8b2e a204                       ldx #BOX_X
   879  8b30 a008                       ldy #BOX_Y + 1
   880  8b32 206ae8                     jsr tmsSetPosTmpAddress
   881  8b35 2092e5                     jsr tmsSetAddressWrite
   882                          -
   883  8b38 a91d8d107f2079e5           +tmsPut BORDER_L_INDEX
   884  8b40 a20da9008d107f20...        +tmsPutRpt 0, BOX_W - 2
   885  8b4d a91e8d107f2079e5           +tmsPut BORDER_R_INDEX
   886                          
   887  8b55 2086e5                     jsr tmsSetAddressNextRow
   888  8b58 2092e5                     jsr tmsSetAddressWrite
   889                          
   890  8b5b c64e                       dec TMP
   891  8b5d d0d9                       bne -
   892                          
   893                                  ; border bottom
   894  8b5f 0878a9048d117f20...        +tmsSetPosWrite BOX_X, BOX_Y + BOX_H - 1
   895  8b72 a9218d107f2079e5           +tmsPut BORDER_BL_INDEX
   896  8b7a a20da9238d107f20...        +tmsPutRpt BORDER_B_INDEX, BOX_W - 2
   897  8b87 a9228d107f2079e5           +tmsPut BORDER_BR_INDEX
   898  8b8f 60                         rts
   899                          
   900                          ; -----------------------------------------------------------------------------
   901                          ; Clear the dialog box
   902                          ; -----------------------------------------------------------------------------
   903                          clearBox:
   904  8b90 a90a                       lda #BOX_H
   905  8b92 854e                       sta TMP
   906                          
   907  8b94 a204                       ldx #BOX_X
   908  8b96 a007                       ldy #BOX_Y
   909  8b98 206ae8                     jsr tmsSetPosTmpAddress
   910  8b9b 2092e5                     jsr tmsSetAddressWrite
   911                          -
   912  8b9e a20fa9008d107f20...        +tmsPutRpt 0, BOX_W
   913                          
   914  8bab 2086e5                     jsr tmsSetAddressNextRow
   915  8bae 2092e5                     jsr tmsSetAddressWrite
   916                          
   917  8bb1 c64e                       dec TMP
   918  8bb3 d0e9                       bne -
   919                          
   920  8bb5 60                         rts
   921                          
   922                          ; -----------------------------------------------------------------------------
   923                          ; Render the level dialog box
   924                          ; -----------------------------------------------------------------------------
   925                          renderLevelBox:
   926  8bb6 20fa8a                     jsr renderBox
   927                          
   928  8bb9 0878a9278d117f20...        +tmsSetPosWrite BOX_TITLE_X, BOX_TITLE_Y
   929  8bcc a9808d107f2079e5...        +tmsPutSeq TITLE_TILE_INDEX, TITLE_WIDTH
   930  8bd9 0878a9478d117f20...        +tmsSetPosWrite BOX_TITLE_X, BOX_TITLE_Y + 1
   931  8bec a9898d107f2079e5...        +tmsPutSeq TITLE_TILE_INDEX + TITLE_WIDTH, TITLE_WIDTH
   932                          
   933  8bf9 0878a9888d117f20...        +tmsSetPosWrite BOX_LABEL_X, BOX_LABEL_Y
   934  8c0c a9928d107f2079e5...        +tmsPutSeq LEVEL_TILE_INDEX, LABEL_WIDTH
   935                          
   936  8c19 0878a9ca8d117f20...        +tmsSetPosWrite BOX_LABEL_X + 2, BOX_LABEL_Y + 2
   937  8c2c a9308d107f2079e5           +tmsPut '0'
   938  8c34 a544                       lda LEVEL
   939  8c36 20c489                     jsr outputBCD
   940                          
   941  8c39 60                         rts
   942                          
   943                          ; -----------------------------------------------------------------------------
   944                          ; Render the end game dialog box
   945                          ; -----------------------------------------------------------------------------
   946                          renderEndGameBox:
   947  8c3a 20fa8a                     jsr renderBox
   948                          
   949  8c3d 0878a9278d117f20...        +tmsSetPosWrite BOX_TITLE_X, BOX_TITLE_Y
   950  8c50 a9808d107f2079e5...        +tmsPutSeq TITLE_TILE_INDEX, TITLE_WIDTH
   951  8c5d 0878a9478d117f20...        +tmsSetPosWrite BOX_TITLE_X, BOX_TITLE_Y + 1
   952  8c70 a9898d107f2079e5...        +tmsPutSeq TITLE_TILE_INDEX + TITLE_WIDTH, TITLE_WIDTH
   953                          
   954  8c7d 0878a9888d117f20...        +tmsSetPosWrite BOX_LABEL_X, BOX_LABEL_Y
   955  8c90 a9998d107f2079e5...        +tmsPutSeq SCORE_TILE_INDEX, LABEL_WIDTH
   956                          
   957  8c9d 0878a9c98d117f20...        +tmsSetPosWrite BOX_LABEL_X + 1, BOX_LABEL_Y + 2
   958                          
   959  8cb0 a545                       lda SCORE_H
   960  8cb2 20d489                     jsr outputBCDLow
   961  8cb5 a546                       lda SCORE_M
   962  8cb7 20c489                     jsr outputBCD
   963  8cba a547                       lda SCORE_L
   964  8cbc 20c489                     jsr outputBCD
   965                          
   966  8cbf 60                         rts
   967                          
   968                          ; -----------------------------------------------------------------------------
   969                          ; Render the paddle
   970                          ; -----------------------------------------------------------------------------
   971                          renderPaddle:
   972                          
   973                                  ; only support paddles > 8 pixels
   974  8cc0 a543                       lda PADW
   975  8cc2 c908                       cmp #8
   976  8cc4 b001                       bcs +
   977  8cc6 60                         rts
   978                          +
   979                          
   980                                  ; find paddle offset tile (x tile)
   981  8cc7 a542                       lda PADX
   982  8cc9 4a4a4a                     +div8
   983  8ccc 854e                       sta TMP
   984  8cce c901                       cmp #1
   985  8cd0 f001                       beq +
   986  8cd2 3a                         dec
   987                          +
   988                                  ; set tms address
   989  8cd3 aa                         tax
   990  8cd4 a017                       ldy #PADDLE_ROW
   991  8cd6 206de9                     jsr tmsSetPosWrite
   992                          
   993                                  ; output a blank tile
   994  8cd9 a54e                       lda TMP
   995  8cdb c901                       cmp #1
   996  8cdd f008                       beq +
   997  8cdf a9008d107f2079e5           +tmsPut 0
   998                          +
   999                                  ; find paddle pixel offset within the start tile
  1000                                  ; and store in x        
  1001  8ce7 a542                       lda PADX
  1002  8ce9 2907                       and #$07
  1003  8ceb aa                         tax
  1004                          
  1005                                  ; store pixels remaining in TMP
  1006  8cec 18                         clc
  1007  8ced 6543                       adc PADW
  1008  8cef 38                         sec
  1009  8cf0 e908                       sbc #8
  1010  8cf2 854e                       sta TMP
  1011                          
  1012                                  ; find the correct tile index
  1013  8cf4 bdd890                     lda leftPatterns, x
  1014  8cf7 8d107f2079e5               +tmsPut
  1015                          
  1016                          @loop
  1017                                  ; home many pixels left?
  1018  8cfd a54e                       lda TMP
  1019  8cff f01b                       beq @doneDraw
  1020                          
  1021                                  ; get pixel count for this tile
  1022                                  ; 9 or more? call it 8
  1023  8d01 c909                       cmp #9
  1024  8d03 9002                       bcc +
  1025  8d05 a908                       lda #8
  1026                          +
  1027                                  ; compute remaining pixels
  1028  8d07 aa                         tax
  1029  8d08 a54e                       lda TMP
  1030  8d0a 864e                       stx TMP
  1031  8d0c 38                         sec
  1032  8d0d e54e                       sbc TMP
  1033  8d0f 854e                       sta TMP
  1034                          
  1035                                  ; find the correct tile index
  1036  8d11 bde090                     lda rightPatterns, x
  1037  8d14 8d107f2079e5               +tmsPut
  1038  8d1a 80e1                       bra @loop
  1039                          
  1040                          @doneDraw:
  1041                          
  1042                                  ; output an empty tile
  1043  8d1c a542                       lda PADX
  1044  8d1e 18                         clc
  1045  8d1f 6543                       adc PADW
  1046  8d21 c9a8                       cmp #GAME_AREA_RIGHT-8
  1047  8d23 b008                       bcs +
  1048  8d25 a9008d107f2079e5           +tmsPut 0
  1049                          +
  1050                          
  1051                                  ; reposition the paddle highlight sprites
  1052  8d2d a642                       ldx PADX
  1053  8d2f a0bb                       ldy #PADDLE_SPRITE_Y
  1054  8d31 0878a9088d117f20...        +tmsSpritePosXYReg PADDLE_L_SPRITE_INDEX
  1055  8d52 18                         clc
  1056  8d53 8a                         txa
  1057  8d54 6543                       adc PADW
  1058  8d56 3a                         dec
  1059  8d57 aa                         tax
  1060  8d58 0878a90c8d117f20...        +tmsSpritePosXYReg PADDLE_R_SPRITE_INDEX
  1061  8d79 60                         rts
  1062                          
  1063                          ; -----------------------------------------------------------------------------
  1064                          ; Render the ball
  1065                          ; -----------------------------------------------------------------------------
  1066                          renderBall:
  1067                                  ; get ball pixel position (rounding subpixel)
  1068  8d7a a638                       ldx POSX
  1069  8d7c 2439                       bit POSX_SUB
  1070  8d7e 1001                       bpl +
  1071  8d80 e8                         inx
  1072                          +
  1073  8d81 a43a                       ldy POSY
  1074  8d83 243b                       bit POSY_SUB
  1075  8d85 1001                       bpl +
  1076  8d87 c8                         iny
  1077                          +
  1078                                  ; update ball sprite locations
  1079  8d88 0878a9008d117f20...        +tmsSpritePosXYReg BALL_SPRITE_INDEX
  1080  8da9 0878a9048d117f20...        +tmsSpritePosXYReg BALL_SHADOW_INDEX
  1081  8dca 60                         rts
  1082                          
  1083                          ; -----------------------------------------------------------------------------
  1084                          ; convert a pixel position to a game brick index
  1085                          ; Inputs:
  1086                          ;   X = x location (in pixels)
  1087                          ;   Y = y location (in pixels)
  1088                          ; Returns;
  1089                          ;   A = Game brick / level index
  1090                          ; -----------------------------------------------------------------------------
  1091                          posToLevelCell:
  1092                          
  1093                                  ; compute offset for x tile index
  1094  8dcb 8a                         txa
  1095  8dcc 4a4a4a                     +div8
  1096  8dcf aa                         tax
  1097  8dd0 bde98d                     lda @xPosToLevelCell, x
  1098                          
  1099                                  ; not valid? bail
  1100  8dd3 c9ff                       cmp #NO_BRICK
  1101  8dd5 f011                       beq @outOfBounds
  1102                          
  1103  8dd7 854e                       sta TMP
  1104                          
  1105                                  ; compute offset for y tile index
  1106  8dd9 98                         tya
  1107  8dda 4a4a4a                     +div8
  1108  8ddd a8                         tay
  1109  8dde b9058e                     lda @yPosToLevelCell, y
  1110                          
  1111                                  ; not valid? bail
  1112  8de1 c9ff                       cmp #NO_BRICK
  1113  8de3 f003                       beq @outOfBounds
  1114                          
  1115                                  ; both valid. sum them to get a level index
  1116  8de5 18                         clc
  1117  8de6 654e                       adc TMP
  1118                          
  1119                          @outOfBounds:
  1120  8de8 60                         rts
  1121                          
  1122                          ; convert x tile index to level offset
  1123                          @xPosToLevelCell:
  1124  8de9 ff00000001010102...!byte NO_BRICK, 0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 6, 6, 6, 7, 7, 7, NO_BRICK, NO_BRICK, NO_BRICK
  1125                          
  1126                          ; convert y tile index to level offset
  1127                          @yPosToLevelCell:
  1128  8e05 ff00081018202830...!byte NO_BRICK, 0, 8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 104, 112, NO_BRICK        
  1129                          
  1130                          
  1131                          ; -----------------------------------------------------------------------------
  1132                          ; negate a number (-ve to +ve and vice-versa)
  1133                          ; -----------------------------------------------------------------------------
  1134                          !macro negate val {
  1135                                  lda val
  1136                                  eor #$ff
  1137                                  inc
  1138                                  sta val
  1139                          }
  1140                          
  1141                          
  1142                          ; -----------------------------------------------------------------------------
  1143                          ; Call when we hit a brick.
  1144                          ; Inputs:
  1145                          ;   X = game brick index
  1146                          ; -----------------------------------------------------------------------------
  1147                          hitBrick:
  1148  8e16 a900                       lda #0
  1149  8e18 9d0004                     sta LEVEL_DATA, x
  1150                          
  1151                                  ; clear brick
  1152  8e1b 200688                     jsr renderBlock
  1153                          
  1154                                  ; bounce ball
  1155  8e1e a54149ff1a8541             +negate DIRY
  1156                          
  1157                                  ; add to score (multiplier times)
  1158  8e25 a649                       ldx MULT
  1159                          -
  1160                                  ; increment score
  1161  8e27 a925                       lda #$25
  1162  8e29 208b89                     jsr addScore
  1163  8e2c ca                         dex
  1164  8e2d d0f8                       bne -
  1165                          
  1166                                  ; increment multiplier
  1167  8e2f e649                       inc MULT
  1168                          
  1169                                  ; play a tone based on multiplier
  1170  8e31 a549                       lda MULT
  1171  8e33 1a                         inc
  1172  8e34 1a                         inc
  1173  8e35 207d87                     jsr playNote
  1174  8e38 60                         rts
  1175                          
  1176                          ; -----------------------------------------------------------------------------
  1177                          ; Call when we hit the paddle
  1178                          ; -----------------------------------------------------------------------------
  1179                          hitPaddle:
  1180                                  
  1181                                  ; paddle hit
  1182  8e39 a54149ff1a8541             +negate DIRY
  1183                          
  1184                                  ; accelerate ball
  1185  8e40 a2eb20e4f3d023             +kbBranchIfPressed KB_SCANCODE_ARROW_LEFT, @leftPressed
  1186  8e47 48a90220adf268b0...        +nes1BranchIfPressed NES_LEFT, @leftPressed
  1187                          @doneLeftCheck:
  1188                          
  1189  8e50 a2f420e4f3d018             +kbBranchIfPressed KB_SCANCODE_ARROW_RIGHT, @rightPressed
  1190  8e57 48a90120adf268b0...        +nes1BranchIfPressed NES_RIGHT, @rightPressed
  1191                          @doneRightCheck:
  1192                          
  1193                                  ; reset multiplier
  1194  8e60 a901                       lda #1
  1195  8e62 8549                       sta MULT
  1196                          
  1197  8e64 a906                       lda #TONE_PADDLE
  1198  8e66 207d87                     jsr playNote
  1199  8e69 60                         rts
  1200                          
  1201                          @leftPressed:
  1202  8e6a 20748e                     jsr @pushLeft
  1203  8e6d 80e1                       bra @doneLeftCheck
  1204                          
  1205                          @rightPressed:
  1206  8e6f 20af8e                     jsr @pushRight
  1207  8e72 80ec                       bra @doneRightCheck
  1208                          
  1209                          
  1210                          
  1211                          ; -----------------------------------------------------------------------------
  1212                          ; Accelerate ball left based on paddle movement
  1213                          ; -----------------------------------------------------------------------------
  1214                          @pushLeft:
  1215  8e74 a9ff                       lda #-1
  1216  8e76 854e                       sta TMP
  1217  8e78 244e101318a53d65...        +addSubPixel SPDX, PADSPD, TMP
  1218                          
  1219  8e9c a53c                       lda SPDX
  1220  8e9e 100e                       bpl +
  1221  8ea0 a53c49ff1a853c             +negate SPDX
  1222  8ea7 a54049ff1a8540             +negate DIRX
  1223                          +
  1224  8eae 60                         rts
  1225                          
  1226                          ; -----------------------------------------------------------------------------
  1227                          ; Accelerate ball right based on paddle movement
  1228                          ; -----------------------------------------------------------------------------
  1229                          @pushRight:
  1230  8eaf a901                       lda #1
  1231  8eb1 854e                       sta TMP
  1232  8eb3 244e101318a53d65...        +addSubPixel SPDX, PADSPD, TMP
  1233                          
  1234  8ed7 a53c                       lda SPDX
  1235  8ed9 100e                       bpl +
  1236  8edb a53c49ff1a853c             +negate SPDX
  1237  8ee2 a54049ff1a8540             +negate DIRX
  1238                          +
  1239  8ee9 60                         rts
  1240                          
  1241                          ; -----------------------------------------------------------------------------
  1242                          ; Handle paddle input. Affect position
  1243                          ; -----------------------------------------------------------------------------
  1244                          handlePaddleInput:
  1245                          
  1246                                  ; left?
  1247  8eea a21c20e4f3d01a             +kbBranchIfPressed KB_SCANCODE_A, @leftPressed
  1248  8ef1 48a90220adf268b0...        +nes1BranchIfPressed NES_LEFT, @leftPressed
  1249                          @doneLeftCheck:
  1250                          
  1251                                  ; right?
  1252  8efa a22320e4f3d016             +kbBranchIfPressed KB_SCANCODE_D, @rightPressed
  1253  8f01 48a90120adf268b0...        +nes1BranchIfPressed NES_RIGHT, @rightPressed
  1254                          
  1255                          @doneRightCheck:
  1256                          
  1257                          
  1258  8f0a 60                         rts
  1259                          
  1260                          @leftPressed:
  1261  8f0b a542                       lda PADX
  1262  8f0d c90a                       cmp #GAME_AREA_LEFT + 2
  1263  8f0f 90e9                       bcc @doneLeftCheck
  1264  8f11 c642                       dec PADX
  1265  8f13 c642                       dec PADX
  1266  8f15 80e3                       bra @doneLeftCheck
  1267                          
  1268                          @rightPressed:
  1269  8f17 a542                       lda PADX
  1270  8f19 18                         clc
  1271  8f1a 6543                       adc PADW
  1272  8f1c c9ae                       cmp #GAME_AREA_RIGHT-2
  1273  8f1e b0ea                       bcs @doneRightCheck
  1274  8f20 e642                       inc PADX
  1275  8f22 e642                       inc PADX
  1276  8f24 80e4                       bra @doneRightCheck
  1277                          
  1278                          
  1279                          ; -----------------------------------------------------------------------------
  1280                          ; New level started - wait a couple of seconds (tied to VSYNC interrupt)
  1281                          ; -----------------------------------------------------------------------------
  1282                          gameLoopNewLevel:
  1283                          
  1284  8f26 a54d                       lda START_TIME
  1285  8f28 18                         clc
  1286  8f29 6902                       adc #NEW_LEVEL_TIMEOUT
  1287  8f2b cdca7c                     cmp HBC56_SECONDS_L
  1288  8f2e d01a                       bne @nextFrame
  1289                          
  1290  8f30 a94020efe5                 +tmsDisableOutput
  1291  8f35 20908b                     jsr clearBox
  1292  8f38 20f287                     jsr renderLevel
  1293  8f3b a94020e5e5                 +tmsEnableOutput
  1294                          
  1295  8f40 a94b8de37ca98f8d...        +hbc56SetVsyncCallback gameLoopWaitForStart
  1296                          
  1297                          @nextFrame
  1298  8f4a 60                         rts
  1299                          
  1300                          ; -----------------------------------------------------------------------------
  1301                          ; Wait for user input (tied to VSYNC interrupt)
  1302                          ; -----------------------------------------------------------------------------
  1303                          gameLoopWaitForStart:
  1304                                  
  1305  8f4b 20ea8e                     jsr handlePaddleInput
  1306                          
  1307                                  ; render the paddle
  1308  8f4e 20c08c                     jsr renderPaddle
  1309                          
  1310  8f51 a543                       lda PADW
  1311  8f53 4a                         lsr
  1312  8f54 18                         clc
  1313  8f55 6542                       adc PADX
  1314  8f57 3a                         dec
  1315  8f58 3a                         dec
  1316  8f59 8538                       sta POSX        
  1317                          
  1318  8f5b 207a8d                     jsr renderBall
  1319                          
  1320  8f5e a22920e4f3d01c             +kbBranchIfPressed KB_SCANCODE_SPACEBAR, @startGame
  1321  8f65 48a98020adf268b0...        +nes1BranchIfPressed NES_A, @startGame
  1322  8f6e 48a94020adf268b0...        +nes1BranchIfPressed NES_B, @startGame
  1323  8f77 48a91020adf268b0...        +nes1BranchIfPressed NES_START, @startGame
  1324                          
  1325  8f80 60                         rts
  1326                          
  1327                          @startGame
  1328  8f81 20398e                     jsr hitPaddle
  1329                          
  1330  8f84 a9b58de37ca98f8d...        +hbc56SetVsyncCallback gameLoopRunning
  1331                          
  1332  8f8e 60                         rts
  1333                          
  1334                          
  1335                          ; -----------------------------------------------------------------------------
  1336                          ; Game over - Wait for user input (tied to VSYNC interrupt)
  1337                          ; -----------------------------------------------------------------------------
  1338                          gameLoopGameOver:
  1339  8f8f a22920e4f3d01c             +kbBranchIfPressed KB_SCANCODE_SPACEBAR,  @nextGame
  1340  8f96 48a98020adf268b0...        +nes1BranchIfPressed NES_A, @nextGame
  1341  8f9f 48a94020adf268b0...        +nes1BranchIfPressed NES_B, @nextGame
  1342  8fa8 48a91020adf268b0...        +nes1BranchIfPressed NES_START, @nextGame
  1343  8fb1 60                         rts
  1344                          
  1345                          @nextGame
  1346  8fb2 4cd588                     jmp resetGame
  1347                          
  1348                          ; -----------------------------------------------------------------------------
  1349                          ; Main game loop
  1350                          ; -----------------------------------------------------------------------------
  1351                          gameLoopRunning:
  1352  8fb5 a53a                       lda POSY
  1353  8fb7 c960                       cmp #(LEVEL_HEIGHT) * 8
  1354  8fb9 b01f                       bcs @noHit
  1355                          
  1356                                  ; convert ball position to tile x/y
  1357  8fbb a638                       ldx POSX
  1358  8fbd e8                         inx
  1359  8fbe e8                         inx
  1360  8fbf a43a                       ldy POSY
  1361  8fc1 c8                         iny
  1362  8fc2 c8                         iny
  1363                          
  1364                                  ; convert tile x/y to level index
  1365  8fc3 20cb8d                     jsr posToLevelCell
  1366  8fc6 c9ff                       cmp #NO_BRICK
  1367  8fc8 f010                       beq @noHit
  1368                          
  1369                                  ; locate brick type at level index
  1370  8fca aa                         tax
  1371  8fcb bd0004                     lda LEVEL_DATA, x
  1372                          
  1373                                  ; is it empty?
  1374  8fce f00a                       beq @noHit
  1375                          
  1376  8fd0 20168e                     jsr hitBrick
  1377                          
  1378                                  ; any blocks left?
  1379  8fd3 c64a                       dec BLOCKS_LEFT
  1380  8fd5 d003                       bne +
  1381  8fd7 4cc388                     jmp nextLevel
  1382                          +
  1383                          
  1384                          @noHit:
  1385                          
  1386                                  ; paddle input
  1387  8fda 20ea8e                     jsr handlePaddleInput
  1388                          
  1389                                  ; render the paddle
  1390  8fdd 20c08c                     jsr renderPaddle
  1391                          
  1392                                  ; move the ball
  1393  8fe0 2440101318a53965...        +addSubPixel POSX, SPDX, DIRX
  1394  9004 2441101318a53b65...        +addSubPixel POSY, SPDY, DIRY
  1395                          
  1396                                  ; check for ball bounces
  1397  9028 2440                       bit DIRX
  1398  902a 3014                       bmi @checkLeft
  1399                          
  1400                                  ; check right wall
  1401  902c a538                       lda POSX
  1402  902e c9ab                       cmp #GAME_AREA_RIGHT-5
  1403  9030 9020                       bcc @doneXCheck
  1404                          
  1405  9032 a54049ff1a8540             +negate DIRX
  1406  9039 a902                       lda #TONE_WALL
  1407  903b 207d87                     jsr playNote
  1408                          
  1409  903e 8012                       bra @doneXCheck
  1410                          
  1411                                  ; check left wall
  1412                          @checkLeft
  1413  9040 a538                       lda POSX
  1414  9042 c908                       cmp #GAME_AREA_LEFT
  1415  9044 b00c                       bcs @doneXCheck
  1416                          
  1417  9046 a54049ff1a8540             +negate DIRX
  1418  904d a902                       lda #TONE_WALL
  1419  904f 207d87                     jsr playNote
  1420                          
  1421                          @doneXCheck
  1422                          
  1423  9052 2441                       bit DIRY
  1424  9054 302c                       bmi @checkTop
  1425                          
  1426                                  ; check paddle
  1427  9056 a53a                       lda POSY
  1428  9058 c9bb                       cmp #PADDLE_SPRITE_Y
  1429  905a 9007                       bcc @checkPaddle
  1430                          
  1431                                  ; check out of bounds
  1432  905c c9f0                       cmp #240
  1433  905e 9034                       bcc @doneYCheck
  1434  9060 4cad88                     jmp loseBall
  1435                          
  1436                          @checkPaddle
  1437  9063 c9b6                       cmp #PADDLE_SPRITE_Y - 5
  1438  9065 902d                       bcc  @doneYCheck
  1439                          
  1440  9067 a542                       lda PADX
  1441  9069 c906                       cmp #BALL_SIZE
  1442  906b 9003                       bcc +
  1443  906d 38                         sec
  1444  906e e905                       sbc #BALL_SIZE - 1
  1445                          +
  1446  9070 c538                       cmp POSX
  1447  9072 b020                       bcs @doneYCheck
  1448  9074 a542                       lda PADX
  1449  9076 18                         clc
  1450  9077 6543                       adc PADW
  1451  9079 c538                       cmp POSX
  1452  907b 9017                       bcc @doneYCheck
  1453                          
  1454  907d 20398e                     jsr hitPaddle
  1455                          
  1456  9080 8012                       bra @doneYCheck
  1457                          
  1458                                  ; check top wall
  1459                          @checkTop
  1460  9082 a53a                       lda POSY
  1461  9084 c909                       cmp #9
  1462  9086 b00c                       bcs @doneYCheck
  1463                          
  1464  9088 a54149ff1a8541             +negate DIRY
  1465  908f a902                       lda #TONE_WALL
  1466  9091 207d87                     jsr playNote
  1467                          
  1468                          @doneYCheck
  1469                          
  1470  9094 207a8d                     jsr renderBall
  1471  9097 60                         rts
  1472                          
  1473                          
  1474                          
  1475                          ; BALL
  1476                          ; ----------
  1477                          
  1478                          ballPattern:
  1479  9098 70f8f8f870000000   !byte $70,$f8,$f8,$f8,$70,$00,$00,$00   ; base
  1480  90a0 0018285870000000   !byte $00,$18,$28,$58,$70,$00,$00,$00   ; shading
  1481                          
  1482                          
  1483                          ; PADDLE
  1484                          ; ----------
  1485                          
  1486                          paddlePal: ; paddle colors
  1487  90a8 00                 +byteTmsColorFgBg TMS_TRANSPARENT,    TMS_TRANSPARENT
  1488  90a9 00                 +byteTmsColorFgBg TMS_TRANSPARENT,    TMS_TRANSPARENT
  1489  90aa 00                 +byteTmsColorFgBg TMS_TRANSPARENT,    TMS_TRANSPARENT
  1490  90ab f0                 +byteTmsColorFgBg PADDLE_COLOR_HIGH,  TMS_TRANSPARENT
  1491  90ac 70                 +byteTmsColorFgBg PADDLE_COLOR_BASE,  TMS_TRANSPARENT
  1492  90ad 70                 +byteTmsColorFgBg PADDLE_COLOR_BASE,  TMS_TRANSPARENT
  1493  90ae 70                 +byteTmsColorFgBg PADDLE_COLOR_BASE,  TMS_TRANSPARENT
  1494  90af 50                 +byteTmsColorFgBg PADDLE_COLOR_SHADE, TMS_TRANSPARENT
  1495                          
  1496                          paddleLeftSpr:
  1497  90b0 c080800000000000   !byte $c0,$80,$80,$00,$00,$00,$00,$00
  1498                          paddleRightSpr:
  1499  90b8 4040c00000000000   !byte $40,$40,$c0,$00,$00,$00,$00,$00
  1500                          paddlePatt:
  1501  90c0 0000007fffffff7f   !byte $00,$00,$00,$7f,$ff,$ff,$ff,$7f   ; left
  1502  90c8 000000ffffffffff   !byte $00,$00,$00,$ff,$ff,$ff,$ff,$ff   ; centre
  1503  90d0 000000fefffffffe   !byte $00,$00,$00,$fe,$ff,$ff,$ff,$fe   ; right
  1504                          
  1505                          ; pattern indexes to paddle left/right tiles for a given pixel offset
  1506                          leftPatterns:
  1507  90d8 e0e1e2e3e4e5e6e7   !byte 224,225,226,227,228,229,230,231
  1508                          
  1509                          rightPatterns:
  1510  90e0 f0efeeedecebeae9...!byte 240,239,238,237,236,235,234,233,232
  1511                          
  1512                          
  1513                          ; BLOCKS
  1514                          ; ----------
  1515                          
  1516                          block:
  1517  90e9 7f3f7f7f7f7f7f00   !byte $7f,$3f,$7f,$7f,$7f,$7f,$7f,$00   ; left
  1518  90f1 ffffffffffffff00   !byte $ff,$ff,$ff,$ff,$ff,$ff,$ff,$00   ; centre
  1519  90f9 fcfefefefefefc00   !byte $fc,$fe,$fe,$fe,$fe,$fe,$fc,$00   ; right
  1520                          
  1521                          BLUE_HIGH       = TMS_CYAN    << 4   | TMS_TRANSPARENT
  1522                          BLUE_BASE       = TMS_LT_BLUE << 4   | TMS_TRANSPARENT
  1523                          BLUE_BASEH      = TMS_LT_BLUE << 4   | TMS_CYAN
  1524                          BLUE_SHADE      = TMS_DK_BLUE << 4   | TMS_TRANSPARENT
  1525                          
  1526                          GREEN_HIGH      = TMS_LT_GREEN  << 4 | TMS_TRANSPARENT
  1527                          GREEN_BASE      = TMS_MED_GREEN << 4 | TMS_TRANSPARENT
  1528                          GREEN_BASEH     = TMS_MED_GREEN << 4 | TMS_LT_GREEN
  1529                          GREEN_SHADE     = TMS_DK_GREEN  << 4 | TMS_TRANSPARENT
  1530                          
  1531                          YELLOW_HIGH     = TMS_WHITE     << 4 | TMS_TRANSPARENT
  1532                          YELLOW_BASE     = TMS_LT_YELLOW << 4 | TMS_TRANSPARENT
  1533                          YELLOW_BASEH    = TMS_LT_YELLOW << 4 | TMS_WHITE
  1534                          YELLOW_SHADE    = TMS_DK_YELLOW << 4 | TMS_TRANSPARENT
  1535                          
  1536                          RED_HIGH        = TMS_LT_RED  << 4 | TMS_TRANSPARENT
  1537                          RED_BASE        = TMS_MED_RED << 4 | TMS_TRANSPARENT
  1538                          RED_BASEH       = TMS_MED_RED << 4 | TMS_LT_RED
  1539                          RED_SHADE       = TMS_DK_RED  << 4 | TMS_TRANSPARENT
  1540                          
  1541                          ; block palettes. first tile and remaining tiles
  1542                          blueBlockPal:
  1543  9101 7057575757574000   !byte BLUE_HIGH,BLUE_BASEH,BLUE_BASEH,BLUE_BASEH,BLUE_BASEH,BLUE_BASEH,BLUE_SHADE,TMS_TRANSPARENT
  1544  9109 7050505050504000   !byte BLUE_HIGH,BLUE_BASE,BLUE_BASE,BLUE_BASE,BLUE_BASE,BLUE_BASE,BLUE_SHADE,TMS_TRANSPARENT
  1545                          
  1546                          greenBlockPal:
  1547  9111 302323232323c000   !byte GREEN_HIGH,GREEN_BASEH,GREEN_BASEH,GREEN_BASEH,GREEN_BASEH,GREEN_BASEH,GREEN_SHADE,TMS_TRANSPARENT
  1548  9119 302020202020c000   !byte GREEN_HIGH,GREEN_BASE,GREEN_BASE,GREEN_BASE,GREEN_BASE,GREEN_BASE,GREEN_SHADE,TMS_TRANSPARENT
  1549                          
  1550                          yellowBlockPal:
  1551  9121 f0bfbfbfbfbfa000   !byte YELLOW_HIGH,YELLOW_BASEH,YELLOW_BASEH,YELLOW_BASEH,YELLOW_BASEH,YELLOW_BASEH,YELLOW_SHADE,TMS_TRANSPARENT
  1552  9129 f0b0b0b0b0b0a000   !byte YELLOW_HIGH,YELLOW_BASE,YELLOW_BASE,YELLOW_BASE,YELLOW_BASE,YELLOW_BASE,YELLOW_SHADE,TMS_TRANSPARENT
  1553                          
  1554                          redBlockPal:
  1555  9131 9089898989896000   !byte RED_HIGH,RED_BASEH,RED_BASEH,RED_BASEH,RED_BASEH,RED_BASEH,RED_SHADE,TMS_TRANSPARENT
  1556  9139 9080808080806000   !byte RED_HIGH,RED_BASE,RED_BASE,RED_BASE,RED_BASE,RED_BASE,RED_SHADE,TMS_TRANSPARENT
  1557                          
  1558                          tileData:
  1559  9141 000c0f1215         !byte 0,12,15,18,21
  1560                          
  1561                          ; BORDER
  1562                          ; ----------
  1563                          
  1564                          borderTL:
  1565  9146 3f7fffffffffffff   !byte $3f,$7f,$ff,$ff,$ff,$ff,$ff,$ff
  1566                          borderT:
  1567  914e ffffffffffffff00   !byte $ff,$ff,$ff,$ff,$ff,$ff,$ff,$00
  1568                          borderTR:
  1569  9156 f8fcfefefefefefe   !byte $f8,$fc,$fe,$fe,$fe,$fe,$fe,$fe
  1570                          borderL:
  1571  915e fefefefefefefefe   !byte $fe,$fe,$fe,$fe,$fe,$fe,$fe,$fe
  1572                          borderR:
  1573  9166 fefefefefefefefe   !byte $fe,$fe,$fe,$fe,$fe,$fe,$fe,$fe
  1574                          borderLB:
  1575  916e fefefefefe7c7c38   !byte $fe,$fe,$fe,$fe,$fe,$7c,$7c,$38
  1576                          borderRB:
  1577  9176 fefefefefe7c7c38   !byte $fe,$fe,$fe,$fe,$fe,$7c,$7c,$38
  1578                          borderBL:
  1579  917e ffffffffffff7f3f   !byte $ff,$ff,$ff,$ff,$ff,$ff,$7f,$3f
  1580                          borderBR:
  1581  9186 fefefefefefefcf8   !byte $fe,$fe,$fe,$fe,$fe,$fe,$fc,$f8
  1582                          borderB:
  1583  918e 00ffffffffffffff   !byte $00,$ff,$ff,$ff,$ff,$ff,$ff,$ff
  1584                          
  1585                          
  1586                          borderPal:
  1587  9196 00                 +byteTmsColorFgBg TMS_TRANSPARENT, TMS_TRANSPARENT
  1588  9197 f0                 +byteTmsColorFgBg TMS_WHITE,   TMS_TRANSPARENT
  1589  9198 d0                 +byteTmsColorFgBg TMS_MAGENTA, TMS_TRANSPARENT
  1590  9199 d0                 +byteTmsColorFgBg TMS_MAGENTA, TMS_TRANSPARENT
  1591  919a d0                 +byteTmsColorFgBg TMS_MAGENTA, TMS_TRANSPARENT
  1592  919b d0                 +byteTmsColorFgBg TMS_MAGENTA, TMS_TRANSPARENT
  1593  919c d0                 +byteTmsColorFgBg TMS_MAGENTA, TMS_TRANSPARENT
  1594  919d d0                 +byteTmsColorFgBg TMS_MAGENTA, TMS_TRANSPARENT
  1595  919e d0                 +byteTmsColorFgBg TMS_MAGENTA, TMS_TRANSPARENT
  1596  919f d0                 +byteTmsColorFgBg TMS_MAGENTA, TMS_TRANSPARENT
  1597                          
  1598                          
  1599                          ; TITLE
  1600                          ; ----------
  1601                          
  1602                          titlePatt:
  1603  91a0 001e3f7f0301037f...!byte $00,$1e,$3f,$7f,$03,$01,$03,$7f,$00,$0f,$1f,$bf,$81,$80,$81,$bf,$00,$1f,$9f,$df,$d8,$d8,$d8,$df,$00,$e1,$c1,$83,$03,$07,$06,$e6,$00,$86,$86,$c6,$c6,$e6,$66,$67,$00,$18,$39,$33,$63,$67,$c6,$c6,$00,$c3,$e3,$f3,$33,$3b,$1b,$1b,$00,$0c,$0c,$0d,$0c,$0c,$0c,$0c,$00,$7f,$fe,$fc,$30,$30,$30,$30
  1604  91e8 7f7f6361637f7f7f...!byte $7f,$7f,$63,$61,$63,$7f,$7f,$7f,$3f,$bf,$be,$b7,$b3,$b1,$b0,$30,$df,$9f,$18,$18,$98,$df,$df,$df,$c6,$86,$06,$0e,$0c,$ec,$cd,$8d,$67,$67,$66,$76,$36,$36,$f6,$f6,$86,$c6,$c6,$67,$63,$33,$39,$18,$1b,$1b,$1b,$3b,$31,$f1,$e0,$c0,$0c,$0c,$0c,$9c,$98,$f8,$f0,$60,$30,$30,$30,$30,$30,$30,$30,$30
  1605                          
  1606                          titlePal:
  1607  9230 00                 +byteTmsColorFgBg TMS_TRANSPARENT, TMS_TRANSPARENT
  1608  9231 f0                 +byteTmsColorFgBg TMS_WHITE, TMS_TRANSPARENT
  1609  9232 f0                 +byteTmsColorFgBg TMS_WHITE, TMS_TRANSPARENT
  1610  9233 f0                 +byteTmsColorFgBg TMS_WHITE, TMS_TRANSPARENT
  1611  9234 e0                 +byteTmsColorFgBg TMS_GREY, TMS_TRANSPARENT
  1612  9235 e0                 +byteTmsColorFgBg TMS_GREY, TMS_TRANSPARENT
  1613  9236 e0                 +byteTmsColorFgBg TMS_GREY, TMS_TRANSPARENT
  1614  9237 80                 +byteTmsColorFgBg TMS_MED_RED, TMS_TRANSPARENT
  1615  9238 b0                 +byteTmsColorFgBg TMS_LT_YELLOW, TMS_TRANSPARENT
  1616  9239 20                 +byteTmsColorFgBg TMS_MED_GREEN, TMS_TRANSPARENT
  1617  923a 50                 +byteTmsColorFgBg TMS_LT_BLUE, TMS_TRANSPARENT
  1618  923b 50                 +byteTmsColorFgBg TMS_LT_BLUE, TMS_TRANSPARENT
  1619  923c 50                 +byteTmsColorFgBg TMS_LT_BLUE, TMS_TRANSPARENT
  1620  923d 50                 +byteTmsColorFgBg TMS_LT_BLUE, TMS_TRANSPARENT
  1621  923e 50                 +byteTmsColorFgBg TMS_LT_BLUE, TMS_TRANSPARENT
  1622  923f 40                 +byteTmsColorFgBg TMS_DK_BLUE, TMS_TRANSPARENT
  1623                          
  1624                          ; LABELS
  1625                          ; ----------
  1626                          
  1627                          levelPatt:
  1628  9240 0c0c0c0c0c0c0f0f...!byte $0c,$0c,$0c,$0c,$0c,$0c,$0f,$0f,$07,$07,$06,$07,$07,$06,$f7,$e7,$fb,$f3,$01,$f9,$f0,$00,$f8,$f0,$01,$83,$83,$c7,$c6,$6c,$7c,$38,$bf,$bf,$30,$3f,$3f,$30,$3f,$3f,$d8,$98,$18,$d8,$98,$18,$df,$9f,$00,$00,$00,$00,$00,$00,$e0,$c0
  1629                          scorePatt:
  1630  9278 1f3f303f3f001f3f...!byte $1f,$3f,$30,$3f,$3f,$00,$1f,$3f,$e3,$c7,$07,$ce,$ee,$67,$e7,$c3,$fc,$f8,$01,$01,$01,$01,$fc,$f8,$7e,$ff,$c3,$81,$81,$c3,$ff,$7e,$0f,$1f,$80,$80,$9f,$9f,$18,$18,$e3,$f3,$3b,$3b,$f3,$e3,$73,$3b,$fc,$f8,$00,$fc,$f8,$00,$fc,$f8
  1631                          ballsPatt:
  1632  92b0 0f1f001f1f181f1f...!byte $0f,$1f,$00,$1f,$1f,$18,$1f,$1f,$e0,$f0,$30,$f1,$f3,$33,$f6,$e6,$60,$f0,$f0,$98,$9c,$0c,$7e,$fe,$c0,$c0,$c0,$c0,$c0,$c0,$ff,$fe,$60,$60,$60,$60,$60,$60,$7f,$7f,$1f,$3f,$30,$3f,$3f,$00,$9f,$3f,$e0,$c0,$00,$c0,$e0,$60,$e0,$c0
  1633                          
  1634                          labelPal:
  1635  92e8 40                 +byteTmsColorFgBg TMS_DK_BLUE, TMS_TRANSPARENT
  1636  92e9 50                 +byteTmsColorFgBg TMS_LT_BLUE, TMS_TRANSPARENT
  1637  92ea 70                 +byteTmsColorFgBg TMS_CYAN, TMS_TRANSPARENT
  1638  92eb f0                 +byteTmsColorFgBg TMS_WHITE, TMS_TRANSPARENT
  1639  92ec f0                 +byteTmsColorFgBg TMS_WHITE, TMS_TRANSPARENT
  1640  92ed 70                 +byteTmsColorFgBg TMS_CYAN, TMS_TRANSPARENT
  1641  92ee 50                 +byteTmsColorFgBg TMS_LT_BLUE, TMS_TRANSPARENT
  1642  92ef 40                 +byteTmsColorFgBg TMS_DK_BLUE, TMS_TRANSPARENT
  1643                          
  1644                          ; FONT
  1645                          ; ----------
  1646                          
  1647                          digitsPatt:
  1648  92f0 7ccedef6e6c67c00   !byte $7C,$CE,$DE,$F6,$E6,$C6,$7C,$00 ; 0
  1649  92f8 1838181818187e00   !byte $18,$38,$18,$18,$18,$18,$7E,$00 ; 1
  1650  9300 7cc6067cc0c0fe00   !byte $7C,$C6,$06,$7C,$C0,$C0,$FE,$00 ; 2
  1651  9308 fc06063c0606fc00   !byte $FC,$06,$06,$3C,$06,$06,$FC,$00 ; 3
  1652  9310 0cccccccfe0c0c00   !byte $0C,$CC,$CC,$CC,$FE,$0C,$0C,$00 ; 4
  1653  9318 fec0fc0606c67c00   !byte $FE,$C0,$FC,$06,$06,$C6,$7C,$00 ; 5
  1654  9320 7cc0c0fcc6c67c00   !byte $7C,$C0,$C0,$FC,$C6,$C6,$7C,$00 ; 6
  1655  9328 fe06060c18303000   !byte $FE,$06,$06,$0C,$18,$30,$30,$00 ; 7
  1656  9330 7cc6c67cc6c67c00   !byte $7C,$C6,$C6,$7C,$C6,$C6,$7C,$00 ; 8
  1657  9338 7cc6c67e06067c00   !byte $7C,$C6,$C6,$7E,$06,$06,$7C,$00 ; 9
  1658                          
  1659                          digitsPal:
  1660  9340 c0                 +byteTmsColorFgBg TMS_DK_GREEN, TMS_TRANSPARENT
  1661  9341 20                 +byteTmsColorFgBg TMS_MED_GREEN, TMS_TRANSPARENT
  1662  9342 30                 +byteTmsColorFgBg TMS_LT_GREEN, TMS_TRANSPARENT
  1663  9343 f0                 +byteTmsColorFgBg TMS_WHITE, TMS_TRANSPARENT
  1664  9344 30                 +byteTmsColorFgBg TMS_LT_GREEN, TMS_TRANSPARENT
  1665  9345 20                 +byteTmsColorFgBg TMS_MED_GREEN, TMS_TRANSPARENT
  1666  9346 c0                 +byteTmsColorFgBg TMS_DK_GREEN, TMS_TRANSPARENT
  1667  9347 c0                 +byteTmsColorFgBg TMS_DK_GREEN, TMS_TRANSPARENT
  1668                          
  1669                          
  1670                          ; AUDIO DATA
  1671                          ; ----------
  1672                          
  1673                          notesL:
  1674  9348 00                 !byte 0
  1675  9349 a8                 +ayToneByteL NOTE_FREQ_FS4
  1676  934a 9f                 +ayToneByteL NOTE_FREQ_G4
  1677  934b 96                 +ayToneByteL NOTE_FREQ_GS4
  1678  934c 8e                 +ayToneByteL NOTE_FREQ_A4
  1679  934d 86                 +ayToneByteL NOTE_FREQ_AS4
  1680  934e 7e                 +ayToneByteL NOTE_FREQ_B4
  1681  934f 77                 +ayToneByteL NOTE_FREQ_C5
  1682  9350 70                 +ayToneByteL NOTE_FREQ_CS5
  1683  9351 6a                 +ayToneByteL NOTE_FREQ_D5
  1684  9352 64                 +ayToneByteL NOTE_FREQ_DS5
  1685  9353 5e                 +ayToneByteL NOTE_FREQ_E5
  1686  9354 59                 +ayToneByteL NOTE_FREQ_F5
  1687  9355 54                 +ayToneByteL NOTE_FREQ_FS5
  1688  9356 4f                 +ayToneByteL NOTE_FREQ_G5
  1689  9357 4b                 +ayToneByteL NOTE_FREQ_GS5
  1690  9358 47                 +ayToneByteL NOTE_FREQ_A5
  1691  9359 43                 +ayToneByteL NOTE_FREQ_AS5
  1692  935a 3f                 +ayToneByteL NOTE_FREQ_B5
  1693  935b 3b                 +ayToneByteL NOTE_FREQ_C6
  1694  935c 38                 +ayToneByteL NOTE_FREQ_CS6
  1695  935d 35                 +ayToneByteL NOTE_FREQ_D6
  1696  935e 32                 +ayToneByteL NOTE_FREQ_DS6
  1697  935f 2f                 +ayToneByteL NOTE_FREQ_E6
  1698  9360 2c                 +ayToneByteL NOTE_FREQ_F6
  1699  9361 2a                 +ayToneByteL NOTE_FREQ_FS6
  1700  9362 27                 +ayToneByteL NOTE_FREQ_G6
  1701  9363 25                 +ayToneByteL NOTE_FREQ_GS6
  1702  9364 23                 +ayToneByteL NOTE_FREQ_A6
  1703  9365 21                 +ayToneByteL NOTE_FREQ_AS6
  1704                          
  1705                          notesH:
  1706  9366 00                 !byte 0
  1707  9367 00                 +ayToneByteH NOTE_FREQ_FS4
  1708  9368 00                 +ayToneByteH NOTE_FREQ_G4
  1709  9369 00                 +ayToneByteH NOTE_FREQ_GS4
  1710  936a 00                 +ayToneByteH NOTE_FREQ_A4
  1711  936b 00                 +ayToneByteH NOTE_FREQ_AS4
  1712  936c 00                 +ayToneByteH NOTE_FREQ_B4
  1713  936d 00                 +ayToneByteH NOTE_FREQ_C5
  1714  936e 00                 +ayToneByteH NOTE_FREQ_CS5
  1715  936f 00                 +ayToneByteH NOTE_FREQ_D5
  1716  9370 00                 +ayToneByteH NOTE_FREQ_DS5
  1717  9371 00                 +ayToneByteH NOTE_FREQ_E5
  1718  9372 00                 +ayToneByteH NOTE_FREQ_F5 
  1719  9373 00                 +ayToneByteH NOTE_FREQ_FS5
  1720  9374 00                 +ayToneByteH NOTE_FREQ_G5
  1721  9375 00                 +ayToneByteH NOTE_FREQ_GS5
  1722  9376 00                 +ayToneByteH NOTE_FREQ_A5
  1723  9377 00                 +ayToneByteH NOTE_FREQ_AS5
  1724  9378 00                 +ayToneByteH NOTE_FREQ_B5
  1725  9379 00                 +ayToneByteH NOTE_FREQ_C6
  1726  937a 00                 +ayToneByteH NOTE_FREQ_CS6
  1727  937b 00                 +ayToneByteH NOTE_FREQ_D6
  1728  937c 00                 +ayToneByteH NOTE_FREQ_DS6
  1729  937d 00                 +ayToneByteH NOTE_FREQ_E6
  1730  937e 00                 +ayToneByteH NOTE_FREQ_F6
  1731  937f 00                 +ayToneByteH NOTE_FREQ_FS6
  1732  9380 00                 +ayToneByteH NOTE_FREQ_G6
  1733  9381 00                 +ayToneByteH NOTE_FREQ_GS6
  1734  9382 00                 +ayToneByteH NOTE_FREQ_A6
  1735  9383 00                 +ayToneByteH NOTE_FREQ_AS6
  1736                          
  1737                          ; LEVEL DATA
  1738                          ; ----------
  1739                          
  1740                          levelMap:
  1741  9384 8c93e4933c949494   !word level1, level2, level3, level4
  1742                          
  1743                          
  1744                          level1: 
  1745  938c 0000000000000000   !byte 0,0,0,0,0,0,0,0
  1746  9394 0000000000000000   !byte 0,0,0,0,0,0,0,0
  1747  939c 0000000000000000   !byte 0,0,0,0,0,0,0,0
  1748  93a4 0101010101010100   !byte 1,1,1,1,1,1,1,0
  1749  93ac 0202020202020200   !byte 2,2,2,2,2,2,2,0
  1750  93b4 0000000000000000   !byte 0,0,0,0,0,0,0,0
  1751  93bc 0000000000000000   !byte 0,0,0,0,0,0,0,0
  1752  93c4 0000000000000000   !byte 0,0,0,0,0,0,0,0
  1753  93cc 0000000000000000   !byte 0,0,0,0,0,0,0,0
  1754  93d4 0303030303030300   !byte 3,3,3,3,3,3,3,0
  1755  93dc 0404040404040400   !byte 4,4,4,4,4,4,4,0
  1756                          
  1757                          
  1758                          level2: 
  1759  93e4 0000000000000000   !byte 0,0,0,0,0,0,0,0
  1760  93ec 0000000000000000   !byte 0,0,0,0,0,0,0,0
  1761  93f4 0000000000000000   !byte 0,0,0,0,0,0,0,0
  1762  93fc 0101010101010100   !byte 1,1,1,1,1,1,1,0
  1763  9404 0101010101010100   !byte 1,1,1,1,1,1,1,0
  1764  940c 0202020202020200   !byte 2,2,2,2,2,2,2,0
  1765  9414 0202020202020200   !byte 2,2,2,2,2,2,2,0
  1766  941c 0303030303030300   !byte 3,3,3,3,3,3,3,0
  1767  9424 0303030303030300   !byte 3,3,3,3,3,3,3,0
  1768  942c 0404040404040400   !byte 4,4,4,4,4,4,4,0
  1769  9434 0404040404040400   !byte 4,4,4,4,4,4,4,0
  1770                          
  1771                          
  1772                          level3: 
  1773  943c 0000000000000000   !byte 0,0,0,0,0,0,0,0
  1774  9444 0000000000000000   !byte 0,0,0,0,0,0,0,0
  1775  944c 0000000000000000   !byte 0,0,0,0,0,0,0,0
  1776  9454 0101010101010100   !byte 1,1,1,1,1,1,1,0
  1777  945c 0000000000000000   !byte 0,0,0,0,0,0,0,0
  1778  9464 0202020202020200   !byte 2,2,2,2,2,2,2,0
  1779  946c 0000000000000000   !byte 0,0,0,0,0,0,0,0
  1780  9474 0303030303030300   !byte 3,3,3,3,3,3,3,0
  1781  947c 0000000000000000   !byte 0,0,0,0,0,0,0,0
  1782  9484 0404040404040400   !byte 4,4,4,4,4,4,4,0
  1783  948c 0000000000000000   !byte 0,0,0,0,0,0,0,0
  1784                          
  1785                          
  1786                          level4: 
  1787  9494 0000000000000000   !byte 0,0,0,0,0,0,0,0
  1788  949c 0000000000000000   !byte 0,0,0,0,0,0,0,0
  1789  94a4 0000000100000000   !byte 0,0,0,1,0,0,0,0
  1790  94ac 0000010201000000   !byte 0,0,1,2,1,0,0,0
  1791  94b4 0001020002010000   !byte 0,1,2,0,2,1,0,0
  1792  94bc 0102000000020100   !byte 1,2,0,0,0,2,1,0
  1793  94c4 0200000300000200   !byte 2,0,0,3,0,0,2,0
  1794  94cc 0000030403000000   !byte 0,0,3,4,3,0,0,0
  1795  94d4 0003040004030000   !byte 0,3,4,0,4,3,0,0
  1796  94dc 0304000000040300   !byte 3,4,0,0,0,4,3,0
  1797  94e4 0400000000000400   !byte 4,0,0,0,0,0,4,0
  1798  94ec 0000000000000000   !byte 0,0,0,0,0,0,0,0

; ******** Source: kernel.asm
     1                          ; 6502 - HBC-56 Kernel
     2                          ;
     3                          ; Copyright (c) 2021 Troy Schrapel
     4                          ;
     5                          ; This code is licensed under the MIT license
     6                          ;
     7                          ; https://github.com/visrealm/hbc-56
     8                          ;
     9                          ;
    10                          
    11                          HBC56_INT_VECTOR = $7e00
    12                          HBC56_NMI_VECTOR = $7e04
    13                          HBC56_RST_VECTOR = kernelMain
    14                          
    15                          HBC56_KERNEL_START = $e000
    16                          HBC56_META_VECTOR  = HBC56_KERNEL_START-4
    17                          
    18                          RTI_OPCODE = $40
    19                          JMP_OPCODE = $4c
    20                          
    21                          ; -------------------------
    22                          ; I/O devices
    23                          ; -------------------------
    24                          LCD_IO_PORT             = $02
    25                          TMS9918_IO_PORT         = $10
    26                          UART_IO_PORT            = $20
    27                          AY_IO_PORT              = $40
    28                          KB_IO_PORT              = $80
    29                          NES_IO_PORT             = $82
    30                          INT_IO_PORT             = $df
    31                          VIA_IO_PORT             = $f0
    32                          ROM_BANK_REG            = $08
    33                          
    34                          ; -------------------------
    35                          ; Kernel Zero Page
    36                          ; -------------------------
    37                          HBC56_KERNEL_ZP_START   = $18
    38                          
    39                          TILEMAP_ZP_START        = HBC56_KERNEL_ZP_START
    40                          TILEMAP_ZP_END          = TILEMAP_ZP_START + 6
    41                          
    42                          BITMAP_ZP_START         = TILEMAP_ZP_END
    43                          BITMAP_ZP_END           = BITMAP_ZP_START + 6
    44                          
    45                          !ifdef HBC56_DISABLE_TMS9918 { .TMS_ZP_SIZE = 0 } else { .TMS_ZP_SIZE = 4 }
    46                          TMS9918_ZP_START        = BITMAP_ZP_END
    47                          TMS9918_ZP_END          = TMS9918_ZP_START + .TMS_ZP_SIZE
    48                          
    49                          !ifdef HBC56_DISABLE_LCD { .LCD_ZP_SIZE = 0 } else { .LCD_ZP_SIZE = 2 }
    50                          LCD_ZP_START            = TMS9918_ZP_END
    51                          LCD_ZP_END              = LCD_ZP_START + .LCD_ZP_SIZE
    52                          
    53                          !ifdef HBC56_DISABLE_UART { .UART_ZP_SIZE = 0 } else { .UART_ZP_SIZE = 4 }
    54                          UART_ZP_START            = LCD_ZP_END
    55                          UART_ZP_END              = UART_ZP_START + .UART_ZP_SIZE
    56                          
    57                          MEMORY_ZP_START         = UART_ZP_END
    58                          MEMORY_ZP_END           = MEMORY_ZP_START + 6
    59                          
    60                          STR_ADDR                = MEMORY_ZP_END
    61                          STR_ADDR_L              = MEMORY_ZP_END
    62                          STR_ADDR_H              = MEMORY_ZP_END + 1
    63                          
    64                          DELAY_L                 = STR_ADDR_H + 1
    65                          DELAY_H                 = DELAY_L + 1
    66                          
    67                          HBC56_KERNEL_ZP_END     = DELAY_H + 1
    68                          HBC56_USER_ZP_START     = HBC56_KERNEL_ZP_END
    69                          
    70                          ;!warn "Total ZP used: ",STR_ADDR_H-HBC56_KERNEL_ZP_START
    71                          
    72                          
    73                          !ifndef HAVE_TMS9918 { HBC56_DISABLE_SFXMAN=1 }
    74                          
    75                          ; -------------------------
    76                          ; Kernel RAM
    77                          ; -------------------------
    78                          HBC56_KERNEL_RAM_START  = $7a00
    79                          
    80                          TILEMAP_RAM_START       = HBC56_KERNEL_RAM_START
    81                          TILEMAP_RAM_END         = TILEMAP_RAM_START + $116
    82                          
    83                          BITMAP_RAM_START        = TILEMAP_RAM_END
    84                          BITMAP_RAM_END          = BITMAP_RAM_START + 16
    85                          
    86                          !ifdef HBC56_DISABLE_TMS9918 { .TMS_RAM_SIZE = 0 } else { .TMS_RAM_SIZE = 50 }
    87                          TMS9918_RAM_START       = BITMAP_RAM_END
    88                          TMS9918_RAM_END         = TMS9918_RAM_START + .TMS_RAM_SIZE
    89                          
    90                          !ifdef HBC56_DISABLE_LCD { .LCD_RAM_SIZE = 0 } else { .LCD_RAM_SIZE = 42 }
    91                          LCD_RAM_START           = TMS9918_RAM_END
    92                          LCD_RAM_END             = LCD_RAM_START + .LCD_RAM_SIZE
    93                          
    94                          !ifdef HBC56_DISABLE_UART { .UART_RAM_SIZE = 0 } else { .UART_RAM_SIZE = 256 }
    95                          UART_RAM_START            = LCD_RAM_END
    96                          UART_RAM_END              = UART_RAM_START + .UART_RAM_SIZE
    97                          
    98                          VIA_RAM_START             = UART_RAM_END
    99                          VIA_RAM_END               = VIA_RAM_START + 1
   100                          
   101                          !ifdef HBC56_DISABLE_SFXMAN { .SFXMAN_RAM_SIZE = 0 } else { .SFXMAN_RAM_SIZE = 18 }
   102                          SFXMAN_RAM_START        = VIA_RAM_END
   103                          SFXMAN_RAM_END          = SFXMAN_RAM_START + .SFXMAN_RAM_SIZE
   104                          
   105                          BCD_RAM_START           = SFXMAN_RAM_END
   106                          BCD_RAM_END             = BCD_RAM_START + 3
   107                          
   108                          KB_RAM_START            = BCD_RAM_END
   109                          KB_RAM_END              = KB_RAM_START + 64
   110                          
   111                          NES_RAM_START            = KB_RAM_END
   112                          NES_RAM_END              = NES_RAM_START + 3
   113                          
   114                          LAST_MODULE_RAM_END     = NES_RAM_END
   115                          
   116                          HBC56_TICKS             = LAST_MODULE_RAM_END
   117                          HBC56_SECONDS_L         = LAST_MODULE_RAM_END + 1
   118                          HBC56_SECONDS_H         = LAST_MODULE_RAM_END + 2
   119                          HBC56_TMP               = LAST_MODULE_RAM_END + 3
   120                          
   121                          HBC56_CONSOLE_FLAGS     = LAST_MODULE_RAM_END + 4
   122                          HBC56_CONSOLE_FLAG_CURSOR = $80
   123                          HBC56_CONSOLE_FLAG_NES    = $40
   124                          HBC56_CONSOLE_FLAG_LCD    = $20
   125                          HBC56_CONSOLE_FLAG_NOWAIT = $10
   126                          
   127                          HBC56_TMP_X             = LAST_MODULE_RAM_END + 5
   128                          HBC56_TMP_Y             = LAST_MODULE_RAM_END + 6
   129                          
   130                          HBC56_META_TITLE_MAX_LEN = 16
   131                          HBC56_META_TITLE        = LAST_MODULE_RAM_END + 7
   132                          HBC56_META_TITLE_END    = HBC56_META_TITLE + HBC56_META_TITLE_MAX_LEN + 1
   133                          HBC56_META_TITLE_LEN    = HBC56_META_TITLE_END + 1
   134                          
   135                          ; callback function on vsync
   136                          HBC56_VSYNC_CALLBACK = HBC56_META_TITLE_LEN + 1
   137                          HBC56_VIA_CALLBACK   = HBC56_VSYNC_CALLBACK + 2
   138                          
   139                          
   140                          HBC56_KERNEL_RAM_END    = HBC56_VIA_CALLBACK + 2
   141                          HBC56_KERNEL_RAM_SIZE   = HBC56_KERNEL_RAM_END - HBC56_KERNEL_RAM_START
   142                          ;!warn "Total RAM used: ",HBC56_KERNEL_RAM_SIZE
   143                          

; ******** Source: ../lib\hbc56.asm
     1                          ; 6502 - HBC-56
     2                          ;
     3                          ; Copyright (c) 2021 Troy Schrapel
     4                          ;
     5                          ; This code is licensed under the MIT license
     6                          ;
     7                          ; https://github.com/visrealm/hbc-56
     8                          ;
     9                          ;
    10                          
    11                          !cpu w65c02
    12                          !initmem $FF
    13                          cputype = $65c02
    14                          

; ******** Source: ../lib\hbc56.inc
     1                          ; 6502 - HBC-56
     2                          ;
     3                          ; Copyright (c) 2021 Troy Schrapel
     4                          ;
     5                          ; This code is licensed under the MIT license
     6                          ;
     7                          ; https://github.com/visrealm/hbc-56
     8                          ;
     9                          ;
    10                          
    11                          ; Base address of the 256 IO port memory range
    12                          IO_PORT_BASE_ADDRESS	= $7f00
    13                          
    14                          
    15                          ; -------------------------
    16                          ; ASCII constants
    17                          ; -------------------------
    18                          ASCII_RETURN    = $0A
    19                          ASCII_CR        = $0D
    20                          ASCII_BACKSPACE = $08
    21                          ASCII_BELL      = $07

; ******** Source: ../lib\hbc56.asm
    16                          
    17                          DEFAULT_HBC56_NMI_VECTOR = $FFE0
    18                          DEFAULT_HBC56_RST_VECTOR = $8000
    19                          DEFAULT_HBC56_INT_VECTOR = $FFE0
    20                          
    21                          !macro hbc56Title .title {
    22                          HBC56_TITLE_TEXT:
    23                                  !text .title
    24                          HBC56_TITLE_TEXT_LEN = * - HBC56_TITLE_TEXT
    25                                  !byte 0 ; nul terminator for game name
    26                          }
    27                          
    28                          *=DEFAULT_HBC56_INT_VECTOR
    29  ffe0 40                         rti
    30                          
    31                          hbc56Delay:
    32  ffe1 a000               	ldy #0
    33                          hbc56CustomDelay:
    34  ffe3 a200               	ldx #0
    35                          -
    36  ffe5 ca                 	dex
    37  ffe6 d0fd               	bne -
    38  ffe8 a200               	ldx #0
    39  ffea 88                 	dey
    40  ffeb d0f8               	bne -
    41  ffed 60                 	rts
    42                          
    43                          *=$FFFA
    44  fffa 047e               !ifdef HBC56_NMI_VECTOR { !word HBC56_NMI_VECTOR } else { !word DEFAULT_HBC56_NMI_VECTOR }
    45  fffc abfc               !ifdef HBC56_RST_VECTOR { !word HBC56_RST_VECTOR } else { !word DEFAULT_HBC56_RST_VECTOR }
    46  fffe 007e               !ifdef HBC56_INT_VECTOR { !word HBC56_INT_VECTOR } else { !word DEFAULT_HBC56_INT_VECTOR }
    47                          
    48                          
    49                          *=DEFAULT_HBC56_RST_VECTOR

; ******** Source: kernel.asm
   144                          
   145                          *=HBC56_KERNEL_START
   146                          

; ******** Source: ../lib\ut\ascii.asm
     1                          ; 6502 - ASCII subroutines
     2                          ;
     3                          ; Copyright (c) 2022 Troy Schrapel
     4                          ;
     5                          ; This code is licensed under the MIT license
     6                          ;
     7                          ; https://github.com/visrealm/hbc-56
     8                          ;
     9                          ;
    10                          
    11                          ; -----------------------------------------------------------------------------
    12                          ; isLower: Is the ASCII character a lower-case letter (a-z)
    13                          ; -----------------------------------------------------------------------------
    14                          ; Inputs:
    15                          ;   A: ASCII character
    16                          ; Outputs:
    17                          ;   Carry set if lower case, carry clear if not lower case
    18                          ; -----------------------------------------------------------------------------
    19                          isLower:
    20  e000 c961                       cmp #'a'
    21  e002 9005                       bcc @notLower   ; less than 'a'?
    22  e004 c97b                       cmp #'z' + 1
    23  e006 9002                       bcc @isLower    ; less than or equal 'z'?
    24  e008 18                         clc
    25                          @notLower:
    26  e009 60                         rts
    27                          
    28                          @isLower
    29  e00a 38                         sec
    30  e00b 60                         rts
    31                          
    32                          
    33                          ; -----------------------------------------------------------------------------
    34                          ; isUpper: Is the ASCII character a upper-case letter (A-Z)
    35                          ; -----------------------------------------------------------------------------
    36                          ; Inputs:
    37                          ;   A: ASCII character
    38                          ; Outputs:
    39                          ;   Carry set if upper case, carry clear if not upper case
    40                          ; -----------------------------------------------------------------------------
    41                          isUpper:
    42  e00c c941                       cmp #'A'
    43  e00e 9005                       bcc @notUpper   ; less than 'A'?
    44  e010 c95b                       cmp #'Z' + 1
    45  e012 9002                       bcc @isUpper    ; less than or equal 'Z'?
    46  e014 18                         clc
    47                          @notUpper:
    48  e015 60                         rts
    49                          
    50                          @isUpper
    51  e016 38                         sec
    52  e017 60                         rts
    53                          
    54                          ; -----------------------------------------------------------------------------
    55                          ; isAlpha: Is the ASCII character alphanumeric (A-Z, a-z)
    56                          ; -----------------------------------------------------------------------------
    57                          ; Inputs:
    58                          ;   A: ASCII character
    59                          ; Outputs:
    60                          ;   Carry set if alpha, carry clear if not alpha
    61                          ; -----------------------------------------------------------------------------
    62                          isAlpha:
    63  e018 2000e0                     jsr isLower
    64  e01b 90ef                       bcc isUpper
    65  e01d 60                         rts
    66                          
    67                          
    68                          ; -----------------------------------------------------------------------------
    69                          ; isDigit: Is the ASCII character a decimal digit (0-9)
    70                          ; -----------------------------------------------------------------------------
    71                          ; Inputs:
    72                          ;   A: ASCII character
    73                          ; Outputs:
    74                          ;   Carry set if digit, carry clear if not digit
    75                          ; -----------------------------------------------------------------------------
    76                          isDigit:
    77  e01e c930                       cmp #'0'
    78  e020 9005                       bcc @notDigit    ; less than '0'?
    79  e022 c93a                       cmp #'9' + 1
    80  e024 9002                       bcc @isDigit     ; less than or equal '9'?
    81  e026 18                         clc
    82                          
    83                          @notDigit:
    84  e027 60                         rts
    85                          
    86                          @isDigit
    87  e028 38                         sec
    88  e029 60                         rts
    89                          
    90                          
    91                          ; -----------------------------------------------------------------------------
    92                          ; isAlNum: Is the ASCII character alphanumeric (A-Z, a-z, 0-9)
    93                          ; -----------------------------------------------------------------------------
    94                          ; Inputs:
    95                          ;   A: ASCII character
    96                          ; Outputs:
    97                          ;   Carry set if alphanumeric, carry clear if not alphanumeric
    98                          ; -----------------------------------------------------------------------------
    99                          isAlNum:
   100  e02a 2018e0                     jsr isAlpha
   101  e02d 90ef                       bcc isDigit
   102  e02f 60                         rts
   103                          
   104                          ; -----------------------------------------------------------------------------
   105                          ; isDigitX: Is the ASCII character a hex digit (A-F, a-f, 0-9)
   106                          ; -----------------------------------------------------------------------------
   107                          ; Inputs:
   108                          ;   A: ASCII character
   109                          ; Outputs:
   110                          ;   Carry set if hexadecimal, carry clear if not hexadecimal
   111                          ; -----------------------------------------------------------------------------
   112                          isDigitX:
   113  e030 201ee0                     jsr isDigit
   114  e033 b013                       bcs @endIsDigitX
   115  e035 c941                       cmp #'A'
   116  e037 900d                       bcc @notHexDigit   ; less than 'A'?
   117  e039 c947                       cmp #'F' + 1
   118  e03b 900a                       bcc @isHexDigit    ; less than or equal 'F'?
   119  e03d c961                       cmp #'a'
   120  e03f 9005                       bcc @notHexDigit   ; less than 'a'?
   121  e041 c967                       cmp #'f' + 1
   122  e043 9002                       bcc @isHexDigit    ; less than or equal 'f'?
   123  e045 18                         clc
   124                          @notHexDigit:
   125  e046 60                         rts
   126                          
   127                          @isHexDigit
   128  e047 38                         sec
   129                          
   130                          @endIsDigitX
   131  e048 60                         rts
   132                          
   133                          
   134                          ; -----------------------------------------------------------------------------
   135                          ; isSpace: Is the ASCII character a whitespace character?
   136                          ; -----------------------------------------------------------------------------
   137                          ; Inputs:
   138                          ;   A: ASCII character
   139                          ; Outputs:
   140                          ;   Carry set if space, carry clear if not space
   141                          ; -----------------------------------------------------------------------------
   142                          isSpace:
   143  e049 c920                       cmp #' '
   144  e04b f01c                       beq @isSpace
   145  e04d b018                       bcs @notSpace
   146  e04f c90a                       cmp #'\n'
   147  e051 f016                       beq @isSpace
   148  e053 c90d                       cmp #'\r'
   149  e055 f012                       beq @isSpace
   150  e057 c909                       cmp #'\t'
   151  e059 f00e                       beq @isSpace
   152  e05b c90d                       cmp #'\r'
   153  e05d f00a                       beq @isSpace
   154  e05f c90b                       cmp #$0b
   155  e061 f006                       beq @isSpace
   156  e063 c90c                       cmp #$0c
   157  e065 f002                       beq @isSpace
   158                          
   159                          @notSpace:
   160  e067 18                         clc
   161  e068 60                         rts
   162                          
   163                          @isSpace
   164  e069 38                         sec
   165  e06a 60                         rts
   166                          
   167                          ; -----------------------------------------------------------------------------
   168                          ; toUpper: convert an ascii character to upper case
   169                          ; -----------------------------------------------------------------------------
   170                          ; Inputs:
   171                          ;   A: ascii character
   172                          ; Outputs:
   173                          ;   A: upper case ascii character
   174                          ;   C: set if character was converted
   175                          ; -----------------------------------------------------------------------------
   176                          toUpper:
   177  e06b 2000e0                     jsr isLower
   178  e06e 9002                       bcc @endToUpper
   179  e070 4920                       eor #$20        ; convert (subtract $20)
   180                          
   181                          @endToUpper
   182  e072 60                         rts        
   183                          
   184                          ; -----------------------------------------------------------------------------
   185                          ; toLower: convert an ascii character to lower case
   186                          ; -----------------------------------------------------------------------------
   187                          ; Inputs:
   188                          ;   A: ascii character
   189                          ; Outputs:
   190                          ;   A: lower case ascii character
   191                          ;   C: set if character was converted
   192                          ; -----------------------------------------------------------------------------
   193                          toLower:
   194  e073 200ce0                     jsr isUpper
   195  e076 9002                       bcc @endToUpper
   196                          
   197  e078 0920                       ora #$20        ; convert (add $20)
   198                          
   199                          @endToUpper

; ******** Source: kernel.asm
   147  e07a 60                 

; ******** Source: ../lib\ut\bcd.asm
     1                          ; 6502 - BCD subroutines
     2                          ;
     3                          ; Copyright (c) 2020 Troy Schrapel
     4                          ;
     5                          ; This code is licensed under the MIT license
     6                          ;
     7                          ; https://github.com/visrealm/hbc-56
     8                          ;
     9                          ;
    10                          
    11                          
    12                          !ifndef BCD_RAM_START { BCD_RAM_START = $7810
    13                                  !warn "BCD_RAM_START not provided. Defaulting to ", BCD_RAM_START
    14                          }
    15                          
    16                          ; -------------------------
    17                          ; High RAM
    18                          ; -------------------------
    19                          BCD_TMP1	= BCD_RAM_START
    20                          BCD_TMP2	= BCD_RAM_START + 1
    21                          BCD_TMP3	= BCD_RAM_START + 2
    22                          .BCD_RAM_SIZE	= 3
    23                          
    24                          !if BCD_RAM_END < (BCD_RAM_START + .BCD_RAM_SIZE) {
    25                          	!error "BCD_RAM requires ",BCD_RAM_SIZE," bytes. Allocated ",BCD_RAM_END - BCD_RAM_START
    26                          }
    27                          
    28                          
    29                          ; -----------------------------------------------------------------------------
    30                          ; bin2bcd8: convert an unsigned byte to a 2-digit bcd value
    31                          ; -----------------------------------------------------------------------------
    32                          ; Inputs:
    33                          ;   A: value
    34                          ; Outputs:
    35                          ;   BCD value in R8
    36                          ; -----------------------------------------------------------------------------
    37                          bin2bcd8:
    38  e07b 8d837c               sta BCD_TMP1
    39  e07e a900                 lda #0
    40  e080 8d847c               sta BCD_TMP2
    41  e083 8d857c               sta BCD_TMP3
    42  e086 a208                 ldx #8 
    43  e088 f8                   sed    
    44                          .loop:
    45  e089 0e837c               asl BCD_TMP1
    46  e08c ad847c               lda BCD_TMP2
    47  e08f 6d847c               adc BCD_TMP2
    48  e092 8d847c               sta BCD_TMP2
    49  e095 ad857c               lda BCD_TMP3
    50  e098 6d857c               adc BCD_TMP3
    51  e09b 8d857c               sta BCD_TMP3
    52  e09e ca                   dex
    53  e09f d0e8                 bne .loop
    54  e0a1 d8                   cld   
    55  e0a2 60                   rts
    56                          

; ******** Source: kernel.asm
   148                          

; ******** Source: ../lib\ut\memory.asm
     1                          ; 6502
     2                          ;
     3                          ; Memory subroutines and macros
     4                          ;
     5                          ; Copyright (c) 2020 Troy Schrapel
     6                          ;
     7                          ; This code is licensed under the MIT license
     8                          ;
     9                          ; https://github.com/visrealm/hbc-56
    10                          ;
    11                          ;
    12                          

; ******** Source: ../lib\ut\memory.inc
     1                          ; 6502
     2                          ;
     3                          ; Memory subroutines and macros
     4                          ;
     5                          ; Copyright (c) 2020 Troy Schrapel
     6                          ;
     7                          ; This code is licensed under the MIT license
     8                          ;
     9                          ; https://github.com/visrealm/hbc-56
    10                          ;
    11                          ;
    12                          
    13                          ; -----------------------------------------------------------------------------
    14                          ; store16: Write a 16-bit immediate value to memory
    15                          ; -----------------------------------------------------------------------------
    16                          ; Inputs:
    17                          ;	.dst: destination address
    18                          ;	.val16: 16-bit value
    19                          ; -----------------------------------------------------------------------------
    20                          !macro store16 .dst, .val16 {
    21                                  lda #<.val16
    22                                  sta .addr
    23                                  lda #>.val16
    24                                  sta .addr + 1
    25                          }
    26                          
    27                          ; -----------------------------------------------------------------------------
    28                          ; memcpy: Copy a fixed number of bytes from .src to dest
    29                          ; -----------------------------------------------------------------------------
    30                          ; Inputs:
    31                          ;	.src: source address
    32                          ;	.dst: destination address
    33                          ;	.cnt: number of bytes
    34                          ; -----------------------------------------------------------------------------
    35                          !macro memcpy .dst, .src, .cnt {
    36                          !if .cnt <= 0 {
    37                          	!error "memcpy: invalid count: ", .cnt
    38                          } else if .cnt <= 8 {
    39                          	!for i, 0, .cnt - 1 {
    40                          		lda .src + i
    41                          		sta .dst + i
    42                          	}
    43                          } else { !if .cnt <= 256 {
    44                          	ldx #0
    45                          -
    46                          	lda .src, x
    47                          	sta .dst, x
    48                          	inx
    49                          	cpx #(.cnt & $ff)	
    50                          	bne -
    51                          } else {
    52                          	lda #<.src
    53                          	sta MEM_SRC
    54                          	lda #>.src
    55                          	sta MEM_SRC + 1
    56                          
    57                          	lda #<.dst
    58                          	sta MEM_DST
    59                          	lda #>.dst
    60                          	sta MEM_DST + 1
    61                          
    62                          
    63                          		lda #<.cnt
    64                          		sta MEM_LEN
    65                          		lda #>.cnt
    66                          		sta MEM_LEN + 1
    67                          		jsr memcpyMultiPage
    68                          	}
    69                          }
    70                          }
    71                          
    72                          !macro setMemCpySrc .src {
    73                          	lda #<.src
    74                          	sta MEM_SRC
    75                          	lda #>.src
    76                          	sta MEM_SRC + 1
    77                          }
    78                          
    79                          !macro setMemCpyDst .dst {
    80                          	lda #<.dst
    81                          	sta MEM_DST
    82                          	lda #>.dst
    83                          	sta MEM_DST + 1
    84                          }
    85                          
    86                          !macro setMemCpySrcInd .srcRef {
    87                          	lda .srcRef
    88                          	sta MEM_SRC
    89                          	lda .srcRef + 1
    90                          	sta MEM_SRC + 1
    91                          }
    92                          
    93                          !macro setMemCpyDstInd .dstRef {
    94                          	lda .dstRef
    95                          	sta MEM_DST
    96                          	lda .dstRef + 1
    97                          	sta MEM_DST + 1
    98                          }
    99                          
   100                          !macro memcpySinglePage .bytes {
   101                          
   102                          	!if .bytes <= 0 {
   103                          		!error "memcpySinglePage: invalid count: ", .bytes
   104                          	}	
   105                          
   106                          	ldy #.bytes
   107                          	jsr memcpySinglePage
   108                          }
   109                          
   110                          
   111                          ; -----------------------------------------------------------------------------
   112                          ; memcpyPort: Copy a fixed number of bytes from .src ram to dest port
   113                          ; -----------------------------------------------------------------------------
   114                          ; Inputs:
   115                          ;	.src: source address
   116                          ;	.dst: destination address
   117                          ;	.cnt: number of bytes
   118                          ; -----------------------------------------------------------------------------
   119                          !macro memcpyPort .dst, .src, .cnt {
   120                          	!if .cnt <= 0 {
   121                          		!error "memcpyPort: invalid count: ", .cnt
   122                          	}
   123                          	
   124                          	lda #<.src
   125                          	sta MEM_SRC
   126                          	lda #>.src
   127                          	sta MEM_SRC + 1
   128                          
   129                          	lda #<.dst
   130                          	sta MEM_DST
   131                          	lda #>.dst
   132                          	sta MEM_DST + 1
   133                          
   134                          	!if .cnt <= 256 {
   135                          		ldy #<.cnt					
   136                          		jsr memcpySinglePagePort
   137                          	} else {
   138                          		lda #<.cnt
   139                          		sta MEM_LEN
   140                          		lda #>.cnt
   141                          		sta MEM_LEN + 1
   142                          		jsr memcpyMultiPagePort
   143                          	}
   144                          }
   145                          
   146                          !zone {
   147                          
   148                          ; -----------------------------------------------------------------------------
   149                          ; memset: Set a fixed number of bytes to a single value
   150                          ; -----------------------------------------------------------------------------
   151                          ; Inputs:
   152                          ;	.dst: destination address
   153                          ;	val: the byte value
   154                          ;	.cnt: number of bytes
   155                          ; -----------------------------------------------------------------------------
   156                          !macro memset .dst, .val, .cnt {
   157                          !if .cnt <= 0 {
   158                          	!error "memset: invalid count: ", .cnt
   159                          } else if .cnt <= 8 {
   160                          	lda #.val
   161                          	!for i, 0, .cnt - 1 {
   162                          	sta .dst + i
   163                          	}
   164                          } else if .cnt <= 256 {
   165                          	ldx #<.cnt
   166                          	lda #.val
   167                          -
   168                          	dex
   169                          	sta .dst, x
   170                          	cpx #0
   171                          	bne -
   172                          } else {
   173                          	lda #<.dst
   174                          	sta MEM_DST
   175                          	lda #>.dst
   176                          	sta MEM_DST + 1
   177                          	lda #<.cnt
   178                          	sta MEM_LEN
   179                          	lda #>.cnt
   180                          	sta MEM_LEN + 1
   181                          	lda #.val
   182                          	jsr memsetMultiPage
   183                          }
   184                          }
   185                          
   186                          

; ******** Source: ../lib\ut\memory.asm
    14                          
    15                          
    16                          !ifndef MEMORY_ZP_START { MEMORY_ZP_START = $48
    17                                  !warn "MEMORY_ZP_START not provided. Defaulting to ", MEMORY_ZP_START
    18                          }
    19                          
    20                          ; -------------------------
    21                          ; Zero page
    22                          ; -------------------------
    23                          MEM_DST	= MEMORY_ZP_START
    24                          MEM_SRC	= MEMORY_ZP_START + 2
    25                          MEM_LEN	= MEMORY_ZP_START + 4
    26                          MEMORY_ZP_SIZE	= 6
    27                          
    28                          
    29                          !if MEMORY_ZP_END < (MEMORY_ZP_START + MEMORY_ZP_SIZE) {
    30                          	!error "MEMORY_ZP requires ",MEMORY_ZP_SIZE," bytes. Allocated ",MEMORY_ZP_END - MEMORY_ZP_START
    31                          }
    32                          
    33                          ; -----------------------------------------------------------------------------
    34                          ; memcpySinglePage: Copy up to 255 bytes 
    35                          ; -----------------------------------------------------------------------------
    36                          ; Inputs:
    37                          ;	MEM_SRC: src address
    38                          ;	MEM_DST: dst address
    39                          ;	Y:	bytes
    40                          ; -----------------------------------------------------------------------------
    41                          memcpySinglePage:
    42  e0a3 c000               	cpy #0
    43  e0a5 f009               	beq .endMemcpySinglePage
    44                          -
    45  e0a7 88                 	dey
    46  e0a8 b130               	lda (MEM_SRC), Y
    47  e0aa 912e               	sta (MEM_DST), Y
    48  e0ac c000               	cpy #0
    49  e0ae d0f7               	bne -
    50                          .endMemcpySinglePage:
    51  e0b0 60                 	rts
    52                          ; -----------------------------------------------------------------------------
    53                          
    54                          
    55                          
    56                          ; -----------------------------------------------------------------------------
    57                          ; memcpySinglePagePort: Copy up to 255 bytes 
    58                          ; -----------------------------------------------------------------------------
    59                          ; Inputs:
    60                          ;	MEM_SRC: src address
    61                          ;	MEM_DST: dst address (port)
    62                          ;	Y:	bytes
    63                          ; -----------------------------------------------------------------------------
    64                          memcpySinglePagePort:
    65  e0b1 c000               	cpy #0
    66  e0b3 f009               	beq .endMemcpySinglePagePort
    67                          -
    68  e0b5 88                 	dey
    69  e0b6 b130               	lda (MEM_SRC), Y
    70  e0b8 852e               	sta MEM_DST
    71  e0ba c000               	cpy #0
    72  e0bc d0f7               	bne -
    73                          .endMemcpySinglePagePort
    74  e0be 60                 	rts
    75                          ; -----------------------------------------------------------------------------
    76                          
    77                          
    78                          
    79                          ; -----------------------------------------------------------------------------
    80                          ; memcpyMultiPage: Copy an up to 2^15 bytes 
    81                          ; -----------------------------------------------------------------------------
    82                          ; Inputs:
    83                          ;	MEM_SRC: src address
    84                          ;	MEM_DST: dst address
    85                          ;	MEM_LEN: length
    86                          ; -----------------------------------------------------------------------------
    87                          memcpyMultiPage:
    88                          
    89                          !ifdef ALLOW_SELF_MODIFYING_CODE {
    90                          	lda MEM_SRC
    91                          	sta .loadIns + 1
    92                          	lda MEM_SRC + 1
    93                          	sta .loadIns + 2
    94                          
    95                          	lda MEM_DST
    96                          	sta .storeIns + 1
    97                          	lda MEM_DST + 1
    98                          	sta .storeIns + 2
    99                          
   100                          .loadIns:
   101                          	lda SELF_MODIFY_ADDR, Y
   102                          	
   103                          .storeIns:
   104                          	sta SELF_MODIFY_ADDR, Y
   105                          	dey
   106                          	bne .loadIns
   107                          	inc .loadIns + 2
   108                          	inc .storeIns + 2
   109                          	dex
   110                          	bne .loadIns
   111                          } else {
   112  e0bf a000               	ldy #0
   113  e0c1 a633               	ldx MEM_LEN + 1
   114                          - 
   115  e0c3 b130               	lda (MEM_SRC),y ; could unroll to any power of 2
   116  e0c5 912e               	sta (MEM_DST),y
   117  e0c7 c8                 	iny
   118  e0c8 d0f9               	bne -
   119  e0ca ca                 	dex
   120  e0cb f007               	beq .memcpyMultiPageRemaining
   121  e0cd e631               	inc MEM_SRC + 1
   122  e0cf e62f               	inc MEM_DST + 1
   123  e0d1 4cc3e0             	jmp -
   124                          .memcpyMultiPageRemaining ; remaining bytes
   125  e0d4 a632               	ldx MEM_LEN
   126  e0d6 f008               	beq .memcpyMultiPageEnd
   127                          - ; X bytes
   128  e0d8 b130               	lda (MEM_SRC),y
   129  e0da 912e               	sta (MEM_DST),y
   130  e0dc c8                 	iny
   131  e0dd ca                 	dex
   132  e0de d0f8               	bne -
   133                          .memcpyMultiPageEnd
   134                          }
   135                          
   136  e0e0 60                 	rts
   137                          ; -----------------------------------------------------------------------------
   138                          
   139                          
   140                          ; -----------------------------------------------------------------------------
   141                          ; memcpyMultiPagePort: Copy an up to 2^15 bytes 
   142                          ; -----------------------------------------------------------------------------
   143                          ; Inputs:
   144                          ;	MEM_SRC: src address
   145                          ;	MEM_DST: dst address (port)
   146                          ;	MEM_LEN: length
   147                          ; -----------------------------------------------------------------------------
   148                          memcpyMultiPagePort:
   149                          
   150  e0e1 a000               	ldy #0
   151  e0e3 a633               	ldx MEM_LEN + 1
   152                          - 
   153  e0e5 b130               	lda (MEM_SRC),y ; could unroll to any power of 2
   154  e0e7 852e               	sta MEM_DST
   155  e0e9 c8                 	iny
   156  e0ea d0f9               	bne -
   157  e0ec ca                 	dex
   158  e0ed f005               	beq .memcpyMultiPagePortRemaining
   159  e0ef e631               	inc MEM_SRC + 1
   160  e0f1 4ce5e0             	jmp -
   161                          .memcpyMultiPagePortRemaining ; remaining bytes
   162  e0f4 a632               	ldx MEM_LEN
   163  e0f6 f008               	beq .memcpyMultiPagePortEnd
   164                          - ; X bytes
   165  e0f8 b130               	lda (MEM_SRC),y
   166  e0fa 852e               	sta MEM_DST
   167  e0fc c8                 	iny
   168  e0fd ca                 	dex
   169  e0fe d0f8               	bne -
   170                          .memcpyMultiPagePortEnd
   171  e100 60                 	rts
   172                          ; -----------------------------------------------------------------------------
   173                          
   174                          
   175                          ; -----------------------------------------------------------------------------
   176                          ; memsetSinglePage: set a block of memory data
   177                          ; -----------------------------------------------------------------------------
   178                          ; Inputs:
   179                          ;	 A:	value to set
   180                          ;	 MEM_DST: start address
   181                          ;	 Y:	bytes
   182                          ; -----------------------------------------------------------------------------
   183                          memsetSinglePage:
   184  e101 c000               	cpy #0
   185  e103 f007               	beq .doneCpy
   186                          -
   187  e105 88                 	dey
   188  e106 912e               	sta (MEM_DST), y
   189  e108 c000               	cpy #0
   190  e10a d0f9               	bne -
   191                          .doneCpy
   192  e10c 60                 	rts
   193                          
   194                          
   195                          ; -----------------------------------------------------------------------------
   196                          ; memsetMultiPage: set a block of memory data
   197                          ; -----------------------------------------------------------------------------
   198                          ; Inputs:
   199                          ;	 A: value
   200                          ;	 MEM_DST: start address
   201                          ;	 MEM_LEN: length
   202                          ; -----------------------------------------------------------------------------
   203                          memsetMultiPage:
   204  e10d a633               	ldx MEM_LEN + 1
   205  e10f d005               	bne .doneSet
   206  e111 a432               	ldy MEM_LEN
   207  e113 4c01e1             	jmp memsetSinglePage
   208                          .doneSet
   209  e116 a000               	ldy #0
   210                          - 
   211  e118 912e               	sta (MEM_DST),y ; could unroll to any power of 2
   212  e11a c8                 	iny
   213  e11b d0fb               	bne -
   214  e11d ca                 	dex
   215  e11e f005               	beq .doneSet2
   216  e120 e62f               	inc MEM_DST + 1
   217  e122 4c18e1             	jmp -
   218                          .doneSet2 ; remaining bytes
   219  e125 a632               	ldx MEM_LEN
   220  e127 f006               	beq .doneSet3
   221                          - ; X bytes
   222  e129 912e               	sta (MEM_DST),y
   223  e12b c8                 	iny
   224  e12c ca                 	dex
   225  e12d d0fa               	bne -
   226                          .doneSet3
   227  e12f 60                 	rts

; ******** Source: kernel.asm
   149                          

; ******** Source: ../lib\ut\tables.asm
     1                          ; 6502 - Useful tables
     2                          ;
     3                          ; Copyright (c) 2022 Troy Schrapel
     4                          ;
     5                          ; This code is licensed under the MIT license
     6                          ;
     7                          ; https://github.com/visrealm/hbc-56
     8                          ;
     9                          ;
    10                          
    11                          tableBitFromLeft:
    12  e130 8040201008040201   !byte $80,$40,$20,$10,$08,$04,$02,$01
    13                          tableInvBitFromLeft:
    14  e138 7fbfdfeff7fbfdfe   !byte $7f,$bf,$df,$ef,$f7,$fb,$fd,$fe
    15                          tableBitFromRight:
    16  e140 0102040810204080   !byte $01,$02,$04,$08,$10,$20,$40,$80
    17                          tableInvBitFromRight:
    18  e148 fefdfbf7efdfbf7f   !byte $fe,$fd,$fb,$f7,$ef,$df,$bf,$7f
    19                          tableBitsFromLeft:
    20  e150 80c0e0f0f8fcfeff   !byte $80,$c0,$e0,$f0,$f8,$fc,$fe,$ff

; ******** Source: kernel.asm
   150                          
   151                          
   152                          !ifndef HBC56_DISABLE_AY3891X {

; ******** Source: ../lib\sfx\ay3891x.asm
     1                          ; 6502 - AY-3-819x PSG
     2                          ;
     3                          ; Copyright (c) 2021 Troy Schrapel
     4                          ;
     5                          ; This code is licensed under the MIT license
     6                          ;
     7                          ; https://github.com/visrealm/hbc-56
     8                          ;
     9                          

; ******** Source: ../lib\sfx\ay3891x.inc
     1                          ; 6502 - AY-3-819x PSG
     2                          ;
     3                          ; Copyright (c) 2021 Troy Schrapel
     4                          ;
     5                          ; This code is licensed under the MIT license
     6                          ;
     7                          ; https://github.com/visrealm/hbc-56
     8                          ;
     9                          
    10                          
    11                          
    12                          !macro ayWrite .dev, .reg, .val {
    13                                  lda #.reg
    14                                  sta IO_PORT_BASE_ADDRESS | AY_IO_PORT | AY_ADDR | .dev
    15                                  lda #.val
    16                                  sta IO_PORT_BASE_ADDRESS | AY_IO_PORT | AY_WRITE | .dev
    17                          }        
    18                          
    19                          !macro ayRead .dev, .reg {
    20                                  lda #.reg
    21                                  sta IO_PORT_BASE_ADDRESS | AY_IO_PORT | AY_ADDR | .dev
    22                                  lda IO_PORT_BASE_ADDRESS | AY_IO_PORT | AY_READ | .dev
    23                          }        
    24                          
    25                          
    26                          !macro ayWriteX .dev, .reg {
    27                                  lda #.reg
    28                                  sta IO_PORT_BASE_ADDRESS | AY_IO_PORT | AY_ADDR | .dev
    29                                  stx IO_PORT_BASE_ADDRESS | AY_IO_PORT | AY_WRITE | .dev
    30                          }
    31                          
    32                          !macro ayWriteA .dev, .reg {
    33                                  ldx #.reg
    34                                  stx IO_PORT_BASE_ADDRESS | AY_IO_PORT | AY_ADDR | .dev
    35                                  sta IO_PORT_BASE_ADDRESS | AY_IO_PORT | AY_WRITE | .dev
    36                          }
    37                          
    38                          !macro ayPlayNote .dev, .chan, .freq {
    39                                  !if .freq <= 0 {
    40                                          .val = 0
    41                                  } else {
    42                                          .val = AY_CLOCK_FREQ / (32.0 * .freq)
    43                                  }
    44                                  +ayWrite .dev, AY_CHA_TONE_L + (.chan * 2), <.val
    45                                  +ayWrite .dev, AY_CHA_TONE_H + (.chan * 2), >.val
    46                          }
    47                          
    48                          !macro ayToneWord .freq {
    49                                  !word (AY_CLOCK_FREQ / (32.0 * .freq))
    50                          }
    51                          
    52                          !macro ayToneByteL .freq {
    53                                  !byte <(AY_CLOCK_FREQ / (32.0 * .freq))
    54                          }
    55                          
    56                          !macro ayToneByteH .freq {
    57                                  !byte >(AY_CLOCK_FREQ / (32.0 * .freq))
    58                          }
    59                          
    60                          
    61                          !macro ayToneEnable .dev, .chan {
    62                                  +ayRead .dev, AY_ENABLES
    63                                  and #!($01 << .chan)
    64                                  +ayWriteA .dev, AY_ENABLES
    65                          }
    66                          
    67                          !macro ayToneDisable .dev, .chan {
    68                                  +ayRead .dev, AY_ENABLES
    69                                  ora #($01 << .chan)
    70                                  +ayWriteA .dev, AY_ENABLES
    71                          }
    72                          
    73                          !macro ayNoiseEnable .dev, .chan {
    74                                  +ayRead .dev, AY_ENABLES
    75                                  eor #($08 << .chan)
    76                                  +ayWriteA .dev, AY_ENABLES
    77                          }
    78                          
    79                          !macro ayNoiseDisable .dev, .chan {
    80                                  +ayRead .dev, AY_ENABLES
    81                                  ora #($08 << .chan)
    82                                  +ayWriteA .dev, AY_ENABLES
    83                          }
    84                          
    85                          !macro aySetVolume .dev, .chan, .vol {
    86                                  +ayWrite .dev, (AY_CHA_AMPL + .chan), (.vol >> 4)
    87                          }
    88                          
    89                          !macro aySetVolumeEnvelope .dev, .chan {
    90                                  +ayWrite .dev, (AY_CHA_AMPL + .chan), $10
    91                          }
    92                          
    93                          !macro aySetEnvelopePeriod .dev, .period {
    94                                  +ayWrite .dev, AY_ENV_PERIOD_L, <.period
    95                                  +ayWrite .dev, AY_ENV_PERIOD_H, >.period
    96                          }
    97                          
    98                          !macro aySetEnvShape .dev, .shape {
    99                                  +ayWrite .dev, AY_ENV_SHAPE, .shape
   100                          }
   101                          
   102                          !macro aySetNoise .dev, .freq {
   103                                  +ayWrite .dev, AY_ENV_SHAPE, .freq >> 3
   104                          }
   105                          
   106                          !macro ayStop .dev, .chan {
   107                                  +ayPlayNote .dev, .chan, 0
   108                             ;     +ayWrite .dev, (AY_CHA_AMPL + .chan), 0
   109                          }

; ******** Source: ../lib\sfx\ay3891x.asm
    10                          
    11                          
    12                          
    13                          !ifndef AY_IO_PORT { AY_IO_PORT = $40
    14                                  !warn "AY_IO_PORT not provided. Defaulting to ", AY_IO_PORT
    15                          }
    16                          
    17                          HAVE_AY3891X = 1
    18                          
    19                          ; -------------------------
    20                          ; Constants
    21                          ; -------------------------
    22                          AY_PSG0 = $00
    23                          AY_PSG1 = $04
    24                          
    25                          ; IO Ports
    26                          AY_S0 = IO_PORT_BASE_ADDRESS | AY_IO_PORT | AY_PSG0
    27                          AY_S1 = IO_PORT_BASE_ADDRESS | AY_IO_PORT | AY_PSG1
    28                          
    29                          AY_INACTIVE = $03
    30                          AY_READ     = $02
    31                          AY_WRITE    = $01
    32                          AY_ADDR     = $00
    33                          
    34                          AY_S0_READ  = AY_S0 | AY_READ
    35                          AY_S0_WRITE = AY_S0 | AY_WRITE
    36                          AY_S0_ADDR  = AY_S0 | AY_ADDR
    37                          
    38                          AY_S1_READ  = AY_S1 | AY_READ
    39                          AY_S1_WRITE = AY_S1 | AY_WRITE
    40                          AY_S1_ADDR  = AY_S1 | AY_ADDR
    41                          
    42                          ; Registers
    43                          AY_R0 = 0
    44                          AY_R1 = 1
    45                          AY_R2 = 2
    46                          AY_R3 = 3
    47                          AY_R4 = 4
    48                          AY_R5 = 5
    49                          AY_R6 = 6
    50                          AY_R7 = 7
    51                          AY_R8 = 8
    52                          AY_R9 = 9
    53                          AY_R10 = 10
    54                          AY_R11 = 11
    55                          AY_R12 = 12
    56                          AY_R13 = 13
    57                          AY_R14 = 14
    58                          AY_R15 = 15
    59                          AY_R16 = 16
    60                          AY_R17 = 17
    61                          
    62                          AY_CHA = 0
    63                          AY_CHB = 1
    64                          AY_CHC = 2
    65                          AY_CHN = 3
    66                          
    67                          AY_CHA_TONE_L   = AY_R0
    68                          AY_CHA_TONE_H   = AY_R1
    69                          AY_CHB_TONE_L   = AY_R2
    70                          AY_CHB_TONE_H   = AY_R3
    71                          AY_CHC_TONE_L   = AY_R4
    72                          AY_CHC_TONE_H   = AY_R5
    73                          AY_NOISE_GEN    = AY_R6
    74                          AY_ENABLES      = AY_R7
    75                          AY_CHA_AMPL     = AY_R8
    76                          AY_CHB_AMPL     = AY_R9
    77                          AY_CHC_AMPL     = AY_R10
    78                          AY_ENV_PERIOD_L = AY_R11
    79                          AY_ENV_PERIOD_H = AY_R12
    80                          AY_ENV_SHAPE    = AY_R13
    81                          AY_PORTA        = AY_R14
    82                          AY_PORTB        = AY_R15
    83                          
    84                          AY_ENV_SHAPE_CONTINUE  = $08
    85                          AY_ENV_SHAPE_ATTACK    = $04
    86                          AY_ENV_SHAPE_ALTERNATE = $02
    87                          AY_ENV_SHAPE_HOLD      = $01
    88                          
    89                          ;  /\  /\  /\  /\  /\ 
    90                          ; /  \/  \/  \/  \/  \
    91                          AY_ENV_SHAPE_TRIANGLE     = (AY_ENV_SHAPE_CONTINUE | AY_ENV_SHAPE_ATTACK | AY_ENV_SHAPE_ALTERNATE)
    92                          
    93                          ;  /------------------
    94                          ; /
    95                          AY_ENV_SHAPE_FADE_IN      = (AY_ENV_SHAPE_CONTINUE | AY_ENV_SHAPE_ATTACK | AY_ENV_SHAPE_HOLD)
    96                          
    97                          ; \
    98                          ;  \__________________
    99                          AY_ENV_SHAPE_FADE_OUT     = (AY_ENV_SHAPE_CONTINUE | AY_ENV_SHAPE_HOLD)
   100                          
   101                          ; \ |\ |\ |\ |\ |\ |\ |
   102                          ;  \| \| \| \| \| \| \|
   103                          AY_ENV_SHAPE_SAW1         = (AY_ENV_SHAPE_CONTINUE)
   104                          
   105                          ;  /| /| /| /| /| /| /|
   106                          ; / |/ |/ |/ |/ |/ |/ |
   107                          AY_ENV_SHAPE_SAW2         = (AY_ENV_SHAPE_CONTINUE | AY_ENV_SHAPE_ATTACK)
   108                          
   109                          ;  /|
   110                          ; / |__________________
   111                          AY_ENV_SHAPE_FADE_IN_STOP = (AY_ENV_SHAPE_ATTACK)
   112                          
   113                          
   114                          AY_CLOCK_FREQ   = 2000000
   115                          
   116                          ayInit:
   117                                  ; disable everything
   118  e158 a9078d407fa9ff8d...        +ayWrite AY_PSG0, AY_ENABLES, $ff
   119  e162 a9078d447fa9ff8d...        +ayWrite AY_PSG1, AY_ENABLES, $ff
   120                          
   121  e16c a9088d407fa9008d...        +aySetVolume AY_PSG0, AY_CHA, 0
   122  e176 a9098d407fa9008d...        +aySetVolume AY_PSG0, AY_CHB, 0
   123  e180 a90a8d407fa9008d...        +aySetVolume AY_PSG0, AY_CHC, 0
   124                          
   125  e18a a9008d407fa9008d...        +ayPlayNote AY_PSG0, AY_CHA, 0
   126  e19e a9028d407fa9008d...        +ayPlayNote AY_PSG0, AY_CHB, 0
   127  e1b2 a9048d407fa9008d...        +ayPlayNote AY_PSG0, AY_CHC, 0
   128                          
   129  e1c6 a90b8d407fa9008d...        +aySetEnvelopePeriod AY_PSG0, 0
   130  e1da a90d8d407fa9008d...        +aySetEnvShape AY_PSG0, 0
   131  e1e4 a90d8d407fa9008d...        +aySetNoise  AY_PSG0, 0
   132                          
   133  e1ee a9088d447fa9008d...        +aySetVolume AY_PSG1, AY_CHA, 0
   134  e1f8 a9098d447fa9008d...        +aySetVolume AY_PSG1, AY_CHB, 0
   135  e202 a90a8d447fa9008d...        +aySetVolume AY_PSG1, AY_CHC, 0
   136                          
   137  e20c a9008d447fa9008d...        +ayPlayNote AY_PSG1, AY_CHA, 0
   138  e220 a9028d447fa9008d...        +ayPlayNote AY_PSG1, AY_CHB, 0
   139  e234 a9048d447fa9008d...        +ayPlayNote AY_PSG1, AY_CHC, 0
   140                          
   141  e248 a90b8d447fa9008d...        +aySetEnvelopePeriod AY_PSG1, 0
   142  e25c a90d8d447fa9008d...        +aySetEnvShape AY_PSG1, 0
   143  e266 a90d8d447fa9008d...        +aySetNoise  AY_PSG1, 0
   144  e270 60                         rts
   145                          
   146                          ; Note frequencies from https://pages.mtu.edu/~suits/notefreqs.html
   147                          
   148                          NOTE_FREQ_C0  = 16.35
   149                          NOTE_FREQ_CS0 = 17.32
   150                          NOTE_FREQ_D0  = 18.35
   151                          NOTE_FREQ_DS0 = 19.45
   152                          NOTE_FREQ_E0  = 20.6
   153                          NOTE_FREQ_F0  = 21.83
   154                          NOTE_FREQ_FS0 = 23.12
   155                          NOTE_FREQ_G0  = 24.5
   156                          NOTE_FREQ_GS0 = 25.96
   157                          NOTE_FREQ_A0  = 27.5
   158                          NOTE_FREQ_AS0 = 29.14
   159                          NOTE_FREQ_B0  = 30.87
   160                          NOTE_FREQ_C1  = 32.7
   161                          NOTE_FREQ_CS1 = 34.65
   162                          NOTE_FREQ_D1  = 36.71
   163                          NOTE_FREQ_DS1 = 38.89
   164                          NOTE_FREQ_E1  = 41.2
   165                          NOTE_FREQ_F1  = 43.65
   166                          NOTE_FREQ_FS1 = 46.25
   167                          NOTE_FREQ_G1  = 49
   168                          NOTE_FREQ_GS1 = 51.91
   169                          NOTE_FREQ_A1  = 55
   170                          NOTE_FREQ_AS1 = 58.27
   171                          NOTE_FREQ_B1  = 61.74
   172                          NOTE_FREQ_C2  = 65.41
   173                          NOTE_FREQ_CS2 = 69.3
   174                          NOTE_FREQ_D2  = 73.42
   175                          NOTE_FREQ_DS2 = 77.78
   176                          NOTE_FREQ_E2  = 82.41
   177                          NOTE_FREQ_F2  = 87.31
   178                          NOTE_FREQ_FS2 = 92.5
   179                          NOTE_FREQ_G2  = 98
   180                          NOTE_FREQ_GS2 = 103.83
   181                          NOTE_FREQ_A2  = 110
   182                          NOTE_FREQ_AS2 = 116.54
   183                          NOTE_FREQ_B2  = 123.47
   184                          NOTE_FREQ_C3  = 130.81
   185                          NOTE_FREQ_CS3 = 138.59
   186                          NOTE_FREQ_D3  = 146.83
   187                          NOTE_FREQ_DS3 = 155.56
   188                          NOTE_FREQ_E3  = 164.81
   189                          NOTE_FREQ_F3  = 174.61
   190                          NOTE_FREQ_FS3 = 185
   191                          NOTE_FREQ_G3  = 196
   192                          NOTE_FREQ_GS3 = 207.65
   193                          NOTE_FREQ_A3  = 220
   194                          NOTE_FREQ_AS3 = 233.08
   195                          NOTE_FREQ_B3  = 246.94
   196                          NOTE_FREQ_C4  = 261.63
   197                          NOTE_FREQ_CS4 = 277.18
   198                          NOTE_FREQ_D4  = 293.66
   199                          NOTE_FREQ_DS4 = 311.13
   200                          NOTE_FREQ_E4  = 329.63
   201                          NOTE_FREQ_F4  = 349.23
   202                          NOTE_FREQ_FS4 = 369.99
   203                          NOTE_FREQ_G4  = 392
   204                          NOTE_FREQ_GS4 = 415.3
   205                          NOTE_FREQ_A4  = 440
   206                          NOTE_FREQ_AS4 = 466.16
   207                          NOTE_FREQ_B4  = 493.88
   208                          NOTE_FREQ_C5  = 523.25
   209                          NOTE_FREQ_CS5 = 554.37
   210                          NOTE_FREQ_D5  = 587.33
   211                          NOTE_FREQ_DS5 = 622.25
   212                          NOTE_FREQ_E5  = 659.25
   213                          NOTE_FREQ_F5  = 698.46
   214                          NOTE_FREQ_FS5 = 739.99
   215                          NOTE_FREQ_G5  = 783.99
   216                          NOTE_FREQ_GS5 = 830.61
   217                          NOTE_FREQ_A5  = 880
   218                          NOTE_FREQ_AS5 = 932.33
   219                          NOTE_FREQ_B5  = 987.77
   220                          NOTE_FREQ_C6  = 1046.5
   221                          NOTE_FREQ_CS6 = 1108.73
   222                          NOTE_FREQ_D6  = 1174.66
   223                          NOTE_FREQ_DS6 = 1244.51
   224                          NOTE_FREQ_E6  = 1318.51
   225                          NOTE_FREQ_F6  = 1396.91
   226                          NOTE_FREQ_FS6 = 1479.98
   227                          NOTE_FREQ_G6  = 1567.98
   228                          NOTE_FREQ_GS6 = 1661.22
   229                          NOTE_FREQ_A6  = 1760
   230                          NOTE_FREQ_AS6 = 1864.66
   231                          NOTE_FREQ_B6  = 1975.53
   232                          NOTE_FREQ_C7  = 2093
   233                          NOTE_FREQ_CS7 = 2217.46
   234                          NOTE_FREQ_D7  = 2349.32
   235                          NOTE_FREQ_DS7 = 2489.02
   236                          NOTE_FREQ_E7  = 2637.02
   237                          NOTE_FREQ_F7  = 2793.83
   238                          NOTE_FREQ_FS7 = 2959.96
   239                          NOTE_FREQ_G7  = 3135.96
   240                          NOTE_FREQ_GS7 = 3322.44
   241                          NOTE_FREQ_A7  = 3520
   242                          NOTE_FREQ_AS7 = 3729.31
   243                          NOTE_FREQ_B7  = 3951.07
   244                          NOTE_FREQ_C8  = 4186.01
   245                          NOTE_FREQ_CS8 = 4434.92
   246                          NOTE_FREQ_D8  = 4698.63
   247                          NOTE_FREQ_DS8 = 4978.03
   248                          NOTE_FREQ_E8  = 5274.04
   249                          NOTE_FREQ_F8  = 5587.65
   250                          NOTE_FREQ_FS8 = 5919.91
   251                          NOTE_FREQ_G8  = 6271.93
   252                          NOTE_FREQ_GS8 = 6644.88
   253                          NOTE_FREQ_A8  = 7040
   254                          NOTE_FREQ_AS8 = 7458.62
   255                          NOTE_FREQ_B8  = 7902.13

; ******** Source: kernel.asm
   153                          
   154                          }
   155                          
   156                          !ifndef HBC56_DISABLE_TMS9918 {
   157                                  !ifndef TMS_MODEL { TMS_MODEL = 9918 }

; ******** Source: ../lib\gfx\tms9918.asm
     1                          ; 6502 - TMS9918 VDP
     2                          ;
     3                          ; Copyright (c) 2021 Troy Schrapel
     4                          ;
     5                          ; This code is licensed under the MIT license
     6                          ;
     7                          ; https://github.com/visrealm/hbc-56
     8                          ;
     9                          

; ******** Source: ../lib\hbc56.inc
     1                          ; 6502 - HBC-56
     2                          ;
     3                          ; Copyright (c) 2021 Troy Schrapel
     4                          ;
     5                          ; This code is licensed under the MIT license
     6                          ;
     7                          ; https://github.com/visrealm/hbc-56
     8                          ;
     9                          ;
    10                          
    11                          ; Base address of the 256 IO port memory range
    12                          IO_PORT_BASE_ADDRESS	= $7f00
    13                          
    14                          
    15                          ; -------------------------
    16                          ; ASCII constants
    17                          ; -------------------------
    18                          ASCII_RETURN    = $0A
    19                          ASCII_CR        = $0D
    20                          ASCII_BACKSPACE = $08
    21                          ASCII_BELL      = $07

; ******** Source: ../lib\gfx\tms9918.asm
    10                          
    11                          
    12                          !ifndef HAVE_MATH_INC { !src "ut/math.inc" }

; ******** Source: ../lib\gfx\tms9918.inc
     1                          ; 6502 - TMS9918 VDP Macros
     2                          ;
     3                          ; Copyright (c) 2021 Troy Schrapel
     4                          ;
     5                          ; This code is licensed under the MIT license
     6                          ;
     7                          ; https://github.com/visrealm/hbc-56
     8                          ;
     9                          
    10                          
    11                          
    12                          
    13                          ; -----------------------------------------------------------------------------
    14                          ; tmsWaitReg: Not sure how much delay we need so make a macro for now
    15                          ; -----------------------------------------------------------------------------
    16                          !macro tmsWaitReg {
    17                                  jsr _tmsWaitReg
    18                          }
    19                          
    20                          ; -----------------------------------------------------------------------------
    21                          ; tmsWaitData: Not sure how much delay we need so make a macro for now
    22                          ; -----------------------------------------------------------------------------
    23                          !macro tmsWaitData {
    24                                  jsr _tmsWaitData
    25                          }
    26                          
    27                          ; -----------------------------------------------------------------------------
    28                          ; tmsSetAddressWrite: Set an address in the TMS9918
    29                          ; -----------------------------------------------------------------------------
    30                          !macro tmsSetAddressWrite .addr {
    31                                  +tmsSetAddressRead ($4000 | .addr)
    32                          }
    33                          
    34                          ; -----------------------------------------------------------------------------
    35                          ; tmsSetAddressRead: Set an address to read from the TMS9918
    36                          ; -----------------------------------------------------------------------------
    37                          !macro tmsSetAddressRead .addr {
    38                                  php
    39                                  sei             ; we can't be interrupted here
    40                                  lda #<(.addr)
    41                                  sta TMS9918_REG
    42                                  +tmsWaitReg
    43                                  lda #>(.addr)
    44                                  sta TMS9918_REG
    45                                  +tmsWaitReg
    46                                  plp
    47                          }
    48                          
    49                          ; -----------------------------------------------------------------------------
    50                          ; tmsGet: Get a byte of data from the TMS9918
    51                          ; -----------------------------------------------------------------------------
    52                          !macro tmsGet {
    53                                  lda TMS9918_RAM
    54                                  +tmsWaitData
    55                          }
    56                          
    57                          ; -----------------------------------------------------------------------------
    58                          ; tmsPut: Send a byte of data to the TMS9918
    59                          ; -----------------------------------------------------------------------------
    60                          !macro tmsPut .byte {
    61                                  lda #(.byte & 0xff)
    62                                  +tmsPut
    63                          }
    64                          
    65                          
    66                          ; -----------------------------------------------------------------------------
    67                          ; tmsPut: Send a byte (A) of data to the TMS9918
    68                          ; -----------------------------------------------------------------------------
    69                          !macro tmsPut {
    70                                  sta TMS9918_RAM
    71                                  +tmsWaitData
    72                          }
    73                          
    74                          ; -----------------------------------------------------------------------------
    75                          ; tmsSetColor: Set current fg/bg color
    76                          ; -----------------------------------------------------------------------------
    77                          !macro tmsSetColor .color {
    78                                  lda #.color
    79                                  jsr tmsSetBackground
    80                          }
    81                          
    82                          ; -----------------------------------------------------------------------------
    83                          ; tmsSetColorFgBg: Set current fg/bg color
    84                          ; -----------------------------------------------------------------------------
    85                          !macro tmsSetColorFgBg .fg, .bg {
    86                                  +tmsColorFgBg .fg, .bg
    87                                  jsr tmsSetBackground
    88                          }
    89                          
    90                          ; -----------------------------------------------------------------------------
    91                          ; byteTmsColorFgBg: Output a data byte
    92                          ; -----------------------------------------------------------------------------
    93                          !macro byteTmsColorFgBg .fg, .bg {
    94                          !byte (.fg << 4 | .bg)
    95                          }
    96                          
    97                          
    98                          ; -----------------------------------------------------------------------------
    99                          ; tmsDisableOutput: Disable the TMS9918 output
   100                          ; -----------------------------------------------------------------------------
   101                          !macro tmsDisableOutput {
   102                                  lda #TMS_R1_DISP_ACTIVE
   103                                  jsr tmsReg1ClearFields
   104                          }
   105                          
   106                          ; -----------------------------------------------------------------------------
   107                          ; tmsEnableOutput: Enable the TMS9918 output
   108                          ; -----------------------------------------------------------------------------
   109                          !macro tmsEnableOutput {
   110                                  lda #TMS_R1_DISP_ACTIVE
   111                                  jsr tmsReg1SetFields
   112                          }
   113                          
   114                          ; -
   115                          !macro tmsEnableInterrupts {
   116                                  lda #TMS_R1_INT_ENABLE
   117                                  jsr tmsReg1SetFields
   118                          }
   119                          
   120                          !macro tmsDisableInterrupts {
   121                                  lda #TMS_R1_INT_ENABLE
   122                                  jsr tmsReg1ClearFields
   123                          }
   124                          
   125                          !macro tmsConsoleOut .char {
   126                                  lda #.char
   127                                  jsr tmsConsoleOut
   128                          }
   129                          
   130                          
   131                          ; -----------------------------------------------------------------------------
   132                          ; tmsConsolePrintAddr: Print text to console
   133                          ; -----------------------------------------------------------------------------
   134                          ; Inputs:
   135                          ;  textAddr: Address of null-terminated string to print
   136                          ; -----------------------------------------------------------------------------
   137                          !macro tmsConsolePrintAddr .textAddr {
   138                                  lda #<.textAddr
   139                                  sta STR_ADDR_L
   140                                  lda #>.textAddr
   141                                  sta STR_ADDR_H
   142                                  jsr tmsConsolePrint        
   143                          }
   144                          
   145                          ; -----------------------------------------------------------------------------
   146                          ; tmsConsolePrint: Print immediate text to console
   147                          ; -----------------------------------------------------------------------------
   148                          ; Inputs:
   149                          ;  str: String to print
   150                          ; -----------------------------------------------------------------------------
   151                          !macro tmsConsolePrint .str {
   152                          	jmp .afterText
   153                          .textAddr
   154                          	!text .str,0
   155                          .afterText        
   156                                  +tmsConsolePrintAddr .textAddr
   157                          }
   158                          
   159                          ; -----------------------------------------------------------------------------
   160                          ; +tmsColorFgBg: Set A to the given FG / BG color
   161                          ; -----------------------------------------------------------------------------
   162                          !macro tmsColorFgBg .fg, .bg {
   163                                  lda #(.fg << 4 | .bg)
   164                          }
   165                          
   166                          ; -----------------------------------------------------------------------------
   167                          ; tmsReadStatus: Read status - clear interrupt
   168                          ; -----------------------------------------------------------------------------
   169                          !macro tmsReadStatus  {
   170                                  bit TMS9918_REG
   171                          }
   172                          
   173                          ; -----------------------------------------------------------------------------
   174                          ; tmsSendData: Send # bytes from .sourceAddr to tms9918 data port
   175                          ; -----------------------------------------------------------------------------
   176                          !macro tmsSendData .sourceAddr, .numBytes {
   177                                  lda #<.sourceAddr
   178                                  sta TMS_TMP_ADDRESS
   179                                  lda #>.sourceAddr
   180                                  sta TMS_TMP_ADDRESS + 1
   181                          
   182                                  !if .numBytes < 256 {
   183                                          ldx #.numBytes
   184                                          jsr tmsSendBytes
   185                                  } else {
   186                                          !do while .numBytes > 0 {
   187                                                  !if .numBytes > 255 {
   188                                                          ldx #0
   189                                                          !set .numBytes = .numBytes - 256
   190                                                  } else {
   191                                                          ldx #.numBytes
   192                                                          !set .numBytes = 0
   193                                                  }
   194                                                  jsr tmsSendBytes
   195                                                  inc TMS_TMP_ADDRESS + 1
   196                                          }
   197                                  }
   198                          
   199                          }
   200                          
   201                          ; -----------------------------------------------------------------------------
   202                          ; tmsSendDataRpt: Send # bytes from .sourceAddr to tms9918 data port .rpt times
   203                          ; -----------------------------------------------------------------------------
   204                          !macro tmsSendDataRpt .sourceAddr, .numBytes, .rpt {
   205                                  lda #<.sourceAddr
   206                                  sta TMS_TMP_ADDRESS
   207                                  lda #>.sourceAddr
   208                                  sta TMS_TMP_ADDRESS + 1
   209                          
   210                                  !if .numBytes < 256 {
   211                                          !if .rpt < 5 {
   212                                                  !for i,1,.rpt {
   213                                                          ldx #.numBytes
   214                                                          jsr tmsSendBytes
   215                                                  }
   216                                          } else {
   217                                                  lda #.rpt
   218                                                  sta TMS9918_TMP_BUFFER
   219                          -
   220                                                  ldx #.numBytes
   221                                                  jsr tmsSendBytes
   222                                                  dec TMS9918_TMP_BUFFER
   223                                                  bne -
   224                                          }
   225                                  } else {
   226                                          !error "tmsSendDataRpt supports <256 bytes only"
   227                                  }
   228                          }
   229                          
   230                          
   231                          ; -----------------------------------------------------------------------------
   232                          ; tmsPutRpt: Send value .rpt times
   233                          ; -----------------------------------------------------------------------------
   234                          !macro tmsPutRpt .value, .rpt {
   235                                  ldx #.rpt
   236                                  lda #.value
   237                          -
   238                                  +tmsPut
   239                                  dex
   240                                  bne -
   241                          }
   242                          
   243                          !macro tmsPutSeq .from, .count {
   244                                  lda #.from
   245                          -
   246                                  +tmsPut
   247                                  inc
   248                                  cmp #<(.from + .count)
   249                                  bne -
   250                          }
   251                          
   252                          !macro tmsSetSourceAddressInd .addr {
   253                          	lda .addr
   254                          	sta TMS_TMP_ADDRESS
   255                          	lda .addr + 1
   256                          	sta TMS_TMP_ADDRESS + 1
   257                          }
   258                          
   259                          !macro tmsSetSourceAddressIndOffset .addr, .offset {
   260                                  clc
   261                          	lda .addr
   262                                  adc #<.offset
   263                          	sta TMS_TMP_ADDRESS
   264                          	lda .addr + 1
   265                                  adc #>.offset
   266                          	sta TMS_TMP_ADDRESS + 1
   267                          }
   268                          
   269                          
   270                          !macro tmsSendBytes .bytes {
   271                                  ldx #.bytes
   272                                  jsr tmsSendBytes
   273                          }
   274                          
   275                          
   276                          ; -----------------------------------------------------------------------------
   277                          ; tmsSetAddrPattTable: Initialise address for font table
   278                          ; -----------------------------------------------------------------------------
   279                          !macro tmsSetAddrPattTable {
   280                                  +tmsSetAddrPattTable 0
   281                          }
   282                          
   283                          ; -----------------------------------------------------------------------------
   284                          ; tmsSetAddrPattTable: Initialise address for pattern table
   285                          ; -----------------------------------------------------------------------------
   286                          !macro tmsSetAddrPattTable .ind {
   287                                  +tmsSetAddressWrite TMS_VRAM_PATT_ADDRESS + (8 * .ind)
   288                          }
   289                          
   290                          ; -----------------------------------------------------------------------------
   291                          ; tmsSetAddrPattTable: Initialise address for pattern table
   292                          ; -----------------------------------------------------------------------------
   293                          !macro tmsSetAddrPattTable .ind, .row {
   294                                  +tmsSetAddressWrite TMS_VRAM_PATT_ADDRESS + (8 * .ind) + .row
   295                          }
   296                          
   297                          ; -----------------------------------------------------------------------------
   298                          ; tmsSetAddrPattTableIIBank0: Initialise address for pattern table
   299                          ; -----------------------------------------------------------------------------
   300                          !macro tmsSetAddrPattTableIIBank0 .ind {
   301                                  +tmsSetAddrPattTable .ind
   302                          }
   303                          
   304                          ; -----------------------------------------------------------------------------
   305                          ; tmsSetAddrPattTableIIBank1: Initialise address for pattern table
   306                          ; -----------------------------------------------------------------------------
   307                          !macro tmsSetAddrPattTableIIBank1 .ind {
   308                                  +tmsSetAddrPattTable 256 + .ind
   309                          }
   310                          
   311                          ; -----------------------------------------------------------------------------
   312                          ; tmsSetAddrPattTableIIBank2: Initialise address for pattern table
   313                          ; -----------------------------------------------------------------------------
   314                          !macro tmsSetAddrPattTableIIBank2 .ind {
   315                                  +tmsSetAddrPattTable 512 + .ind
   316                          }
   317                          
   318                          ; -----------------------------------------------------------------------------
   319                          ; tmsSetAddrPattTableRead: Initialise address for pattern table to read
   320                          ; -----------------------------------------------------------------------------
   321                          !macro tmsSetAddrPattTableRead .ind {
   322                                  +tmsSetAddressRead TMS_VRAM_PATT_ADDRESS + (8 * .ind)
   323                          }
   324                          
   325                          ; -----------------------------------------------------------------------------
   326                          ; tmsSetAddrPattTableRowRead: Initialise address for pattern table to read
   327                          ; -----------------------------------------------------------------------------
   328                          !macro tmsSetAddrPattTableRead .ind, .row {
   329                                  +tmsSetAddressRead TMS_VRAM_PATT_ADDRESS + (8 * .ind) + .row
   330                          }
   331                          
   332                          ; -----------------------------------------------------------------------------
   333                          ; tmsUpdateFont: Update the pattern table with a given font
   334                          ; -----------------------------------------------------------------------------
   335                          !macro tmsUpdateFont .fontAddr {
   336                                  +tmsSetAddrPattTable 32
   337                                  +tmsSendData .fontAddr, $300
   338                          }
   339                          
   340                          ; -----------------------------------------------------------------------------
   341                          ; tmsSetAddrNameTable: Initialise address for base (text) table
   342                          ; -----------------------------------------------------------------------------
   343                          !macro tmsSetAddrNameTable {
   344                                  +tmsSetAddressWrite TMS_VRAM_NAME_ADDRESS
   345                          }
   346                          
   347                          ; -----------------------------------------------------------------------------
   348                          ; tmsSetAddrColorTable: Initialise address for color table
   349                          ; -----------------------------------------------------------------------------
   350                          !macro tmsSetAddrColorTable {
   351                                  +tmsSetAddressWrite TMS_VRAM_COLOR_ADDRESS
   352                          }
   353                          
   354                          ; -----------------------------------------------------------------------------
   355                          ; tmsSetAddrColorTable: Initialise address for color table index
   356                          ; -----------------------------------------------------------------------------
   357                          !macro tmsSetAddrColorTable .ind {
   358                                  +tmsSetAddressWrite TMS_VRAM_COLOR_ADDRESS + .ind
   359                          }
   360                          
   361                          ; -----------------------------------------------------------------------------
   362                          ; tmsSetAddrColorTableII: Initialise address for color table index (mode II)
   363                          ; -----------------------------------------------------------------------------
   364                          !macro tmsSetAddrColorTableII .ind {
   365                                  +tmsSetAddressWrite TMS_VRAM_COLOR_ADDRESS + .ind * 8
   366                          }
   367                          
   368                          ; -----------------------------------------------------------------------------
   369                          ; tmsSetAddrColorTableIIBank0: Initialise address for color table index (mode II)
   370                          ; -----------------------------------------------------------------------------
   371                          !macro tmsSetAddrColorTableIIBank0 .ind {
   372                                  +tmsSetAddrColorTableII .ind
   373                          }
   374                          
   375                          ; -----------------------------------------------------------------------------
   376                          ; tmsSetAddrColorTableIIBank1: Initialise address for color table index (mode II)
   377                          ; -----------------------------------------------------------------------------
   378                          !macro tmsSetAddrColorTableIIBank1 .ind {
   379                                  +tmsSetAddrColorTableII 256 + .ind
   380                          }
   381                          
   382                          ; -----------------------------------------------------------------------------
   383                          ; tmsSetAddrColorTableIIBank2: Initialise address for color table index (mode II)
   384                          ; -----------------------------------------------------------------------------
   385                          !macro tmsSetAddrColorTableIIBank2 .ind {
   386                                  +tmsSetAddrColorTableII 512 + .ind
   387                          }
   388                          
   389                          ; -----------------------------------------------------------------------------
   390                          ; tmsSetAddrSpriteAttrTable: Initialise address for sprite attributes table
   391                          ; -----------------------------------------------------------------------------
   392                          !macro tmsSetAddrSpriteAttrTable {
   393                                  +tmsSetAddrSpriteAttrTable 0
   394                          }
   395                          
   396                          ; -----------------------------------------------------------------------------
   397                          ; tmsSetAddrSpriteAttrTable: Initialise address for sprite attributes table
   398                          ; -----------------------------------------------------------------------------
   399                          !macro tmsSetAddrSpriteAttrTable .index {
   400                                  +tmsSetAddressWrite TMS_VRAM_SPRITE_ATTR_ADDRESS + .index * 4
   401                          }
   402                          
   403                          ; -----------------------------------------------------------------------------
   404                          ; tmsSetAddrSpritePattTable: Initialise address for sprite pattern table
   405                          ; -----------------------------------------------------------------------------
   406                          !macro tmsSetAddrSpritePattTable {
   407                                  +tmsSetAddrSpritePattTable 0
   408                          }
   409                          
   410                          ; -----------------------------------------------------------------------------
   411                          ; tmsSetAddrSpritePattTable: Initialise address for sprite pattern table
   412                          ; -----------------------------------------------------------------------------
   413                          !macro tmsSetAddrSpritePattTable .index {
   414                                  +tmsSetAddressWrite TMS_VRAM_SPRITE_PATT_ADDRESS + .index * 8
   415                          }
   416                          
   417                          
   418                          ; -----------------------------------------------------------------------------
   419                          ; tmsCreateSpritePattern: Create a sprite pattern (.spriteDataAddr is 8 bytes)
   420                          ; -----------------------------------------------------------------------------
   421                          !macro tmsCreateSpritePattern .pattInd, .spriteDataAddr {
   422                          
   423                                  
   424                          
   425                                  ; sprite pattern table
   426                                  +tmsSetAddrSpritePattTable .pattInd
   427                          
   428                                  ldx #0
   429                          -
   430                                  lda .spriteDataAddr,x
   431                                  +tmsPut
   432                                  inx
   433                                  cpx #8
   434                          
   435                                  
   436                          
   437                                  bne -
   438                          }
   439                          
   440                          ; -----------------------------------------------------------------------------
   441                          ; tmsCreateSpritePatternQuad: Create a (size 1) sprite pattern 
   442                          ;   (.spriteDataAddr is 32 bytes)
   443                          ; -----------------------------------------------------------------------------
   444                          !macro tmsCreateSpritePatternQuad .pattInd, .spriteDataAddr {
   445                          
   446                                  
   447                          
   448                                  ; sprite pattern table
   449                                  +tmsSetAddrSpritePattTable .pattInd * 4
   450                          
   451                                  ldx #0
   452                          -
   453                                  lda .spriteDataAddr,x
   454                                  +tmsPut 
   455                                  inx
   456                                  cpx #32
   457                          
   458                                  
   459                          
   460                                  bne -
   461                          }
   462                          
   463                          
   464                          !macro tmsCreateSpritePatternImm .ind, .b0, .b1, .b2, .b3, .b4, .b5, .b6, .b7 {
   465                          
   466                                  ; sprite pattern table
   467                                  +tmsSetAddrSpritePattTable .ind
   468                                  +tmsPut .b0
   469                                  +tmsPut .b2
   470                                  +tmsPut .b2
   471                                  +tmsPut .b3
   472                                  +tmsPut .b4
   473                                  +tmsPut .b5
   474                                  +tmsPut .b6
   475                                  +tmsPut .b7
   476                          }
   477                          
   478                          !macro tmsCreatePatternImm .ind, .b0, .b1, .b2, .b3, .b4, .b5, .b6, .b7 {
   479                          
   480                                  ; sprite pattern table
   481                                  +tmsSetAddrPattTable .ind
   482                                  +tmsPut .b0
   483                                  +tmsPut .b2
   484                                  +tmsPut .b2
   485                                  +tmsPut .b3
   486                                  +tmsPut .b4
   487                                  +tmsPut .b5
   488                                  +tmsPut .b6
   489                                  +tmsPut .b7
   490                          }
   491                          
   492                          
   493                          ; -----------------------------------------------------------------------------
   494                          ; tmsCreateSprite: Create a sprite
   495                          ; -----------------------------------------------------------------------------
   496                          !macro tmsCreateSprite .ind, .pattInd, .xPos, .yPos, .color {
   497                          
   498                                  ; sprite attr table
   499                                  +tmsSetAddrSpriteAttrTable .ind
   500                          
   501                                  +tmsPut .yPos
   502                                  +tmsPut .xPos
   503                                  +tmsPut .pattInd
   504                                  +tmsPut .color
   505                          }
   506                          
   507                          ; -----------------------------------------------------------------------------
   508                          ; tmsSpritePos: Set a sprite position
   509                          ; -----------------------------------------------------------------------------
   510                          !macro tmsSpritePos .ind, .xPos, .yPos {
   511                                  
   512                          
   513                                  ; sprite attr table
   514                                  +tmsSetAddrSpriteAttrTable .ind
   515                          
   516                                  +tmsPut .yPos
   517                                  +tmsPut .xPos        
   518                          }
   519                          
   520                          
   521                          ; -----------------------------------------------------------------------------
   522                          ; tmsSetLastSprite: Mark a sprite as the last sprite (set next ypos to )
   523                          ; -----------------------------------------------------------------------------
   524                          !macro tmsSetLastSprite .ind {
   525                                  +tmsSpritePos .ind + 1, 0, $d0
   526                          }
   527                          
   528                          
   529                          ; -----------------------------------------------------------------------------
   530                          ; tmsSpritePosXYReg: Set a sprite position from x/y registers
   531                          ; -----------------------------------------------------------------------------
   532                          !macro tmsSpritePosXYReg .ind {
   533                                  
   534                          
   535                                  ; sprite attr table
   536                                  +tmsSetAddrSpriteAttrTable .ind
   537                          
   538                                  tya
   539                                  +tmsPut 
   540                                  txa
   541                                  +tmsPut 
   542                          }
   543                          
   544                          
   545                          ; -----------------------------------------------------------------------------
   546                          ; tmsSetAddrSpriteColor: Change a sprite color
   547                          ; -----------------------------------------------------------------------------
   548                          !macro tmsSetAddrSpriteColor .ind {
   549                          
   550                                  ; sprite attr table
   551                                  +tmsSetAddressWrite TMS_VRAM_SPRITE_ATTR_ADDRESS + (.ind * 4) + 3
   552                          }
   553                          ; -----------------------------------------------------------------------------
   554                          ; tmsSpriteColor: Change a sprite color
   555                          ; -----------------------------------------------------------------------------
   556                          !macro tmsSpriteColor .ind, .color {
   557                          
   558                                  +tmsSetAddrSpriteColor .ind
   559                          
   560                                  +tmsPut .color
   561                          }
   562                          
   563                          
   564                          ; -----------------------------------------------------------------------------
   565                          ; tmsSetPosWrite: Set cursor position
   566                          ; -----------------------------------------------------------------------------
   567                          !macro tmsSetPosWrite .x, .y {
   568                                  +tmsSetAddressWrite (TMS_VRAM_NAME_ADDRESS + .y * 32 + .x)
   569                          }
   570                          
   571                          ; -----------------------------------------------------------------------------
   572                          ; tmsSetPosRead: Set read cursor position
   573                          ; -----------------------------------------------------------------------------
   574                          !macro tmsSetPosRead .x, .y {
   575                                  +tmsSetAddressRead (TMS_VRAM_NAME_ADDRESS + .y * 32 + .x)
   576                          }
   577                          
   578                          ; -----------------------------------------------------------------------------
   579                          ; tmsPrint: Print immediate text
   580                          ; -----------------------------------------------------------------------------
   581                          ; Inputs:
   582                          ;  str: String to print
   583                          ;  x: x position
   584                          ;  y: y position
   585                          ; -----------------------------------------------------------------------------
   586                          !macro tmsPrint .str, .x, .y {
   587                          	jmp .afterText
   588                          .textAddr
   589                          	!text .str,0
   590                          .afterText        
   591                          
   592                                  +tmsSetPosWrite .x, .y
   593                          
   594                                  lda #<.textAddr
   595                                  sta STR_ADDR_L
   596                                  lda #>.textAddr
   597                                  sta STR_ADDR_H
   598                                  jsr tmsPrint        
   599                          }
   600                          
   601                          
   602                          ; -----------------------------------------------------------------------------
   603                          ; tmsPrintCentre: Print centre-aligned immediate text
   604                          ; -----------------------------------------------------------------------------
   605                          ; Inputs:
   606                          ;  str: String to print
   607                          ;  y: y position
   608                          ; -----------------------------------------------------------------------------
   609                          !macro tmsPrintCentre .str, .y {
   610                          	jmp .afterText
   611                          .textAddr
   612                          	!text .str,0
   613                          .afterText        
   614                          
   615                                  +tmsSetPosWrite (32 - ((.afterText - 1) - .textAddr)) / 2, .y
   616                          
   617                                  lda #<.textAddr
   618                                  sta STR_ADDR_L
   619                                  lda #>.textAddr
   620                                  sta STR_ADDR_H
   621                                  jsr tmsPrint        
   622                          }
   623                          
   624                          
   625                          ; -----------------------------------------------------------------------------
   626                          ; tmsPrintZ: Print text
   627                          ; -----------------------------------------------------------------------------
   628                          ; Inputs:
   629                          ;  str: Address of zero-terminated string to print
   630                          ;  x: x position
   631                          ;  y: y position
   632                          ; -----------------------------------------------------------------------------
   633                          !macro tmsPrintZ .textAddr, .x, .y {
   634                                  +tmsSetPosWrite .x, .y
   635                          
   636                                  lda #<.textAddr
   637                                  sta STR_ADDR_L
   638                                  lda #>.textAddr
   639                                  sta STR_ADDR_H
   640                                  jsr tmsPrint        
   641                          }

; ******** Source: ../lib\gfx\tms9918.asm
    13                          
    14                          
    15                          TMS_FONT_DATA:

; ******** Source: ../lib\gfx\fonts\hbc56font.asm
     1                          ; 6502 - HBC-56 Font
     2                          ;
     3                          ; Copyright (c) 2021 Troy Schrapel
     4                          ;
     5                          ; This code is licensed under the MIT license
     6                          ;
     7                          ; https://github.com/visrealm/hbc-56
     8                          ;
     9                          
    10                          
    11                          
    12                          
    13                          
    14                          
    15                          
    16                          
    17                          
    18                          
    19                          
    20                          
    21                          
    22                          
    23                          
    24                          
    25                          
    26                          
    27                          
    28                          
    29                          
    30                          
    31                          
    32  e271 0000000000000000   !byte $00,$00,$00,$00,$00,$00,$00,$00 ; <SPACE>
    33  e279 1818181818001800   !byte $18,$18,$18,$18,$18,$00,$18,$00 ; !
    34  e281 6c6c6c0000000000   !byte $6C,$6C,$6C,$00,$00,$00,$00,$00 ; "
    35  e289 6c6cfe6cfe6c6c00   !byte $6C,$6C,$FE,$6C,$FE,$6C,$6C,$00 ; #
    36  e291 187ec07c06fc1800   !byte $18,$7E,$C0,$7C,$06,$FC,$18,$00 ; $
    37  e299 00c6cc183066c600   !byte $00,$C6,$CC,$18,$30,$66,$C6,$00 ; %
    38  e2a1 386c3876dccc7600   !byte $38,$6C,$38,$76,$DC,$CC,$76,$00 ; &
    39  e2a9 3030600000000000   !byte $30,$30,$60,$00,$00,$00,$00,$00 ; '
    40  e2b1 0c18303030180c00   !byte $0C,$18,$30,$30,$30,$18,$0C,$00 ; (
    41  e2b9 30180c0c0c183000   !byte $30,$18,$0C,$0C,$0C,$18,$30,$00 ; )
    42  e2c1 00663cff3c660000   !byte $00,$66,$3C,$FF,$3C,$66,$00,$00 ; *
    43  e2c9 0018187e18180000   !byte $00,$18,$18,$7E,$18,$18,$00,$00 ; +
    44  e2d1 0000000000181830   !byte $00,$00,$00,$00,$00,$18,$18,$30 ; ,
    45  e2d9 0000007e00000000   !byte $00,$00,$00,$7E,$00,$00,$00,$00 ; -
    46  e2e1 0000000000181800   !byte $00,$00,$00,$00,$00,$18,$18,$00 ; .
    47  e2e9 060c183060c08000   !byte $06,$0C,$18,$30,$60,$C0,$80,$00 ; /
    48  e2f1 7ccedef6e6c67c00   !byte $7C,$CE,$DE,$F6,$E6,$C6,$7C,$00 ; 0
    49  e2f9 1838181818187e00   !byte $18,$38,$18,$18,$18,$18,$7E,$00 ; 1
    50  e301 7cc6067cc0c0fe00   !byte $7C,$C6,$06,$7C,$C0,$C0,$FE,$00 ; 2
    51  e309 fc06063c0606fc00   !byte $FC,$06,$06,$3C,$06,$06,$FC,$00 ; 3
    52  e311 0cccccccfe0c0c00   !byte $0C,$CC,$CC,$CC,$FE,$0C,$0C,$00 ; 4
    53  e319 fec0fc0606c67c00   !byte $FE,$C0,$FC,$06,$06,$C6,$7C,$00 ; 5
    54  e321 7cc0c0fcc6c67c00   !byte $7C,$C0,$C0,$FC,$C6,$C6,$7C,$00 ; 6
    55  e329 fe06060c18303000   !byte $FE,$06,$06,$0C,$18,$30,$30,$00 ; 7
    56  e331 7cc6c67cc6c67c00   !byte $7C,$C6,$C6,$7C,$C6,$C6,$7C,$00 ; 8
    57  e339 7cc6c67e06067c00   !byte $7C,$C6,$C6,$7E,$06,$06,$7C,$00 ; 9
    58  e341 0018180000181800   !byte $00,$18,$18,$00,$00,$18,$18,$00 ; :
    59  e349 0018180000181830   !byte $00,$18,$18,$00,$00,$18,$18,$30 ; ;
    60  e351 0c18306030180c00   !byte $0C,$18,$30,$60,$30,$18,$0C,$00 ; <
    61  e359 00007e007e000000   !byte $00,$00,$7E,$00,$7E,$00,$00,$00 ; =
    62  e361 30180c060c183000   !byte $30,$18,$0C,$06,$0C,$18,$30,$00 ; >
    63  e369 3c660c1818001800   !byte $3C,$66,$0C,$18,$18,$00,$18,$00 ; ?
    64  e371 7cc6dededec07e00   !byte $7C,$C6,$DE,$DE,$DE,$C0,$7E,$00 ; @
    65  e379 386cc6c6fec6c600   !byte $38,$6C,$C6,$C6,$FE,$C6,$C6,$00 ; A
    66  e381 fcc6c6fcc6c6fc00   !byte $FC,$C6,$C6,$FC,$C6,$C6,$FC,$00 ; B
    67  e389 7cc6c0c0c0c67c00   !byte $7C,$C6,$C0,$C0,$C0,$C6,$7C,$00 ; C
    68  e391 f8ccc6c6c6ccf800   !byte $F8,$CC,$C6,$C6,$C6,$CC,$F8,$00 ; D
    69  e399 fec0c0f8c0c0fe00   !byte $FE,$C0,$C0,$F8,$C0,$C0,$FE,$00 ; E
    70  e3a1 fec0c0f8c0c0c000   !byte $FE,$C0,$C0,$F8,$C0,$C0,$C0,$00 ; F
    71  e3a9 7cc6c0c0cec67c00   !byte $7C,$C6,$C0,$C0,$CE,$C6,$7C,$00 ; G
    72  e3b1 c6c6c6fec6c6c600   !byte $C6,$C6,$C6,$FE,$C6,$C6,$C6,$00 ; H
    73  e3b9 7e18181818187e00   !byte $7E,$18,$18,$18,$18,$18,$7E,$00 ; I
    74  e3c1 0606060606c67c00   !byte $06,$06,$06,$06,$06,$C6,$7C,$00 ; J
    75  e3c9 c6ccd8f0d8ccc600   !byte $C6,$CC,$D8,$F0,$D8,$CC,$C6,$00 ; K
    76  e3d1 c0c0c0c0c0c0fe00   !byte $C0,$C0,$C0,$C0,$C0,$C0,$FE,$00 ; L
    77  e3d9 c6eefefed6c6c600   !byte $C6,$EE,$FE,$FE,$D6,$C6,$C6,$00 ; M
    78  e3e1 c6e6f6decec6c600   !byte $C6,$E6,$F6,$DE,$CE,$C6,$C6,$00 ; N
    79  e3e9 7cc6c6c6c6c67c00   !byte $7C,$C6,$C6,$C6,$C6,$C6,$7C,$00 ; O
    80  e3f1 fcc6c6fcc0c0c000   !byte $FC,$C6,$C6,$FC,$C0,$C0,$C0,$00 ; P
    81  e3f9 7cc6c6c6d6de7c06   !byte $7C,$C6,$C6,$C6,$D6,$DE,$7C,$06 ; Q
    82  e401 fcc6c6fcd8ccc600   !byte $FC,$C6,$C6,$FC,$D8,$CC,$C6,$00 ; R
    83  e409 7cc6c07c06c67c00   !byte $7C,$C6,$C0,$7C,$06,$C6,$7C,$00 ; S
    84  e411 ff18181818181800   !byte $FF,$18,$18,$18,$18,$18,$18,$00 ; T
    85  e419 c6c6c6c6c6c6fe00   !byte $C6,$C6,$C6,$C6,$C6,$C6,$FE,$00 ; U
    86  e421 c6c6c6c6c67c3800   !byte $C6,$C6,$C6,$C6,$C6,$7C,$38,$00 ; V
    87  e429 c6c6c6c6d6fe6c00   !byte $C6,$C6,$C6,$C6,$D6,$FE,$6C,$00 ; W
    88  e431 c6c66c386cc6c600   !byte $C6,$C6,$6C,$38,$6C,$C6,$C6,$00 ; X
    89  e439 c6c6c67c1830e000   !byte $C6,$C6,$C6,$7C,$18,$30,$E0,$00 ; Y
    90  e441 fe060c183060fe00   !byte $FE,$06,$0C,$18,$30,$60,$FE,$00 ; Z
    91  e449 3c30303030303c00   !byte $3C,$30,$30,$30,$30,$30,$3C,$00 ; [
    92  e451 c06030180c060200   !byte $C0,$60,$30,$18,$0C,$06,$02,$00 ; \
    93  e459 3c0c0c0c0c0c3c00   !byte $3C,$0C,$0C,$0C,$0C,$0C,$3C,$00 ; ]
    94  e461 10386cc600000000   !byte $10,$38,$6C,$C6,$00,$00,$00,$00 ; ^
    95  e469 00000000000000ff   !byte $00,$00,$00,$00,$00,$00,$00,$FF ; _
    96  e471 18180c0000000000   !byte $18,$18,$0C,$00,$00,$00,$00,$00 ; `
    97  e479 00007c067ec67e00   !byte $00,$00,$7C,$06,$7E,$C6,$7E,$00 ; a
    98  e481 c0c0c0fcc6c6fc00   !byte $C0,$C0,$C0,$FC,$C6,$C6,$FC,$00 ; b
    99  e489 00007cc6c0c67c00   !byte $00,$00,$7C,$C6,$C0,$C6,$7C,$00 ; c
   100  e491 0606067ec6c67e00   !byte $06,$06,$06,$7E,$C6,$C6,$7E,$00 ; d
   101  e499 00007cc6fec07c00   !byte $00,$00,$7C,$C6,$FE,$C0,$7C,$00 ; e
   102  e4a1 1c36307830307800   !byte $1C,$36,$30,$78,$30,$30,$78,$00 ; f
   103  e4a9 00007ec6c67e06fc   !byte $00,$00,$7E,$C6,$C6,$7E,$06,$FC ; g
   104  e4b1 c0c0fcc6c6c6c600   !byte $C0,$C0,$FC,$C6,$C6,$C6,$C6,$00 ; h
   105  e4b9 1800381818183c00   !byte $18,$00,$38,$18,$18,$18,$3C,$00 ; i
   106  e4c1 060006060606c67c   !byte $06,$00,$06,$06,$06,$06,$C6,$7C ; j
   107  e4c9 c0c0ccd8f8ccc600   !byte $C0,$C0,$CC,$D8,$F8,$CC,$C6,$00 ; k
   108  e4d1 3818181818183c00   !byte $38,$18,$18,$18,$18,$18,$3C,$00 ; l
   109  e4d9 0000ccfefed6d600   !byte $00,$00,$CC,$FE,$FE,$D6,$D6,$00 ; m
   110  e4e1 0000fcc6c6c6c600   !byte $00,$00,$FC,$C6,$C6,$C6,$C6,$00 ; n
   111  e4e9 00007cc6c6c67c00   !byte $00,$00,$7C,$C6,$C6,$C6,$7C,$00 ; o
   112  e4f1 0000fcc6c6fcc0c0   !byte $00,$00,$FC,$C6,$C6,$FC,$C0,$C0 ; p
   113  e4f9 00007ec6c67e0606   !byte $00,$00,$7E,$C6,$C6,$7E,$06,$06 ; q
   114  e501 0000fcc6c0c0c000   !byte $00,$00,$FC,$C6,$C0,$C0,$C0,$00 ; r
   115  e509 00007ec07c06fc00   !byte $00,$00,$7E,$C0,$7C,$06,$FC,$00 ; s
   116  e511 18187e1818180e00   !byte $18,$18,$7E,$18,$18,$18,$0E,$00 ; t
   117  e519 0000c6c6c6c67e00   !byte $00,$00,$C6,$C6,$C6,$C6,$7E,$00 ; u
   118  e521 0000c6c6c67c3800   !byte $00,$00,$C6,$C6,$C6,$7C,$38,$00 ; v
   119  e529 0000c6c6d6fe6c00   !byte $00,$00,$C6,$C6,$D6,$FE,$6C,$00 ; w
   120  e531 0000c66c386cc600   !byte $00,$00,$C6,$6C,$38,$6C,$C6,$00 ; x
   121  e539 0000c6c6c67e06fc   !byte $00,$00,$C6,$C6,$C6,$7E,$06,$FC ; y
   122  e541 0000fe0c3860fe00   !byte $00,$00,$FE,$0C,$38,$60,$FE,$00 ; z
   123  e549 0e18187018180e00   !byte $0E,$18,$18,$70,$18,$18,$0E,$00 ; {
   124  e551 1818180018181800   !byte $18,$18,$18,$00,$18,$18,$18,$00 ; |
   125  e559 7018180e18187000   !byte $70,$18,$18,$0E,$18,$18,$70,$00 ; }
   126  e561 76dc000000000000   !byte $76,$DC,$00,$00,$00,$00,$00,$00 ; ~

; ******** Source: ../lib\gfx\tms9918.asm
    16  e569 ffffffffffffffff   
    17                          
    18                          HAVE_TMS9918 = 1
    19                          
    20                          ; -------------------------
    21                          ; Constants
    22                          ; -------------------------
    23                          !ifndef TMS9918_IO_PORT { TMS9918_IO_PORT = $10
    24                                  !warn "TMS9918_IO_PORT not provided. Defaulting to ", TMS9918_IO_PORT
    25                          }
    26                          
    27                          !ifndef TMS9918_ZP_START { TMS9918_ZP_START = $30
    28                                  !warn "TMS9918_ZP_START not provided. Defaulting to ", TMS9918_ZP_START
    29                          }
    30                          
    31                          !ifndef TMS9918_RAM_START { TMS9918_RAM_START = $7ba0
    32                                  !warn "TMS9918_RAM_START not provided. Defaulting to ", TMS9918_RAM_START
    33                          }
    34                          
    35                          ; -----------------------------------------------------------------------------
    36                          ; Zero page
    37                          ; -----------------------------------------------------------------------------
    38                          TMS_TMP_ADDRESS         = TMS9918_ZP_START      ; 2 bytes
    39                          TMS9918_ZP_SIZE         = 2                     ; LAST ZP ADDRESS
    40                          
    41                          ; -----------------------------------------------------------------------------
    42                          ; High RAM
    43                          ; -----------------------------------------------------------------------------
    44                          .TMS9918_REG0_SHADOW_ADDR = TMS9918_RAM_START
    45                          .TMS9918_REG1_SHADOW_ADDR = TMS9918_RAM_START + 1
    46                          
    47                          TMS9918_CONSOLE_X         = TMS9918_RAM_START + 2
    48                          TMS9918_CONSOLE_Y         = TMS9918_RAM_START + 3
    49                          TMS9918_CONSOLE_SIZE_X    = TMS9918_RAM_START + 4
    50                          TMS9918_CONSOLE_LINE_LEN  = TMS9918_RAM_START + 5
    51                          .TMS9918_REGX             = TMS9918_RAM_START + 6
    52                          .TMS9918_REGY             = TMS9918_RAM_START + 7
    53                          .TMS9918_TMP_READ_ROW     = TMS9918_RAM_START + 8
    54                          .TMS9918_TMP_WRITE_ROW    = TMS9918_RAM_START + 9
    55                          
    56                          TMS9918_TMP_BUFFER        = TMS9918_RAM_START + 10 ; 40 bytes 
    57                          TMS9918_RAM_SIZE          = 50
    58                          
    59                          
    60                          
    61                          !if TMS9918_ZP_END < (TMS9918_ZP_START + TMS9918_ZP_SIZE) {
    62                          	!error "TMS9918_ZP requires ",TMS9918_ZP_SIZE," bytes. Allocated ",TMS9918_ZP_END - TMS9918_ZP_START
    63                          }
    64                          
    65                          !if TMS9918_RAM_END < (TMS9918_RAM_START + TMS9918_RAM_SIZE) {
    66                          	!error "TMS9918_RAM requires ",.TMS9918_RAM_SIZE," bytes. Allocated ",TMS9918_RAM_END - TMS9918_RAM_START
    67                          }
    68                          
    69                          
    70                          ; IO Ports
    71                          TMS9918_RAM     = IO_PORT_BASE_ADDRESS | TMS9918_IO_PORT
    72                          TMS9918_REG     = IO_PORT_BASE_ADDRESS | TMS9918_IO_PORT | $01
    73                          
    74                          
    75                          ; -----------------------------------------------------------------------------
    76                          ; VRAM addresses
    77                          ; -----------------------------------------------------------------------------
    78                          TMS_VRAM_NAME_ADDRESS           = $3800
    79                          TMS_VRAM_COLOR_ADDRESS          = $0000
    80                          TMS_VRAM_PATT_ADDRESS           = $2000
    81                          TMS_VRAM_SPRITE_ATTR_ADDRESS    = $3B00
    82                          TMS_VRAM_SPRITE_PATT_ADDRESS    = $1800
    83                          
    84                          ; -----------------------------------------------------------------------------
    85                          ; Register values
    86                          ; -----------------------------------------------------------------------------
    87                          TMS_R0_MODE_GRAPHICS_I          = $00
    88                          TMS_R0_MODE_GRAPHICS_II         = $02
    89                          TMS_R0_MODE_MULTICOLOR          = $00
    90                          TMS_R0_MODE_TEXT                = $00
    91                          TMS_R0_EXT_VDP_ENABLE           = $01
    92                          TMS_R0_EXT_VDP_DISABLE          = $00
    93                          
    94                          TMS_R1_RAM_16K                  = $80
    95                          TMS_R1_RAM_4K                   = $00
    96                          TMS_R1_DISP_BLANK               = $00
    97                          TMS_R1_DISP_ACTIVE              = $40
    98                          TMS_R1_INT_ENABLE               = $20
    99                          TMS_R1_INT_DISABLE              = $00
   100                          TMS_R1_MODE_GRAPHICS_I          = $00
   101                          TMS_R1_MODE_GRAPHICS_II         = $00
   102                          TMS_R1_MODE_MULTICOLOR          = $08
   103                          TMS_R1_MODE_TEXT                = $10
   104                          TMS_R1_SPRITE_8                 = $00
   105                          TMS_R1_SPRITE_16                = $02
   106                          TMS_R1_SPRITE_MAG1              = $00
   107                          TMS_R1_SPRITE_MAG2              = $01
   108                          
   109                          ; -----------------------------------------------------------------------------
   110                          ; Color palette
   111                          ; -----------------------------------------------------------------------------
   112                          TMS_TRANSPARENT         = $00
   113                          TMS_BLACK               = $01
   114                          TMS_MED_GREEN           = $02
   115                          TMS_LT_GREEN            = $03
   116                          TMS_DK_BLUE             = $04
   117                          TMS_LT_BLUE             = $05
   118                          TMS_DK_RED              = $06
   119                          TMS_CYAN                = $07
   120                          TMS_MED_RED             = $08
   121                          TMS_LT_RED              = $09
   122                          TMS_DK_YELLOW           = $0a
   123                          TMS_LT_YELLOW           = $0b
   124                          TMS_DK_GREEN            = $0c
   125                          TMS_MAGENTA             = $0d
   126                          TMS_GREY                = $0e
   127                          TMS_WHITE               = $0f
   128                          
   129                          TMS_GFX_TILE_WIDTH      = 8
   130                          TMS_GFX_TILE_HEIGHT     = 8
   131                          TMS_GFX_TILES_X         = 32
   132                          TMS_GFX_TILES_Y         = 24
   133                          TMS_GFX_PIXELS_X        = TMS_GFX_TILES_X * TMS_GFX_TILE_WIDTH
   134                          TMS_GFX_PIXELS_Y        = TMS_GFX_TILES_Y * TMS_GFX_TILE_HEIGHT
   135                          
   136                          TMS_TXT_TILE_WIDTH      = 6
   137                          TMS_TXT_TILE_HEIGHT     = 8
   138                          TMS_TXT_TILES_X         = 40
   139                          TMS_TXT_TILES_Y         = 24
   140                          TMS_TXT_PIXELS_X        = TMS_TXT_TILES_X * TMS_TXT_TILE_WIDTH
   141                          TMS_TXT_PIXELS_Y        = TMS_TXT_TILES_Y * TMS_TXT_TILE_HEIGHT
   142                          
   143                          TMS_SPRITE_SIZE         = 8
   144                          TMS_SPRITE_SIZE2X       = TMS_SPRITE_SIZE * 2
   145                          
   146                          !ifndef TMS_MODEL {
   147                          	!warn "Set TMS_MODEL to one of: 9918, 9929. Defaulting to 9918"
   148                          	TMS_MODEL = 9918
   149                          } 
   150                          
   151                          ; -------------------------
   152                          ; Constants
   153                          ; -------------------------
   154                          
   155                          !if TMS_MODEL = 9918 {
   156                          	TMS_FPS = 60
   157                          } else { !if TMS_MODEL = 9929 {
   158                          	TMS_FPS = 50
   159                          } else {
   160                          	!error "Unknown TMS_MODEL. Must be one of: 9918 or 9929"
   161                          }}
   162                          
   163                          ; -----------------------------------------------------------------------------
   164                          ; Default register values
   165                          ; -----------------------------------------------------------------------------
   166                          TMS_REGISTER_DATA:
   167  e571 00                 !byte TMS_R0_EXT_VDP_DISABLE
   168  e572 80                 !byte TMS_R1_RAM_16K
   169  e573 0e                 !byte TMS_VRAM_NAME_ADDRESS >> 10
   170  e574 00                 !byte TMS_VRAM_COLOR_ADDRESS >> 6
   171  e575 04                 !byte TMS_VRAM_PATT_ADDRESS >> 11
   172  e576 76                 !byte TMS_VRAM_SPRITE_ATTR_ADDRESS >> 7
   173  e577 03                 !byte TMS_VRAM_SPRITE_PATT_ADDRESS >> 11
   174  e578 11                 !byte TMS_BLACK << 4 | TMS_BLACK
   175                          
   176                          
   177                          ; -----------------------------------------------------------------------------
   178                          ; Delay subroutines required for TMS9918 CPU access windows
   179                          ; -----------------------------------------------------------------------------
   180                          ;      CONDITION          MODE    VDP DELAY       WAIT TIME          TOTAL TIME
   181                          ; -----------------------------------------------------------------------------
   182                          ;  Active Display Area   Text        2uS          0 - 1.1uS           2 - 3.1uS      
   183                          ;  Active Display Area   GFX I, II   2uS          0 - 5.95uS          2 - 8uS      
   184                          ;  4300uS after VSYNC    All         2uS             0uS                2uS      
   185                          ;  Reg 1 Blank Bit 0     All         2uS             0uS                2uS      
   186                          ;  Active Display Area   Multicolor  2uS          0 - 1.5uS           2 - 3.5uS      
   187                          ; -----------------------------------------------------------------------------
   188                          _tmsWaitData:
   189  e579 ea                         nop
   190  e57a ea                         nop
   191  e57b ea                         nop
   192  e57c ea                         nop
   193  e57d ea                         nop
   194  e57e ea                         nop
   195  e57f ea                         nop
   196  e580 ea                         nop
   197  e581 ea                         nop
   198                          _tmsWaitReg:
   199  e582 ea                         nop
   200  e583 ea                         nop
   201  e584 ea                         nop
   202  e585 60                         rts
   203                          
   204                          tmsSetAddressNextRow:
   205  e586 a524                       lda TMS_TMP_ADDRESS
   206  e588 18                         clc
   207  e589 6920                       adc #32
   208  e58b 8524                       sta TMS_TMP_ADDRESS
   209  e58d 9002                       bcc +
   210  e58f e625                       inc TMS_TMP_ADDRESS + 1
   211                          +
   212  e591 60                         rts
   213                          
   214                          ; -----------------------------------------------------------------------------
   215                          ; tmsSetAddressWrite: Set an address in the TMS9918 
   216                          ; -----------------------------------------------------------------------------
   217                          ; TMS_TMP_ADDRESS: Address to set
   218                          ; -----------------------------------------------------------------------------
   219                          tmsSetAddressWrite:
   220  e592 08                         php
   221  e593 78                         sei                     ; we can't be interrupted here
   222  e594 a524                       lda TMS_TMP_ADDRESS
   223  e596 8d117f                     sta TMS9918_REG
   224  e599 2082e5                     +tmsWaitReg
   225  e59c a525                       lda TMS_TMP_ADDRESS + 1
   226  e59e 0940                       ora #$40
   227  e5a0 8d117f                     sta TMS9918_REG
   228  e5a3 2082e5                     +tmsWaitReg
   229  e5a6 28                         plp
   230  e5a7 60                         rts
   231                          
   232                          ; -----------------------------------------------------------------------------
   233                          ; tmsSetAddressRead: Set an address to read from the TMS9918 
   234                          ; -----------------------------------------------------------------------------
   235                          ; TMS_TMP_ADDRESS: Address to read
   236                          ; -----------------------------------------------------------------------------
   237                          tmsSetAddressRead:
   238  e5a8 08                         php
   239  e5a9 78                         sei                     ; we can't be interrupted here
   240  e5aa a524                       lda TMS_TMP_ADDRESS
   241  e5ac 8d117f                     sta TMS9918_REG
   242  e5af 2082e5                     +tmsWaitReg
   243  e5b2 a525                       lda TMS_TMP_ADDRESS + 1
   244  e5b4 8d117f                     sta TMS9918_REG
   245  e5b7 2082e5                     +tmsWaitReg
   246  e5ba 28                         plp
   247  e5bb 60                         rts
   248                          
   249                          
   250                          ; -----------------------------------------------------------------------------
   251                          ; tmsSetRegister: Set a register value
   252                          ; -----------------------------------------------------------------------------
   253                          ; Inputs:
   254                          ;  A: The value to set
   255                          ;  X: The register (0 - 7)
   256                          ; -----------------------------------------------------------------------------
   257                          tmsSetRegister:
   258  e5bc 08                         php
   259  e5bd 78                         sei             ; we can't be interrupted here
   260  e5be 8d117f                     sta TMS9918_REG
   261  e5c1 2082e5                     +tmsWaitReg
   262  e5c4 8a                         txa
   263  e5c5 0980                       ora #$80
   264  e5c7 8d117f                     sta TMS9918_REG
   265  e5ca 2082e5                     +tmsWaitReg
   266  e5cd 28                         plp
   267  e5ce 60                         rts
   268                          
   269                          ; -----------------------------------------------------------------------------
   270                          ; tmsSetBackground: Set the background color (R7)
   271                          ; -----------------------------------------------------------------------------
   272                          ; Outputs:
   273                          ;  A: Color. High nibble = FG. Low nibble = BG
   274                          ; -----------------------------------------------------------------------------
   275                          tmsSetBackground:
   276  e5cf a207                       ldx #7
   277  e5d1 d0e9                       bne tmsSetRegister
   278                          
   279                          ; -----------------------------------------------------------------------------
   280                          ; tmsReg0Set: Set register 0
   281                          ; -----------------------------------------------------------------------------
   282                          ; Outputs:
   283                          ;  A: Field values to set (will be OR'd with existing Reg0)
   284                          ; -----------------------------------------------------------------------------
   285                          tmsReg0SetFields:
   286  e5d3 0d267b                     ora .TMS9918_REG0_SHADOW_ADDR
   287                          .tmsReg0SetFields:
   288  e5d6 8d267b                     sta .TMS9918_REG0_SHADOW_ADDR
   289  e5d9 a200                       ldx #0
   290  e5db f0df                       beq tmsSetRegister
   291                                  
   292                          ; -----------------------------------------------------------------------------
   293                          ; tmsReg0Clear: Clear register 0 
   294                          ; -----------------------------------------------------------------------------
   295                          ; Outputs:
   296                          ;  A: Field values to cleared (will be XOR'd with existing Reg0)
   297                          ; -----------------------------------------------------------------------------
   298                          tmsReg0ClearFields:
   299  e5dd 49ff                       eor #$ff
   300  e5df 2d267b                     and .TMS9918_REG0_SHADOW_ADDR
   301  e5e2 4cd6e5                     jmp .tmsReg0SetFields
   302                          
   303                          
   304                          ; -----------------------------------------------------------------------------
   305                          ; tmsReg1Set: Set register 0
   306                          ; -----------------------------------------------------------------------------
   307                          ; Outputs:
   308                          ;  A: Field values to set (will be OR'd with existing Reg1)
   309                          ; -----------------------------------------------------------------------------
   310                          tmsReg1SetFields:
   311  e5e5 0d277b                     ora .TMS9918_REG1_SHADOW_ADDR
   312                          .tmsReg1SetFields:
   313  e5e8 8d277b                     sta .TMS9918_REG1_SHADOW_ADDR
   314  e5eb a201                       ldx #1
   315  e5ed d0cd                       bne tmsSetRegister
   316                                  
   317                          ; -----------------------------------------------------------------------------
   318                          ; tmsReg1Clear: Clear register 1
   319                          ; -----------------------------------------------------------------------------
   320                          ; Outputs:
   321                          ;  A: Field values to cleared (will be XOR'd with existing Reg1)
   322                          ; -----------------------------------------------------------------------------
   323                          tmsReg1ClearFields:
   324  e5ef 49ff                       eor #$ff
   325  e5f1 2d277b                     and .TMS9918_REG1_SHADOW_ADDR
   326  e5f4 4ce8e5                     jmp .tmsReg1SetFields
   327                          
   328                          
   329                          ; -----------------------------------------------------------------------------
   330                          ; tmsModeReset: Reset graphics Mode
   331                          ; -----------------------------------------------------------------------------
   332                          tmsModeReset:
   333  e5f7 a903                       lda #$03
   334  e5f9 20dde5                     jsr tmsReg0ClearFields
   335                          
   336  e5fc a918                       lda #$18
   337  e5fe 20efe5                     jsr tmsReg1ClearFields
   338                          
   339                                  ; if we were in Graphics II, then we need to reset
   340                                  ; the color and pattern table addresses
   341  e601 a900                       lda #<(TMS_VRAM_COLOR_ADDRESS >> 6)
   342  e603 a203                       ldx #3
   343  e605 20bce5                     jsr tmsSetRegister
   344                          
   345  e608 a904                       lda #<(TMS_VRAM_PATT_ADDRESS >> 11)
   346  e60a a204                       ldx #4
   347  e60c 20bce5                     jsr tmsSetRegister
   348  e60f 60                         rts
   349                          
   350                          ; -----------------------------------------------------------------------------
   351                          ; tmsModeGraphicsI: Set up for Graphics I mode
   352                          ; -----------------------------------------------------------------------------
   353                          tmsModeGraphicsI:
   354  e610 20f7e5                     jsr tmsModeReset
   355                          
   356  e613 a900                       lda #TMS_R0_MODE_GRAPHICS_I
   357  e615 20d3e5                     jsr tmsReg0SetFields
   358                          
   359  e618 a900                       lda #TMS_R1_MODE_GRAPHICS_I
   360  e61a 20e5e5                     jsr tmsReg1SetFields
   361                          
   362  e61d a920                       lda #32
   363  e61f 8d2a7b                     sta TMS9918_CONSOLE_SIZE_X
   364  e622 60                         rts
   365                          
   366                          ; -----------------------------------------------------------------------------
   367                          ; tmsModeBitmap: Set up for Graphics II mode and set up name table for bitmap
   368                          ; -----------------------------------------------------------------------------
   369                          tmsModeBitmap:
   370  e623 08                         php
   371  e624 78                         sei
   372                                          ; clear the name table
   373  e625 0878a9008d117f20...        +tmsSetAddrNameTable
   374  e638 a003                       ldy #3
   375  e63a a900                       lda #0
   376                          -
   377  e63c 8d107f2079e5               +tmsPut
   378  e642 1a                         inc
   379  e643 d0f7                       bne -
   380  e645 88                         dey
   381  e646 d0f4                       bne -
   382                          
   383                                  ; set all color table entries to transparent
   384  e648 0878a9008d117f20...        +tmsSetAddrColorTable
   385  e65b a9f1                       +tmsColorFgBg TMS_WHITE, TMS_BLACK
   386  e65d 201be7                     jsr _tmsSendKb
   387  e660 201be7                     jsr _tmsSendKb
   388  e663 201be7                     jsr _tmsSendKb
   389  e666 201be7                     jsr _tmsSendKb
   390  e669 201be7                     jsr _tmsSendKb
   391  e66c 201be7                     jsr _tmsSendKb        
   392                          
   393                                  ; clear the pattern table
   394  e66f 0878a9008d117f20...        +tmsSetAddrPattTable
   395  e682 a900                       lda #0
   396  e684 201be7                     jsr _tmsSendKb
   397  e687 201be7                     jsr _tmsSendKb
   398  e68a 201be7                     jsr _tmsSendKb
   399  e68d 201be7                     jsr _tmsSendKb
   400  e690 201be7                     jsr _tmsSendKb
   401  e693 201be7                     jsr _tmsSendKb
   402                          
   403  e696 28                         plp
   404                                  
   405                                  ; flow on through
   406                          
   407                          ; -----------------------------------------------------------------------------
   408                          ; tmsModeGraphicsII: Set up for Graphics II mode
   409                          ; -----------------------------------------------------------------------------
   410                          tmsModeGraphicsII:
   411  e697 20f7e5                     jsr tmsModeReset
   412                          
   413  e69a a902                       lda #TMS_R0_MODE_GRAPHICS_II
   414  e69c 20d3e5                     jsr tmsReg0SetFields
   415                          
   416  e69f a900                       lda #TMS_R1_MODE_GRAPHICS_II
   417  e6a1 20e5e5                     jsr tmsReg1SetFields
   418                          
   419                                  ; in Graphics II, Registers 3 and 4 work differently
   420                                  ;
   421                                  ; reg3 - Color table
   422                                  ;   $7f = $0000
   423                                  ;   $ff = $2000
   424                                  ;
   425                                  ; reg4 - Pattern table
   426                                  ;  $03 = $0000
   427                                  ;  $07 = $2000
   428                          
   429                                  ; set color table to $0000
   430  e6a4 a97f                       lda #$7f
   431  e6a6 a203                       ldx #3
   432  e6a8 20bce5                     jsr tmsSetRegister
   433                          
   434                                  ; set pattern table to $2000
   435  e6ab a907                       lda #$07
   436  e6ad a204                       ldx #4
   437  e6af 20bce5                     jsr tmsSetRegister
   438                          
   439  e6b2 a920                       lda #32
   440  e6b4 8d2a7b                     sta TMS9918_CONSOLE_SIZE_X
   441                          
   442  e6b7 60                         rts
   443                          
   444                          ; -----------------------------------------------------------------------------
   445                          ; tmsModeText: Set up for Text mode
   446                          ; -----------------------------------------------------------------------------
   447                          tmsModeText:
   448  e6b8 20f7e5                     jsr tmsModeReset
   449                          
   450  e6bb a900                       lda #TMS_R0_MODE_TEXT
   451  e6bd 20d3e5                     jsr tmsReg0SetFields
   452                          
   453  e6c0 a910                       lda #TMS_R1_MODE_TEXT
   454  e6c2 20e5e5                     jsr tmsReg1SetFields
   455                          
   456  e6c5 a928                       lda #40
   457  e6c7 8d2a7b                     sta TMS9918_CONSOLE_SIZE_X
   458                          
   459  e6ca 60                         rts
   460                          
   461                          ; -----------------------------------------------------------------------------
   462                          ; tmsModeMulticolor: Set up for Multicolor mode
   463                          ; -----------------------------------------------------------------------------
   464                          tmsModeMulticolor:
   465  e6cb 20f7e5                     jsr tmsModeReset
   466                          
   467  e6ce a900                       lda #TMS_R0_MODE_MULTICOLOR
   468  e6d0 20d3e5                     jsr tmsReg0SetFields
   469                          
   470  e6d3 a908                       lda #TMS_R1_MODE_MULTICOLOR
   471  e6d5 20e5e5                     jsr tmsReg1SetFields
   472  e6d8 60                         rts
   473                          
   474                          ; -----------------------------------------------------------------------------
   475                          ; tmsInit: Initialise the registers
   476                          ; -----------------------------------------------------------------------------
   477                          tmsInit:
   478  e6d9 08                         php
   479  e6da 78                         sei                             ; we can't be interrupted here
   480  e6db ad71e5                     lda TMS_REGISTER_DATA
   481  e6de 8d267b                     sta .TMS9918_REG0_SHADOW_ADDR
   482  e6e1 ad72e5                     lda TMS_REGISTER_DATA + 1
   483  e6e4 8d277b                     sta .TMS9918_REG1_SHADOW_ADDR
   484                          
   485  e6e7 a900                       lda #0
   486  e6e9 8d287b                     sta TMS9918_CONSOLE_X
   487  e6ec 8d297b                     sta TMS9918_CONSOLE_Y
   488                          
   489                                  ; set up the registers
   490  e6ef a200                       ldx #0
   491                          
   492                          @regLoop
   493  e6f1 bd71e5                             lda TMS_REGISTER_DATA, x
   494  e6f4 8d117f                             sta TMS9918_REG
   495  e6f7 2082e5                             +tmsWaitReg
   496  e6fa 8a                                 txa
   497  e6fb 0980                               ora #$80
   498  e6fd 8d117f                             sta TMS9918_REG
   499  e700 2082e5                             +tmsWaitReg
   500  e703 e8                                 inx
   501  e704 e008                               cpx #8
   502  e706 d0e9                               bne @regLoop
   503                                  
   504  e708 2010e6                     jsr tmsModeGraphicsI
   505                          
   506                                  ; load all data into VRAM
   507  e70b 206de7                     jsr tmsInitPattTable
   508                          
   509  e70e 20ade7                     jsr tmsInitTextTable
   510                                  
   511  e711 a917                       +tmsColorFgBg TMS_BLACK, TMS_CYAN
   512  e713 20d1e7                     jsr tmsInitEntireColorTable
   513                          
   514  e716 20f2e7                     jsr tmsInitSpriteTable
   515                          
   516  e719 28                         plp
   517                                  
   518  e71a 60                         rts
   519                          
   520                          ; -----------------------------------------------------------------------------
   521                          ; _tmsSendPage: Send A for a kilobyte
   522                          ; -----------------------------------------------------------------------------
   523                          _tmsSendKb
   524  e71b 2024e7                     jsr _tmsSendPage
   525  e71e 2024e7                     jsr _tmsSendPage
   526  e721 2024e7                     jsr _tmsSendPage
   527                                  ; flow through
   528                                  
   529                          ; -----------------------------------------------------------------------------
   530                          ; _tmsSendPage: Send A for a whole page
   531                          ; -----------------------------------------------------------------------------
   532                          _tmsSendPage:
   533  e724 a220                       ldx #32
   534                          _tmsSendX8:
   535  e726 8d107f2079e5               +tmsPut
   536  e72c 8d107f2079e5               +tmsPut
   537  e732 8d107f2079e5               +tmsPut
   538  e738 8d107f2079e5               +tmsPut
   539  e73e 8d107f2079e5               +tmsPut
   540  e744 8d107f2079e5               +tmsPut
   541  e74a 8d107f2079e5               +tmsPut
   542  e750 8d107f2079e5               +tmsPut
   543  e756 ca                         dex
   544  e757 d0cd                       bne _tmsSendX8
   545  e759 60                         rts
   546                          
   547                          ; -----------------------------------------------------------------------------
   548                          ; _tmsSendEmptyPage: Send an empty page of data
   549                          ; -----------------------------------------------------------------------------
   550                          _tmsSendEmptyPage:
   551  e75a a900                       lda #0
   552  e75c f0c6                       beq _tmsSendPage ; rts in here
   553                          
   554                          ; -----------------------------------------------------------------------------
   555                          ; tmsSendBytes: Send bytes to the TMS (up to 1 page)
   556                          ; -----------------------------------------------------------------------------
   557                          ; Inputs:
   558                          ;   TMS_TMP_ADDRESS:    Holds source address
   559                          ;   X:                  Number of bytes (1 to 256)
   560                          ; -----------------------------------------------------------------------------
   561                          tmsSendBytes:
   562  e75e a000                       ldy #0
   563                          -
   564  e760 b124                       lda (TMS_TMP_ADDRESS), Y
   565  e762 8d107f2079e5               +tmsPut
   566  e768 c8                         iny
   567  e769 ca                         dex
   568  e76a d0f4                       bne -
   569  e76c 60                         rts
   570                          
   571                          ; -----------------------------------------------------------------------------
   572                          ; tmsInitPattTable: Initialise the pattern table
   573                          ; -----------------------------------------------------------------------------
   574                          tmsInitPattTable:
   575                                  
   576                          
   577                                  ; pattern table
   578  e76d 0878a9008d117f20...        +tmsSetAddrPattTable
   579                          
   580                                  ; (0 - 31) all empty
   581  e780 205ae7                     jsr _tmsSendEmptyPage
   582                          
   583  e783 a9718524a9e28525...        +tmsSendData TMS_FONT_DATA, $300
   584                          
   585                                  ; (128 - 159) all empty
   586  e7a0 205ae7                     jsr _tmsSendEmptyPage
   587                          
   588                                  ; (160 - 191) all empty
   589  e7a3 205ae7                     jsr _tmsSendEmptyPage
   590                          
   591                                  ; (192 - 223) all empty
   592  e7a6 205ae7                     jsr _tmsSendEmptyPage
   593                          
   594                                  ; (224 - 255) all empty
   595  e7a9 205ae7                     jsr _tmsSendEmptyPage
   596                          
   597                                  
   598                          
   599  e7ac 60                         rts
   600                          
   601                          ; -----------------------------------------------------------------------------
   602                          ; tmsInitTextTable: Initialise the text (tilemap) table
   603                          ; -----------------------------------------------------------------------------
   604                          tmsInitTextTable:
   605                                  
   606                          
   607                                  ; text table table
   608  e7ad 0878a9008d117f20...        +tmsSetAddrNameTable
   609                          
   610                          
   611  e7c0 18                         clc
   612  e7c1 ad2a7b                     lda TMS9918_CONSOLE_SIZE_X
   613  e7c4 6d2a7b                     adc TMS9918_CONSOLE_SIZE_X
   614  e7c7 6d2a7b                     adc TMS9918_CONSOLE_SIZE_X
   615  e7ca aa                         tax
   616  e7cb a900                       lda #0
   617  e7cd 2026e7                     jsr _tmsSendX8
   618                          
   619  e7d0 60                         rts
   620                          
   621                          
   622                          ; -----------------------------------------------------------------------------
   623                          ; tmsInitEntireColorTable: Initialise the full color table
   624                          ; -----------------------------------------------------------------------------
   625                          ; Inputs:
   626                          ;   A: Color (fg/bg) to initialise
   627                          
   628                          tmsInitEntireColorTable:
   629  e7d1 a220                       ldx #32
   630                          
   631                          ; tmsInitColorTable: Initialise the color table
   632                          
   633                          ; Inputs:
   634                          ;   A: Color (fg/bg) to initialise
   635                          ;   X: Number of elements to initialise (1 to 32)
   636                          ; -----------------------------------------------------------------------------
   637                          tmsInitColorTable:
   638                                  
   639  e7d3 48                         pha
   640                          
   641                                  ; color table
   642  e7d4 0878a9008d117f20...        +tmsSetAddrColorTable
   643                          
   644  e7e7 68                         pla
   645                          -
   646  e7e8 8d107f2079e5               +tmsPut
   647  e7ee ca                         dex
   648  e7ef d0f7                       bne -
   649                          
   650  e7f1 60                         rts
   651                          
   652                          ; -----------------------------------------------------------------------------
   653                          ; tmsInitSpriteTable: Initialise the sprite table
   654                          ; -----------------------------------------------------------------------------
   655                          tmsInitSpriteTable:
   656                                  
   657                          
   658                                  ; sprites table
   659  e7f2 0878a9008d117f20...        +tmsSetAddrSpriteAttrTable
   660                          
   661  e805 a220                       ldx #32
   662                          -
   663                                  ; Vertical position
   664  e807 a9d08d107f2079e5           +tmsPut $D0        ; 208 ($D0) stops processing of sprites
   665  e80f a9008d107f2079e5           +tmsPut $00        ; Horizontal position
   666                          
   667                                  ; Index (A still 0)
   668  e817 8d107f2079e5               +tmsPut
   669                                  ; Early Clock / Color  (A still 0)
   670  e81d 8d107f2079e5               +tmsPut
   671  e823 ca                         dex
   672  e824 d0e1                       bne -
   673                          
   674                                  
   675                          
   676  e826 60                         rts
   677                          
   678                          ; -----------------------------------------------------------------------------
   679                          ; tmsTileXyAtPixelXy: Return tile position at pixel position
   680                          ; -----------------------------------------------------------------------------
   681                          ; Inputs:
   682                          ;  X: Pixel position X
   683                          ;  Y: Pixel position Y
   684                          ; Outputs:
   685                          ;  X: Tile position X
   686                          ;  Y: Tile position Y
   687                          ; -----------------------------------------------------------------------------
   688                          tmsTileXyAtPixelXy:
   689  e827 48                         pha
   690  e828 8a                         txa
   691  e829 4a4a4a                     +div8
   692  e82c aa                         tax
   693                          
   694  e82d 98                         tya
   695  e82e 4a4a4a                     +div8
   696  e831 a8                         tay
   697  e832 68                         pla
   698  e833 60                         rts
   699                          
   700                          ; -----------------------------------------------------------------------------
   701                          ; tmsHex8: Output an 8-bit byte as hexadecimal
   702                          ; -----------------------------------------------------------------------------
   703                          ; Inputs:
   704                          ;  A: The value to output
   705                          ; -----------------------------------------------------------------------------
   706                          tmsHex8:
   707  e834 48                 	pha
   708  e835 4a4a4a4a                   +lsr4
   709  e839 aa                 	tax
   710  e83a bd51e8             	lda .H2, x
   711  e83d 8d107f2079e5               +tmsPut 
   712  e843 68                 	pla
   713  e844 290f               	and #$0f
   714  e846 aa                 	tax
   715  e847 bd51e8             	lda .H2, x
   716  e84a 8d107f2079e5               +tmsPut 
   717                                  
   718  e850 60                 	rts
   719                          
   720  e851 3031323334353637....H2 !text "0123456789abcdef"
   721                          
   722                          
   723                          ; -----------------------------------------------------------------------------
   724                          ; tmsSetSpriteTmpAddress: Set TMS_TMP_ADDRESS for a given sprite attributes
   725                          ; -----------------------------------------------------------------------------
   726                          ; Inputs:
   727                          ;   A: sprite index (0-31)
   728                          ; -----------------------------------------------------------------------------
   729                          tmsSetSpriteTmpAddress:
   730  e861 0a                         asl
   731  e862 0a                         asl
   732  e863 8524                       sta TMS_TMP_ADDRESS
   733                          
   734  e865 a93b                       lda #>TMS_VRAM_SPRITE_ATTR_ADDRESS
   735  e867 8525                       sta TMS_TMP_ADDRESS + 1
   736  e869 60                         rts
   737                          
   738                          ; -----------------------------------------------------------------------------
   739                          ; tmsSetPosTmpAddress: Set TMS_TMP_ADDRESS for a given text position
   740                          ; -----------------------------------------------------------------------------
   741                          ; Inputs:
   742                          ;   X: X position (0 - 31)
   743                          ;   Y: Y position (0 - 23)
   744                          ; -----------------------------------------------------------------------------
   745                          tmsSetPosTmpAddress:
   746  e86a a938                       lda #>TMS_VRAM_NAME_ADDRESS
   747  e86c 8525                       sta TMS_TMP_ADDRESS + 1
   748                                  
   749                                  ; this can be better. rotate and save, perhaps
   750                          
   751  e86e 98                         tya
   752  e86f 4a4a4a                     +div8
   753  e872 18                         clc
   754  e873 6525                       adc TMS_TMP_ADDRESS + 1
   755  e875 8525                       sta TMS_TMP_ADDRESS + 1
   756  e877 98                         tya
   757  e878 2907                       and #$07
   758  e87a 0a0a0a0a0a                 +mul32
   759  e87f 8524                       sta TMS_TMP_ADDRESS
   760  e881 8a                         txa
   761  e882 0524                       ora TMS_TMP_ADDRESS
   762  e884 8524                       sta TMS_TMP_ADDRESS
   763  e886 60                         rts
   764                          
   765                          ; -----------------------------------------------------------------------------
   766                          ; tmsSetPosTmpAddressText: Set TMS_TMP_ADDRESS for a given text position
   767                          ; -----------------------------------------------------------------------------
   768                          ; Inputs:
   769                          ;   X: X position (0 - 39)
   770                          ;   Y: Y position (0 - 23)
   771                          ; -----------------------------------------------------------------------------
   772                          tmsSetPosTmpAddressText:
   773  e887 a938                       lda #>TMS_VRAM_NAME_ADDRESS
   774  e889 8525                       sta TMS_TMP_ADDRESS + 1
   775  e88b a900                       lda #<TMS_VRAM_NAME_ADDRESS
   776  e88d 8524                       sta TMS_TMP_ADDRESS
   777                          
   778                          .tmsSetPosTmpAddressTextLoop
   779  e88f c000                       cpy #0
   780  e891 f00e                       beq ++
   781  e893 18                         clc
   782  e894 a524                       lda TMS_TMP_ADDRESS
   783  e896 6928                       adc #40
   784  e898 8524                       sta TMS_TMP_ADDRESS
   785  e89a 9002                       bcc +
   786  e89c e625                       inc TMS_TMP_ADDRESS + 1
   787                          +
   788  e89e 88                         dey
   789  e89f d0ee                       bne .tmsSetPosTmpAddressTextLoop
   790                          ++
   791  e8a1 18                         clc
   792  e8a2 8a                         txa
   793  e8a3 6524                       adc TMS_TMP_ADDRESS
   794  e8a5 8524                       sta TMS_TMP_ADDRESS
   795  e8a7 9002                       bcc +
   796  e8a9 e625                       inc TMS_TMP_ADDRESS + 1
   797                          +
   798  e8ab 60                         rts
   799                          
   800                          
   801                          tmsConsoleScrollLine:
   802  e8ac a900                       lda #0
   803  e8ae 8d2f7b                     sta .TMS9918_TMP_WRITE_ROW
   804  e8b1 a901                       lda #1
   805  e8b3 8d2e7b                     sta .TMS9918_TMP_READ_ROW
   806                          .nextRow:
   807                          
   808  e8b6 ac2e7b                     ldy .TMS9918_TMP_READ_ROW
   809  e8b9 a200                       ldx #0
   810  e8bb a928                       lda #40
   811  e8bd cd2a7b                     cmp TMS9918_CONSOLE_SIZE_X
   812  e8c0 f006                       beq +
   813  e8c2 206ae8                     jsr tmsSetPosTmpAddress
   814  e8c5 4ccbe8                     jmp ++
   815                          +
   816  e8c8 2087e8                     jsr tmsSetPosTmpAddressText
   817                          ++
   818  e8cb 20a8e5                     jsr tmsSetAddressRead
   819                          
   820  e8ce 20fce8                     jsr .tmsBufferIn
   821                          
   822  e8d1 a200                       ldx #0
   823  e8d3 ac2f7b                     ldy .TMS9918_TMP_WRITE_ROW
   824  e8d6 a200                       ldx #0
   825  e8d8 a928                       lda #40
   826  e8da cd2a7b                     cmp TMS9918_CONSOLE_SIZE_X
   827  e8dd f006                       beq +
   828  e8df 206ae8                     jsr tmsSetPosTmpAddress
   829  e8e2 4ce8e8                     jmp ++
   830                          +
   831  e8e5 2087e8                     jsr tmsSetPosTmpAddressText
   832                          ++
   833  e8e8 2092e5                     jsr tmsSetAddressWrite
   834                          
   835  e8eb 200ee9                     jsr .tmsBufferOut
   836                          
   837                          
   838  e8ee ee2f7b                     inc .TMS9918_TMP_WRITE_ROW
   839  e8f1 ee2e7b                     inc .TMS9918_TMP_READ_ROW
   840                          
   841  e8f4 ad2e7b                     lda .TMS9918_TMP_READ_ROW
   842  e8f7 c919                       cmp #25
   843                          
   844  e8f9 d0bb                       bne .nextRow
   845                          
   846                          
   847                                  ; copy to buffer 32 bytes at a time, write back  24 rows for gfx, 30 "rows" for text
   848  e8fb 60                         rts
   849                          
   850                          .tmsBufferIn:
   851  e8fc a200                       ldx #0
   852                          -
   853  e8fe ad107f2079e5               +tmsGet
   854  e904 9d307b                     sta TMS9918_TMP_BUFFER, x
   855  e907 e8                         inx
   856  e908 ec2a7b                     cpx TMS9918_CONSOLE_SIZE_X
   857  e90b d0f1                       bne -
   858  e90d 60                         rts
   859                          
   860                          .tmsBufferOut:
   861  e90e a200                       ldx #0
   862                          
   863                          -
   864  e910 bd307b                     lda TMS9918_TMP_BUFFER, x
   865  e913 8d107f2079e5               +tmsPut
   866  e919 e8                         inx
   867  e91a ec2a7b                     cpx TMS9918_CONSOLE_SIZE_X
   868  e91d d0f1                       bne -
   869  e91f 60                         rts
   870                          
   871                          ; -----------------------------------------------------------------------------
   872                          ; tmsIncPosConsole: Increment console position
   873                          ; -----------------------------------------------------------------------------
   874                          tmsIncPosConsole:
   875  e920 ee287b                     inc TMS9918_CONSOLE_X
   876  e923 ad287b                     lda TMS9918_CONSOLE_X
   877  e926 cd2a7b                     cmp TMS9918_CONSOLE_SIZE_X
   878  e929 d008                       bne +
   879  e92b a900                       lda #0
   880  e92d 8d287b                     sta TMS9918_CONSOLE_X
   881  e930 ee297b                     inc TMS9918_CONSOLE_Y
   882                          +
   883  e933 ad297b                     lda TMS9918_CONSOLE_Y
   884  e936 c918                       cmp #24
   885  e938 9006                       bcc +
   886  e93a ce297b                     dec TMS9918_CONSOLE_Y
   887  e93d 4cace8                     jmp tmsConsoleScrollLine
   888                          +
   889  e940 60                         rts
   890                          
   891                          
   892                          ; -----------------------------------------------------------------------------
   893                          ; tmsDecPosConsole: Increment console position
   894                          ; -----------------------------------------------------------------------------
   895                          tmsDecPosConsole:
   896  e941 ce287b                     dec TMS9918_CONSOLE_X
   897  e944 1017                       bpl ++
   898  e946 ad2a7b                     lda TMS9918_CONSOLE_SIZE_X
   899  e949 8d287b                     sta TMS9918_CONSOLE_X
   900  e94c ce287b                     dec TMS9918_CONSOLE_X
   901  e94f a900                       lda #0
   902  e951 cd297b                     cmp TMS9918_CONSOLE_Y
   903  e954 d004                       bne +
   904  e956 8d287b                     sta TMS9918_CONSOLE_X
   905  e959 60                         rts        
   906                          +
   907  e95a ce297b                     dec TMS9918_CONSOLE_Y
   908                          ++
   909  e95d 60                         rts
   910                          
   911                          ; -----------------------------------------------------------------------------
   912                          ; tmsConsoleCls: Clear the screen and reset the console location
   913                          ; -----------------------------------------------------------------------------
   914                          tmsConsoleCls:
   915  e95e 20ade7                     jsr tmsInitTextTable
   916                          
   917                                  ; flow through
   918                          
   919                          ; -----------------------------------------------------------------------------
   920                          ; tmsConsoleHome: Set cursor position top left
   921                          ; -----------------------------------------------------------------------------
   922                          tmsConsoleHome:
   923  e961 9c287b                     stz TMS9918_CONSOLE_X
   924  e964 9c297b                     stz TMS9918_CONSOLE_Y
   925                          
   926                                  ; flow through
   927                          
   928                          ; -----------------------------------------------------------------------------
   929                          ; tmsSetPosConsole: Set cursor position to console position
   930                          ; -----------------------------------------------------------------------------
   931                          tmsSetPosConsole:
   932  e967 ae287b                     ldx TMS9918_CONSOLE_X
   933  e96a ac297b                     ldy TMS9918_CONSOLE_Y
   934                          
   935                                  ; flow through
   936                          
   937                          ; -----------------------------------------------------------------------------
   938                          ; tmsSetPosWrite: Set cursor position
   939                          ; -----------------------------------------------------------------------------
   940                          ; Inputs:
   941                          ;   X: X position (0 - 31)
   942                          ;   Y: Y position (0 - 23)
   943                          ; -----------------------------------------------------------------------------
   944                          tmsSetPosWrite:
   945  e96d a910                       lda #TMS_R1_MODE_TEXT
   946  e96f 2c277b                     bit .TMS9918_REG1_SHADOW_ADDR
   947  e972 d006                       bne tmsSetPosWriteText
   948  e974 206ae8                     jsr tmsSetPosTmpAddress
   949  e977 4c92e5                     jmp tmsSetAddressWrite
   950                          
   951                          ; -----------------------------------------------------------------------------
   952                          ; tmsSetPosWrite: Set cursor position (text mode)
   953                          ; -----------------------------------------------------------------------------
   954                          ; Inputs:
   955                          ;   X: X position (0 - 39)
   956                          ;   Y: Y position (0 - 23)
   957                          ; -----------------------------------------------------------------------------
   958                          tmsSetPosWriteText:
   959  e97a 2087e8                     jsr tmsSetPosTmpAddressText
   960  e97d 4c92e5                     jmp tmsSetAddressWrite
   961                          
   962                          ; -----------------------------------------------------------------------------
   963                          ; tmsSetPosRead: Set cursor position to read from
   964                          ; -----------------------------------------------------------------------------
   965                          ; Inputs:
   966                          ;   X: X position (0 - 31)
   967                          ;   Y: Y position (0 - 23)
   968                          ; -----------------------------------------------------------------------------
   969                          tmsSetPosRead:
   970  e980 206ae8                     jsr tmsSetPosTmpAddress
   971  e983 4ca8e5                     jmp tmsSetAddressRead
   972                          ; -----------------------------------------------------------------------------
   973                          ; tmsSetColorTmpAddressII: Set TMS_TMP_ADDRESS for a given mode II color definition
   974                          ; -----------------------------------------------------------------------------
   975                          ; Inputs:
   976                          ;   X: X position
   977                          ;   Y: Y position
   978                          ; -----------------------------------------------------------------------------
   979                          tmsSetColorTmpAddressII:
   980  e986 a900                       lda #>TMS_VRAM_COLOR_ADDRESS
   981  e988 8002                       bra .addXYToAddress
   982                          
   983                          ; -----------------------------------------------------------------------------
   984                          ; tmsSetPatternTmpAddress: Set TMS_TMP_ADDRESS for a given mode II pattern definition
   985                          ; -----------------------------------------------------------------------------
   986                          ; Inputs:
   987                          ;   X: X position
   988                          ;   Y: Y position
   989                          ; -----------------------------------------------------------------------------
   990                          tmsSetPatternTmpAddressII:
   991  e98a a920                       lda #>TMS_VRAM_PATT_ADDRESS
   992                          
   993                          .addXYToAddress:
   994  e98c 8525                       sta TMS_TMP_ADDRESS + 1
   995                          
   996  e98e 98                         tya
   997  e98f 4a4a4a                     +lsr3
   998  e992 0525                       ora TMS_TMP_ADDRESS + 1
   999  e994 8525                       sta TMS_TMP_ADDRESS + 1
  1000                          
  1001  e996 8a                         txa
  1002  e997 29f8                       and #$f8
  1003  e999 8524                       sta TMS_TMP_ADDRESS
  1004                          
  1005  e99b 98                         tya
  1006  e99c 2907                       and #$07
  1007  e99e 0524                       ora TMS_TMP_ADDRESS
  1008  e9a0 8524                       sta TMS_TMP_ADDRESS
  1009                          
  1010  e9a2 60                         rts
  1011                          
  1012                          ; -----------------------------------------------------------------------------
  1013                          ; tmsSetPatternTmpAddress: Set TMS_TMP_ADDRESS for a given pattern definition
  1014                          ; -----------------------------------------------------------------------------
  1015                          ; Inputs:
  1016                          ;   A: Pattern number
  1017                          ;   Y: Y offset (row) in the pattern
  1018                          ; -----------------------------------------------------------------------------
  1019                          tmsSetPatternTmpAddressBank0:
  1020                          tmsSetPatternTmpAddress:
  1021  e9a3 48                         pha
  1022  e9a4 a920                       lda #>TMS_VRAM_PATT_ADDRESS
  1023  e9a6 8525                       sta TMS_TMP_ADDRESS + 1
  1024                                  
  1025  e9a8 68                         pla
  1026  e9a9 48                         pha
  1027                          
  1028  e9aa 4a4a4a4a4a                 +div32
  1029  e9af 18                         clc
  1030  e9b0 6525                       adc TMS_TMP_ADDRESS + 1
  1031  e9b2 8525                       sta TMS_TMP_ADDRESS + 1
  1032  e9b4 68                         pla
  1033  e9b5 0a0a0a                     +mul8
  1034  e9b8 8524                       sta TMS_TMP_ADDRESS
  1035  e9ba 98                         tya
  1036  e9bb 0524                       ora TMS_TMP_ADDRESS
  1037  e9bd 8524                       sta TMS_TMP_ADDRESS
  1038  e9bf 60                         rts
  1039                          
  1040                          ; -----------------------------------------------------------------------------
  1041                          ; tmsSetPatternTmpAddressBank1: Set TMS_TMP_ADDRESS for a given pattern 
  1042                          ;                               definition in bank 1 (GFX II)
  1043                          ; -----------------------------------------------------------------------------
  1044                          ; Inputs:
  1045                          ;   A: Pattern number
  1046                          ;   Y: Y offset (row) in the pattern
  1047                          ; -----------------------------------------------------------------------------
  1048                          tmsSetPatternTmpAddressBank1:
  1049  e9c0 20a3e9                     jsr tmsSetPatternTmpAddress
  1050  e9c3 a525                       lda TMS_TMP_ADDRESS + 1
  1051  e9c5 18                         clc
  1052  e9c6 6908                       adc #8
  1053  e9c8 8525                       sta TMS_TMP_ADDRESS + 1
  1054  e9ca 60                         rts
  1055                          
  1056                          ; -----------------------------------------------------------------------------
  1057                          ; tmsSetPatternTmpAddressBank2: Set TMS_TMP_ADDRESS for a given pattern 
  1058                          ;                               definition in bank 2 (GFX II)
  1059                          ; -----------------------------------------------------------------------------
  1060                          ; Inputs:
  1061                          ;   A: Pattern number
  1062                          ;   Y: Y offset (row) in the pattern
  1063                          ; -----------------------------------------------------------------------------
  1064                          tmsSetPatternTmpAddressBank2:
  1065  e9cb 20a3e9                     jsr tmsSetPatternTmpAddress
  1066  e9ce a525                       lda TMS_TMP_ADDRESS + 1
  1067  e9d0 18                         clc
  1068  e9d1 6910                       adc #16
  1069  e9d3 8525                       sta TMS_TMP_ADDRESS + 1
  1070  e9d5 60                         rts        
  1071                          
  1072                          ; -----------------------------------------------------------------------------
  1073                          ; tmsSetPatternWrite: Set pattern definition to write to
  1074                          ; -----------------------------------------------------------------------------
  1075                          ; Inputs:
  1076                          ;   A: Pattern number
  1077                          ;   Y: Y offset (row) in the pattern
  1078                          ; -----------------------------------------------------------------------------
  1079                          tmsSetPatternWrite:
  1080  e9d6 20a3e9                     jsr tmsSetPatternTmpAddress
  1081  e9d9 4c92e5                     jmp tmsSetAddressWrite
  1082                          
  1083                          ; -----------------------------------------------------------------------------
  1084                          ; tmsSetPatternRead: Set pattern definition to read from
  1085                          ; -----------------------------------------------------------------------------
  1086                          ; Inputs:
  1087                          ;   A: Pattern number
  1088                          ;   Y: Y offset (row) in the pattern
  1089                          ; -----------------------------------------------------------------------------
  1090                          tmsSetPatternRead:
  1091  e9dc 20a3e9                     jsr tmsSetPatternTmpAddress
  1092  e9df 4ca8e5                     jmp tmsSetAddressRead
  1093                          
  1094                          
  1095                          ; -----------------------------------------------------------------------------
  1096                          ; tmsPrint: Print a null-terminated string
  1097                          ; -----------------------------------------------------------------------------
  1098                          ; Inputs:
  1099                          ;  STR_ADDR: Contains address of null-terminated string
  1100                          ; Prerequisites:
  1101                          ;  TMS address already set using +tmsSetAddressWrite
  1102                          ; -----------------------------------------------------------------------------
  1103                          tmsPrint:
  1104  e9e2 a000               	ldy #0
  1105                          -
  1106  e9e4 2079e5             	+tmsWaitData
  1107  e9e7 b134               	lda (STR_ADDR), y
  1108  e9e9 f009               	beq +
  1109  e9eb 8d107f2079e5               +tmsPut 
  1110  e9f1 c8                 	iny
  1111  e9f2 d0f0               	bne -
  1112                          +
  1113  e9f4 60                 	rts
  1114                          
  1115                          
  1116                          ; -----------------------------------------------------------------------------
  1117                          ; tmsConsoleOut: Print a null-terminated string
  1118                          ; -----------------------------------------------------------------------------
  1119                          ; Inputs:
  1120                          ;  'A': Character to output to console
  1121                          ; -----------------------------------------------------------------------------
  1122                          tmsConsoleOut:
  1123  e9f5 8e2c7b                     stx .TMS9918_REGX
  1124  e9f8 8c2d7b                     sty .TMS9918_REGY
  1125  e9fb 08                         php
  1126  e9fc 78                         sei
  1127  e9fd c90d                       cmp #$0d ; enter
  1128  e9ff f021                       beq .tmsConsoleNewline
  1129  ea01 c90a                       cmp #$0a ; enter
  1130  ea03 f01d                       beq .tmsConsoleNewline
  1131                          
  1132  ea05 c908                       cmp #$08 ; backspace
  1133  ea07 f01e                       beq .tmsConsoleBackspace
  1134                          
  1135  ea09 48                         pha
  1136  ea0a 2067e9                     jsr tmsSetPosConsole
  1137  ea0d 68                         pla
  1138  ea0e 8d107f2079e5               +tmsPut
  1139  ea14 2020e9                     jsr tmsIncPosConsole
  1140  ea17 ee2b7b                     inc TMS9918_CONSOLE_LINE_LEN
  1141                          
  1142                          .endConsoleOut
  1143  ea1a 28                         plp
  1144  ea1b ac2d7b                     ldy .TMS9918_REGY
  1145  ea1e ae2c7b                     ldx .TMS9918_REGX
  1146  ea21 60                         rts
  1147                          
  1148                          .tmsConsoleNewline
  1149  ea22 203cea                     jsr tmsConsoleNewline
  1150  ea25 80f3                       bra .endConsoleOut
  1151                          
  1152                          .tmsConsoleBackspace
  1153  ea27 2063ea                     jsr tmsConsoleBackspace
  1154  ea2a 80ee                       bra .endConsoleOut
  1155                          
  1156                          
  1157                          ; -----------------------------------------------------------------------------
  1158                          ; tmsConsolePrint: Print a null-terminated string (console mode)
  1159                          ; -----------------------------------------------------------------------------
  1160                          ; Inputs:
  1161                          ;  STR_ADDR: Contains address of null-terminated string
  1162                          ; Prerequisites:
  1163                          ;  TMS address already set using +tmsSetAddressWrite
  1164                          ; -----------------------------------------------------------------------------
  1165                          tmsConsolePrint:
  1166  ea2c a000               	ldy #0
  1167                          -
  1168  ea2e 2079e5             	+tmsWaitData
  1169  ea31 b134               	lda (STR_ADDR), y
  1170  ea33 f006               	beq +
  1171  ea35 20f5e9                     jsr tmsConsoleOut
  1172  ea38 c8                 	iny
  1173  ea39 d0f3               	bne -
  1174                          +
  1175  ea3b 60                 	rts
  1176                          
  1177                          ; -----------------------------------------------------------------------------
  1178                          ; tmsConsoleNewline: Output a newline to the console (scrolls if on last line)
  1179                          ; -----------------------------------------------------------------------------
  1180                          tmsConsoleNewline:
  1181  ea3c 2067e9                     jsr tmsSetPosConsole
  1182  ea3f a9208d107f2079e5           +tmsPut ' '
  1183  ea47 ad287b                     lda TMS9918_CONSOLE_X
  1184  ea4a d008                       bne +
  1185  ea4c ad2b7b                     lda TMS9918_CONSOLE_LINE_LEN
  1186  ea4f f003                       beq +
  1187  ea51 60                         rts
  1188  ea52 f000                       beq +
  1189                          +
  1190  ea54 ad2a7b                     lda TMS9918_CONSOLE_SIZE_X
  1191  ea57 8d287b                     sta TMS9918_CONSOLE_X
  1192  ea5a ce287b                     dec TMS9918_CONSOLE_X
  1193  ea5d 9c2b7b                     stz TMS9918_CONSOLE_LINE_LEN
  1194  ea60 4c20e9                     jmp tmsIncPosConsole
  1195                          
  1196                          
  1197                          ; -----------------------------------------------------------------------------
  1198                          ; tmsConsoleBackspace: Output a backspace to the console
  1199                          ; -----------------------------------------------------------------------------
  1200                          tmsConsoleBackspace:
  1201  ea63 2041e9                     jsr tmsDecPosConsole
  1202  ea66 a92020f5e9                 +tmsConsoleOut ' '
  1203  ea6b a9208d107f2079e5           +tmsPut ' '
  1204  ea73 ce2b7b                     dec TMS9918_CONSOLE_LINE_LEN
  1205  ea76 4c41e9                     jmp tmsDecPosConsole

; ******** Source: kernel.asm
   158                          
   159                          }
   160                          
   161                          !ifndef HBC56_DISABLE_SFXMAN {
   162                                  !src "sfx/sfxman.asm"
   163                          }
   164                          
   165                          !ifndef HBC56_DISABLE_LCD {
   166                                  !ifndef LCD_MODEL { LCD_MODEL = 12864 }

; ******** Source: ../lib\gfx\bitmap.asm
     1                          ; 6502 - Bitmap
     2                          ;
     3                          ; Copyright (c) 2021 Troy Schrapel
     4                          ;
     5                          ; This code is licensed under the MIT license
     6                          ;
     7                          ; https://github.com/visrealm/hbc-56
     8                          ;
     9                          ;
    10                          
    11                          ; Bitmap object has the following structure
    12                          ;
    13                          ; Width
    14                          ; Height
    15                          
    16                          HAVE_BITMAP = 1
    17                          
    18                          !ifndef BITMAP_ZP_START { BITMAP_ZP_START = $28
    19                                  !warn "BITMAP_ZP_START not provided. Defaulting to ", BITMAP_ZP_START
    20                          }
    21                          
    22                          !ifndef BITMAP_RAM_START { BITMAP_RAM_START = $7b80
    23                                  !warn "BITMAP_RAM_START not provided. Defaulting to ", BITMAP_RAM_START
    24                          }
    25                          
    26                          ; -------------------------
    27                          ; Zero page
    28                          ; -------------------------
    29                          PIX_ADDR		= BITMAP_ZP_START
    30                          BITMAP_ADDR_H   	= BITMAP_ZP_START+2
    31                          BITMAP_ZP_SIZE		= 4
    32                          
    33                          ; -----------------------------------------------------------------------------
    34                          ; High RAM
    35                          ; -----------------------------------------------------------------------------
    36                          
    37                          BITMAP_X       = BITMAP_RAM_START + 1
    38                          BITMAP_Y       = BITMAP_RAM_START + 2
    39                          BITMAP_X1      = BITMAP_X
    40                          BITMAP_Y1      = BITMAP_Y
    41                          BITMAP_X2      = BITMAP_RAM_START + 3
    42                          BITMAP_Y2      = BITMAP_RAM_START + 4
    43                          
    44                          BITMAP_LINE_STYLE     = BITMAP_RAM_START + 7
    45                          BITMAP_LINE_STYLE_ODD = BITMAP_RAM_START + 8
    46                          
    47                          BITMAP_TMP1    = BITMAP_RAM_START + 9
    48                          BITMAP_TMP2    = BITMAP_RAM_START + 10
    49                          BITMAP_TMP3    = BITMAP_RAM_START + 11
    50                          BITMAP_TMP4    = BITMAP_RAM_START + 12
    51                          BITMAP_TMP5    = BITMAP_RAM_START + 13
    52                          BITMAP_TMP6    = BITMAP_RAM_START + 14
    53                          
    54                          BITMAP_RAM_SIZE	= 16
    55                          
    56                          
    57                          !if BITMAP_ZP_END < (BITMAP_ZP_START + BITMAP_ZP_SIZE) {
    58                          	!error "BITMAP_ZP requires ",BITMAP_ZP_SIZE," bytes. Allocated ",BITMAP_ZP_END - BITMAP_ZP_START
    59                          }
    60                          
    61                          !if BITMAP_RAM_END < (BITMAP_RAM_START + BITMAP_RAM_SIZE) {
    62                          	!error "BITMAP_RAM requires ",BITMAP_RAM_SIZE," bytes. Allocated ",BITMAP_RAM_END - BITMAP_RAM_START
    63                          }
    64                          
    65                          
    66                          
    67                          ; -----------------------------------------------------------------------------
    68                          ; bitmapClear: Clear the bitmap
    69                          ; -----------------------------------------------------------------------------
    70                          ; Inputs:
    71                          ;  BITMAP_ADDR_H: Contains page-aligned address of 1-bit 128x64 bitmap
    72                          ; -----------------------------------------------------------------------------
    73                          bitmapClear:
    74  ea79 a9ff                   	lda #$ff
    75  ea7b 8d1d7b             	sta BITMAP_LINE_STYLE
    76  ea7e a900               	lda #0
    77                          	
    78                          	; flow through.... danger?
    79                          	
    80                          	
    81                          ; -----------------------------------------------------------------------------
    82                          ; bitmapFill: Fill the bitmap with value in A
    83                          ; -----------------------------------------------------------------------------
    84                          ; Inputs:
    85                          ;  BITMAP_ADDR_H: Contains page-aligned address of 1-bit 128x64 bitmap
    86                          ;  A: The value to fill
    87                          ; -----------------------------------------------------------------------------
    88                          bitmapFill:
    89  ea80 8d1f7b             	sta BITMAP_TMP1
    90  ea83 a520               	lda BITMAP_ADDR_H
    91  ea85 851f               	sta PIX_ADDR + 1
    92  ea87 a200               	ldx #0
    93  ea89 861e               	stx PIX_ADDR
    94                          
    95  ea8b ad1f7b             	lda BITMAP_TMP1	
    96  ea8e a000               	ldy #0
    97  ea90 a204               	ldx #4
    98                          -
    99  ea92 911e               	sta (PIX_ADDR), y
   100  ea94 c8                 	iny
   101  ea95 d0fb               	bne -
   102  ea97 e61f               	inc PIX_ADDR + 1
   103  ea99 ca                 	dex
   104  ea9a d0f6               	bne -
   105                          	
   106  ea9c 60                 	rts
   107                          	
   108                          	
   109                          ; -----------------------------------------------------------------------------
   110                          ; bitmapXor: XOR (invert) the entire bitmap
   111                          ; -----------------------------------------------------------------------------
   112                          ; Inputs:
   113                          ;  BITMAP_ADDR_H: Contains page-aligned address of 1-bit 128x64 bitmap
   114                          ; -----------------------------------------------------------------------------
   115                          bitmapXor:
   116  ea9d a520               	lda BITMAP_ADDR_H
   117  ea9f 851f               	sta PIX_ADDR + 1
   118  eaa1 a200               	ldx #0
   119  eaa3 861e               	stx PIX_ADDR
   120                          
   121  eaa5 a000               	ldy #0
   122  eaa7 a204               	ldx #4
   123                          -
   124  eaa9 a9ff               	lda #$ff
   125  eaab 511e               	eor (PIX_ADDR), y
   126  eaad 911e               	sta (PIX_ADDR), y
   127                          	
   128  eaaf c8                 	iny
   129  eab0 d0f7               	bne -
   130  eab2 e61f               	inc PIX_ADDR + 1
   131  eab4 ca                 	dex
   132  eab5 d0f2               	bne -
   133                          	
   134  eab7 60                 	rts
   135                          	
   136                          ; -----------------------------------------------------------------------------
   137                          ; _bitmapOffset: Set up the offset to the buffer based on X/Y (Internal use)
   138                          ; -----------------------------------------------------------------------------
   139                          ; Inputs:
   140                          ;  BITMAP_ADDR_H: Contains page-aligned address of 1-bit 128x64 bitmap
   141                          ;  BITMAP_X: X position (0 to 127)
   142                          ;  BITMAP_Y: Y position (0 to 63)
   143                          ; Outputs:
   144                          ;  PIX_ADDR: Set to byte at column 0 of row BITMAP_Y
   145                          ;  Y: 		 Y offset of byte within row (0 to 63)
   146                          ;  X: 		 Bit offset within the byte
   147                          ; -----------------------------------------------------------------------------
   148                          _bitmapOffset:
   149                          
   150  eab8 a520               	lda BITMAP_ADDR_H
   151  eaba 851f               	sta PIX_ADDR + 1
   152  eabc a200               	ldx #0
   153  eabe 861e               	stx PIX_ADDR
   154                          	
   155  eac0 ad187b             	lda BITMAP_Y
   156  eac3 4a                 	lsr
   157  eac4 4a                 	lsr
   158  eac5 4a                 	lsr
   159  eac6 4a                 	lsr
   160  eac7 18                 	clc
   161  eac8 651f               	adc PIX_ADDR + 1
   162  eaca 851f               	sta PIX_ADDR + 1
   163                          	
   164  eacc ad187b             	lda BITMAP_Y
   165  eacf 290f               	and #$0f
   166  ead1 0a                 	asl
   167  ead2 0a                 	asl
   168  ead3 0a                 	asl
   169  ead4 0a                 	asl
   170  ead5 851e               	sta PIX_ADDR
   171                          	
   172  ead7 ad177b             	lda BITMAP_X
   173  eada 4a                 	lsr
   174  eadb 4a                 	lsr
   175  eadc 4a                 	lsr
   176  eadd a8                 	tay	  ; Y contains start byte offset in row
   177                          	
   178  eade ad177b             	lda BITMAP_X
   179  eae1 2907               	and #$07
   180  eae3 aa                 	tax   ; X contains bit offset within byte (0 - 7)	
   181  eae4 60                 	rts
   182                          	
   183                          ; -----------------------------------------------------------------------------
   184                          ; bitmapSetPixel: Set a pixel
   185                          ; -----------------------------------------------------------------------------
   186                          ; Inputs:
   187                          ;  BITMAP_ADDR_H: Contains page-aligned address of 1-bit 128x64 bitmap
   188                          ;  BITMAP_X: X position (0 to 127)
   189                          ;  BITMAP_Y: Y position (0 to 63)
   190                          ; -----------------------------------------------------------------------------
   191                          bitmapSetPixel:
   192                          
   193  eae5 20b8ea             	jsr _bitmapOffset
   194                          	
   195  eae8 bd30e1             	lda tableBitFromLeft, x
   196                          	
   197  eaeb 111e               	ora (PIX_ADDR), y
   198  eaed 911e               	sta (PIX_ADDR), y
   199                          	
   200  eaef 60                 	rts	
   201                          	
   202                          ; -----------------------------------------------------------------------------
   203                          ; bitmapClearPixel: Clear a pixel
   204                          ; -----------------------------------------------------------------------------
   205                          ; Inputs:
   206                          ;  BITMAP_ADDR_H: Contains page-aligned address of 1-bit 128x64 bitmap
   207                          ;  BITMAP_X: X position (0 to 127)
   208                          ;  BITMAP_Y: Y position (0 to 63)
   209                          ; -----------------------------------------------------------------------------
   210                          bitmapClearPixel:
   211                          
   212  eaf0 20b8ea             	jsr _bitmapOffset
   213                          	
   214  eaf3 bd38e1             	lda tableInvBitFromLeft, x
   215                          
   216  eaf6 311e               	and (PIX_ADDR), y
   217  eaf8 911e               	sta (PIX_ADDR), y
   218                          	
   219  eafa 60                 	rts
   220                          	
   221                          	
   222                          ; -----------------------------------------------------------------------------
   223                          ; bitmapXorPixel: XOR a pixel
   224                          ; -----------------------------------------------------------------------------
   225                          ; Inputs:
   226                          ;  BITMAP_ADDR_H: Contains page-aligned address of 1-bit 128x64 bitmap
   227                          ;  BITMAP_X: X position (0 to 127)
   228                          ;  BITMAP_Y: Y position (0 to 63)
   229                          ; -----------------------------------------------------------------------------
   230                          bitmapXorPixel:
   231                          
   232  eafb 20b8ea             	jsr _bitmapOffset
   233                          	
   234  eafe bd30e1             	lda tableBitFromLeft, x
   235                          
   236  eb01 511e               	eor (PIX_ADDR), y
   237  eb03 911e               	sta (PIX_ADDR), y
   238                          	
   239  eb05 60                 	rts
   240                          	
   241                          ; -----------------------------------------------------------------------------
   242                          ; bitmapLineH: Output a horizontal line
   243                          ; -----------------------------------------------------------------------------
   244                          ; Inputs:
   245                          ;  BITMAP_ADDR_H: Contains page-aligned address of 1-bit 128x64 bitmap
   246                          ;  BITMAP_X1: Start X position (0 to 127)
   247                          ;  BITMAP_X2: End X position (0 to 127)
   248                          ;  BITMAP_Y:  Y position (0 to 63)
   249                          ; -----------------------------------------------------------------------------
   250                          bitmapLineH:
   251                          
   252                          	END_OFFSET   = BITMAP_TMP3
   253                          	START_BYTE   = BITMAP_TMP1
   254                          	END_BYTE     = BITMAP_TMP2
   255                          	TMP_STYLE    = BITMAP_TMP5
   256                          
   257  eb06 ad197b             	lda BITMAP_X2
   258  eb09 4a                 	lsr
   259  eb0a 4a                 	lsr
   260  eb0b 4a                 	lsr
   261  eb0c 8d217b             	sta END_OFFSET  ; END_OFFSET contains end byte offset within the row
   262                          
   263  eb0f 20b8ea             	jsr _bitmapOffset
   264                          
   265  eb12 ad1d7b             	lda BITMAP_LINE_STYLE
   266  eb15 8d237b             	sta TMP_STYLE
   267                          	
   268  eb18 a9ff               	lda #$ff
   269                          	
   270                          ; shift the bits to the right for the pixel offset
   271                          -
   272  eb1a e000               	cpx #0
   273  eb1c f013               	beq ++
   274  eb1e 4e237b             	lsr TMP_STYLE
   275  eb21 900a               	bcc +
   276  eb23 48                 	pha
   277  eb24 a980               	lda #$80
   278  eb26 0d237b             	ora TMP_STYLE
   279  eb29 8d237b             	sta TMP_STYLE
   280  eb2c 68                 	pla	
   281                          +
   282  eb2d ca                 	dex
   283  eb2e 4a                 	lsr
   284  eb2f b0e9               	bcs -  ; carry is always set
   285                          ++
   286  eb31 8d1f7b             	sta START_BYTE
   287                          
   288  eb34 ad197b             	lda BITMAP_X2
   289  eb37 2907               	and #$07
   290                          	
   291  eb39 aa                 	tax   ; X contains bit offset within byte (0 - 7)	
   292                          	
   293  eb3a a9ff               	lda #$ff
   294                          	
   295                          ; shift the bits to the left for the pixel offset
   296                          -
   297  eb3c e007               	cpx #7
   298  eb3e f004               	beq +
   299  eb40 e8                 	inx
   300  eb41 0a                 	asl    
   301  eb42 b0f8               	bcs -  ; carry is always set
   302                          +
   303  eb44 8d207b             	sta END_BYTE
   304                          	
   305  eb47 ad1f7b             	lda START_BYTE
   306  eb4a cc217b             	cpy END_OFFSET
   307  eb4d d015               	bne ++
   308  eb4f 2d207b             	and END_BYTE  ; combine if within the same byte
   309                          	
   310  eb52 48                 	pha
   311  eb53 49ff               	eor #$ff
   312  eb55 311e               	and (PIX_ADDR), y
   313  eb57 8d227b             	sta BITMAP_TMP4
   314  eb5a 68                 	pla
   315  eb5b 2d237b             	and TMP_STYLE
   316  eb5e 0d227b             	ora BITMAP_TMP4
   317  eb61 911e               	sta (PIX_ADDR), y
   318                          	
   319  eb63 60                 	rts
   320                          ++
   321  eb64 48                 	pha
   322  eb65 49ff               	eor #$ff
   323  eb67 311e               	and (PIX_ADDR), y
   324  eb69 8d227b             	sta BITMAP_TMP4
   325  eb6c 68                 	pla
   326  eb6d 2d237b             	and TMP_STYLE
   327  eb70 0d227b             	ora BITMAP_TMP4
   328  eb73 911e               	sta (PIX_ADDR), y
   329                          -
   330  eb75 a9ff               	lda #$ff
   331  eb77 c8                 	iny
   332  eb78 cc217b             	cpy END_OFFSET
   333  eb7b d003               	bne +
   334  eb7d 2d207b             	and END_BYTE  ; combine if within the same byte
   335                          +
   336  eb80 48                 	pha
   337  eb81 49ff               	eor #$ff
   338  eb83 311e               	and (PIX_ADDR), y
   339  eb85 8d227b             	sta BITMAP_TMP4
   340  eb88 68                 	pla
   341  eb89 2d237b             	and TMP_STYLE
   342  eb8c 0d227b             	ora BITMAP_TMP4
   343  eb8f 911e               	sta (PIX_ADDR), y
   344                          
   345  eb91 cc217b             	cpy END_OFFSET
   346  eb94 d0df               	bne -	
   347                          	
   348  eb96 60                 	rts
   349                          	
   350                          	
   351                          ; -----------------------------------------------------------------------------
   352                          ; bitmapLineV: Output a horizontal line
   353                          ; -----------------------------------------------------------------------------
   354                          ; Inputs:
   355                          ;  BITMAP_ADDR_H: Contains page-aligned address of 1-bit 128x64 bitmap
   356                          ;  BITMAP_Y1: Start Y position (0 to 63)
   357                          ;  BITMAP_Y2: End Y position (0 to 63)
   358                          ;  BITMAP_X:  Y position (0 to 127)
   359                          ; -----------------------------------------------------------------------------
   360                          bitmapLineV:
   361                          
   362                          	COL_BYTE     = BITMAP_TMP1
   363                          	STYLE_BYTE   = BITMAP_TMP2
   364                          
   365  eb97 20b8ea             	jsr _bitmapOffset
   366                          	
   367  eb9a ad1d7b             	lda BITMAP_LINE_STYLE
   368  eb9d 8d207b             	sta STYLE_BYTE
   369                          	
   370  eba0 bd30e1             	lda tableBitFromLeft, x
   371                          
   372  eba3 8d1f7b             	sta COL_BYTE	
   373                          	
   374  eba6 ae187b             	ldx BITMAP_Y1
   375                          -
   376  eba9 a980               	lda #$80
   377  ebab 2c207b             	bit STYLE_BYTE
   378  ebae d00c               	bne +
   379                          	; draw a 0
   380  ebb0 ad1f7b             	lda COL_BYTE
   381  ebb3 49ff               	eor #$ff
   382  ebb5 311e               	and (PIX_ADDR), y	
   383  ebb7 911e               	sta (PIX_ADDR), y
   384  ebb9 4cc3eb             	jmp ++
   385                          +	; draw a 1
   386  ebbc ad1f7b             	lda COL_BYTE	
   387  ebbf 111e               	ora (PIX_ADDR), y	
   388  ebc1 911e               	sta (PIX_ADDR), y
   389                          ++
   390                          		
   391  ebc3 ec1a7b             	cpx BITMAP_Y2
   392  ebc6 f017               	beq ++
   393  ebc8 0e207b             	asl STYLE_BYTE
   394  ebcb 9003               	bcc +
   395  ebcd ee207b             	inc STYLE_BYTE
   396                          +
   397  ebd0 e8                 	inx
   398  ebd1 a910               	lda #16
   399  ebd3 18                 	clc
   400  ebd4 651e               	adc PIX_ADDR
   401  ebd6 9002               	bcc +
   402  ebd8 e61f               	inc PIX_ADDR + 1
   403                          +
   404  ebda 851e               	sta PIX_ADDR
   405  ebdc 18                     	clc
   406  ebdd 90ca               	bcc -
   407                          ++
   408                          	
   409  ebdf 60                 	rts
   410                          
   411                          ; -----------------------------------------------------------------------------
   412                          ; bitmapLine: Output an arbitrary line
   413                          ; -----------------------------------------------------------------------------
   414                          ; Inputs:
   415                          ;  BITMAP_ADDR_H: Contains page-aligned address of 1-bit 128x64 bitmap
   416                          ;  BITMAP_X1: 
   417                          ;  BITMAP_Y1: 
   418                          ;  BITMAP_X2: 
   419                          ;  BITMAP_Y2: 
   420                          ; -----------------------------------------------------------------------------
   421                          bitmapLine:
   422                          
   423                          	LINE_WIDTH = BITMAP_TMP1
   424                          	LINE_HEIGHT = BITMAP_TMP2
   425                          	
   426                          	; get width
   427  ebe0 ad197b             	lda BITMAP_X2
   428  ebe3 38                 	sec
   429  ebe4 ed177b             	sbc BITMAP_X1
   430                          	
   431  ebe7 1012               	bpl +
   432  ebe9 ad177b             	lda BITMAP_X1
   433  ebec 48                 	pha
   434  ebed ad197b             	lda BITMAP_X2
   435  ebf0 8d177b             	sta BITMAP_X1
   436  ebf3 68                 	pla
   437  ebf4 8d197b             	sta BITMAP_X2
   438  ebf7 38                 	sec
   439  ebf8 ed177b             	sbc BITMAP_X1	
   440                          +	
   441  ebfb 8d1f7b             	sta LINE_WIDTH
   442                          
   443                          	; get height
   444  ebfe ad1a7b             	lda BITMAP_Y2
   445  ec01 38                 	sec
   446  ec02 ed187b             	sbc BITMAP_Y1
   447                          
   448  ec05 1012               	bpl +
   449  ec07 ad187b             	lda BITMAP_Y1
   450  ec0a 48                 	pha
   451  ec0b ad1a7b             	lda BITMAP_Y2
   452  ec0e 8d187b             	sta BITMAP_Y1
   453  ec11 68                 	pla
   454  ec12 8d1a7b             	sta BITMAP_Y2
   455  ec15 38                 	sec
   456  ec16 ed187b             	sbc BITMAP_Y1	
   457                          +	
   458  ec19 8d207b             	sta LINE_HEIGHT
   459                          	
   460  ec1c cd1f7b             	cmp LINE_WIDTH
   461  ec1f b003               	bcs .goTall
   462  ec21 4c27ec             	jmp _bitmapLineWide
   463                          .goTall
   464  ec24 4c78ec             	jmp _bitmapLineTall
   465                          	
   466                          	; rts in above subroutines
   467                          	
   468                          ; ----------------------------------------------------------------------------
   469                          
   470                          _bitmapLineWide:  ; a line that is wider than it is tall
   471                          	
   472                          	D = BITMAP_TMP6
   473                          	
   474                          	Y = BITMAP_TMP3
   475                          	
   476  ec27 ad207b             	lda LINE_HEIGHT
   477  ec2a 0a                 	asl
   478  ec2b 38                 	sec
   479  ec2c ed1f7b             	sbc LINE_WIDTH
   480  ec2f 8d247b             	sta D
   481                          	
   482  ec32 ad177b             	lda BITMAP_X
   483  ec35 48                 	pha
   484                          	
   485  ec36 ad187b             	lda BITMAP_Y1
   486  ec39 8d217b             	sta Y
   487                          	
   488                          -
   489  ec3c 20e5ea             	jsr bitmapSetPixel
   490  ec3f ad247b             	lda D
   491  ec42 1007               	bpl +
   492  ec44 ad207b             	lda LINE_HEIGHT
   493  ec47 0a                 	asl
   494  ec48 4c5bec             	jmp ++
   495                          +
   496  ec4b ee187b                 inc BITMAP_Y1
   497  ec4e ad1f7b             	lda LINE_WIDTH
   498  ec51 38                 	sec
   499  ec52 ed207b             	sbc LINE_HEIGHT
   500  ec55 0a                 	asl
   501  ec56 49ff               	eor #$ff
   502  ec58 18                 	clc
   503  ec59 6901               	adc #1
   504                          ++
   505  ec5b 18                 	clc
   506  ec5c 6d247b             	adc D
   507  ec5f 8d247b             	sta D
   508  ec62 ee177b             	inc BITMAP_X
   509  ec65 ad197b             	lda BITMAP_X2
   510  ec68 cd177b             	cmp BITMAP_X
   511  ec6b b0cf               	bcs -
   512                          	
   513  ec6d ad217b             	lda Y
   514  ec70 8d187b             	sta BITMAP_Y1
   515                          	
   516  ec73 68                 	pla
   517  ec74 8d177b             	sta BITMAP_X
   518                          	
   519  ec77 60                 	rts
   520                          	
   521                          _bitmapLineTall:  ; a line that is taller than it is wide
   522                          	
   523                          	D = BITMAP_TMP6
   524                          	
   525                          	X = BITMAP_TMP3
   526                          	
   527  ec78 ad1f7b             	lda LINE_WIDTH
   528  ec7b 0a                 	asl
   529  ec7c 38                 	sec
   530  ec7d ed207b             	sbc LINE_HEIGHT
   531  ec80 8d247b             	sta D
   532                          	
   533  ec83 ad187b             	lda BITMAP_Y
   534  ec86 48                 	pha
   535                          	
   536  ec87 ad177b             	lda BITMAP_X1
   537  ec8a 8d217b             	sta X
   538                          	
   539                          -
   540  ec8d 20e5ea             	jsr bitmapSetPixel
   541  ec90 ad247b             	lda D
   542  ec93 1007               	bpl +
   543  ec95 ad1f7b             	lda LINE_WIDTH
   544  ec98 0a                 	asl
   545  ec99 4cacec             	jmp ++
   546                          +
   547  ec9c ee177b                 inc BITMAP_X1
   548  ec9f ad207b             	lda LINE_HEIGHT
   549  eca2 38                 	sec
   550  eca3 ed1f7b             	sbc LINE_WIDTH
   551  eca6 0a                 	asl
   552  eca7 49ff               	eor #$ff
   553  eca9 18                 	clc
   554  ecaa 6901               	adc #1
   555                          ++
   556  ecac 18                 	clc
   557  ecad 6d247b             	adc D
   558  ecb0 8d247b             	sta D
   559  ecb3 ee187b             	inc BITMAP_Y
   560  ecb6 ad1a7b             	lda BITMAP_Y2
   561  ecb9 cd187b             	cmp BITMAP_Y
   562  ecbc b0cf               	bcs -
   563                          
   564  ecbe ad217b             	lda X
   565  ecc1 8d177b             	sta BITMAP_X1
   566                          	
   567  ecc4 68                 	pla
   568  ecc5 8d187b             	sta BITMAP_Y
   569                          	
   570  ecc8 60                 	rts
   571                          	
   572                          ; -----------------------------------------------------------------------------
   573                          ; bitmapRect: Output a rectangle outline
   574                          ; -----------------------------------------------------------------------------
   575                          ; Inputs:
   576                          ;  BITMAP_ADDR_H: Contains page-aligned address of 1-bit 128x64 bitmap
   577                          ;  BITMAP_X1: 
   578                          ;  BITMAP_Y1: 
   579                          ;  BITMAP_X2: 
   580                          ;  BITMAP_Y2: 
   581                          ; -----------------------------------------------------------------------------
   582                          bitmapRect:
   583  ecc9 2006eb             	jsr bitmapLineH
   584  eccc 2097eb             	jsr bitmapLineV
   585                          	
   586  eccf ad177b             	lda BITMAP_X1
   587  ecd2 48                 	pha
   588  ecd3 ad197b             	lda BITMAP_X2
   589  ecd6 8d177b             	sta BITMAP_X1
   590                          
   591  ecd9 2097eb             	jsr bitmapLineV
   592                          	
   593  ecdc 68                 	pla
   594  ecdd 8d177b             	sta BITMAP_X1
   595                          
   596  ece0 ad187b             	lda BITMAP_Y1
   597  ece3 48                 	pha
   598  ece4 ad1a7b             	lda BITMAP_Y2
   599  ece7 8d187b             	sta BITMAP_Y1
   600                          	
   601  ecea 2006eb             	jsr bitmapLineH
   602                          
   603  eced 68                 	pla
   604  ecee 8d187b             	sta BITMAP_Y1
   605                          	
   606  ecf1 60                 	rts
   607                          	
   608                          ; -----------------------------------------------------------------------------
   609                          ; bitmapFilledRect: Output a filled rectangle
   610                          ; -----------------------------------------------------------------------------
   611                          ; Inputs:
   612                          ;  BITMAP_ADDR_H: Contains page-aligned address of 1-bit 128x64 bitmap
   613                          ;  BITMAP_X1: 
   614                          ;  BITMAP_Y1: 
   615                          ;  BITMAP_X2: 
   616                          ;  BITMAP_Y2: 
   617                          ; -----------------------------------------------------------------------------
   618                          bitmapFilledRect:
   619  ecf2 ad187b             	lda BITMAP_Y1
   620  ecf5 48                 	pha
   621  ecf6 ad1d7b             	lda BITMAP_LINE_STYLE
   622  ecf9 48                 	pha
   623                          	
   624                          -
   625  ecfa 2006eb             	jsr bitmapLineH
   626  ecfd ee187b             	inc BITMAP_Y1
   627                          
   628  ed00 68                 	pla
   629  ed01 8d1d7b             	sta BITMAP_LINE_STYLE
   630  ed04 48                 	pha
   631                          	
   632  ed05 ad1a7b             	lda BITMAP_Y2
   633  ed08 cd187b             	cmp BITMAP_Y1
   634  ed0b f014               	beq +
   635                          
   636  ed0d 2006eb             	jsr bitmapLineH
   637  ed10 ee187b             	inc BITMAP_Y1
   638                          	
   639  ed13 ad1e7b             	lda BITMAP_LINE_STYLE_ODD
   640  ed16 8d1d7b             	sta BITMAP_LINE_STYLE
   641                          	
   642  ed19 ad1a7b             	lda BITMAP_Y2
   643  ed1c cd187b             	cmp BITMAP_Y1
   644  ed1f d0d9               	bne -
   645                          +	
   646                          
   647  ed21 68                 	pla
   648  ed22 8d1d7b             	sta BITMAP_LINE_STYLE
   649  ed25 68                 	pla
   650  ed26 8d187b             	sta BITMAP_Y1
   651                          	

; ******** Source: kernel.asm
   167  ed29 60                 

; ******** Source: ../lib\lcd\lcd.asm
     1                          ; 6502 LCD - HBC-56
     2                          ;
     3                          ; Copyright (c) 2021 Troy Schrapel
     4                          ;
     5                          ; This code is licensed under the MIT license
     6                          ;
     7                          ; https://github.com/visrealm/hbc-56
     8                          ;
     9                          
    10                          !ifndef LCD_IO_PORT { LCD_IO_PORT = $02
    11                                  !warn "LCD_IO_PORT not provided. Defaulting to ", LCD_IO_PORT
    12                          }
    13                          
    14                          !ifndef LCD_ZP_START { LCD_ZP_START = $38
    15                                  !warn "LCD_ZP_START not provided. Defaulting to ", LCD_ZP_START
    16                          }
    17                          
    18                          !ifndef LCD_RAM_START { LCD_RAM_START = $7c00
    19                                  !warn "LCD_RAM_START not provided. Defaulting to ", LCD_RAM_START
    20                          }
    21                          
    22                          HAVE_LCD = 1
    23                          
    24                          ; -------------------------
    25                          ; Zero page
    26                          ; -------------------------
    27                          LCD_TMP1	= LCD_ZP_START
    28                          LCD_TMP2	= LCD_ZP_START + 1
    29                          LCD_ZP_SIZE	= 2
    30                          
    31                          
    32                          ; -------------------------
    33                          ; High RAM
    34                          ; -------------------------
    35                          .LCD_BUFFER_ADDR	= LCD_RAM_START
    36                          .LCD_REGY_TMP		= LCD_RAM_START + 40
    37                          LCD_RAM_SIZE    	= 42
    38                          
    39                          
    40                          !if LCD_ZP_END < (LCD_ZP_START + LCD_ZP_SIZE) {
    41                          	!error "LCD_ZP requires ",LCD_ZP_SIZE," bytes. Allocated ",LCD_ZP_END - LCD_ZP_START
    42                          }
    43                          
    44                          !if LCD_RAM_END < (LCD_RAM_START + LCD_RAM_SIZE) {
    45                          	!error "LCD_RAM requires ",LCD_RAM_SIZE," bytes. Allocated ",LCD_RAM_END - LCD_RAM_START
    46                          }
    47                          
    48                          
    49                          
    50                          ; -------------------------
    51                          ; Contants
    52                          ; -------------------------
    53                          
    54                          ; IO Ports
    55                          LCD_CMD		= IO_PORT_BASE_ADDRESS | LCD_IO_PORT
    56                          LCD_DATA	= IO_PORT_BASE_ADDRESS | LCD_IO_PORT | $01
    57                          
    58                          ; Commands
    59                          LCD_CMD_CLEAR			= %00000001
    60                          LCD_CMD_HOME			= %00000010
    61                          
    62                          LCD_CMD_ENTRY_MODE		= %00000100
    63                          LCD_CMD_ENTRY_MODE_INCREMENT	= %00000010
    64                          LCD_CMD_ENTRY_MODE_DECREMENT	= %00000000
    65                          LCD_CMD_ENTRY_MODE_SHIFT	= %00000001
    66                          
    67                          LCD_CMD_DISPLAY			= %00001000
    68                          LCD_CMD_DISPLAY_ON		= %00000100
    69                          LCD_CMD_DISPLAY_CURSOR		= %00000010
    70                          LCD_CMD_DISPLAY_CURSOR_BLINK	= %00000001
    71                          
    72                          LCD_CMD_SHIFT			= %00010000
    73                          LCD_CMD_SHIFT_CURSOR		= %00000000
    74                          LCD_CMD_SHIFT_DISPLAY		= %00001000
    75                          LCD_CMD_SHIFT_LEFT		= %00000000
    76                          LCD_CMD_SHIFT_RIGHT		= %00000100
    77                          
    78                          LCD_CMD_SET_CGRAM_ADDR		= $40
    79                          LCD_CMD_SET_DRAM_ADDR		= $80
    80                          
    81                          LCD_CMD_FUNCTIONSET		= $20
    82                          LCD_CMD_8BITMODE		= $10
    83                          LCD_CMD_2LINE			= $08
    84                          
    85                          !ifndef LCD_MODEL {
    86                          	!warn "Set LCD_MODEL to one of: 1602, 2004 or 12864. Defaulting to 1602"
    87                          	LCD_MODEL = 1602
    88                          }
    89                          

; ******** Source: ../lib\lcd\lcd.inc
     1                          ; 6502 LCD Macros - HBC-56
     2                          ;
     3                          ; Copyright (c) 2021 Troy Schrapel
     4                          ;
     5                          ; This code is licensed under the MIT license
     6                          ;
     7                          ; https://github.com/visrealm/hbc-56
     8                          ;
     9                          
    10                          ; -----------------------------------------------------------------------------
    11                          ; lcdPrint: Print immediate text
    12                          ; -----------------------------------------------------------------------------
    13                          ; Inputs:
    14                          ;  str: String to print
    15                          ; -----------------------------------------------------------------------------
    16                          !macro lcdPrint str {
    17                          	jmp +
    18                          .textAddr
    19                          	!text str,0
    20                          +
    21                          	lda #<.textAddr
    22                          	sta STR_ADDR_L
    23                          	lda #>.textAddr
    24                          	sta STR_ADDR_H
    25                          	jsr lcdPrint
    26                          }
    27                          
    28                          
    29                          ; -----------------------------------------------------------------------------
    30                          ; lcdChar: Print immediate character
    31                          ; -----------------------------------------------------------------------------
    32                          ; Inputs:
    33                          ;  c: Character to print
    34                          ; -----------------------------------------------------------------------------
    35                          !macro lcdChar c {
    36                          	pha
    37                          	lda #c
    38                          	jsr lcdChar
    39                          	pla
    40                          }
    41                          
    42                          
    43                          ; -----------------------------------------------------------------------------
    44                          ; lcdConsolePrint: Print immediate text to console
    45                          ; -----------------------------------------------------------------------------
    46                          ; Inputs:
    47                          ;  str: String to print
    48                          ; -----------------------------------------------------------------------------
    49                          !macro lcdConsolePrint .str {
    50                          	jmp .afterText
    51                          .textAddr
    52                          	!text .str,0
    53                          .afterText        
    54                          
    55                                  lda #<.textAddr
    56                                  sta STR_ADDR_L
    57                                  lda #>.textAddr
    58                                  sta STR_ADDR_H
    59                                  jsr lcdConsolePrint        

; ******** Source: ../lib\lcd\lcd.asm
    90                          
    91                          
    92                          ; -------------------------
    93                          ; Constants
    94                          ; -------------------------
    95                          !if LCD_MODEL = 1602 {
    96                          	LCD_ROWS = 2
    97                          	LCD_COLUMNS = 16
    98                          	LCD_GRAPHICS = 0
    99                          	LCD_ADDR_LINE1 = 0x00
   100                          	LCD_ADDR_LINE2 = 0x40
   101                          } else { !if LCD_MODEL = 2004 {
   102                          	LCD_ROWS = 4
   103                          	LCD_COLUMNS = 20
   104                          	LCD_GRAPHICS = 0
   105                          	LCD_ADDR_LINE1 = 0x00
   106                          	LCD_ADDR_LINE2 = 0x40
   107                          	LCD_ADDR_LINE3 = 0x14
   108                          	LCD_ADDR_LINE4 = 0x54
   109                          } else { !if LCD_MODEL = 12864 {
   110                          	LCD_ROWS = 4
   111                          	LCD_COLUMNS = 16
   112                          	LCD_GRAPHICS = 1
   113                          	LCD_ADDR_LINE1 = 0x00
   114                          	LCD_ADDR_LINE2 = 0x10
   115                          	LCD_ADDR_LINE3 = 0x08
   116                          	LCD_ADDR_LINE4 = 0x18

; ******** Source: ../lib\lcd\lcd12864b.asm
     1                          ; 6502 12864B LCD - HBC-56
     2                          ;
     3                          ; Copyright (c) 2021 Troy Schrapel
     4                          ;
     5                          ; This code is licensed under the MIT license
     6                          ;
     7                          ; https://github.com/visrealm/hbc-56
     8                          ;
     9                          
    10                          
    11                          HAVE_GRAPHICS_LCD = 1
    12                          
    13                          ; -------------------------
    14                          ; Constants
    15                          ; -------------------------
    16                          LCD_CMD_12864B_EXTENDED		= $04
    17                          LCD_CMD_EXT_GRAPHICS_ENABLE	= $02
    18                          LCD_CMD_EXT_GRAPHICS_ADDR	= $80
    19                          
    20                          
    21                          LCD_BASIC           = LCD_INITIALIZE
    22                          LCD_EXTENDED        = LCD_INITIALIZE | LCD_CMD_12864B_EXTENDED
    23                          
    24                          ;---------------------------
    25                          
    26                          
    27                          ; -----------------------------------------------------------------------------
    28                          ; lcdGraphicsMode: Initialise the LCD graphics mode
    29                          ; -----------------------------------------------------------------------------
    30                          lcdGraphicsMode:
    31  ed2a 201dee             	jsr lcdWait
    32  ed2d a93c               	lda #LCD_EXTENDED
    33  ed2f 8d027f             	sta LCD_CMD
    34                          
    35  ed32 201dee             	jsr lcdWait
    36  ed35 a93e               	lda #LCD_EXTENDED | LCD_CMD_EXT_GRAPHICS_ENABLE
    37  ed37 8d027f             	sta LCD_CMD
    38  ed3a 60                 	rts
    39                          
    40                          ; -----------------------------------------------------------------------------
    41                          ; lcdTextMode: Initialise the LCD text mode
    42                          ; -----------------------------------------------------------------------------
    43                          lcdTextMode:
    44  ed3b 201dee             	jsr lcdWait
    45  ed3e a93c               	lda #LCD_EXTENDED
    46  ed40 8d027f             	sta LCD_CMD
    47                          
    48  ed43 201dee             	jsr lcdWait
    49  ed46 a93c               	lda #LCD_EXTENDED
    50  ed48 8d027f             	sta LCD_CMD
    51  ed4b 60                 	rts
    52                          
    53                          
    54                          ; -----------------------------------------------------------------------------
    55                          ; lcdGraphicsSetRow: Set LCD address to graphics row
    56                          ; -----------------------------------------------------------------------------
    57                          ; Inputs:
    58                          ;  X: Row of the LCD (0 - 63)
    59                          ; -----------------------------------------------------------------------------
    60                          lcdGraphicsSetRow:
    61  ed4c 48                 	pha
    62                          
    63                          	; set y address (0 - 31)
    64  ed4d 201dee             	jsr lcdWait
    65  ed50 8a                 	txa
    66  ed51 291f               	and #$1f  ; only want 0-31
    67  ed53 0980               	ora #LCD_CMD_EXT_GRAPHICS_ADDR
    68  ed55 8d027f             	sta LCD_CMD
    69                          
    70                          	; set x address - either 0 or 8
    71  ed58 201dee             	jsr lcdWait
    72  ed5b 8a                 	txa
    73  ed5c 2920               	and #$20
    74  ed5e 4a                 	lsr
    75  ed5f 4a                 	lsr
    76  ed60 0980               	ora #LCD_CMD_EXT_GRAPHICS_ADDR
    77  ed62 8d027f             	sta LCD_CMD
    78                          
    79  ed65 68                 	pla
    80  ed66 60                 	rts
    81                          
    82                          
    83                          ; -----------------------------------------------------------------------------
    84                          ; lcdImage: Output a full-screen image from memory (XY upper-left)
    85                          ; -----------------------------------------------------------------------------
    86                          ; Inputs:
    87                          ;  BITMAP_ADDR_H: Contains page-aligned address of 1-bit 128x64 bitmap
    88                          ; -----------------------------------------------------------------------------
    89                          lcdImage:
    90                          
    91  ed67 a520               	lda BITMAP_ADDR_H
    92  ed69 851f               	sta PIX_ADDR + 1
    93  ed6b a200               	ldx #0
    94  ed6d 861e               	stx PIX_ADDR
    95                          
    96                          .imageLoop:
    97                          
    98                          	; x in the range 0-63
    99  ed6f 204ced             	jsr lcdGraphicsSetRow
   100                          
   101  ed72 a000               	ldy #0
   102                          .imgRowLoop
   103  ed74 201dee             	jsr lcdWait
   104                          	
   105  ed77 b11e               	lda (PIX_ADDR), y
   106  ed79 8d037f             	sta LCD_DATA
   107                          	
   108  ed7c c8                 	iny
   109  ed7d c010               	cpy #16
   110  ed7f d0f3               	bne .imgRowLoop
   111                          	
   112  ed81 a51e               	lda PIX_ADDR
   113  ed83 18                 	clc
   114  ed84 6910               	adc #16
   115  ed86 9002               	bcc +
   116  ed88 e61f               	inc PIX_ADDR + 1
   117                          +
   118  ed8a 851e               	sta PIX_ADDR
   119                          
   120  ed8c e8                 	inx
   121  ed8d e040               	cpx #64
   122  ed8f d0de               	bne .imageLoop
   123                          
   124  ed91 60                 	rts
   125                          	
   126                          	
   127                          ; -----------------------------------------------------------------------------
   128                          ; lcdImageVflip: Output a full-screen image from memory (XY lower-left)
   129                          ; -----------------------------------------------------------------------------
   130                          ; Inputs:
   131                          ;  BITMAP_ADDR_H: Contains page-aligned address of 1-bit 128x64 bitmap
   132                          ; -----------------------------------------------------------------------------
   133                          lcdImageVflip:
   134                          
   135  ed92 a520               	lda BITMAP_ADDR_H
   136  ed94 18                 	clc
   137  ed95 6903               	adc #3
   138  ed97 851f               	sta PIX_ADDR + 1
   139  ed99 a2f0               	ldx #240
   140  ed9b 861e               	stx PIX_ADDR
   141  ed9d a200               	ldx #0
   142                          
   143                          .imageLoopV:
   144                          
   145                          	; x in the range 0-63
   146  ed9f 204ced             	jsr lcdGraphicsSetRow
   147                          
   148  eda2 a000               	ldy #0
   149                          .imgRowLoopV
   150  eda4 201dee             	jsr lcdWait
   151                          	
   152  eda7 b11e               	lda (PIX_ADDR), y
   153  eda9 8d037f             	sta LCD_DATA
   154                          	
   155  edac c8                 	iny
   156  edad c010               	cpy #16
   157  edaf d0f3               	bne .imgRowLoopV
   158                          	
   159  edb1 a51e               	lda PIX_ADDR
   160  edb3 38                 	sec
   161  edb4 e910               	sbc #16
   162  edb6 b004               	bcs +
   163  edb8 a9f0               	lda #240
   164  edba c61f               	dec PIX_ADDR + 1
   165                          +
   166  edbc 851e               	sta PIX_ADDR
   167                          
   168  edbe e8                 	inx
   169  edbf e040               	cpx #64
   170  edc1 d0dc               	bne .imageLoopV
   171                          
   172  edc3 60                 	rts

; ******** Source: ../lib\lcd\lcd.asm
   117                          
   118                          } else {
   119                          	!error "Unknown LCD_MODEL. Must be one of: 1602, 2004 or 12864"
   120                          }}}
   121                          
   122                          
   123                          LCD_INITIALIZE	= LCD_CMD_FUNCTIONSET | LCD_CMD_8BITMODE | LCD_CMD_2LINE
   124                          DISPLAY_MODE	= LCD_CMD_DISPLAY | LCD_CMD_DISPLAY_ON
   125                          
   126                          ASCII_NEWLINE = 10
   127                          
   128                          ; -----------------------------------------------------------------------------
   129                          ; lcdInit: Initialise the LCD
   130                          ; -----------------------------------------------------------------------------
   131                          lcdInit:
   132  edc4 201dee             	jsr lcdWait
   133  edc7 a938               	lda #LCD_INITIALIZE
   134  edc9 8d027f             	sta LCD_CMD
   135  edcc 20d6ed             	jsr lcdClear
   136  edcf 20dfed             	jsr lcdHome
   137  edd2 20f1ed             	jsr lcdDisplayOff
   138  edd5 60                 	rts
   139                          
   140                          
   141                          ; -----------------------------------------------------------------------------
   142                          ; lcdClear: Clears the LCD
   143                          ; -----------------------------------------------------------------------------
   144                          lcdClear:
   145  edd6 201dee             	jsr lcdWait
   146  edd9 a901               	lda #LCD_CMD_CLEAR
   147  eddb 8d027f             	sta LCD_CMD
   148  edde 60                 	rts	
   149                          
   150                          ; -----------------------------------------------------------------------------
   151                          ; lcdHome: Return to the start address
   152                          ; -----------------------------------------------------------------------------
   153                          lcdHome:
   154  eddf 201dee             	jsr lcdWait
   155  ede2 a902               	lda #LCD_CMD_HOME
   156  ede4 8d027f             	sta LCD_CMD
   157  ede7 60                 	rts	
   158                          
   159                          ; -----------------------------------------------------------------------------
   160                          ; lcdDisplayOn: Turn the display on
   161                          ; -----------------------------------------------------------------------------
   162                          lcdDisplayOn:
   163  ede8 201dee             	jsr lcdWait
   164  edeb a90c               	lda #DISPLAY_MODE
   165  eded 8d027f             	sta LCD_CMD
   166  edf0 60                 	rts
   167                          
   168                          ; -----------------------------------------------------------------------------
   169                          ; lcdDisplayOff: Turn the display off
   170                          ; -----------------------------------------------------------------------------
   171                          lcdDisplayOff:
   172  edf1 201dee             	jsr lcdWait
   173  edf4 a908               	lda #LCD_CMD_DISPLAY
   174  edf6 8d027f             	sta LCD_CMD
   175  edf9 60                 	rts
   176                          
   177                          ; -----------------------------------------------------------------------------
   178                          ; lcdCursorOn: Show cursor
   179                          ; -----------------------------------------------------------------------------
   180                          lcdCursorOn:
   181  edfa 201dee             	jsr lcdWait
   182  edfd a90e               	lda #DISPLAY_MODE | LCD_CMD_DISPLAY_CURSOR
   183  edff 8d027f             	sta LCD_CMD
   184  ee02 60                 	rts	
   185                          
   186                          ; -----------------------------------------------------------------------------
   187                          ; lcdCursorOff: Hide cursor
   188                          ; -----------------------------------------------------------------------------
   189                          lcdCursorOff:
   190  ee03 201dee             	jsr lcdWait
   191  ee06 a90c               	lda #DISPLAY_MODE
   192  ee08 8d027f             	sta LCD_CMD
   193  ee0b 60                 	rts	
   194                          
   195                          ; -----------------------------------------------------------------------------
   196                          ; lcdCursorBlinkOn: Show cursor
   197                          ; -----------------------------------------------------------------------------
   198                          lcdCursorBlinkOn:
   199  ee0c 201dee             	jsr lcdWait
   200  ee0f a90f               	lda #DISPLAY_MODE | LCD_CMD_DISPLAY_CURSOR | LCD_CMD_DISPLAY_CURSOR_BLINK
   201  ee11 8d027f             	sta LCD_CMD
   202  ee14 60                 	rts	
   203                          
   204                          ; -----------------------------------------------------------------------------
   205                          ; lcdDetect: Do we have an LCD plugged in?
   206                          ; -----------------------------------------------------------------------------
   207                          ; Outputs:
   208                          ;  C: 1 if exists. 0 if not
   209                          ; -----------------------------------------------------------------------------
   210                          lcdDetect:
   211  ee15 18                 	clc
   212  ee16 ad027f             	lda LCD_CMD
   213  ee19 d001               	bne +
   214  ee1b 38                 	sec
   215                          +
   216  ee1c 60                 	rts
   217                          
   218                          
   219                          ; -----------------------------------------------------------------------------
   220                          ; lcdWait: Wait until the LCD is no longer busy
   221                          ; -----------------------------------------------------------------------------
   222                          ; Outputs:
   223                          ;  A: Current LCD address
   224                          ; -----------------------------------------------------------------------------
   225                          lcdWait:
   226  ee1d ad027f             	lda LCD_CMD
   227  ee20 30fb               	bmi lcdWait  ; branch if bit 7 is set
   228  ee22 60                 	rts
   229                          
   230                          ; -----------------------------------------------------------------------------
   231                          ; lcdWaitPreserve: Wait until the LCD is no longer busy Preserves A, address in x
   232                          ; -----------------------------------------------------------------------------
   233                          lcdWaitPreserve:
   234  ee23 ac027f             	ldy LCD_CMD
   235  ee26 30fb               	bmi lcdWaitPreserve; branch if bit 7 is set
   236  ee28 60                 	rts
   237                          
   238                          ; -----------------------------------------------------------------------------
   239                          ; lcdRead: Read a character from the LCD
   240                          ; -----------------------------------------------------------------------------
   241                          ; Outputs:
   242                          ;  A: Character read
   243                          ; -----------------------------------------------------------------------------
   244                          lcdRead:
   245  ee29 201dee             	jsr lcdWait
   246  ee2c ad037f             	lda LCD_DATA
   247  ee2f 60                 	rts
   248                          
   249                          ; -----------------------------------------------------------------------------
   250                          ; lcdPrint: Print a null-terminated string
   251                          ; -----------------------------------------------------------------------------
   252                          ; Inputs:
   253                          ;  STR_ADDR: Contains address of null-terminated string
   254                          ; -----------------------------------------------------------------------------
   255                          lcdPrint:
   256  ee30 a000               	ldy #0
   257                          -
   258  ee32 201dee             	jsr lcdWait
   259  ee35 b134               	lda (STR_ADDR), y
   260  ee37 f012               	beq ++
   261  ee39 c90a               	cmp #ASCII_NEWLINE ; check for newline
   262  ee3b d007               	bne +
   263  ee3d 200ef0             	jsr lcdNextLine
   264  ee40 c8                 	iny
   265  ee41 4c32ee             	jmp -
   266                          + 
   267  ee44 8d037f             	sta LCD_DATA
   268  ee47 c8                 	iny
   269  ee48 4c32ee             	jmp -
   270                          ++
   271  ee4b 60                 	rts
   272                          
   273                          ; -----------------------------------------------------------------------------
   274                          ; lcdChar: Output a character
   275                          ; -----------------------------------------------------------------------------
   276                          ; Inputs:
   277                          ;  A: The character to output
   278                          ; -----------------------------------------------------------------------------
   279                          lcdChar:
   280  ee4c 2023ee             	jsr lcdWaitPreserve
   281  ee4f 8d037f             	sta LCD_DATA
   282  ee52 60                 	rts
   283                          
   284                          ; -----------------------------------------------------------------------------
   285                          ; lcdCharScroll: Output a character, scroll if required
   286                          ; -----------------------------------------------------------------------------
   287                          ; Inputs:
   288                          ;  A: The character to output
   289                          ; -----------------------------------------------------------------------------
   290                          lcdCharScroll:
   291  ee53 2023ee             	jsr lcdWaitPreserve
   292  ee56 8d037f             	sta LCD_DATA
   293                          
   294                          	; Y is previous address
   295  ee59 2025ef             	jsr lcdCurrentLine
   296  ee5c 8528               	sta LCD_TMP1
   297  ee5e 2023ee             	jsr lcdWaitPreserve
   298  ee61 2025ef             	jsr lcdCurrentLine
   299  ee64 4528               	eor LCD_TMP1
   300  ee66 f007               	beq +
   301  ee68 e628               	inc LCD_TMP1
   302  ee6a a528               	lda LCD_TMP1
   303  ee6c 4cbfef             	jmp lcdGotoLine
   304                          +
   305  ee6f 60                 	rts
   306                          
   307                          ; -----------------------------------------------------------------------------
   308                          ; lcdBackspace: Backspace a character
   309                          ; -----------------------------------------------------------------------------
   310                          lcdBackspace:
   311  ee70 2023ee             	jsr lcdWaitPreserve
   312                          	; Y is previous address
   313  ee73 2025ef             	jsr lcdCurrentLine
   314  ee76 8528               	sta LCD_TMP1
   315                          
   316  ee78 a910               	lda #LCD_CMD_SHIFT | LCD_CMD_SHIFT_LEFT
   317  ee7a 8d027f             	sta LCD_CMD
   318  ee7d 201dee             	jsr lcdWait
   319  ee80 2023ee             	jsr lcdWaitPreserve
   320  ee83 2025ef             	jsr lcdCurrentLine
   321  ee86 4528               	eor LCD_TMP1
   322  ee88 f009               	beq +
   323  ee8a c628               	dec LCD_TMP1
   324  ee8c 3005               	bmi +
   325  ee8e a528               	lda LCD_TMP1
   326  ee90 4c28ef             	jmp lcdGotoLineEnd
   327                          +
   328  ee93 201dee             	jsr lcdWait
   329  ee96 a920               	lda #' '
   330  ee98 8d037f             	sta LCD_DATA
   331  ee9b 201dee             	jsr lcdWait
   332  ee9e a910               	lda #LCD_CMD_SHIFT | LCD_CMD_SHIFT_LEFT
   333  eea0 8d027f             	sta LCD_CMD
   334                          
   335  eea3 60                 	rts
   336                          
   337                          ; -----------------------------------------------------------------------------
   338                          ; lcdInt8: Output an 8-bit integer
   339                          ; -----------------------------------------------------------------------------
   340                          ; Inputs:
   341                          ;  A: The value to output
   342                          ; -----------------------------------------------------------------------------
   343                          lcdInt8:
   344                          
   345                          .B = LCD_TMP1
   346                          .C = LCD_TMP2
   347                          
   348  eea4 48                 	pha
   349  eea5 a201               	ldx #1
   350  eea7 8629               	stx .C
   351  eea9 e8                 	inx
   352  eeaa a040               	ldy #$40
   353                          --
   354  eeac 8428               	sty .B
   355  eeae 4a                 	lsr
   356                          -
   357  eeaf 2a                 	rol
   358  eeb0 b005               	bcs +
   359  eeb2 ddd7ee             	cmp .A, x
   360  eeb5 9004               	bcc ++
   361                          + 
   362  eeb7 fdd7ee             	sbc .A, x
   363  eeba 38                 	sec
   364                          ++ 
   365  eebb 2628               	rol .B
   366  eebd 90f0               	bcc -
   367  eebf a8                 	tay
   368  eec0 e429               	cpx .C
   369  eec2 a528               	lda .B
   370  eec4 9004               	bcc +
   371  eec6 f007               	beq ++
   372  eec8 8629               	stx .C
   373                          +
   374  eeca 4930               	eor #$30
   375  eecc 204cee             	jsr lcdChar
   376                          ++
   377  eecf 98                 	tya
   378  eed0 a010               	ldy #$10
   379  eed2 ca                 	dex
   380  eed3 10d7               	bpl --
   381  eed5 68                 	pla
   382  eed6 60                 	rts
   383                          
   384  eed7 80a0c8             .A !byte 128,160,200
   385                          
   386                          
   387                          ; -----------------------------------------------------------------------------
   388                          ; lcdHex8: Output an 8-bit byte as hexadecimal
   389                          ; -----------------------------------------------------------------------------
   390                          ; Inputs:
   391                          ;  A: The value to output
   392                          ; -----------------------------------------------------------------------------
   393                          lcdHex8:
   394  eeda 48                 	pha
   395  eedb 4a                 	lsr
   396  eedc 4a                 	lsr
   397  eedd 4a                 	lsr
   398  eede 4a                 	lsr
   399  eedf aa                 	tax
   400  eee0 bdf3ee             	lda .H, x
   401  eee3 204cee             	jsr lcdChar
   402  eee6 68                 	pla
   403  eee7 48                 	pha
   404  eee8 290f               	and #$0f
   405  eeea aa                 	tax
   406  eeeb bdf3ee             	lda .H, x
   407  eeee 204cee             	jsr lcdChar
   408  eef1 68                 	pla
   409  eef2 60                 	rts
   410                          
   411  eef3 3031323334353637....H !text "0123456789abcdef"
   412                          
   413                          
   414                          !if LCD_ROWS > 2 {
   415                          
   416                          lcdCurrentLine4:
   417  ef03 c018               	cpy #LCD_ADDR_LINE4
   418  ef05 b00e               	bcs .lcdLine4
   419  ef07 c010               	cpy #LCD_ADDR_LINE2
   420  ef09 b017               	bcs .lcdLine2
   421  ef0b c008               	cpy #LCD_ADDR_LINE3
   422  ef0d b003               	bcs .lcdLine3
   423  ef0f 4c1fef             	jmp .lcdLine1
   424                          
   425                          .lcdLine3
   426  ef12 a903               	lda #3
   427  ef14 60                 	rts
   428                          
   429                          .lcdLine4
   430  ef15 a904               	lda #4
   431  ef17 60                 	rts
   432                          
   433                          } ; LCD_ROWS > 2
   434                          
   435                          lcdCurrentLine2:
   436  ef18 c010               	cpy #LCD_ADDR_LINE1+LCD_COLUMNS;16;LCD_ADDR_LINE2
   437  ef1a 9003               	bcc .lcdLine1
   438  ef1c 4c22ef             	jmp .lcdLine2
   439                          
   440                          .lcdLine1
   441  ef1f a901               	lda #1
   442  ef21 60                 	rts
   443                          
   444                          .lcdLine2
   445  ef22 a902               	lda #2
   446  ef24 60                 	rts
   447                          
   448                          ; -----------------------------------------------------------------------------
   449                          ; lcdCurrentLine: Return the current line/row
   450                          ; -----------------------------------------------------------------------------
   451                          lcdCurrentLine:
   452                          !if LCD_ROWS > 2 {
   453  ef25 4c03ef             	jmp lcdCurrentLine4
   454                          } else {
   455                          	jmp lcdCurrentLine2
   456                          }
   457                          
   458                          
   459                          
   460                          ; -----------------------------------------------------------------------------
   461                          ; lcdGotoLineEnd: Go to end of line in 'A'
   462                          ; -----------------------------------------------------------------------------
   463                          lcdGotoLineEnd:
   464                          !if LCD_ROWS > 2 {
   465  ef28 c904               	cmp #4
   466  ef2a f071               	beq lcdLineFourEnd
   467  ef2c c903               	cmp #3
   468  ef2e f04b               	beq lcdLineThreeEnd
   469                          }
   470  ef30 c902               	cmp #2
   471  ef32 f025               	beq lcdLineTwoEnd
   472  ef34 4c37ef             	jmp lcdLineOneEnd
   473                          
   474                          
   475                          ; -----------------------------------------------------------------------------
   476                          ; lcdLineOneEnd: Move cursor to end of line 1
   477                          ; -----------------------------------------------------------------------------
   478                          lcdLineOneEnd:
   479  ef37 48                 	pha
   480                          !if LCD_MODEL = 12864 {
   481  ef38 a987               	lda #(LCD_CMD_SET_DRAM_ADDR | LCD_ADDR_LINE1) + (LCD_COLUMNS/2) - 1
   482  ef3a 8d027f             	sta LCD_CMD
   483  ef3d 2029ee             	jsr lcdRead
   484  ef40 48                 	pha
   485  ef41 a987               	lda #(LCD_CMD_SET_DRAM_ADDR | LCD_ADDR_LINE1) + (LCD_COLUMNS/2) - 1
   486  ef43 8d027f             	sta LCD_CMD
   487  ef46 a920               	lda #' '
   488  ef48 204cee             	jsr lcdChar
   489  ef4b 204cee             	jsr lcdChar
   490  ef4e a987               	lda #(LCD_CMD_SET_DRAM_ADDR | LCD_ADDR_LINE1) + (LCD_COLUMNS/2) - 1
   491  ef50 8d027f             	sta LCD_CMD
   492  ef53 68                 	pla
   493  ef54 204cee             	jsr lcdChar
   494                          } else {
   495                          	lda #(LCD_CMD_SET_DRAM_ADDR | LCD_ADDR_LINE1) + (LCD_COLUMNS) - 2
   496                          	sta LCD_CMD
   497                          	jsr lcdRead
   498                          	pha
   499                          	lda #(LCD_CMD_SET_DRAM_ADDR | LCD_ADDR_LINE1) + (LCD_COLUMNS) - 2
   500                          	sta LCD_CMD
   501                          	lda #' '
   502                          	jsr lcdChar
   503                          	jsr lcdChar
   504                          	lda #(LCD_CMD_SET_DRAM_ADDR | LCD_ADDR_LINE1) + (LCD_COLUMNS) - 2
   505                          	sta LCD_CMD
   506                          	pla
   507                          	jsr lcdChar
   508                          }
   509  ef57 68                 	pla
   510  ef58 60                 	rts
   511                          
   512                          ; -----------------------------------------------------------------------------
   513                          ; lcdLineTwoEnd: Move cursor to end of line 2
   514                          ; -----------------------------------------------------------------------------
   515                          lcdLineTwoEnd:
   516  ef59 48                 	pha
   517                          !if LCD_MODEL = 12864 {
   518  ef5a a997               	lda #(LCD_CMD_SET_DRAM_ADDR | LCD_ADDR_LINE2) + (LCD_COLUMNS/2) - 1
   519  ef5c 8d027f             	sta LCD_CMD
   520  ef5f 2029ee             	jsr lcdRead
   521  ef62 48                 	pha
   522  ef63 a997               	lda #(LCD_CMD_SET_DRAM_ADDR | LCD_ADDR_LINE2) + (LCD_COLUMNS/2) - 1
   523  ef65 8d027f             	sta LCD_CMD
   524  ef68 a920               	lda #' '
   525  ef6a 204cee             	jsr lcdChar
   526  ef6d 204cee             	jsr lcdChar
   527  ef70 a997               	lda #(LCD_CMD_SET_DRAM_ADDR | LCD_ADDR_LINE2) + (LCD_COLUMNS/2) - 1
   528  ef72 8d027f             	sta LCD_CMD
   529  ef75 68                 	pla
   530  ef76 204cee             	jsr lcdChar
   531                          } else {
   532                          	lda #(LCD_CMD_SET_DRAM_ADDR | LCD_ADDR_LINE2) + (LCD_COLUMNS) - 2
   533                          	sta LCD_CMD
   534                          	jsr lcdRead
   535                          	pha
   536                          	lda #(LCD_CMD_SET_DRAM_ADDR | LCD_ADDR_LINE2) + (LCD_COLUMNS) - 2
   537                          	sta LCD_CMD
   538                          	lda #' '
   539                          	jsr lcdChar
   540                          	jsr lcdChar
   541                          	lda #(LCD_CMD_SET_DRAM_ADDR | LCD_ADDR_LINE2) + (LCD_COLUMNS) - 2
   542                          	sta LCD_CMD
   543                          	pla
   544                          	jsr lcdChar
   545                          }
   546  ef79 68                 	pla
   547  ef7a 60                 	rts
   548                          
   549                          
   550                           !if LCD_ROWS > 2 {
   551                          ; -----------------------------------------------------------------------------
   552                          ; lcdLineThreeEnd: Move cursor to end of line 3
   553                          ; -----------------------------------------------------------------------------
   554                          lcdLineThreeEnd:
   555  ef7b 48                 	pha
   556                          !if LCD_MODEL = 12864 {
   557  ef7c a98f               	lda #(LCD_CMD_SET_DRAM_ADDR | LCD_ADDR_LINE3) + (LCD_COLUMNS/2) - 1
   558  ef7e 8d027f             	sta LCD_CMD
   559  ef81 2029ee             	jsr lcdRead
   560  ef84 48                 	pha
   561  ef85 a98f               	lda #(LCD_CMD_SET_DRAM_ADDR | LCD_ADDR_LINE3) + (LCD_COLUMNS/2) - 1
   562  ef87 8d027f             	sta LCD_CMD
   563  ef8a a920               	lda #' '
   564  ef8c 204cee             	jsr lcdChar
   565  ef8f 204cee             	jsr lcdChar
   566  ef92 a98f               	lda #(LCD_CMD_SET_DRAM_ADDR | LCD_ADDR_LINE3) + (LCD_COLUMNS/2) - 1
   567  ef94 8d027f             	sta LCD_CMD
   568  ef97 68                 	pla
   569  ef98 204cee             	jsr lcdChar
   570                          } else {
   571                          	lda #(LCD_CMD_SET_DRAM_ADDR | LCD_ADDR_LINE3) + (LCD_COLUMNS) - 2
   572                          	sta LCD_CMD
   573                          	jsr lcdRead
   574                          	pha
   575                          	lda #(LCD_CMD_SET_DRAM_ADDR | LCD_ADDR_LINE3) + (LCD_COLUMNS) - 2
   576                          	sta LCD_CMD
   577                          	lda #' '
   578                          	jsr lcdChar
   579                          	jsr lcdChar
   580                          	lda #(LCD_CMD_SET_DRAM_ADDR | LCD_ADDR_LINE3) + (LCD_COLUMNS) - 2
   581                          	sta LCD_CMD
   582                          	pla
   583                          	jsr lcdChar
   584                          }
   585  ef9b 68                 	pla
   586  ef9c 60                 	rts
   587                          
   588                          ; -----------------------------------------------------------------------------
   589                          ; lcdLineFourEnd: Move cursor to end of line 4
   590                          ; -----------------------------------------------------------------------------
   591                          lcdLineFourEnd:
   592  ef9d 48                 	pha
   593                          !if LCD_MODEL = 12864 {
   594  ef9e a99f               	lda #(LCD_CMD_SET_DRAM_ADDR | LCD_ADDR_LINE4) + (LCD_COLUMNS/2) - 1
   595  efa0 8d027f             	sta LCD_CMD
   596  efa3 2029ee             	jsr lcdRead
   597  efa6 48                 	pha
   598  efa7 a99f               	lda #(LCD_CMD_SET_DRAM_ADDR | LCD_ADDR_LINE4) + (LCD_COLUMNS/2) - 1
   599  efa9 8d027f             	sta LCD_CMD
   600  efac a920               	lda #' '
   601  efae 204cee             	jsr lcdChar
   602  efb1 204cee             	jsr lcdChar
   603  efb4 a99f               	lda #(LCD_CMD_SET_DRAM_ADDR | LCD_ADDR_LINE4) + (LCD_COLUMNS/2) - 1
   604  efb6 8d027f             	sta LCD_CMD
   605  efb9 68                 	pla
   606  efba 204cee             	jsr lcdChar
   607                          } else {
   608                          	lda #(LCD_CMD_SET_DRAM_ADDR | LCD_ADDR_LINE4) + (LCD_COLUMNS) - 2
   609                          	sta LCD_CMD
   610                          	jsr lcdRead
   611                          	pha
   612                          	lda #(LCD_CMD_SET_DRAM_ADDR | LCD_ADDR_LINE4) + (LCD_COLUMNS) - 2
   613                          	sta LCD_CMD
   614                          	lda #' '
   615                          	jsr lcdChar
   616                          	jsr lcdChar
   617                          	lda #(LCD_CMD_SET_DRAM_ADDR | LCD_ADDR_LINE4) + (LCD_COLUMNS) - 2
   618                          	sta LCD_CMD
   619                          	pla
   620                          	jsr lcdChar
   621                          }
   622  efbd 68                 	pla
   623  efbe 60                 	rts
   624                          
   625                          
   626                          } ; LCD_ROWS > 2
   627                          
   628                          ; -----------------------------------------------------------------------------
   629                          ; lcdGotoLine: Go to line in 'A'
   630                          ; -----------------------------------------------------------------------------
   631                          lcdGotoLine:
   632                          !if LCD_ROWS > 2 {
   633  efbf c904               	cmp #4
   634  efc1 f027               	beq lcdLineFour
   635  efc3 c903               	cmp #3
   636  efc5 f01b               	beq lcdLineThree
   637                          }
   638  efc7 c902               	cmp #2
   639  efc9 f00f               	beq lcdLineTwo
   640  efcb c901               	cmp #1
   641  efcd f003               	beq lcdLineOne
   642  efcf 4c22f0             	jmp lcdScrollUp
   643                          
   644                          
   645                          ; -----------------------------------------------------------------------------
   646                          ; lcdLineOne: Move cursor to line 1
   647                          ; -----------------------------------------------------------------------------
   648                          lcdLineOne:
   649  efd2 48                 	pha
   650  efd3 a980               	lda #(LCD_CMD_SET_DRAM_ADDR | LCD_ADDR_LINE1)
   651  efd5 8d027f             	sta LCD_CMD
   652  efd8 68                 	pla
   653  efd9 60                 	rts
   654                          
   655                          ; -----------------------------------------------------------------------------
   656                          ; lcdLineTwo: Move cursor to line 2
   657                          ; -----------------------------------------------------------------------------
   658                          lcdLineTwo:
   659  efda 48                 	pha
   660  efdb a990               	lda #(LCD_CMD_SET_DRAM_ADDR | LCD_ADDR_LINE2)
   661  efdd 8d027f             	sta LCD_CMD
   662  efe0 68                 	pla
   663  efe1 60                 	rts
   664                          
   665                          
   666                           !if LCD_ROWS > 2 {
   667                          ; -----------------------------------------------------------------------------
   668                          ; lcdLineThree: Move cursor to line 3
   669                          ; -----------------------------------------------------------------------------
   670                          lcdLineThree:
   671  efe2 48                 	pha
   672  efe3 a988               	lda #(LCD_CMD_SET_DRAM_ADDR | LCD_ADDR_LINE3)
   673  efe5 8d027f             	sta LCD_CMD
   674  efe8 68                 	pla
   675  efe9 60                 	rts
   676                          
   677                          ; -----------------------------------------------------------------------------
   678                          ; lcdLineFour: Move cursor to line 4
   679                          ; -----------------------------------------------------------------------------
   680                          lcdLineFour:
   681  efea 48                 	pha
   682  efeb a998               	lda #(LCD_CMD_SET_DRAM_ADDR | LCD_ADDR_LINE4)
   683  efed 8d027f             	sta LCD_CMD
   684  eff0 68                 	pla
   685  eff1 60                 	rts
   686                           
   687                          ; -----------------------------------------------------------------------------
   688                          ; lcdNextLine4: Move cursor to next line (4-row LCD version)
   689                          ; -----------------------------------------------------------------------------
   690                          lcdNextLine4:
   691  eff2 201dee             	jsr lcdWait
   692                          	; A now contains address
   693  eff5 c918               	cmp #LCD_ADDR_LINE4
   694  eff7 b029               	bcs lcdScrollUp
   695  eff9 c910               	cmp #LCD_ADDR_LINE2
   696  effb b0e5               	bcs lcdLineThree
   697  effd c908               	cmp #LCD_ADDR_LINE3
   698  efff b0e9               	bcs lcdLineFour
   699                          	
   700  f001 4cdaef             	jmp lcdLineTwo
   701                           }
   702                           
   703                          
   704                          ; -----------------------------------------------------------------------------
   705                          ; lcdNextLine2: Move cursor to next line (2-row LCD version)
   706                          ; -----------------------------------------------------------------------------
   707                          lcdNextLine2:
   708  f004 201dee             	jsr lcdWait
   709                          	; A now contains address
   710  f007 c910               	cmp #LCD_ADDR_LINE2
   711  f009 b017               	bcs lcdScrollUp
   712  f00b 4cdaef             	jmp lcdLineTwo
   713                          
   714                          ; -----------------------------------------------------------------------------
   715                          ; lcdNextLine: Move cursor to next line
   716                          ; -----------------------------------------------------------------------------
   717                          lcdNextLine:
   718                          !if LCD_ROWS > 2 {
   719  f00e 4cf2ef             	jmp lcdNextLine4
   720                          } else {
   721                          	jmp lcdNextLine2
   722                          }
   723                          
   724                          ; -----------------------------------------------------------------------------
   725                          ; lcdReadLine: Reads a line from the display
   726                          ; -----------------------------------------------------------------------------
   727                          ; Inputs:
   728                          ;  STR_ADDR: Contains address to output null-terminated line to
   729                          ; -----------------------------------------------------------------------------
   730                          lcdReadLine:
   731  f011 a000               	ldy #0
   732                          -
   733  f013 2029ee             	jsr lcdRead
   734  f016 9134               	sta (STR_ADDR), y
   735  f018 c8                 	iny
   736  f019 c010               	cpy #LCD_COLUMNS
   737  f01b d0f6               	bne -
   738  f01d a900               	lda #0
   739  f01f 9134               	sta (STR_ADDR), y
   740  f021 60                 	rts
   741                          
   742                          ; -----------------------------------------------------------------------------
   743                          ; lcdScrollUp: Scroll the LCD up one line
   744                          ; -----------------------------------------------------------------------------
   745                          lcdScrollUp:
   746  f022 48                 	pha
   747                          
   748  f023 2003ee             	jsr lcdCursorOff
   749                          
   750  f026 a958               	lda #<.LCD_BUFFER_ADDR
   751  f028 8534               	sta STR_ADDR_L
   752  f02a a97b               	lda #>.LCD_BUFFER_ADDR
   753  f02c 8535               	sta STR_ADDR_H
   754                          
   755  f02e 201dee             	jsr lcdWait
   756  f031 20daef             	jsr lcdLineTwo
   757  f034 2011f0             	jsr lcdReadLine
   758  f037 201dee             	jsr lcdWait
   759  f03a 20d2ef             	jsr lcdLineOne
   760  f03d 2030ee             	jsr lcdPrint
   761  f040 201dee             	jsr lcdWait
   762                          
   763                          !if LCD_ROWS > 2 {
   764                          
   765  f043 20e2ef             	jsr lcdLineThree
   766  f046 2011f0             	jsr lcdReadLine
   767  f049 201dee             	jsr lcdWait
   768  f04c 20daef             	jsr lcdLineTwo
   769  f04f 2030ee             	jsr lcdPrint
   770                          	
   771  f052 201dee             	jsr lcdWait
   772  f055 20eaef             	jsr lcdLineFour
   773  f058 2011f0             	jsr lcdReadLine
   774  f05b 201dee             	jsr lcdWait
   775  f05e 20e2ef             	jsr lcdLineThree
   776  f061 2030ee             	jsr lcdPrint
   777                          	
   778  f064 201dee             	jsr lcdWait
   779  f067 20eaef             	jsr lcdLineFour
   780                          } else {
   781                          	jsr lcdLineTwo
   782                          }
   783                          
   784  f06a a210               	ldx #LCD_COLUMNS
   785                          -
   786  f06c 48a920204cee68     	+lcdChar ' '
   787  f073 ca                 	dex
   788  f074 d0f6               	bne -
   789  f076 201dee             	jsr lcdWait
   790                          !if LCD_ROWS > 2 {
   791  f079 20eaef             	jsr lcdLineFour
   792                          } else {
   793                          	jsr lcdLineTwo
   794                          }
   795                          
   796  f07c 200cee             	jsr lcdCursorBlinkOn
   797                          
   798  f07f 68                 	pla
   799  f080 60                 	rts
   800                          
   801                          ; -----------------------------------------------------------------------------
   802                          ; lcdConsoleOut: Print a null-terminated string
   803                          ; -----------------------------------------------------------------------------
   804                          ; Inputs:
   805                          ;  'A': Character to output to console
   806                          ; -----------------------------------------------------------------------------
   807                          lcdConsoleOut:
   808  f081 8c807b                     sty .LCD_REGY_TMP
   809  f084 c90a                       cmp #ASCII_RETURN
   810  f086 f013                       beq .newline
   811  f088 c908                       cmp #ASCII_BACKSPACE
   812  f08a f015                       beq .backspace
   813  f08c c90d                       cmp #ASCII_CR   ; omit these
   814  f08e f007                       beq .endOut
   815  f090 c900                       cmp #0
   816  f092 f003                       beq .endOut
   817                          
   818                                  ; regular character
   819  f094 2053ee                     jsr lcdCharScroll ; outputs A to the LCD - auto-scrolls too :)
   820                          
   821                          .endOut:
   822  f097 ac807b                     ldy .LCD_REGY_TMP
   823  f09a 60                         rts
   824                          
   825                          .newline
   826  f09b 200ef0                     jsr lcdNextLine ; scroll to the next line... scroll screen if on last line
   827  f09e 4c97f0                     jmp .endOut
   828                          
   829                          .backspace
   830  f0a1 2070ee                     jsr lcdBackspace 
   831  f0a4 4c97f0                     jmp .endOut
   832                          
   833                          ; -----------------------------------------------------------------------------
   834                          ; lcdConsolePrint: Print a null-terminated string (console mode)
   835                          ; -----------------------------------------------------------------------------
   836                          ; Inputs:
   837                          ;  STR_ADDR: Contains address of null-terminated string
   838                          ; -----------------------------------------------------------------------------
   839                          lcdConsolePrint:
   840  f0a7 a000               	ldy #0
   841                          -
   842  f0a9 b134               	lda (STR_ADDR), y
   843  f0ab f006               	beq +
   844  f0ad 2081f0                     jsr lcdConsoleOut
   845  f0b0 c8                 	iny
   846  f0b1 d0f6               	bne -
   847                          +
   848  f0b3 60                 	rts
   849                          

; ******** Source: kernel.asm
   168                          

; ******** Source: ../lib\gfx\tilemap.asm
     1                          ; 6502 - Tilemap
     2                          ;
     3                          ; Copyright (c) 2021 Troy Schrapel
     4                          ;
     5                          ; This code is licensed under the MIT license
     6                          ;
     7                          ; https://github.com/visrealm/hbc-56
     8                          ;
     9                          ;
    10                          ; Tilemap structure
    11                          ; ---------------------
    12                          ; BufferAddressH   (Page-aligned buffer - MSB)
    13                          ; Size
    14                          ; TilesetAddressH  (Page-aligned tilset - MSB)
    15                          ; InvertAddressH   (Page-aligned invert flags - MSB) (optional)
    16                          ; DirtyAddressH    (Page-aligned dirty flags - MSB)  (optional)
    17                          

; ******** Source: ../lib\gfx\tilemap.inc
     1                          ; 6502 - Tilemap
     2                          ;
     3                          ; Copyright (c) 2021 Troy Schrapel
     4                          ;
     5                          ; This code is licensed under the MIT license
     6                          ;
     7                          ; https://github.com/visrealm/hbc-56
     8                          ;
     9                          ;
    10                          
    11                          
    12                          
    13                          !macro tilemapCreate .tilemapStructAddr, .bufferAddr, .tilesetAddr, .sizeFlags, .tileSizePx, .invertAddr, .dirtyAddr {
    14                          	!if <.tilesetAddr != 0 { !error "tilemapCreate: Tileset address must be page-aligned",.tilesetAddr }
    15                          	!if >.tilesetAddr < 3 { !error "tilemapCreate: Tileset address must be greater than $2ff",.tilesetAddr }
    16                          	!if <.bufferAddr != 0 { !error "tilemapCreate: Buffer address must be page-aligned",.bufferAddr }
    17                          	!if >.bufferAddr < 3 { !error "tilemapCreate: Buffer address must be greater than $2ff",.bufferAddr }
    18                          	!if .invertAddr != 0 and <.invertAddr != 0  {!error "tilemapCreate: Invert address must be page-aligned", .invertAddr}
    19                          	!if .invertAddr != 0 and >.invertAddr < 3  {!error "tilemapCreate: Invert address must be greater than $2ff", .invertAddr}
    20                          	!if .dirtyAddr != 0 and <.dirtyAddr != 0  {!error "tilemapCreate: Dirty address must be page-aligned", .dirtyAddr}
    21                          	!if .dirtyAddr != 0 and >.dirtyAddr < 3  {!error "tilemapCreate: Dirty address must be greater than $2ff", .dirtyAddr}
    22                          	!if .tileSizePx != 4 and .tileSizePx != 8 {!error "tilemapCreate: Tile size must be 4 or 8 pixels",.tileSizePx}
    23                          
    24                          	lda #<.tilemapStructAddr
    25                          	sta TILEMAP_ADDR
    26                          	lda #>.tilemapStructAddr
    27                          	sta TILEMAP_ADDR + 1
    28                          
    29                          	lda #>.bufferAddr
    30                          	sta .tilemapStructAddr + TILEMAP_BUFFER_ADDR
    31                          	lda #.sizeFlags
    32                          	sta .tilemapStructAddr + TILEMAP_SIZE
    33                          	lda #>.tilesetAddr
    34                          	sta .tilemapStructAddr + TILEMAP_TILES_ADDR
    35                          	lda #>.invertAddr
    36                          	sta .tilemapStructAddr + TILEMAP_INVERT_ADDR
    37                          	lda #>.dirtyAddr
    38                          	sta .tilemapStructAddr + TILEMAP_DIRTY_ADDR
    39                          	lda #.tileSizePx
    40                          	sta .tilemapStructAddr + TILEMAP_TILE_SIZE_PX
    41                          
    42                          	jsr tilemapInit
    43                          }
    44                          
    45                          !macro tilemapCreateDefault .sizeFlags, .tilesetAddr {
    46                          	+tilemapCreate TILEMAP_FIXED_ADDRESS, TILEMAP_DEFAULT_BUFFER_ADDRESS, .tilesetAddr, .sizeFlags, 8, $0, $0
    47                          }
    48                          
    49                          !macro tilemapSetActive .tilemapStructAddr {
    50                          	lda #<.tilemapStructAddr
    51                          	sta TILEMAP_ADDR
    52                          	lda #>.tilemapStructAddr
    53                          	sta TILEMAP_ADDR + 1
    54                          
    55                          	jsr tilemapSetActive

; ******** Source: ../lib\gfx\tilemap.asm
    19                          
    20                          HAVE_TILEMAP = 1
    21                          
    22                          
    23                          !ifndef TILEMAP_ZP_START { TILEMAP_ZP_START = $20
    24                                  !warn "TILEMAP_ZP_START not provided. Defaulting to ", TILEMAP_ZP_START
    25                          }
    26                          
    27                          !ifndef TILEMAP_RAM_START { TILEMAP_RAM_START = $7a00
    28                                  !warn "TILEMAP_RAM_START not provided. Defaulting to ", TILEMAP_RAM_START
    29                          }
    30                          
    31                          !if (TILEMAP_RAM_START & $ff) != 0 {
    32                                  !error "TILEMAP_RAM_START must be on a page boundary"
    33                          }
    34                          
    35                          ; -------------------------
    36                          ; Tilemap structure
    37                          ; -------------------------
    38                          TILEMAP_BUFFER_ADDR	= 0				; High byte of page-aligned buffer
    39                          TILEMAP_SIZE		= 1	; Size flags
    40                          TILEMAP_TILES_ADDR	= 2
    41                          TILEMAP_INVERT_ADDR	= 3	; High byte of tilemap
    42                          TILEMAP_DIRTY_ADDR	= 4
    43                          TILEMAP_WIDTH_TILES     = 5
    44                          TILEMAP_HEIGHT_TILES    = 6
    45                          TILEMAP_TILE_SIZE_PX    = 7
    46                          TILEMAP_STRUCTURE_SIZE  = TILEMAP_TILE_SIZE_PX
    47                          
    48                          
    49                          ; -------------------------
    50                          ; Zero page
    51                          ; -------------------------
    52                          TILEMAP_ADDR		= TILEMAP_ZP_START
    53                          TILEMAP_TMP_BUFFER_ADDR	= TILEMAP_ZP_START + 2
    54                          TILEMAP_TMP_TILES_ADDR	= TILEMAP_ZP_START + 4
    55                          TILEMAP_ZP_SIZE		= 6
    56                          
    57                          ; -----------------------------------------------------------------------------
    58                          ; High RAM
    59                          ; -----------------------------------------------------------------------------
    60                          TILEMAP_DEFAULT_BUFFER_ADDRESS = TILEMAP_RAM_START
    61                          
    62                          TILEMAP_TMP_BUF_ROW	= TILEMAP_RAM_START + $80
    63                          TILEMAP_TMP_BUF_COL	= TILEMAP_RAM_START + $81
    64                          TILEMAP_TMP_TILE_ROW	= TILEMAP_RAM_START + $82
    65                          TILEMAP_TMP_OUTPUT_ROW	= TILEMAP_RAM_START + $83
    66                          TILEMAP_TMP_1		= TILEMAP_RAM_START + $84
    67                          TILEMAP_TMP_2		= TILEMAP_RAM_START + $85
    68                          TILEMAP_TMP_TILES_W	= TILEMAP_RAM_START + $86
    69                          TILEMAP_TMP_TILES_H	= TILEMAP_RAM_START + $87
    70                          TILEMAP_TMP_TILE_SIZE	= TILEMAP_RAM_START + $88
    71                          
    72                          TILEMAP_FIXED_ADDRESS   = TILEMAP_RAM_START + $100
    73                          
    74                          TILEMAP_RAM_SIZE        = (TILEMAP_FIXED_ADDRESS + TILEMAP_STRUCTURE_SIZE) - TILEMAP_RAM_START
    75                          
    76                          
    77                          
    78                          !if TILEMAP_ZP_END < (TILEMAP_ZP_START + TILEMAP_ZP_SIZE) {
    79                          	!error "TILEMAP_ZP requires ",TILEMAP_ZP_SIZE," bytes. Allocated ",TILEMAP_ZP_END - TILEMAP_ZP_START
    80                          }
    81                          
    82                          !if TILEMAP_RAM_END < (TILEMAP_RAM_START + TILEMAP_RAM_SIZE) {
    83                          	!error "TILEMAP_RAM requires ",TILEMAP_RAM_SIZE," bytes. Allocated ",TILEMAP_RAM_END - TILEMAP_RAM_START
    84                          }
    85                          
    86                          ; -------------------------
    87                          ; Contants
    88                          ; -------------------------
    89                          TILEMAP_SIZE_X_16	= %00000000
    90                          TILEMAP_SIZE_X_32	= %00000001
    91                          TILEMAP_SIZE_X_64	= %00000010
    92                          TILEMAP_SIZE_Y_8	= %00000000
    93                          TILEMAP_SIZE_Y_16	= %00000100
    94                          TILEMAP_SIZE_Y_32	= %00001000
    95                          
    96                          TILE_SIZE		= 8	; size of each tile (in px)
    97                          
    98                          
    99                          
   100                          
   101                          ; -----------------------------------------------------------------------------
   102                          ; tilemapInit: Initialise a tilemap
   103                          ; -----------------------------------------------------------------------------
   104                          ; Inputs:
   105                          ;  TILEMAP_ADDR: Address of tilemap structure
   106                          ; -----------------------------------------------------------------------------
   107                          tilemapInit:
   108  f0b4 a000               	ldy #0
   109  f0b6 8432               	sty MEM_LEN
   110  f0b8 8433               	sty MEM_LEN + 1
   111  f0ba 842e               	sty MEM_DST
   112  f0bc b118               	lda (TILEMAP_ADDR), y  ; buffer address H
   113  f0be 852f               	sta MEM_DST + 1
   114  f0c0 851b               	sta TILEMAP_TMP_BUFFER_ADDR + 1
   115                          
   116  f0c2 a001               	ldy #TILEMAP_SIZE
   117                          
   118                          @MIN_WIDTH=16
   119                          @MIN_HEIGHT=8
   120                          
   121  f0c4 a910               	lda #@MIN_WIDTH		; minimum width
   122  f0c6 8d817a             	sta TILEMAP_TMP_BUF_COL	; temporary storage for x tiles
   123  f0c9 a908               	lda #@MIN_HEIGHT	; minimum height
   124  f0cb 8d807a             	sta TILEMAP_TMP_BUF_ROW ; temporary storage for y tiles
   125                          
   126  f0ce a900               	lda #0
   127  f0d0 8533               	sta MEM_LEN + 1
   128  f0d2 a980               	lda #(@MIN_WIDTH * @MIN_HEIGHT)	; base size (16 x 8)
   129  f0d4 8532               	sta MEM_LEN     		; size in bytes
   130  f0d6 b118               	lda (TILEMAP_ADDR), y  		; size flags
   131  f0d8 8d847a             	sta TILEMAP_TMP_1
   132  f0db f038               	beq ++
   133                          
   134                          
   135                          	; check size flags, multiple size
   136  f0dd a903               	lda #TILEMAP_SIZE_X_32 | TILEMAP_SIZE_X_64
   137  f0df 2c847a             	bit TILEMAP_TMP_1
   138  f0e2 f015               	beq +
   139  f0e4 0632               	asl MEM_LEN
   140  f0e6 2633               	rol MEM_LEN  + 1
   141  f0e8 0e817a             	asl TILEMAP_TMP_BUF_COL
   142  f0eb a902               	lda #TILEMAP_SIZE_X_64
   143  f0ed 2c847a             	bit TILEMAP_TMP_1
   144  f0f0 f007               	beq +
   145  f0f2 0632               	asl MEM_LEN
   146  f0f4 2633               	rol MEM_LEN  + 1
   147  f0f6 0e817a             	asl TILEMAP_TMP_BUF_COL
   148                          +
   149  f0f9 a90c               	lda #TILEMAP_SIZE_Y_16 | TILEMAP_SIZE_Y_32
   150  f0fb 2c847a             	bit TILEMAP_TMP_1
   151  f0fe f015               	beq ++
   152  f100 0632               	asl MEM_LEN
   153  f102 2633               	rol MEM_LEN  + 1
   154  f104 0e807a             	asl TILEMAP_TMP_BUF_ROW
   155  f107 a908               	lda #TILEMAP_SIZE_Y_32
   156  f109 2c847a             	bit TILEMAP_TMP_1
   157  f10c f007               	beq ++
   158  f10e 0632               	asl MEM_LEN
   159  f110 2633               	rol MEM_LEN  + 1
   160  f112 0e807a             	asl TILEMAP_TMP_BUF_ROW
   161                          ++
   162                          	; MEM_DST and MEM_LEN are set. clear the buffer.
   163  f115 a900               	lda #$00
   164  f117 200de1             	jsr memsetMultiPage
   165                          
   166  f11a ad817a             	lda TILEMAP_TMP_BUF_COL
   167  f11d a005               	ldy #TILEMAP_WIDTH_TILES
   168  f11f 9118               	sta (TILEMAP_ADDR), y
   169                          
   170  f121 ad807a             	lda TILEMAP_TMP_BUF_ROW
   171  f124 a006               	ldy #TILEMAP_HEIGHT_TILES
   172  f126 9118               	sta (TILEMAP_ADDR), y
   173                          
   174                          	; todo: invert & dirty
   175                          
   176  f128 202cf1             	jsr tilemapSetActive
   177                          
   178  f12b 60                 	rts
   179                          
   180                          ; -----------------------------------------------------------------------------
   181                          ; tilemapSetActive: Set the current/active tilemap
   182                          ; -----------------------------------------------------------------------------
   183                          ; Inputs:
   184                          ;  TILEMAP_ADDR: Address of tilemap structure
   185                          ; -----------------------------------------------------------------------------
   186                          tilemapSetActive:
   187  f12c a005               	ldy #TILEMAP_WIDTH_TILES
   188  f12e b118               	lda (TILEMAP_ADDR), y
   189  f130 8d867a             	sta TILEMAP_TMP_TILES_W
   190                          
   191  f133 a006               	ldy #TILEMAP_HEIGHT_TILES
   192  f135 b118               	lda (TILEMAP_ADDR), y
   193  f137 8d877a             	sta TILEMAP_TMP_TILES_H
   194                          
   195  f13a a007               	ldy #TILEMAP_TILE_SIZE_PX
   196  f13c b118               	lda (TILEMAP_ADDR), y
   197  f13e 8d887a             	sta TILEMAP_TMP_TILE_SIZE
   198  f141 60                 	rts
   199                          
   200                          
   201                          !if LCD_GRAPHICS=1 {
   202                          
   203                          ; -----------------------------------------------------------------------------
   204                          ; tilemapRenderRowToLcd: Render a row of the current/active tilemap
   205                          ; -----------------------------------------------------------------------------
   206                          ; Prerequisites:
   207                          ;  tilemapSetActive called for the tilemap
   208                          ; Inputs:
   209                          ;  y: Row to render (0-7)
   210                          ; -----------------------------------------------------------------------------
   211                          tilemapRenderRowToLcd:
   212  f142 98                 	tya
   213  f143 2907               	and #$07
   214  f145 8d807a             	sta TILEMAP_TMP_BUF_ROW
   215  f148 8d857a             	sta TILEMAP_TMP_2
   216  f14b 0a                 	asl
   217  f14c 0a                 	asl
   218  f14d 0a                 	asl
   219  f14e 8d837a             	sta TILEMAP_TMP_OUTPUT_ROW
   220                          
   221  f151 ee857a             	inc TILEMAP_TMP_2
   222                          
   223                          	; set the working tilemap buffer address
   224  f154 a000               	ldy #TILEMAP_BUFFER_ADDR
   225  f156 b118               	lda (TILEMAP_ADDR), y
   226  f158 851b               	sta TILEMAP_TMP_BUFFER_ADDR + 1
   227                          
   228                          	; reset temp variables to zero
   229  f15a a900               	lda #0
   230  f15c 851a               	sta TILEMAP_TMP_BUFFER_ADDR ; LSB
   231  f15e 851c               	sta TILEMAP_TMP_TILES_ADDR  ; LSB
   232  f160 8d817a             	sta TILEMAP_TMP_BUF_COL
   233  f163 8d827a             	sta TILEMAP_TMP_TILE_ROW
   234                          
   235  f166 4c87f1             	jmp .tilemapRenderFrom
   236                          
   237                          
   238                          ; -----------------------------------------------------------------------------
   239                          ; tilemapRenderToLcd: Render the current/active tilemap
   240                          ; -----------------------------------------------------------------------------
   241                          ; Prerequisites:
   242                          ;  tilemapSetActive called for the tilemap
   243                          ; -----------------------------------------------------------------------------
   244                          tilemapRenderToLcd:
   245                          
   246  f169 ad877a             	lda TILEMAP_TMP_TILES_H
   247  f16c 8d857a             	sta TILEMAP_TMP_2
   248                          
   249                          	; set the working tilemap buffer address
   250  f16f a000               	ldy #TILEMAP_BUFFER_ADDR
   251  f171 b118               	lda (TILEMAP_ADDR), y
   252  f173 851b               	sta TILEMAP_TMP_BUFFER_ADDR + 1
   253                          	
   254                          	; reset temp variables to zero
   255  f175 a900               	lda #0
   256  f177 851a               	sta TILEMAP_TMP_BUFFER_ADDR ; LSB
   257  f179 851c               	sta TILEMAP_TMP_TILES_ADDR  ; LSB
   258  f17b 8d807a             	sta TILEMAP_TMP_BUF_ROW
   259  f17e 8d817a             	sta TILEMAP_TMP_BUF_COL
   260  f181 8d827a             	sta TILEMAP_TMP_TILE_ROW
   261  f184 8d837a             	sta TILEMAP_TMP_OUTPUT_ROW
   262                          
   263                          .tilemapRenderFrom
   264  f187 ae837a             	ldx TILEMAP_TMP_OUTPUT_ROW
   265  f18a 204ced             	jsr lcdGraphicsSetRow
   266                          
   267                          	; iterate over the buffer rows and columns
   268                          @renderRow
   269                          ;!byte $db
   270                          
   271  f18d a900               	lda #0
   272  f18f 8d847a             	sta TILEMAP_TMP_1
   273                          
   274                          	; set the working tileset address
   275  f192 a002               	ldy #TILEMAP_TILES_ADDR
   276  f194 b118               	lda (TILEMAP_ADDR), y
   277  f196 851d               	sta TILEMAP_TMP_TILES_ADDR + 1
   278                          
   279                          	; get tile offset
   280  f198 ad807a             	lda TILEMAP_TMP_BUF_ROW
   281  f19b 0a                 	asl
   282  f19c 0a                 	asl
   283  f19d 0a                 	asl
   284  f19e 0a                 	asl
   285  f19f 18                 	clc
   286  f1a0 6d817a             	adc TILEMAP_TMP_BUF_COL
   287  f1a3 a8                 	tay
   288                          
   289                          
   290                          	; load the tile index
   291  f1a4 b11a               	lda (TILEMAP_TMP_BUFFER_ADDR), y
   292                          
   293                          	; multiply by 8 to get an offset into the tileset buffer
   294                          	; storing overflow in TILEMAP_TMP_1
   295  f1a6 0a                 	asl
   296  f1a7 2e847a             	rol TILEMAP_TMP_1
   297  f1aa 0a                 	asl 
   298  f1ab 2e847a             	rol TILEMAP_TMP_1
   299  f1ae 0a                 	asl
   300  f1af 2e847a             	rol TILEMAP_TMP_1
   301                          
   302                          	; add the tile row offset (the row of the current tile)
   303                          	; and set as y index
   304  f1b2 0d827a             	ora TILEMAP_TMP_TILE_ROW
   305  f1b5 a8                 	tay
   306                          
   307                          	; load the overflow and add to the MSB of the tileset address
   308  f1b6 ad847a             	lda TILEMAP_TMP_1
   309  f1b9 18                 	clc
   310  f1ba 651d               	adc TILEMAP_TMP_TILES_ADDR + 1
   311  f1bc 851d               	sta TILEMAP_TMP_TILES_ADDR + 1
   312                          
   313  f1be 201dee             	jsr lcdWait
   314                          
   315                          	; load the byte from the tile
   316  f1c1 b11c               	lda (TILEMAP_TMP_TILES_ADDR), y
   317                          
   318                          	; output the byte
   319  f1c3 8d037f             	sta LCD_DATA
   320                          
   321                          	; increment column and check against # columns
   322  f1c6 ee817a             	inc TILEMAP_TMP_BUF_COL
   323  f1c9 ad867a             	lda TILEMAP_TMP_TILES_W
   324  f1cc cd817a             	cmp TILEMAP_TMP_BUF_COL
   325  f1cf d0bc               	bne @renderRow
   326                          
   327                          	; increment tile row (row within tile) and check against tile size
   328  f1d1 a900               	lda #0
   329  f1d3 8d817a             	sta TILEMAP_TMP_BUF_COL
   330  f1d6 ee827a             	inc TILEMAP_TMP_TILE_ROW
   331  f1d9 ee837a             	inc TILEMAP_TMP_OUTPUT_ROW
   332  f1dc ae837a             	ldx TILEMAP_TMP_OUTPUT_ROW
   333                          
   334  f1df 204ced             	jsr lcdGraphicsSetRow
   335                          
   336  f1e2 ad887a             	lda TILEMAP_TMP_TILE_SIZE
   337  f1e5 cd827a             	cmp TILEMAP_TMP_TILE_ROW
   338  f1e8 d0a3               	bne @renderRow
   339                          
   340                          	; increment row and check against # rows
   341  f1ea a900               	lda #0
   342  f1ec 8d827a             	sta TILEMAP_TMP_TILE_ROW
   343  f1ef ee807a             	inc TILEMAP_TMP_BUF_ROW
   344  f1f2 ad857a             	lda TILEMAP_TMP_2
   345  f1f5 cd807a             	cmp TILEMAP_TMP_BUF_ROW
   346  f1f8 d093               	bne @renderRow
   347                          
   348  f1fa 60                 	rts
   349                          

; ******** Source: kernel.asm
   169                          
   170                          }
   171                          
   172                          !ifndef HBC56_DISABLE_UART {

; ******** Source: ../lib\ser\uart.asm
     1                          ; 6502 - MC68B50 UART
     2                          ;
     3                          ; Copyright (c) 2021 Troy Schrapel
     4                          ;
     5                          ; This code is licensed under the MIT license
     6                          ;
     7                          ; https://github.com/visrealm/hbc-56
     8                          ;
     9                          
    10                          HAVE_UART = 1
    11                          
    12                          ; -------------------------
    13                          ; Constants
    14                          ; -------------------------
    15                          !ifndef UART_IO_PORT { UART_IO_PORT = $20
    16                                  !warn "UART_IO_PORT not provided. Defaulting to ", UART_IO_PORT
    17                          }
    18                          
    19                          !ifndef UART_ZP_START { UART_ZP_START = $40
    20                                  !warn "UART_ZP_START not provided. Defaulting to ", UART_ZP_START
    21                          }
    22                          
    23                          !ifndef UART_RAM_START { UART_RAM_START = $7c80
    24                                  !warn "UART_RAM_START not provided. Defaulting to ", UART_RAM_START
    25                          }
    26                          
    27                          
    28                          ; -----------------------------------------------------------------------------
    29                          ; Zero page
    30                          ; -----------------------------------------------------------------------------
    31                          UART_RX_BUFFER_HEAD  = UART_ZP_START            ; head of circular buffer
    32                          UART_RX_BUFFER_TAIL  = UART_ZP_START + 1        ; tail of circular buffer
    33                          UART_RX_BUFFER_BYTES = UART_ZP_START + 2        ; bytes in buffer
    34                          UART_RX_FLAGS        = UART_ZP_START + 3        ; flags
    35                          @UART_ZP_END         = UART_ZP_START + 4
    36                          
    37                          !if (.UART_ZP_SIZE < @UART_ZP_END - UART_ZP_START) {
    38                                  !error "UART ZP allocation insufficient. Allocated: ", .UART_ZP_SIZE, " Require: ", (@UART_ZP_END - UART_ZP_START)
    39                          }
    40                          
    41                          ; -----------------------------------------------------------------------------
    42                          ; High RAM
    43                          ; -----------------------------------------------------------------------------
    44                          UART_RX_BUFFER       = UART_RAM_START
    45                          UART_RX_BUFFER_SIZE  = $100
    46                          
    47                          @UART_RAM_END        = UART_RAM_START + UART_RX_BUFFER_SIZE
    48                          
    49                          !if (.UART_RAM_SIZE < @UART_RAM_END - UART_RAM_START) {
    50                                  !error "UART RAM allocation insufficient. Allocated: ", .UART_RAM_SIZE, " Require: ", (@UART_RAM_END - UART_RAM_START)
    51                          }
    52                          
    53                          
    54                          ; IO Ports
    55                          UART_REG      = IO_PORT_BASE_ADDRESS | UART_IO_PORT
    56                          UART_DATA     = IO_PORT_BASE_ADDRESS | UART_IO_PORT | $01
    57                          
    58                          ; -----------------------------------------------------------------------------
    59                          ; Constants
    60                          ; -----------------------------------------------------------------------------
    61                          UART_CTL_MASTER_RESET       = %00000011
    62                          UART_CTL_CLOCK_DIV_16       = %00000001
    63                          UART_CTL_CLOCK_DIV_64       = %00000010
    64                          UART_CTL_WORD_7BIT_EPB_2SB  = %00000000
    65                          UART_CTL_WORD_7BIT_OPB_2SB  = %00000100
    66                          UART_CTL_WORD_7BIT_EPB_1SB  = %00001000
    67                          UART_CTL_WORD_7BIT_OPB_1SB  = %00001100
    68                          UART_CTL_WORD_8BIT_2SB      = %00010000
    69                          UART_CTL_WORD_8BIT_1SB      = %00010100
    70                          UART_CTL_WORD_8BIT_EPAR_1SB = %00011000
    71                          UART_CTL_WORD_8BIT_OPAR_1SB = %00011100
    72                          UART_CTL_RX_INT_ENABLE      = %10000000
    73                          
    74                          UART_STATUS_RX_REG_FULL     = %00000001
    75                          UART_STATUS_TX_REG_EMPTY    = %00000010
    76                          UART_STATUS_CARRIER_DETECT  = %00000100
    77                          UART_STATUS_CLEAR_TO_SEND   = %00001000
    78                          UART_STATUS_FRAMING_ERROR   = %00010000
    79                          UART_STATUS_RCVR_OVERRUN    = %00100000
    80                          UART_STATUS_PARITY_ERROR    = %01000000
    81                          UART_STATUS_IRQ             = %10000000
    82                          
    83                          UART_FLOWCTRL_XON           = $11
    84                          UART_FLOWCTRL_XOFF          = $13
    85                          
    86                          UART_RX_BUFFER_XOFF_SIZE    = 192
    87                          UART_RX_BUFFER_XON_SIZE     = 4
    88                          
    89                          
    90                          ; -----------------------------------------------------------------------------
    91                          ; uartInit: Initialise the UART
    92                          ; -----------------------------------------------------------------------------
    93                          uartInit:
    94  f1fb a900                       lda #0
    95  f1fd 852a                       sta UART_RX_BUFFER_HEAD
    96  f1ff 852b                       sta UART_RX_BUFFER_TAIL
    97  f201 852c                       sta UART_RX_BUFFER_BYTES
    98  f203 852d                       sta UART_RX_FLAGS
    99                          
   100  f205 a903                       lda #UART_CTL_MASTER_RESET
   101  f207 8d207f                     sta UART_REG
   102  f20a ea                         nop
   103  f20b ea                         nop
   104                          
   105  f20c a992                       lda #(UART_CTL_CLOCK_DIV_64 | UART_CTL_WORD_8BIT_2SB | UART_CTL_RX_INT_ENABLE)
   106  f20e 8d207f                     sta UART_REG
   107  f211 ea                         nop
   108  f212 ea                         nop
   109                          
   110  f213 203bf2                     jsr uartFlowCtrlXon
   111                          
   112  f216 60                         rts
   113                          
   114                          ; -----------------------------------------------------------------------------
   115                          ; uartIrq: Standard UART IRQ handler
   116                          ; -----------------------------------------------------------------------------
   117                          uartIrq:
   118  f217 a901                       lda #UART_STATUS_RX_REG_FULL
   119  f219 2c207f                     bit UART_REG
   120  f21c f01c                       beq @endFlowControlCheck
   121  f21e ea                         nop
   122  f21f ea                         nop
   123                          
   124  f220 da                         phx
   125  f221 a62a                       ldx UART_RX_BUFFER_HEAD
   126  f223 ad217f                     lda UART_DATA
   127  f226 9d827b                     sta UART_RX_BUFFER, x
   128  f229 e62a                       inc UART_RX_BUFFER_HEAD
   129  f22b e62c                       inc UART_RX_BUFFER_BYTES
   130  f22d fa                         plx
   131                          
   132                          @flowControlCheck
   133                                  ; check flow control
   134  f22e ff2d09                     bbs7 UART_RX_FLAGS, @endFlowControlCheck    ; if already xoff, just leave
   135  f231 a9c0                       lda #UART_RX_BUFFER_XOFF_SIZE               ; otherwise, should we ask for xoff?
   136  f233 c52c                       cmp UART_RX_BUFFER_BYTES
   137  f235 b003                       bcs @endFlowControlCheck                    ; all good
   138  f237 2046f2                     jsr uartFlowCtrlXoff                        ; stop please.
   139                          
   140                          @endFlowControlCheck
   141  f23a 60                         rts
   142                          
   143                          ; -----------------------------------------------------------------------------
   144                          ; uartFlowCtrlXon: Allow client to send data
   145                          ; -----------------------------------------------------------------------------
   146                          uartFlowCtrlXon:
   147  f23b 772d                       rmb7 UART_RX_FLAGS        
   148  f23d a911                       lda #UART_FLOWCTRL_XON
   149  f23f ea                         nop
   150  f240 ea                         nop
   151  f241 ea                         nop
   152  f242 ea                         nop
   153  f243 4c7cf2                     jmp uartOut
   154                          
   155                          ; -----------------------------------------------------------------------------
   156                          ; uartFlowCtrlXoff: Stop client to sending data
   157                          ; -----------------------------------------------------------------------------
   158                          uartFlowCtrlXoff
   159  f246 f72d                       smb7 UART_RX_FLAGS
   160  f248 a913                       lda #UART_FLOWCTRL_XOFF
   161  f24a ea                         nop
   162  f24b ea                         nop
   163  f24c 4c82f2                     jmp uartOutNoBsCheck
   164                          
   165                          ; -----------------------------------------------------------------------------
   166                          ; uartInWait: Input a byte from the UART (wait forever)
   167                          ; -----------------------------------------------------------------------------
   168                          ; Outputs:
   169                          ;   A: Value of the buffer
   170                          ; -----------------------------------------------------------------------------
   171                          uartInWait:
   172  f24f a52a                       lda UART_RX_BUFFER_HEAD
   173  f251 c52b                       cmp UART_RX_BUFFER_TAIL
   174  f253 f0fa                       beq uartInWait
   175  f255 08                         php
   176  f256 78                         sei
   177  f257 8008                       bra .uartIncheckFlowControl
   178                          
   179                          ; -----------------------------------------------------------------------------
   180                          ; uartInNoWait: Input a byte from the UART (don't wait)
   181                          ; -----------------------------------------------------------------------------
   182                          ; Outputs:
   183                          ;   A: Value of the buffer
   184                          ;   C: Set if a byte is read
   185                          ; -----------------------------------------------------------------------------
   186                          uartInNoWait:
   187  f259 08                         php
   188  f25a 78                         sei
   189  f25b a52a                       lda UART_RX_BUFFER_HEAD
   190  f25d c52b                       cmp UART_RX_BUFFER_TAIL
   191  f25f f018                       beq @noData
   192                          
   193                          .uartIncheckFlowControl
   194                                  ; check flow control
   195  f261 7f2d09                     bbr7 UART_RX_FLAGS, @readUartValue  ; if already xon, just exit again
   196  f264 a904                       lda #UART_RX_BUFFER_XON_SIZE        ; otherwise, should we ask for xon?
   197  f266 c52c                       cmp UART_RX_BUFFER_BYTES
   198  f268 9003                       bcc @readUartValue                  ; all good
   199  f26a 203bf2                     jsr uartFlowCtrlXon                 ; continue sending please.
   200                          
   201                          @readUartValue
   202  f26d a62b                       ldx UART_RX_BUFFER_TAIL
   203  f26f bd827b                     lda UART_RX_BUFFER, x
   204  f272 e62b                       inc UART_RX_BUFFER_TAIL
   205  f274 c62c                       dec UART_RX_BUFFER_BYTES
   206  f276 28                         plp
   207  f277 38                         sec
   208  f278 60                         rts
   209                          @noData
   210  f279 28                         plp
   211  f27a 18                         clc
   212  f27b 60                         rts
   213                          
   214                          
   215                          ; -----------------------------------------------------------------------------
   216                          ; uartOut: Output a byte to the UART
   217                          ; -----------------------------------------------------------------------------
   218                          ; Inputs:
   219                          ;   A: Value to output
   220                          ; -----------------------------------------------------------------------------
   221                          uartOut:
   222  f27c c908                       cmp #$08        ; bs
   223  f27e d002                       bne uartOutNoBsCheck
   224  f280 a97f                       lda #$7f        ; del
   225                          uartOutNoBsCheck:
   226  f282 48                         pha
   227  f283 a902                       lda #UART_STATUS_TX_REG_EMPTY
   228                          
   229                          @aciaTestSend
   230  f285 2c207f                     bit UART_REG
   231  f288 ea                         nop
   232  f289 ea                         nop
   233  f28a d002                       bne +
   234  f28c 80f7                       bra @aciaTestSend
   235                          
   236                          +
   237  f28e 68                         pla
   238  f28f 8d217f                     sta UART_DATA
   239  f292 60                         rts
   240                          
   241                          
   242                          ; -----------------------------------------------------------------------------
   243                          ; uartOutString: Output a string to the UART
   244                          ; -----------------------------------------------------------------------------
   245                          ; Inputs:
   246                          ;   A: Value to output
   247                          ; -----------------------------------------------------------------------------
   248                          uartOutString:
   249  f293 a000               	ldy #0
   250                          -
   251  f295 b134               	lda (STR_ADDR), y
   252  f297 f006               	beq +
   253  f299 2082f2                     jsr uartOutNoBsCheck
   254  f29c c8                 	iny
   255  f29d d0f6               	bne -
   256                          +
   257  f29f 60                         rts

; ******** Source: kernel.asm
   173                          
   174                          }
   175                          
   176                          !ifndef HBC56_DISABLE_NES {

; ******** Source: ../lib\inp\nes.asm
     1                          ; 6502 NES Controllers - HBC-56
     2                          ;
     3                          ; Copyright (c) 2021 Troy Schrapel
     4                          ;
     5                          ; This code is licensed under the MIT license
     6                          ;
     7                          ; https://github.com/visrealm/hbc-56
     8                          ;
     9                          
    10                          
    11                          !ifndef NES_IO_PORT { NES_IO_PORT = $82
    12                                  !warn "NES_IO_PORT not provided. Defaulting to ", NES_IO_PORT
    13                          }
    14                          
    15                          !ifndef NES_RAM_START { NES_RAM_START = $7ea1
    16                                  !warn "NES_RAM_START not provided. Defaulting to ", NES_RAM_START
    17                          }
    18                          
    19                          ; -------------------------
    20                          ; High RAM
    21                          ; -------------------------
    22                          NES_TMP        = NES_RAM_START
    23                          NES_RAM_SIZE   = 1
    24                          
    25                          
    26                          !if NES_RAM_END < (NES_RAM_START + NES_RAM_SIZE) {
    27                          	!error "NES_RAM requires ",NES_RAM_SIZE," bytes. Allocated ",NES_RAM_END - NES_RAM_START
    28                          }
    29                          
    30                          
    31                          ; IO Ports
    32                          NES1_IO_ADDR     = IO_PORT_BASE_ADDRESS | NES_IO_PORT
    33                          NES2_IO_ADDR     = IO_PORT_BASE_ADDRESS | NES_IO_PORT | $01
    34                          
    35                          
    36                          NES_RIGHT       = %00000001
    37                          NES_LEFT        = %00000010
    38                          NES_DOWN        = %00000100
    39                          NES_UP          = %00001000
    40                          NES_START       = %00010000
    41                          NES_SELECT      = %00100000
    42                          NES_B           = %01000000
    43                          NES_A           = %10000000
    44                          
    45                          ; -----------------------------------------------------------------------------
    46                          ; nesWaitForPress: Wait for a NES button press (either port)
    47                          ; -----------------------------------------------------------------------------
    48                          nesWaitForPress:
    49  f2a0 a9ff                       lda #$ff
    50                          @notPressed
    51  f2a2 cd827f                     cmp NES1_IO_ADDR
    52  f2a5 d005                       bne @pressed
    53  f2a7 cd837f                     cmp NES2_IO_ADDR
    54  f2aa f0f6                       beq @notPressed
    55                          @pressed
    56  f2ac 60                         rts
    57                          
    58                          ; -----------------------------------------------------------------------------
    59                          ; nes1Pressed: Is a button pressed?
    60                          ; -----------------------------------------------------------------------------
    61                          ; Inputs:
    62                          ;   A: Button to test
    63                          ; Outputs:
    64                          ;   Carry set if pressed, Carry clear if not
    65                          nes1Pressed:
    66  f2ad 2c827f                     bit NES1_IO_ADDR
    67  f2b0 18                         clc
    68  f2b1 d001                       bne +
    69  f2b3 38                         sec
    70                          +
    71  f2b4 60                         rts
    72                          
    73                          ; -----------------------------------------------------------------------------
    74                          ; nes2Pressed: Is a button pressed?
    75                          ; -----------------------------------------------------------------------------
    76                          ; Inputs:
    77                          ;   A: Button to test
    78                          ; Outputs:
    79                          ;   Carry set if pressed, Carry clear if not
    80                          nes2Pressed:
    81  f2b5 2c837f                     bit NES2_IO_ADDR
    82  f2b8 18                         clc
    83  f2b9 d001                       bne +
    84  f2bb 38                         sec
    85                          +
    86  f2bc 60                         rts
    87                          
    88                          
    89                          
    90                          

; ******** Source: kernel.asm
   177                          
   178                          }
   179                          
   180                          !ifndef HBC56_DISABLE_KEYBOARD {

; ******** Source: ../lib\inp\keyboard.asm
     1                          ; 6502 KB Controller - HBC-56
     2                          ;
     3                          ; Copyright (c) 2021 Troy Schrapel
     4                          ;
     5                          ; This code is licensed under the MIT license
     6                          ;
     7                          ; https://github@com/visrealm/hbc-56
     8                          ;
     9                          
    10                          !ifndef HAVE_MATH_INC { !src "ut/math.inc" }
    11                          
    12                          HAVE_KEYBOARD = 1
    13                          
    14                          ; -------------------------
    15                          ; Constants
    16                          ; -------------------------
    17                          !ifndef KB_IO_PORT { KB_IO_PORT = $80
    18                                  !warn "KB_IO_PORT not provided@ Defaulting to ", KB_IO_PORT
    19                          }
    20                          
    21                          !ifndef KB_RAM_START { KB_RAM_START = $7ea1
    22                                  !warn "KB_RAM_START not provided@ Defaulting to ", KB_RAM_START
    23                          }
    24                          
    25                          ; -------------------------
    26                          ; High RAM
    27                          ; -------------------------
    28                          KB_FLAGS          = KB_RAM_START
    29                          KB_TMP_X          = KB_RAM_START + 1
    30                          KB_TMP_Y          = KB_RAM_START + 2
    31                          KB_CB_PRESSED     = KB_RAM_START + 3
    32                          KB_CB_RELEASED    = KB_RAM_START + 5
    33                          KB_CURRENT_STATE  = KB_RAM_START + 7
    34                          KB_BUFFER_HEAD    = KB_RAM_START + 8         ; head of circular buffer
    35                          KB_BUFFER_TAIL    = KB_RAM_START + 9         ; tail of circular buffer
    36                          KB_BUFFER         = KB_RAM_START + 10
    37                          KB_BUFFER_SIZE    = (1 << 4)
    38                          KB_BUFFER_MASK    = KB_BUFFER_SIZE - 1
    39                          KB_PRESSED_MAP    = KB_BUFFER + KB_BUFFER_SIZE
    40                          
    41                          KB_PRESSED_MAP_SIZE = $fd + 1
    42                          KB_PRESSED_MAP_BYTES = 32
    43                          
    44                          KB_RAM_SIZE     = (KB_PRESSED_MAP + KB_PRESSED_MAP_BYTES) - KB_RAM_START
    45                          
    46                          
    47                          !if KB_RAM_END < (KB_RAM_START + KB_RAM_SIZE) {
    48                          	!error "KB_RAM requires ",KB_RAM_SIZE," bytes@ Allocated ",KB_RAM_END - KB_RAM_START
    49                          }
    50                          
    51                          ; -------------------------
    52                          ; Contants
    53                          ; -------------------------
    54                          KB_SHIFT_DOWN   = %00000001
    55                          KB_CTRL_DOWN    = %00000010
    56                          KB_ALT_DOWN     = %00000100
    57                          KB_CAPS_LOCK    = %00001000
    58                          KB_NUM_LOCK     = %00010000
    59                          
    60                          KB_RELEASE      = $f0
    61                          KB_EXT_KEY      = $e0
    62                          KB_PAUSE_KEY    = $e1
    63                          
    64                          KB_SCANCODE_0 = $45
    65                          KB_SCANCODE_1 = $16
    66                          KB_SCANCODE_2 = $1E
    67                          KB_SCANCODE_3 = $26
    68                          KB_SCANCODE_4 = $25
    69                          KB_SCANCODE_5 = $2E
    70                          KB_SCANCODE_6 = $36
    71                          KB_SCANCODE_7 = $3D
    72                          KB_SCANCODE_8 = $3E
    73                          KB_SCANCODE_9 = $46
    74                          KB_SCANCODE_A = $1C
    75                          KB_SCANCODE_B = $32
    76                          KB_SCANCODE_C = $21
    77                          KB_SCANCODE_D = $23
    78                          KB_SCANCODE_E = $24
    79                          KB_SCANCODE_F = $2B
    80                          KB_SCANCODE_G = $34
    81                          KB_SCANCODE_H = $33
    82                          KB_SCANCODE_I = $43
    83                          KB_SCANCODE_J = $3B
    84                          KB_SCANCODE_K = $42
    85                          KB_SCANCODE_L = $4B
    86                          KB_SCANCODE_M = $3A
    87                          KB_SCANCODE_N = $31
    88                          KB_SCANCODE_O = $44
    89                          KB_SCANCODE_P = $4D
    90                          KB_SCANCODE_Q = $15
    91                          KB_SCANCODE_R = $2D
    92                          KB_SCANCODE_S = $1B
    93                          KB_SCANCODE_T = $2C
    94                          KB_SCANCODE_U = $3C
    95                          KB_SCANCODE_V = $2A
    96                          KB_SCANCODE_W = $1D
    97                          KB_SCANCODE_X = $22
    98                          KB_SCANCODE_Y = $35
    99                          KB_SCANCODE_Z = $1A
   100                          KB_SCANCODE_F1 = $05
   101                          KB_SCANCODE_F2 = $06
   102                          KB_SCANCODE_F3 = $04
   103                          KB_SCANCODE_F4 = $0C
   104                          KB_SCANCODE_F5 = $03
   105                          KB_SCANCODE_F6 = $0B
   106                          KB_SCANCODE_F7 = $83
   107                          KB_SCANCODE_F8 = $0A
   108                          KB_SCANCODE_F9 = $01
   109                          KB_SCANCODE_F10 = $09
   110                          KB_SCANCODE_F11 = $78
   111                          KB_SCANCODE_F12 = $07
   112                          KB_SCANCODE_NUMPAD_0 = $70
   113                          KB_SCANCODE_NUMPAD_1 = $69
   114                          KB_SCANCODE_NUMPAD_2 = $72
   115                          KB_SCANCODE_NUMPAD_3 = $7A
   116                          KB_SCANCODE_NUMPAD_4 = $6B
   117                          KB_SCANCODE_NUMPAD_5 = $73
   118                          KB_SCANCODE_NUMPAD_6 = $74
   119                          KB_SCANCODE_NUMPAD_7 = $6C
   120                          KB_SCANCODE_NUMPAD_8 = $75
   121                          KB_SCANCODE_NUMPAD_9 = $7D
   122                          KB_SCANCODE_NUMPAD_DIVIDE = $CA
   123                          KB_SCANCODE_NUMPAD_ENTER = $DA
   124                          KB_SCANCODE_NUMPAD_MINUS = $7B
   125                          KB_SCANCODE_NUMPAD_MULTIPLY = $7C
   126                          KB_SCANCODE_NUMPAD_PERIOD = $71
   127                          KB_SCANCODE_NUMPAD_PLUS = $79
   128                          KB_SCANCODE_NUM_LOCK = $77
   129                          KB_SCANCODE_ALT_LEFT = $11
   130                          KB_SCANCODE_ALT_RIGHT_ = $91
   131                          KB_SCANCODE_APOS = $52
   132                          KB_SCANCODE_ARROW_DOWN = $F2
   133                          KB_SCANCODE_ARROW_LEFT = $EB
   134                          KB_SCANCODE_ARROW_RIGHT = $F4
   135                          KB_SCANCODE_ARROW_UP = $F5
   136                          KB_SCANCODE_BACKSPACE = $66
   137                          KB_SCANCODE_CAPS_LOCK = $58
   138                          KB_SCANCODE_COMMA = $41
   139                          KB_SCANCODE_CTRL_LEFT = $14
   140                          KB_SCANCODE_CTRL_RIGHT = $94
   141                          KB_SCANCODE_DELETE = $F1
   142                          KB_SCANCODE_END = $E9
   143                          KB_SCANCODE_ENTER = $5A
   144                          KB_SCANCODE_EQUAL = $55
   145                          KB_SCANCODE_ESC = $76
   146                          KB_SCANCODE_HOME = $EC
   147                          KB_SCANCODE_INSERT = $F0
   148                          KB_SCANCODE_MENU = $AF
   149                          KB_SCANCODE_MINUS = $4E
   150                          KB_SCANCODE_PAGE_DOWN = $FA
   151                          KB_SCANCODE_PAGE_UP = $FD
   152                          KB_SCANCODE_PAUSE = $E1
   153                          KB_SCANCODE_PERIOD = $49
   154                          KB_SCANCODE_PRTSCR = $92
   155                          KB_SCANCODE_SCROLL_LOCK = $7E
   156                          KB_SCANCODE_SEMICOLON = $4C
   157                          KB_SCANCODE_SHIFT_LEFT = $12
   158                          KB_SCANCODE_SHIFT_RIGHT = $59
   159                          KB_SCANCODE_SLASH_BACK = $5D
   160                          KB_SCANCODE_SLASH_FORWARD = $4A
   161                          KB_SCANCODE_SPACEBAR = $29
   162                          KB_SCANCODE_SQUARE_LEFT = $54
   163                          KB_SCANCODE_SQUARE_RIGHT = $5B
   164                          KB_SCANCODE_TAB = $0D
   165                          KB_SCANCODE_TILDE = $0E
   166                          KB_SCANCODE_WINDOWS_LEFT = $9F
   167                          KB_SCANCODE_WINDOWS_RIGHT = $A7
   168                          
   169                          
   170                          KB_SHIFT_LEFT_MAP_BYTE = KB_SCANCODE_SHIFT_LEFT >> 3
   171                          KB_SHIFT_LEFT_MAP_BIT  = $80 >> (KB_SCANCODE_SHIFT_LEFT & $07)
   172                          
   173                          KB_SHIFT_RIGHT_MAP_BYTE = KB_SCANCODE_SHIFT_RIGHT >> 3
   174                          KB_SHIFT_RIGHT_MAP_BIT  = $80 >> (KB_SCANCODE_SHIFT_RIGHT & $07)
   175                          
   176                          
   177                          ; IO Ports
   178                          KB_IO_ADDR         = IO_PORT_BASE_ADDRESS | KB_IO_PORT
   179                          KB_STATUS_ADDR     = IO_PORT_BASE_ADDRESS | KB_IO_PORT | $01
   180                          
   181                          ; -----------------------------------------------------------------------------
   182                          ; kbInit: Initialise the keyboard
   183                          ; -----------------------------------------------------------------------------
   184                          kbInit:
   185  f2bd a900                       lda #$00
   186  f2bf 8d867c                     sta KB_FLAGS
   187                          
   188  f2c2 a210                       ldx #16 ;buffer size
   189                                  
   190                                  ; ensure the hardware keyboard buffer is clear
   191                          -
   192  f2c4 8e877c                     stx KB_TMP_X
   193  f2c7 2078f3                     jsr .kbReadByte
   194  f2ca ae877c                     ldx KB_TMP_X
   195  f2cd ca                         dex
   196  f2ce d0f4                       bne -
   197                          
   198  f2d0 a220a900ca9da07c...        +memset KB_PRESSED_MAP, 0, KB_PRESSED_MAP_BYTES
   199                          
   200  f2dc 9c8e7c                     stz KB_BUFFER_HEAD
   201  f2df 9c8f7c                     stz KB_BUFFER_TAIL
   202                          
   203  f2e2 a900                       lda #.KB_STATE_DEFAULT
   204  f2e4 8d8d7c                     sta KB_CURRENT_STATE
   205                          
   206                                  ; flow through
   207                          
   208                          kbResetCallbacks:
   209  f2e7 a9f7                       lda #<.kbDummyCb
   210  f2e9 8d897c                     sta KB_CB_PRESSED
   211  f2ec 8d8b7c                     sta KB_CB_RELEASED
   212                                  
   213  f2ef a9f2                       lda #>.kbDummyCb
   214  f2f1 8d8a7c                     sta KB_CB_PRESSED + 1
   215  f2f4 8d8c7c                     sta KB_CB_RELEASED + 1
   216                          
   217                                  ; flow through
   218                          
   219                          .kbDummyCb:
   220  f2f7 60                         rts
   221                          
   222                          ; -----------------------------------------------------------------------------
   223                          ; kbIntHandler: Standard keyboard interrupt handler
   224                          ; -----------------------------------------------------------------------------
   225                          kbIntHandler:
   226  f2f8 2078f3                     jsr .kbReadByte
   227  f2fb e000                       cpx #0
   228  f2fd f0f8                       beq .kbDummyCb
   229                          
   230  f2ff 8a                         txa     ; acc now holds scancode
   231                          
   232  f300 ae8d7c                     ldx KB_CURRENT_STATE
   233                          
   234  f303 7c06f3                     jmp (.kbStateHandlers, x)
   235                          
   236                          .KB_STATE_DEFAULT          = 0
   237                          .KB_STATE_RELEASE          = 2
   238                          .KB_STATE_EXTENDED         = 4
   239                          .KB_STATE_EXTENDED_RELEASE = 6
   240                          .KB_STATE_PAUSE_SEQ        = 8
   241                          
   242                          .kbStateHandlers:
   243  f306 10f336f343f334f3...!word .stdKeyHandler, .relKeyHandler, .extKeyHandler, .extRelKeyHandler, .pauseKeyHandler
   244                          
   245                          ; default scancode handler
   246                          .stdKeyHandler
   247  f310 c9f0                       cmp #KB_RELEASE
   248  f312 d006                       bne +
   249  f314 a902                       lda #.KB_STATE_RELEASE
   250  f316 8d8d7c                     sta KB_CURRENT_STATE
   251  f319 60                         rts
   252                          +
   253  f31a c9e0                       cmp #KB_EXT_KEY
   254  f31c d006                       bne +
   255  f31e a904                       lda #.KB_STATE_EXTENDED
   256  f320 8d8d7c                     sta KB_CURRENT_STATE
   257  f323 60                         rts
   258                          +
   259  f324 c9e1                       cmp #KB_PAUSE_KEY
   260  f326 d006                       bne +
   261  f328 a908                       lda #.KB_STATE_PAUSE_SEQ
   262  f32a 8d8d7c                     sta KB_CURRENT_STATE
   263  f32d 60                         rts
   264                          +
   265                                  ; a regular key was pressed 
   266                                  ; TODO: bit field rather than a byte per key?
   267  f32e 208af3                     jsr .kbSetKey
   268                          
   269  f331 6c897c                     jmp (KB_CB_PRESSED)
   270                                  ; subroutine returns above
   271                          
   272                          ; extended release scancode handler
   273                          .extRelKeyHandler:
   274  f334 0980                       ora #$80
   275                                  ; flow through
   276                          
   277                          ;  release scancode handler
   278                          .relKeyHandler:
   279  f336 aa                         tax
   280  f337 20bff3                     jsr .kbClearKey
   281                          
   282  f33a a900                       lda #.KB_STATE_DEFAULT
   283  f33c 8d8d7c                     sta KB_CURRENT_STATE
   284  f33f 8a                         txa
   285                          
   286  f340 6c8b7c                     jmp (KB_CB_RELEASED)
   287                          
   288                          ; extended scancode handler
   289                          .extKeyHandler:
   290  f343 c9f0                       cmp #KB_RELEASE
   291  f345 d006                       bne +
   292  f347 a906                       lda #.KB_STATE_EXTENDED_RELEASE
   293  f349 8d8d7c                     sta KB_CURRENT_STATE
   294  f34c 60                         rts
   295                          +
   296  f34d 0980                       ora #$80
   297                                  
   298  f34f 208af3                     jsr .kbSetKey
   299                          
   300  f352 a900                       lda #.KB_STATE_DEFAULT
   301  f354 8d8d7c                     sta KB_CURRENT_STATE
   302  f357 8a                         txa
   303                          
   304  f358 6c897c                     jmp (KB_CB_PRESSED)
   305                          
   306                          ; pause/break sequence scancode handler
   307                          .pauseKeyHandler:
   308  f35b c977                       cmp #$77
   309  f35d d018                       bne @notLastByte
   310  f35f aa                         tax
   311  f360 ad817d                     lda KB_PRESSED_MAP + KB_SCANCODE_PAUSE
   312  f363 d006                       bne +
   313  f365 8e817d                     stx KB_PRESSED_MAP + KB_SCANCODE_PAUSE
   314  f368 6c897c                     jmp (KB_CB_PRESSED)
   315                          +
   316  f36b 9c817d                     stz KB_PRESSED_MAP + KB_SCANCODE_PAUSE
   317                          
   318  f36e a900                       lda #.KB_STATE_DEFAULT
   319  f370 8d8d7c                     sta KB_CURRENT_STATE
   320  f373 8a                         txa
   321                          
   322  f374 6c8b7c                     jmp (KB_CB_RELEASED)
   323                          
   324                          @notLastByte
   325  f377 60                         rts
   326                          
   327                          ; -----------------------------------------------------------------------------
   328                          ; Outputs:
   329                          ;   A: Value of the KB Status (0 if no key)
   330                          ;   X: PS/2 Scancode byte
   331                          ; -----------------------------------------------------------------------------
   332                          .kbReadByte:        
   333  f378 a200                       ldx #0
   334  f37a a904                       lda #$04
   335  f37c 2c817f                     bit KB_STATUS_ADDR
   336  f37f f008                       beq @end
   337                          
   338  f381 a020                       ldy #32         ; TODO: this could probably be smaller
   339                          -
   340  f383 88                 	dey
   341  f384 d0fd               	bne -
   342                          
   343  f386 ae807f                     ldx KB_IO_ADDR
   344                          @end
   345  f389 60                         rts
   346                          
   347                          
   348                          ; -----------------------------------------------------------------------------
   349                          ; .kbSetKey: Set a key is pressed in KB_PRESSED_MAP
   350                          ; Inputs:
   351                          ;    A - scancode
   352                          ; -----------------------------------------------------------------------------
   353                          .kbSetKey:
   354  f38a ae8e7c                     ldx KB_BUFFER_HEAD      ; store at head of buffer
   355  f38d 9d907c                     sta KB_BUFFER, x
   356                          
   357  f390 8d877c                     sta KB_TMP_X            ; find byte in map
   358  f393 4a4a4a                     +lsr3
   359  f396 aa                         tax
   360  f397 ad877c                     lda KB_TMP_X
   361  f39a 2907                       and #$07
   362  f39c a8                         tay
   363  f39d bda07c                     lda KB_PRESSED_MAP, x
   364  f3a0 1930e1                     ora tableBitFromLeft, y ; set bit in map byte
   365  f3a3 9da07c                     sta KB_PRESSED_MAP, x   ; update map
   366                          
   367                                  ; check for toggle keys
   368  f3a6 ae877c                     ldx KB_TMP_X
   369  f3a9 e058                       cpx #KB_SCANCODE_CAPS_LOCK
   370  f3ab d008                       bne +
   371  f3ad a908                       lda #KB_CAPS_LOCK
   372  f3af 4d867c                     eor KB_FLAGS
   373  f3b2 8d867c                     sta KB_FLAGS
   374                          +
   375                          
   376  f3b5 ad8e7c                     lda KB_BUFFER_HEAD      ; increment (and mask) buffer head
   377  f3b8 1a                         inc
   378  f3b9 290f                       and #KB_BUFFER_MASK
   379  f3bb 8d8e7c                     sta KB_BUFFER_HEAD
   380  f3be 60                         rts
   381                          
   382                          ; -----------------------------------------------------------------------------
   383                          ; .kbClearKey: Clear a key is pressed in KB_PRESSED_MAP
   384                          ; Inputs:
   385                          ;    A - scancode
   386                          ; -----------------------------------------------------------------------------
   387                          .kbClearKey:
   388  f3bf 8d877c                     sta KB_TMP_X
   389  f3c2 4a4a4a                     +lsr3
   390  f3c5 aa                         tax
   391  f3c6 ad877c                     lda KB_TMP_X
   392  f3c9 2907                       and #$07
   393  f3cb a8                         tay
   394  f3cc bda07c                     lda KB_PRESSED_MAP, x
   395  f3cf 3938e1                     and tableInvBitFromLeft, y
   396  f3d2 9da07c                     sta KB_PRESSED_MAP, x
   397  f3d5 60                         rts
   398                          
   399                          
   400                          ; -----------------------------------------------------------------------------
   401                          ; .kbPopTail: Pop a scancode from the tail of the buffer
   402                          ; Inputs:
   403                          ;    A - scancode
   404                          ; -----------------------------------------------------------------------------
   405                          .kbPopTail:
   406  f3d6 ad8f7c                     lda KB_BUFFER_TAIL
   407  f3d9 aa                         tax
   408  f3da 1a                         inc
   409  f3db 290f                       and #KB_BUFFER_MASK
   410  f3dd 8d8f7c                     sta KB_BUFFER_TAIL
   411  f3e0 bd907c                     lda KB_BUFFER, x
   412  f3e3 60                         rts
   413                          
   414                          ; -----------------------------------------------------------------------------
   415                          ; kbIsPressed: Is a key pressed right now?
   416                          ; Inputs:
   417                          ;    X - scancode
   418                          ; Returns:
   419                          ;    Z - clear if pressed, set if not pressed
   420                          ; -----------------------------------------------------------------------------
   421                          kbIsPressed:
   422  f3e4 08                         php
   423  f3e5 78                         sei
   424  f3e6 8e877c                     stx KB_TMP_X
   425  f3e9 8a                         txa
   426  f3ea 4a4a4a                     +lsr3
   427  f3ed aa                         tax
   428  f3ee ad877c                     lda KB_TMP_X
   429  f3f1 2907                       and #$07
   430  f3f3 a8                         tay
   431  f3f4 b930e1                     lda tableBitFromLeft, y
   432  f3f7 3da07c                     and KB_PRESSED_MAP, x
   433  f3fa ae877c                     ldx KB_TMP_X
   434  f3fd 28                         plp
   435  f3fe c900                       cmp #0
   436  f400 60                         rts
   437                          
   438                          
   439                          ; -----------------------------------------------------------------------------
   440                          ; kbWaitForScancode: Wait for a key press
   441                          ; Returns:
   442                          ;    A - scancode
   443                          ; -----------------------------------------------------------------------------
   444                          kbWaitForScancode:
   445  f401 08                         php
   446  f402 78                         sei        
   447  f403 38                         sec
   448  f404 ad8e7c                     lda KB_BUFFER_HEAD
   449  f407 ed8f7c                     sbc KB_BUFFER_TAIL
   450  f40a 28                         plp
   451  f40b c900                       cmp #0
   452  f40d f0f2                       beq kbWaitForScancode
   453  f40f 08                         php
   454  f410 78                         sei
   455  f411 20d6f3                     jsr .kbPopTail
   456  f414 28                         plp
   457  f415 60                         rts
   458                          
   459                          ; -----------------------------------------------------------------------------
   460                          ; kbNextScancode: Return the next scancode in the buffer or zero if empty
   461                          ; Returns:
   462                          ;    A - scancode (or zero)
   463                          ; -----------------------------------------------------------------------------
   464                          kbNextScancode:
   465  f416 08                         php
   466  f417 78                         sei
   467  f418 ad8e7c                     lda KB_BUFFER_HEAD
   468  f41b cd8f7c                     cmp KB_BUFFER_TAIL
   469  f41e f007                       beq @noScancode
   470  f420 20d6f3                     jsr .kbPopTail
   471  f423 28                         plp
   472  f424 c900                       cmp #0
   473  f426 60                         rts
   474                          
   475                          @noScancode
   476  f427 28                         plp
   477  f428 a900                       lda #0
   478  f42a 60                         rts
   479                          
   480                          ; -----------------------------------------------------------------------------
   481                          ; kbScancodeToAscii: Convert a scancode to ascii. shift/caps lock is honoured
   482                          ; Inputs:
   483                          ;    A - scancode (or zero)
   484                          ; Returns:
   485                          ;    A - ascii character
   486                          ;    C - set if valid character in A
   487                          ; -----------------------------------------------------------------------------
   488                          kbScancodeToAscii:
   489  f42b da                         phx
   490  f42c 8d877c                     sta KB_TMP_X
   491  f42f 18                         clc
   492  f430 1002                       bpl +
   493  f432 fa                         plx
   494  f433 60                         rts
   495                          +
   496  f434 08                         php
   497  f435 78                         sei
   498  f436 a202                       ldx #KB_SHIFT_LEFT_MAP_BYTE
   499  f438 a920                       lda #KB_SHIFT_LEFT_MAP_BIT
   500  f43a 3ca07c                     bit KB_PRESSED_MAP, x
   501  f43d f003                       beq +
   502  f43f 38                         sec
   503  f440 800a                       bra @doneShiftCheck
   504                          +
   505                          
   506  f442 a20b                       ldx #KB_SHIFT_RIGHT_MAP_BYTE
   507  f444 a940                       lda #KB_SHIFT_RIGHT_MAP_BIT
   508  f446 3ca07c                     bit KB_PRESSED_MAP, x
   509  f449 f001                       beq +
   510  f44b 38                         sec
   511                          +
   512                          
   513                          @doneShiftCheck:
   514  f44c b008                       bcs @shiftedKeys:
   515  f44e ae877c                     ldx KB_TMP_X
   516  f451 bd8ff4                     lda KEY_MAP, x
   517  f454 8006                       bra @end
   518                          
   519                          @shiftedKeys:
   520  f456 ae877c                     ldx KB_TMP_X
   521  f459 bd0ff5                     lda KEY_MAP_SHIFTED, x
   522                          
   523                          @end
   524  f45c 2018e0                     jsr isAlpha
   525  f45f 9014                       bcc @afterAlphaCheck
   526  f461 8d877c                     sta KB_TMP_X
   527  f464 a908                       lda #KB_CAPS_LOCK
   528  f466 2d867c                     and KB_FLAGS
   529  f469 f007                       beq +
   530  f46b ad877c                     lda KB_TMP_X
   531  f46e 4920                       eor #$20
   532  f470 8003                       bra @afterAlphaCheck
   533                          +
   534  f472 ad877c                     lda KB_TMP_X
   535                          @afterAlphaCheck
   536  f475 28                         plp
   537  f476 fa                         plx
   538  f477 c9ff                       cmp #$ff
   539  f479 38                         sec
   540  f47a d001                       bne +
   541  f47c 18                         clc
   542                          +        
   543  f47d 60                         rts
   544                          
   545                          ; -----------------------------------------------------------------------------
   546                          ; kbReadAscii: Read an ASCII caharacter from the keyboard queue
   547                          ; Returns:
   548                          ;    A - ascii character
   549                          ;    C - set if valid character in A
   550                          ; -----------------------------------------------------------------------------
   551                          kbReadAscii:
   552  f47e 08                         php
   553  f47f 78                         sei
   554  f480 da                         phx
   555  f481 2016f4                     jsr kbNextScancode
   556  f484 f005                       beq @noKey
   557  f486 fa                         plx
   558  f487 28                         plp
   559  f488 4c2bf4                     jmp kbScancodeToAscii
   560                          @noKey
   561  f48b fa                         plx
   562  f48c 28                         plp
   563  f48d 18                         clc
   564  f48e 60                         rts
   565                          
   566                          
   567                          KEY_MAP:
   568                          ;      0   1   2   3   4   5   6   7   8   9   a   b   c   d   e   f
   569  f48f ffffffffffffffff...!byte $ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$09,$60,$ff; 0
   570  f49f ffffffffff7131ff...!byte $ff,$ff,$ff,$ff,$ff,$71,$31,$ff,$ff,$ff,$7a,$73,$61,$77,$32,$ff; 1
   571  f4af ff637864653433ff...!byte $ff,$63,$78,$64,$65,$34,$33,$ff,$ff,$20,$76,$66,$74,$72,$35,$ff; 2
   572  f4bf ff6e6268677936ff...!byte $ff,$6e,$62,$68,$67,$79,$36,$ff,$ff,$ff,$6d,$6a,$75,$37,$38,$ff; 3
   573  f4cf ff2c6b696f3039ff...!byte $ff,$2c,$6b,$69,$6f,$30,$39,$ff,$ff,$2e,$2f,$6c,$3b,$70,$2d,$ff; 4
   574  f4df ffff27ff5b3dffff...!byte $ff,$ff,$27,$ff,$5b,$3d,$ff,$ff,$ff,$ff,$0d,$5d,$ff,$5c,$ff,$ff; 5
   575  f4ef ffffffffffff08ff...!byte $ff,$ff,$ff,$ff,$ff,$ff,$08,$ff,$ff,$31,$ff,$34,$37,$ff,$ff,$ff; 6
   576  f4ff 30ff323536381bff...!byte $30,$ff,$32,$35,$36,$38,$1b,$ff,$ff,$ff,$33,$2d,$ff,$39,$ff,$ff; 7
   577                          
   578                          KEY_MAP_SHIFTED:
   579                          ;      0   1   2   3   4   5   6   7   8   9   a   b   c   d   e   f
   580  f50f ffffffffffffffff...!byte $ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$09,$7e,$ff; 0
   581  f51f ffffffffff5121ff...!byte $ff,$ff,$ff,$ff,$ff,$51,$21,$ff,$ff,$ff,$5a,$53,$41,$57,$40,$ff; 1
   582  f52f ff435844452423ff...!byte $ff,$43,$58,$44,$45,$24,$23,$ff,$ff,$20,$56,$46,$54,$52,$25,$ff; 2
   583  f53f ff4e424847595eff...!byte $ff,$4e,$42,$48,$47,$59,$5e,$ff,$ff,$ff,$4d,$4a,$55,$26,$2a,$ff; 3
   584  f54f ff3c4b494f2928ff...!byte $ff,$3c,$4b,$49,$4f,$29,$28,$ff,$ff,$3e,$3f,$4c,$3a,$50,$5f,$ff; 4
   585  f55f ffff22ff7b2bffff...!byte $ff,$ff,$22,$ff,$7b,$2b,$ff,$ff,$ff,$ff,$0d,$7d,$ff,$7c,$ff,$ff; 5
   586  f56f ffffffffffff08ff...!byte $ff,$ff,$ff,$ff,$ff,$ff,$08,$ff,$ff,$31,$ff,$34,$37,$ff,$ff,$ff; 6
   587  f57f 30ff323536381bff...!byte $30,$ff,$32,$35,$36,$38,$1b,$ff,$ff,$ff,$33,$2d,$ff,$39,$ff,$ff; 7

; ******** Source: kernel.asm
   181                          
   182                          }
   183                          

; ******** Source: ../lib\io\via.asm
     1                          ; 65(C)22 VIA - HBC-56
     2                          ;
     3                          ; Copyright (c) 2022 Troy Schrapel
     4                          ;
     5                          ; This code is licensed under the MIT license
     6                          ;
     7                          ; https://github.com/visrealm/hbc-56
     8                          ;
     9                          
    10                          
    11                          !ifndef VIA_IO_PORT { VIA_IO_PORT = $f0
    12                                  !warn "VIA_IO_PORT not provided. Defaulting to ", VIA_IO_PORT
    13                          }
    14                          
    15                          !ifndef VIA_RAM_START { VIA_RAM_START = $7d80
    16                                  !warn "VIA_RAM_START not provided. Defaulting to ", VIA_RAM_START
    17                          }
    18                          
    19                          ; -------------------------
    20                          ; High RAM
    21                          ; -------------------------
    22                          VIA_TMP        = VIA_RAM_START
    23                          VIA_RAM_SIZE   = 1
    24                          
    25                          
    26                          !if VIA_RAM_END < (VIA_RAM_START + VIA_RAM_SIZE) {
    27                          	!error "VIA_RAM requires ",VIA_RAM_SIZE," bytes. Allocated ",VIA_RAM_END - VIA_RAM_START
    28                          }
    29                          
    30                          
    31                          VIA_REG_PORT_B  = $00
    32                          VIA_REG_PORT_A  = $01
    33                          VIA_REG_DDR_B   = $02
    34                          VIA_REG_DDR_A   = $03
    35                          VIA_REG_T1C_L   = $04
    36                          VIA_REG_T1C_H   = $05
    37                          VIA_REG_T1L_L   = $06
    38                          VIA_REG_T1L_H   = $07
    39                          VIA_REG_T2C_L   = $08
    40                          VIA_REG_T2C_H   = $09
    41                          VIA_REG_ACR     = $0b
    42                          VIA_REG_IFR     = $0d
    43                          VIA_REG_IER     = $0e
    44                          
    45                          ; IO Ports
    46                          VIA_IO_ADDR     = IO_PORT_BASE_ADDRESS | VIA_IO_PORT
    47                          
    48                          VIA_IO_ADDR_PORT_B      = VIA_IO_ADDR | VIA_REG_PORT_B
    49                          VIA_IO_ADDR_PORT_A      = VIA_IO_ADDR | VIA_REG_PORT_A
    50                          VIA_IO_ADDR_DDR_B       = VIA_IO_ADDR | VIA_REG_DDR_B
    51                          VIA_IO_ADDR_DDR_A       = VIA_IO_ADDR | VIA_REG_DDR_A
    52                          VIA_IO_ADDR_T1C_L       = VIA_IO_ADDR | VIA_REG_T1C_L
    53                          VIA_IO_ADDR_T1C_H       = VIA_IO_ADDR | VIA_REG_T1C_H
    54                          VIA_IO_ADDR_T1L_L       = VIA_IO_ADDR | VIA_REG_T1L_L
    55                          VIA_IO_ADDR_T1L_H       = VIA_IO_ADDR | VIA_REG_T1L_H
    56                          VIA_IO_ADDR_T2C_L       = VIA_IO_ADDR | VIA_REG_T2C_L
    57                          VIA_IO_ADDR_T2C_H       = VIA_IO_ADDR | VIA_REG_T2C_H
    58                          VIA_IO_ADDR_ACR         = VIA_IO_ADDR | VIA_REG_ACR
    59                          VIA_IO_ADDR_IFR         = VIA_IO_ADDR | VIA_REG_IFR
    60                          VIA_IO_ADDR_IER         = VIA_IO_ADDR | VIA_REG_IER
    61                          
    62                          ; Constants
    63                          VIA_DIR_INPUT   = $00
    64                          VIA_DIR_OUTPUT  = $ff
    65                          
    66                          
    67                          
    68                          viaIntHandler:
    69  f58f 6ce57c                     jmp (HBC56_VIA_CALLBACK)

; ******** Source: kernel.asm
   184                          
   185                          
   186  f592 6769746875622e63...+hbc56Title "github.com/visrealm/hbc-56"
   187                          

; ******** Source: bootscreen.asm
     1                          ; 6502 - HBC-56 - Memory tests
     2                          ;
     3                          ; Copyright (c) 2021 Troy Schrapel
     4                          ;
     5                          ; This code is licensed under the MIT license
     6                          ;
     7                          ; https://github.com/visrealm/hbc-56
     8                          ;
     9                          ;
    10                          
    11                          ; can be anywhere. we own the place at this stage
    12                          LOGO_BUFFER = $3000     
    13                          
    14                          !ifdef HAVE_TMS9918 {
    15                                  HBC56_BORDER     = TMS_DK_BLUE 
    16                                  HBC56_BACKGROUND = TMS_WHITE
    17                                  HBC56_LOGO       = TMS_DK_BLUE 
    18                                  HBC56_TEXT       = TMS_DK_BLUE
    19                          }
    20                          
    21                          !ifdef HBC56_TITLE_TEXT {
    22                                  HBC56_TITLE     = HBC56_TITLE_TEXT
    23                                  HBC56_TITLE_LEN = HBC56_TITLE_TEXT_LEN
    24                          }
    25                          
    26                          .HBC56_PRESS_ANY_KEY_TEXT:
    27  f5ad 505245535320414e...        !text "PRESS ANY KEY...",0
    28                          .HBC56_PRESS_ANY_KEY_TEXT_LEN = *-.HBC56_PRESS_ANY_KEY_TEXT-1
    29                          
    30                          .HBC56_PRESS_ANY_NES_TEXT:
    31  f5be 5052455353204120...        !text "PRESS A TO BEGIN...",0
    32                          .HBC56_PRESS_ANY_NES_TEXT_LEN = *-.HBC56_PRESS_ANY_NES_TEXT-1
    33                          
    34                          !ifdef HAVE_GRAPHICS_LCD {
    35  f5d2 eaeaeaeaeaeaeaea...        !align 255, 0
    36                          hbc56FontLcd:
    37  f600 0000000000000000...        !bin "lcd/fonts/c64-alnum.bin"
    38                          hbc56LogoLcd:
    39  f800 07c01f03ffe003ff...        !bin "res/hbc56lcd.bin"
    40                          }
    41                          
    42                          !ifdef HAVE_TMS9918 {
    43                          hbc56LogoInd:
    44  f900 c8c9cacbcccdcecf...        !bin "res/hbc56boot.ind"
    45                          hbc56LogoPatt:
    46  f942 fefefefefefefefe...        !bin "res/hbc56boot.patt"
    47                          hbc56LogoPattEnd:        
    48                          }
    49                          
    50                          hbc56BootScreen:
    51                          
    52                          !ifdef HAVE_TMS9918 {
    53  faba 0878a9108d117f20...        +tmsSetAddrColorTable 16
    54  facd a94f                       +tmsColorFgBg HBC56_LOGO, HBC56_BACKGROUND
    55  facf a202                       ldx #2
    56  fad1 2026e7                     jsr _tmsSendX8
    57  fad4 a94f                       +tmsColorFgBg HBC56_TEXT, HBC56_BACKGROUND
    58  fad6 a210                       ldx #16
    59  fad8 20d3e7                     jsr tmsInitColorTable
    60                          
    61  fadb 0878a9a58d117f20...        +tmsSetPosWrite 5,5
    62  faee a9008524a9f98525...        +tmsSendData hbc56LogoInd, 22
    63  fafb 0878a9c58d117f20...        +tmsSetPosWrite 5,6
    64  fb0e a9168524a9f98525...        +tmsSendData hbc56LogoInd + 22, 22
    65  fb1b 0878a9e58d117f20...        +tmsSetPosWrite 5,7
    66  fb2e a92c8524a9f98525...        +tmsSendData hbc56LogoInd + 44, 22
    67                          
    68  fb3b 0878a9408d117f20...        +tmsSetAddrPattTable 200
    69  fb4e a9428524a9f98525...        +tmsSendData hbc56LogoPatt, $178
    70                          
    71  fb64 0878a9c88d117f20...        +tmsPrintZ HBC56_META_TITLE, 8, 14
    72                          
    73                          
    74                                  !ifdef HBC56_TITLE_TEXT {
    75  fb82 0878a9c38d117f20...                +tmsPrintZ HBC56_TITLE, (32 - HBC56_TITLE_LEN) / 2, 22
    76                                  }
    77                          
    78  fba0 a9e4                       +tmsColorFgBg TMS_GREY, HBC56_BORDER
    79  fba2 20cfe5                     jsr tmsSetBackground
    80                          }
    81                          
    82                          !ifdef HAVE_LCD {
    83  fba5 2015ee                     jsr lcdDetect
    84  fba8 907f                       bcc @noLcd
    85                                  !ifdef HAVE_GRAPHICS_LCD {
    86  fbaa 202aed                             jsr lcdGraphicsMode
    87  fbad a900852ea930852f...                +memset LOGO_BUFFER, $00, 1024
    88  fbc2 a200bd00f89d8030...                +memcpy LOGO_BUFFER + 128, hbc56LogoLcd, 256
    89  fbcf a930                               lda #>LOGO_BUFFER
    90  fbd1 8520                               sta BITMAP_ADDR_H
    91  fbd3 2067ed                             jsr lcdImage
    92                          
    93  fbd6 a280a900ca9d0030...                +memset LOGO_BUFFER, $0, 128
    94  fbe2 a9008518a97b8519...                +tilemapCreateDefault (TILEMAP_SIZE_X_16 | TILEMAP_SIZE_Y_8), hbc56FontLcd-(32*8)
    95  fc0b a280a920ca9d007a...                +memset TILEMAP_DEFAULT_BUFFER_ADDRESS, ' ', 128
    96                          
    97  fc17 a200bdd07c9d407a...                +memcpy TILEMAP_DEFAULT_BUFFER_ADDRESS + 16*4, HBC56_META_TITLE, 16
    98                          
    99  fc24 a004                               ldy #4
   100  fc26 2042f1                             jsr tilemapRenderRowToLcd
   101                          
   102                                  } else {
   103                                          !if LCD_ROWS > 2 { +lcdPrint "\n" }
   104                                          !if LCD_COLUMNS > 16 { +lcdPrint "  " }
   105                                          +lcdPrint "     HBC-56\n"
   106                                          !if LCD_COLUMNS > 16 { +lcdPrint "  " }
   107                                          lda #<HBC56_META_TITLE
   108                                          sta STR_ADDR_L
   109                                          lda #>HBC56_META_TITLE
   110                                          sta STR_ADDR_H
   111                                          !if LCD_ROWS = 2 {
   112                                                  jsr lcdLineTwo
   113                                          }                
   114                                          jsr lcdPrint
   115                                          !if LCD_ROWS = 2 {
   116                                                  jsr lcdLineTwo
   117                                          } else {
   118                                                  jsr lcdLineThree
   119                                          }                
   120                                          !if LCD_COLUMNS > 16 { +lcdConsolePrint "  " }
   121                                  }
   122                          @noLcd:
   123                          }
   124  fc29 60                         rts

; ******** Source: kernel.asm
   188                          

; ******** Source: kernel.inc
     1                          ; 6502 - HBC-56 Kernel Macros
     2                          ;
     3                          ; Copyright (c) 2021 Troy Schrapel
     4                          ;
     5                          ; This code is licensed under the MIT license
     6                          ;
     7                          ; https://github.com/visrealm/hbc-56
     8                          ;
     9                          ;
    10                          
    11                          !macro setIntHandler .address {
    12                                  lda #<.address
    13                                  sta HBC56_INT_VECTOR + 1
    14                                  lda #>.address
    15                                  sta HBC56_INT_VECTOR + 2
    16                                  lda #JMP_OPCODE
    17                                  sta HBC56_INT_VECTOR
    18                          }
    19                          
    20                          !macro setNmiHandler .address {
    21                                  lda #<.address
    22                                  sta HBC56_NMI_VECTOR + 1
    23                                  lda #>.address
    24                                  sta HBC56_NMI_VECTOR + 2
    25                                  lda #JMP_OPCODE
    26                                  sta HBC56_NMI_VECTOR
    27                          }
    28                          
    29                          !macro setHbcMetaNES {
    30                                  lda #HBC56_CONSOLE_FLAG_NES
    31                                  ora HBC56_CONSOLE_FLAGS
    32                                  sta HBC56_CONSOLE_FLAGS
    33                          }
    34                          
    35                          !macro setHbcMetaNoWait {
    36                                  lda #HBC56_CONSOLE_FLAG_NOWAIT
    37                                  ora HBC56_CONSOLE_FLAGS
    38                                  sta HBC56_CONSOLE_FLAGS
    39                          }
    40                          
    41                          
    42                          !macro hbc56SetVsyncCallback .vsync {
    43                                  lda #<.vsync
    44                                  sta HBC56_VSYNC_CALLBACK
    45                                  lda #>.vsync
    46                                  sta HBC56_VSYNC_CALLBACK + 1
    47                          }
    48                          
    49                          !macro hbc56SetViaCallback .cb {
    50                                  lda #<.cb
    51                                  sta HBC56_VIA_CALLBACK
    52                                  lda #>.cb
    53                                  sta HBC56_VIA_CALLBACK + 1
    54                          }
    55                          
    56                          
    57                          !macro setHbcMetaTitle .titleStr {
    58                                  jmp .hbcMetaTitleOut
    59                          .titleStrLabel:
    60                                  !text .titleStr
    61                          .titleStrLabelLen = * - .titleStrLabel
    62                                  !byte 0 ; nul terminator for game name
    63                          
    64                          !if .titleStrLabelLen > HBC56_META_TITLE_MAX_LEN {
    65                                  !error "setHbcMetaTitle: Title metadata limited to ",HBC56_META_TITLE_MAX_LEN,"bytes"
    66                          }
    67                          .hbcMetaTitleOut:
    68                                  +memcpy HBC56_META_TITLE + (HBC56_META_TITLE_MAX_LEN-.titleStrLabelLen)/2, .titleStrLabel, .titleStrLabelLen
    69                                  lda #.titleStrLabelLen
    70                                  sta HBC56_META_TITLE_LEN
    71                          }
    72                          
    73                          !macro consoleEnableCursor {
    74                                  lda HBC56_CONSOLE_FLAGS
    75                                  ora #HBC56_CONSOLE_FLAG_CURSOR
    76                                  sta HBC56_CONSOLE_FLAGS
    77                          }
    78                          
    79                          !macro consoleDisableCursor {
    80                                  lda HBC56_CONSOLE_FLAGS
    81                                  and #!HBC56_CONSOLE_FLAG_CURSOR & $ff
    82                                  sta HBC56_CONSOLE_FLAGS
    83                          }
    84                          
    85                          !macro consoleLCDMode {
    86                                  lda HBC56_CONSOLE_FLAGS
    87                                  ora #HBC56_CONSOLE_FLAG_LCD
    88                                  sta HBC56_CONSOLE_FLAGS
    89                          }
    90                          
    91                          !macro setBreakpoint {
    92                                 !byte $db 
    93                          }
    94                          
    95                          !macro hbc56CustomDelay .delay {
    96                                  ldy #.delay
    97                                  jsr hbc56CustomDelay
    98                          }
    99                          
   100                          !macro hbc56DelayUs .us {
   101                          !if .us = 1 {
   102                                  nop
   103                                  nop
   104                          }
   105                          }
   106                          !macro hbc56DelayMs .ms {
   107                                  lda #<.ms
   108                                  sta DELAY_L
   109                                  lda #>.ms
   110                                  sta DELAY_H
   111                          
   112                                  jsr hbc56CustomDelayMs

; ******** Source: kernel.asm
   189                          

; ******** Source: interrupts.asm
     1                          ; 6502 - HBC-56 Kernel Interrupt Handling
     2                          ;
     3                          ; Copyright (c) 2021 Troy Schrapel
     4                          ;
     5                          ; This code is licensed under the MIT license
     6                          ;
     7                          ; https://github.com/visrealm/hbc-56
     8                          ;
     9                          ;
    10                          
    11                          ; -------------------------
    12                          ; Interrupts
    13                          ; -------------------------
    14                          TMS9918_IRQ            = 1      ; /INT
    15                          KB_IRQ                 = 2      ; RES1
    16                          UART_IRQ               = 3      ; RES2
    17                          VIA_IRQ                = 5      ; Onboard
    18                          
    19                          TMS9918_IRQ_BIT = (1 << (TMS9918_IRQ - 1))
    20                          KB_IRQ_BIT      = (1 << (KB_IRQ - 1))
    21                          UART_IRQ_BIT    = (1 << (UART_IRQ - 1))
    22                          VIA_IRQ_BIT     = (1 << (VIA_IRQ - 1))
    23                          
    24                          INT_CTRL_ADDRESS    = IO_PORT_BASE_ADDRESS | INT_IO_PORT
    25                          
    26                          ; -----------------------------------------------------------------------------
    27                          ; HBC-56 Interrupt handler
    28                          ; -----------------------------------------------------------------------------
    29                          hbc56IntHandler:
    30  fc2a 48                         pha
    31  fc2b da                         phx
    32  fc2c 5a                         phy
    33                          
    34  fc2d addf7f                     lda INT_CTRL_ADDRESS
    35                          
    36                          !ifdef HAVE_UART {
    37  fc30 8904                       bit #UART_IRQ_BIT
    38  fc32 f005                       beq +
    39  fc34 2017f2                     jsr uartIrq        
    40  fc37 801e                       bra @endIntHandler
    41                          +
    42                          }
    43                          
    44                          !ifdef HAVE_TMS9918 {
    45  fc39 8901                       bit #TMS9918_IRQ_BIT
    46  fc3b f008                       beq +
    47  fc3d 205bfc                     jsr hbc56Tms9918Int
    48  fc40 2c117f                     +tmsReadStatus
    49  fc43 8012                       bra @endIntHandler
    50                          +
    51                          }
    52                          
    53  fc45 8910                       bit #VIA_IRQ_BIT
    54  fc47 f005                       beq +
    55  fc49 208ff5                     jsr viaIntHandler
    56  fc4c 8009                       bra @endIntHandler
    57                          +
    58                          
    59                          !ifdef HAVE_KEYBOARD {
    60  fc4e 8902                       bit #KB_IRQ_BIT
    61  fc50 f005                       beq +
    62  fc52 20f8f2                     jsr kbIntHandler
    63  fc55 8000                       bra @endIntHandler
    64                          +
    65                          }
    66                                  
    67                          @endIntHandler:
    68  fc57 7a                         ply
    69  fc58 fa                         plx
    70  fc59 68                         pla      
    71  fc5a 40                         rti
    72                          
    73                          
    74                          
    75                          ; -----------------------------------------------------------------------------
    76                          ; HBC-56 TMS9918 VSYNC Interrupt handler
    77                          ; -----------------------------------------------------------------------------
    78                          !ifdef HAVE_TMS9918 {
    79                          hbc56Tms9918Int:
    80                          
    81                                  ; update ticks and seconds
    82  fc5b eec97c                     inc HBC56_TICKS
    83  fc5e adc97c                     lda HBC56_TICKS
    84  fc61 c93c                       cmp #TMS_FPS
    85  fc63 d00d                       bne +
    86  fc65 a900                       lda #0
    87  fc67 8dc97c                     sta HBC56_TICKS
    88  fc6a eeca7cd003eecb7c           +inc16 HBC56_SECONDS_L
    89                          +
    90                                  ; "tick" for sfx manager
    91                                  !ifdef HAVE_SFX_MAN {
    92                                          jsr sfxManTick
    93                                  }
    94                          
    95                                  ; handle console if enabled
    96  fc72 2ccd7c                     bit HBC56_CONSOLE_FLAGS
    97  fc75 1003                       bpl +
    98  fc77 207dfc                     jsr .consoleVsyncCallback
    99                          +
   100                          
   101                                  ; rely on callback rts to return
   102  fc7a 6ce37c                     jmp (HBC56_VSYNC_CALLBACK)
   103                          
   104                          
   105                          ; -----------------------------------------------------------------------------
   106                          ; HBC-56 TMS9918 Console update
   107                          ; -----------------------------------------------------------------------------
   108                          .consoleVsyncCallback:
   109                          
   110  fc7d adc97c                     lda HBC56_TICKS
   111  fc80 f007                       beq .doCursor
   112  fc82 c91e                       cmp #30
   113  fc84 f003                       beq .doCursor
   114  fc86 4caafc                     jmp @endConsoleCallback
   115                          
   116                          .doCursor:
   117  fc89 8ece7c                     stx HBC56_TMP_X
   118  fc8c 8ccf7c                     sty HBC56_TMP_Y
   119  fc8f 2067e9                     jsr tmsSetPosConsole
   120  fc92 adc97c                     lda HBC56_TICKS
   121  fc95 f00b                       beq +
   122  fc97 a920                       lda #' '
   123  fc99 8d107f2079e5               +tmsPut
   124  fc9f 4caafc                     jmp @endConsoleCallback
   125                          + 
   126  fca2 a97f                       lda #$7f
   127  fca4 8d107f2079e5               +tmsPut
   128                          
   129                          @endConsoleCallback
   130                          
   131                          .nullCallbackFunction:
   132  fcaa 60                         rts
   133                          }

; ******** Source: kernel.asm
   190                          
   191                          
   192                          ; -----------------------------------------------------------------------------
   193                          ; HBC-56 Main entry point (reset vector)
   194                          ; -----------------------------------------------------------------------------
   195                          kernelMain:
   196  fcab 78                         sei
   197  fcac d8                         cld     ; make sure we're not in decimal mode
   198  fcad a2ff                       ldx #$ff
   199  fcaf 9a                         txs
   200                                  
   201  fcb0 a940                       lda #RTI_OPCODE
   202  fcb2 8d007e                     sta HBC56_INT_VECTOR
   203  fcb5 8d047e                     sta HBC56_NMI_VECTOR
   204                          
   205  fcb8 a210a920ca9dd07c...        +memset HBC56_META_TITLE, ' ', HBC56_META_TITLE_MAX_LEN
   206                          
   207  fcc4 a900                       lda #0
   208  fcc6 8dc97c                     sta HBC56_TICKS
   209  fcc9 8dca7c                     sta HBC56_SECONDS_L
   210  fccc 8dcb7c                     sta HBC56_SECONDS_H
   211  fccf 8dcd7c                     sta HBC56_CONSOLE_FLAGS
   212                          
   213  fcd2 8de07c                     sta HBC56_META_TITLE + HBC56_META_TITLE_MAX_LEN
   214                          
   215                          
   216  fcd5 20fcdf                     jsr HBC56_META_VECTOR   ; user program metadata
   217                          
   218                                  !ifdef HAVE_KEYBOARD {
   219  fcd8 20bdf2                             jsr kbInit
   220                                  }
   221                          
   222                                  !ifdef HAVE_AY3891X {
   223  fcdb 2058e1                             jsr ayInit
   224                                  }
   225                          
   226                                  !ifdef HAVE_SFXMAN {
   227                                          jsr sfxManInit  ; requires TMS interrupts
   228                                  }
   229                          
   230                                  !ifdef HAVE_TMS9918 {
   231  fcde 20d9e6                             jsr tmsInit
   232                          
   233  fce1 a94020efe5                         +tmsDisableOutput
   234                          
   235                                          ; dummy callback
   236  fce6 a9aa8de37ca9fc8d...                +hbc56SetVsyncCallback .nullCallbackFunction
   237                                  }
   238                          
   239  fcf0 a9aa8de57ca9fc8d...        +hbc56SetViaCallback .nullCallbackFunction
   240                          
   241                                  !ifdef HAVE_LCD {
   242  fcfa 2015ee                             jsr lcdDetect
   243  fcfd 900c                               bcc @noLcd1                
   244  fcff 20c4ed                             jsr lcdInit
   245  fd02 20e1ff                             jsr hbc56Delay
   246  fd05 20e8ed                             jsr lcdDisplayOn
   247  fd08 20e1ff                             jsr hbc56Delay
   248                          @noLcd1:
   249                                  }
   250                          
   251  fd0b 20bafa                     jsr hbc56BootScreen
   252                          
   253  fd0e a92a8d017ea9fc8d...        +setIntHandler hbc56IntHandler
   254                          
   255                                  !ifdef HAVE_TMS9918 {
   256  fd1d a94020e5e5                         +tmsEnableOutput
   257  fd22 a92020efe5                         +tmsDisableInterrupts
   258                                  }
   259                          
   260  fd27 a914                       lda #20
   261  fd29 8dcc7c                     sta HBC56_TMP
   262                          -
   263  fd2c 20e1ff                     jsr hbc56Delay
   264  fd2f cecc7c                     dec HBC56_TMP
   265  fd32 d0f8                       bne -
   266                                 
   267                                  !ifdef HAVE_TMS9918 {
   268  fd34 a92020e5e5                         +tmsEnableInterrupts
   269                                  }
   270  fd39 58                         cli
   271                          
   272  fd3a 20dffd                     jsr hbc56HighBell
   273                          
   274  fd3d a910                       lda #HBC56_CONSOLE_FLAG_NOWAIT
   275  fd3f 2ccd7c                     bit HBC56_CONSOLE_FLAGS
   276  fd42 d07e                       bne .afterInput
   277                          
   278  fd44 a940                       lda #HBC56_CONSOLE_FLAG_NES
   279  fd46 2dcd7c                     and HBC56_CONSOLE_FLAGS
   280  fd49 f03d                       beq .keyboardInput
   281                          
   282                          
   283                                  ; NES input
   284  fd4b 78                         sei
   285                                  !ifdef HAVE_TMS9918 {
   286  fd4c 0878a9268d117f20...                +tmsPrintZ .HBC56_PRESS_ANY_NES_TEXT, (32 - .HBC56_PRESS_ANY_NES_TEXT_LEN) / 2, 17
   287                                  }
   288                          
   289                                  !ifdef HAVE_LCD {
   290  fd6a 2015ee                             jsr lcdDetect
   291  fd6d 9012                               bcc @noLcd2
   292                                          !ifdef HAVE_GRAPHICS_LCD {
   293  fd6f a200bdbef59d607a...                        +memcpy TILEMAP_DEFAULT_BUFFER_ADDRESS + 16*6, .HBC56_PRESS_ANY_NES_TEXT, 16
   294  fd7c a006                                       ldy #6
   295  fd7e 2042f1                                     jsr tilemapRenderRowToLcd
   296                                          } else {
   297                                                  lda #<.HBC56_PRESS_ANY_NES_TEXT
   298                                                  sta STR_ADDR_L
   299                                                  lda #>.HBC56_PRESS_ANY_NES_TEXT
   300                                                  sta STR_ADDR_H
   301                                                  jsr lcdPrint
   302                                          }
   303                          @noLcd2:
   304                                  }
   305  fd81 58                         cli
   306  fd82 20a0f2                     jsr nesWaitForPress
   307  fd85 4cc2fd                     jmp .afterInput
   308                          
   309                          .keyboardInput
   310                          !ifdef HAVE_KEYBOARD {
   311                                  ; Keyboard  input
   312  fd88 78                         sei
   313                                  !ifdef HAVE_TMS9918 {
   314  fd89 0878a9288d117f20...                +tmsPrintZ .HBC56_PRESS_ANY_KEY_TEXT, (32 - .HBC56_PRESS_ANY_KEY_TEXT_LEN) / 2, 17
   315                                  }
   316                          
   317                                  !ifdef HAVE_LCD {
   318  fda7 2015ee                             jsr lcdDetect
   319  fdaa 9012                               bcc @noLcd3
   320                                          !ifdef HAVE_GRAPHICS_LCD {
   321  fdac a200bdadf59d607a...                        +memcpy TILEMAP_DEFAULT_BUFFER_ADDRESS + 16*6, .HBC56_PRESS_ANY_KEY_TEXT, 16
   322  fdb9 a006                                       ldy #6
   323  fdbb 2042f1                                     jsr tilemapRenderRowToLcd
   324                                          } else {
   325                                                  lda #<.HBC56_PRESS_ANY_KEY_TEXT
   326                                                  sta STR_ADDR_L
   327                                                  lda #>.HBC56_PRESS_ANY_KEY_TEXT
   328                                                  sta STR_ADDR_H
   329                                                  jsr lcdPrint        
   330                                          }
   331                          @noLcd3:
   332                                  }
   333  fdbe 58                         cli
   334  fdbf 2001f4                     jsr kbWaitForScancode
   335                          }
   336                          
   337                          .afterInput
   338                          
   339                                  !ifdef HAVE_LCD {
   340                                          ;jsr lcdDetect
   341                                          ;bcc @noLcd4
   342  fdc2 20c4ed                             jsr lcdInit
   343                                          !ifdef HAVE_GRAPHICS_LCD {
   344  fdc5 203bed                                     jsr lcdTextMode
   345                                          }
   346  fdc8 20d6ed                             jsr lcdClear
   347  fdcb 20dfed                             jsr lcdHome
   348                          @noLcd4:
   349                                  }
   350                          
   351                                  !ifdef HAVE_TMS9918 {
   352  fdce 20ade7                             jsr tmsInitTextTable ; clear output
   353  fdd1 a94020efe5                         +tmsDisableOutput
   354  fdd6 a92020efe5                         +tmsDisableInterrupts
   355                                  }
   356                                  ; no interrupts until the user code says so
   357  fddb 78                         sei
   358                          
   359  fddc 200080                     jsr DEFAULT_HBC56_RST_VECTOR
   360                          
   361                          ; -----------------------------------------------------------------------------
   362                          ; Beep (higher tone)
   363                          ; -----------------------------------------------------------------------------
   364                          hbc56HighBell:
   365                                  !ifdef HAVE_AY3891X {
   366  fddf a9078d407fad427f...                +ayToneEnable AY_PSG0, AY_CHC
   367  fdf1 a90a8d407fa90f8d...                +aySetVolume AY_PSG0, AY_CHC, $ff
   368  fdfb a9048d407fa9598d...                +ayPlayNote AY_PSG0, AY_CHC, NOTE_FREQ_F5
   369                                  }
   370  fe0f 8032                       bra .noteTimeout
   371                          
   372                          ; -----------------------------------------------------------------------------
   373                          ; Beep (lower tone)
   374                          ; -----------------------------------------------------------------------------
   375                          hbc56Bell:
   376                                  !ifdef HAVE_AY3891X {
   377  fe11 a9078d407fad427f...                +ayToneEnable AY_PSG0, AY_CHC
   378  fe23 a90a8d407fa90f8d...                +aySetVolume AY_PSG0, AY_CHC, $ff
   379  fe2d a9048d407fa97b8d...                +ayPlayNote AY_PSG0, AY_CHC, NOTE_FREQ_E3
   380                                  }
   381  fe41 8000                       bra .noteTimeout
   382                          
   383                          .noteTimeout
   384                                  !ifdef HAVE_SFXMAN {
   385                                          lda HBC56_CONSOLE_FLAGS
   386                                          and #HBC56_CONSOLE_FLAG_LCD
   387                                          bne @skipSfxMan
   388                                          +sfxManSetChannelTimeout  AY_PSG0, AY_CHC, 0.16
   389                                          rts
   390                                  }
   391                          @skipSfxMan
   392                                  !ifdef HAVE_AY3891X {
   393  fe43 20e1ff                             jsr hbc56Delay
   394  fe46 20e1ff                             jsr hbc56Delay
   395  fe49 a9048d407fa9008d...                +ayStop AY_PSG0, AY_CHC
   396                                  }
   397                          
   398  fe5d 60                         rts
   399                          
   400                          ; -----------------------------------------------------------------------------
   401                          ; Software reset
   402                          ; -----------------------------------------------------------------------------
   403                          hbc56Reset:
   404  fe5e 4cabfc                     jmp kernelMain
   405                          
   406                          ; -----------------------------------------------------------------------------
   407                          ; Stop (loop forever)
   408                          ; -----------------------------------------------------------------------------
   409                          hbc56Stop:
   410  fe61 cb                         wai
   411  fe62 4c61fe                     jmp hbc56Stop
   412                          
   413                          ; -----------------------------------------------------------------------------
   414                          ; Delay function
   415                          ; -----------------------------------------------------------------------------
   416                          hbc56CustomDelayMs:
   417  fe65 e637                       inc DELAY_H
   418                          -
   419  fe67 a003                       ldy #3
   420  fe69 20e3ff                     jsr hbc56CustomDelay
   421  fe6c c636               	dec DELAY_L
   422  fe6e d0f7               	bne -
   423  fe70 a900               	lda #0
   424  fe72 8536                       sta DELAY_L
   425  fe74 c637               	dec DELAY_H
   426  fe76 d0ef               	bne -
   427  fe78 60                 	rts
   428                          
   429                          
   430                          ;!warn "Kernel size: ", *-$f000
