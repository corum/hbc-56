
; ******** Source: tms9918txttest.asm
     1                          ; Troy's HBC-56 - TMS9918 Text mode test
     2                          ;
     3                          ; Copyright (c) 2021 Troy Schrapel
     4                          ;
     5                          ; This code is licensed under the MIT license
     6                          ;
     7                          ; https://github.com/visrealm/hbc-56
     8                          ;
     9                          

; ******** Source: ../../kernel\hbc56kernel.inc
     1                          ; 6502 - HBC-56 Kernel Include file for user code
     2                          ;
     3                          ; Copyright (c) 2021 Troy Schrapel
     4                          ;
     5                          ; This code is licensed under the MIT license
     6                          ;
     7                          ; https://github.com/visrealm/hbc-56
     8                          ;
     9                          ;
    10                          
    11                          !cpu w65c02
    12                          !initmem $FF
    13                          cputype = $65c02
    14                          

; ******** Source: ../../kernel\kernel.o.lmap
     1                          	HBC56_RST_VECTOR	= $f0b7	; ?
     2                          	AY_ENV_SHAPE_SAW1	= $8	; unused
     3                          	tmsConsoleBackspace	= $e9c2	; ?
     4                          	NES_RAM_SIZE	= $1
     5                          	UART_ZP_START	= $28
     6                          	TMS_LT_RED	= $9	; unused
     7                          	UART_STATUS_RCVR_OVERRUN	= $20	; unused
     8                          	HBC56_TMP	= $7ca1
     9                          	KB_SCANCODE_ESC	= $76	; unused
    10                          	AY_ENV_SHAPE_SAW2	= $c	; unused
    11                          	TMS_GFX_TILE_WIDTH	= $8
    12                          	LCD_RAM_END	= $7b58
    13                          	TMS_SPRITE_SIZE	= $8
    14                          	KB_SCANCODE_ARROW_RIGHT	= $f4	; unused
    15                          	KB_CAPS_LOCK	= $8
    16                          	KB_EXT_KEY	= $e0
    17                          	HBC56_VSYNC_CALLBACK	= $7cb8
    18                          	isLower	= $e000
    19                          	TMS_R1_SPRITE_MAG2	= $1	; unused
    20                          	KB_BUFFER_MASK	= $f
    21                          	KB_SCANCODE_SLASH_FORWARD	= $4a	; unused
    22                          	AY_PORTB	= $f	; unused
    23                          	TMS_R1_RAM_16K	= $80
    24                          	AY_PORTA	= $e	; unused
    25                          	TMS_R1_SPRITE_MAG1	= $0	; unused
    26                          	TMS_FPS	= $3c
    27                          	kbInit	= $ea9a
    28                          	tmsSetAddressNextRow	= $e57e	; unused
    29                          	UART_IRQ_BIT	= $4
    30                          	tmsModeText	= $e63c	; unused
    31                          	_tmsSendKb	= $e69f	; unused
    32                          	UART_STATUS_RX_REG_FULL	= $1
    33                          	tmsReg1SetFields	= $e5dd
    34                          	BITMAP_ZP_START	= $1e
    35                          	JMP_OPCODE	= $4c
    36                          	hbc56IntHandler	= $f039
    37                          	TILEMAP_RAM_START	= $7a00
    38                          	KB_SCANCODE_SCROLL_LOCK	= $7e	; unused
    39                          	KB_RAM_END	= $7c9b
    40                          	AY_ENV_SHAPE_HOLD	= $1
    41                          	TMS_R0_MODE_GRAPHICS_II	= $2
    42                          	KB_SHIFT_LEFT_MAP_BYTE	= $2
    43                          	MEMORY_ZP_END	= $32
    44                          	TMS_R1_SPRITE_8	= $0	; unused
    45                          	KB_SCANCODE_PRTSCR	= $92	; unused
    46                          	KB_SCANCODE_SLASH_BACK	= $5d	; unused
    47                          	AY_WRITE	= $1
    48                          	UART_STATUS_CARRIER_DETECT	= $4	; unused
    49                          	KB_PRESSED_MAP	= $7c75
    50                          	TMS9918_ZP_START	= $24
    51                          	tmsDecPosConsole	= $e8bc
    52                          	UART_CTL_WORD_8BIT_1SB	= $14	; unused
    53                          	HBC56_CONSOLE_FLAG_LCD	= $20	; unused
    54                          	TMS_CYAN	= $7
    55                          	HBC56_TITLE	= $ed53
    56                          	memcpyMultiPage	= $e0bf	; unused
    57                          	KB_SCANCODE_NUM_LOCK	= $77	; unused
    58                          	TILEMAP_RAM_END	= $7b16
    59                          	KB_BUFFER_TAIL	= $7c64
    60                          	tmsSetRegister	= $e5b4
    61                          	hbc56Tms9918Int	= $f061	; ?
    62                          	KB_SCANCODE_NUMPAD_ENTER	= $da	; unused
    63                          	UART_STATUS_TX_REG_EMPTY	= $2
    64                          	UART_RX_BUFFER_XOFF_SIZE	= $c0
    65                          	KB_FLAGS	= $7c5b
    66                          	HBC56_NMI_VECTOR	= $7e04
    67                          	KB_SCANCODE_SQUARE_LEFT	= $54	; unused
    68                          	BITMAP_ZP_END	= $24
    69                          	UART_CTL_CLOCK_DIV_64	= $2
    70                          	toUpper	= $e06b	; unused
    71                          	NES_TMP	= $7c9b	; unused
    72                          	HBC56_META_TITLE_END	= $7cb6
    73                          	uartFlowCtrlXoff	= $ea23	; ?
    74                          	SFXMAN_RAM_START	= $7c58
    75                          	uartInWait	= $ea2c
    76                          	uartOutString	= $ea70	; unused
    77                          	RTI_OPCODE	= $40
    78                          	KB_SCANCODE_PAGE_UP	= $fd	; unused
    79                          	AY_ENV_SHAPE_FADE_OUT	= $9	; unused
    80                          	TMS_VRAM_SPRITE_ATTR_ADDRESS	= $3b00
    81                          	NOTE_FREQ_AS8	= 7458.619999999999890860635787248611	; unused
    82                          	HBC56_TMP_Y	= $7ca4
    83                          	KB_SCANCODE_TILDE	= $e	; unused
    84                          	HBC56_TITLE_LEN	= $1a
    85                          	UART_IO_PORT	= $20
    86                          	TMS9918_RAM_END	= $7b58
    87                          	AY_S0_ADDR	= $7f40	; unused
    88                          	TMS9918_ZP_SIZE	= $2
    89                          	HBC56_TMP_X	= $7ca3
    90                          	NOTE_FREQ_AS5	= 932.330000000000040927261579781771	; unused
    91                          	TMS_MED_GREEN	= $2	; unused
    92                          	TMS_WHITE	= $f
    93                          	KB_SCANCODE_WINDOWS_RIGHT	= $a7	; unused
    94                          	HBC56_KERNEL_ZP_END	= $36
    95                          	AY_S1_WRITE	= $7f45	; unused
    96                          	NOTE_FREQ_AS4	= 466.160000000000025011104298755527	; unused
    97                          	NOTE_FREQ_AS7	= 3729.309999999999945430317893624306	; unused
    98                          	TMS_TMP_ADDRESS	= $24
    99                          	KB_SCANCODE_PERIOD	= $49	; unused
   100                          	tableBitFromLeft	= $e130
   101                          	NOTE_FREQ_AS6	= 1864.660000000000081854523159563541	; unused
   102                          	AY_NOISE_GEN	= $6	; unused
   103                          	NOTE_FREQ_AS1	= 58.270000000000003126388037344441	; unused
   104                          	AY_S0_WRITE	= $7f41	; unused
   105                          	NOTE_FREQ_AS0	= 29.140000000000000568434188608080	; unused
   106                          	tmsSetAddressRead	= $e5a0
   107                          	NOTE_FREQ_AS3	= 233.080000000000012505552149377763	; unused
   108                          	UART_RX_BUFFER_TAIL	= $29
   109                          	tmsSetPatternRead	= $e939	; unused
   110                          	AY_S1_ADDR	= $7f44	; unused
   111                          	NOTE_FREQ_AS2	= 116.540000000000006252776074688882	; unused
   112                          	UART_RX_BUFFER	= $7b58
   113                          	TMS_R1_SPRITE_16	= $2	; unused
   114                          	TMS_GFX_PIXELS_Y	= $c0	; unused
   115                          	TMS_GFX_PIXELS_X	= $100	; unused
   116                          	KB_SCANCODE_NUMPAD_MULTIPLY	= $7c	; unused
   117                          	HBC56_DISABLE_SFXMAN	= $1
   118                          	tmsSetAddressWrite	= $e58a
   119                          	TMS_MAGENTA	= $d	; unused
   120                          	LCD_IO_PORT	= $2	; unused
   121                          	tmsConsoleScrollLine	= $e827
   122                          	KB_SCANCODE_CTRL_RIGHT	= $94	; unused
   123                          	_tmsSendEmptyPage	= $e6de
   124                          	KB_BUFFER_SIZE	= $10
   125                          	KB_SCANCODE_COMMA	= $41	; unused
   126                          	HBC56_TITLE_TEXT	= $ed53
   127                          	AY_R10	= $a
   128                          	AY_IO_PORT	= $40
   129                          	AY_R11	= $b
   130                          	NES_LEFT	= $2	; unused
   131                          	AY_R12	= $c
   132                          	TMS_R1_DISP_BLANK	= $0	; unused
   133                          	KB_NUM_LOCK	= $10	; unused
   134                          	hbc56LogoPatt	= $edd5
   135                          	kernelMain	= $f0b7	; ?
   136                          	AY_R13	= $d
   137                          	hbc56LogoPattEnd	= $ef4d	; unused
   138                          	ASCII_CR	= $d	; unused
   139                          	AY_R14	= $e
   140                          	KB_SCANCODE_PAGE_DOWN	= $fa	; unused
   141                          	kbIntHandler	= $ead5
   142                          	IO_PORT_BASE_ADDRESS	= $7f00
   143                          	AY_R15	= $f
   144                          	isDigit	= $e01e
   145                          	AY_R16	= $10	; unused
   146                          	HAVE_TMS9918	= $1
   147                          	UART_CTL_MASTER_RESET	= $3
   148                          	AY_R17	= $11	; unused
   149                          	KB_SCANCODE_TAB	= $d	; unused
   150                          	HBC56_KERNEL_ZP_START	= $18
   151                          	TMS9918_IRQ_BIT	= $1
   152                          	HBC56_BORDER	= $4
   153                          	TMS_R1_MODE_MULTICOLOR	= $8
   154                          	TMS_R0_MODE_MULTICOLOR	= $0
   155                          	TMS_DK_BLUE	= $4
   156                          	TMS_VRAM_SPRITE_PATT_ADDRESS	= $1800
   157                          	HBC56_CONSOLE_FLAG_NOWAIT	= $10
   158                          	KB_SCANCODE_ENTER	= $5a	; unused
   159                          	KB_IO_PORT	= $80
   160                          	AY_ENV_SHAPE_ATTACK	= $4
   161                          	UART_STATUS_IRQ	= $80	; unused
   162                          	NES_DOWN	= $4	; unused
   163                          	tmsReg1ClearFields	= $e5e7
   164                          	NES_SELECT	= $20	; unused
   165                          	hbc56Stop	= $f213
   166                          	UART_RX_BUFFER_SIZE	= $100
   167                          	KB_BUFFER	= $7c65
   168                          	DEFAULT_HBC56_NMI_VECTOR	= $ffe0	; unused
   169                          	NES1_IO_ADDR	= $7f82
   170                          	UART_CTL_WORD_7BIT_OPB_1SB	= $c	; unused
   171                          	KB_SCANCODE_NUMPAD_PLUS	= $79	; unused
   172                          	NES2_IO_ADDR	= $7f83
   173                          	BITMAP_RAM_END	= $7b26
   174                          	KB_SCANCODE_F2	= $6	; unused
   175                          	HBC56_TITLE_TEXT_LEN	= $1a
   176                          	NES_UP	= $8	; unused
   177                          	KB_SCANCODE_F3	= $4	; unused
   178                          	DELAY_L	= $34
   179                          	TMS_TXT_TILES_X	= $28
   180                          	ASCII_BACKSPACE	= $8	; unused
   181                          	TMS_TXT_TILES_Y	= $18
   182                          	KB_SCANCODE_F1	= $5	; unused
   183                          	KB_SCANCODE_SEMICOLON	= $4c	; unused
   184                          	KB_SCANCODE_F6	= $b	; unused
   185                          	TMS_R1_DISP_ACTIVE	= $40
   186                          	tmsInitColorTable	= $e74e
   187                          	KB_SCANCODE_F7	= $83	; unused
   188                          	KB_SCANCODE_HOME	= $ec	; unused
   189                          	DELAY_H	= $35
   190                          	KB_SCANCODE_F4	= $c	; unused
   191                          	tmsSetPosTmpAddress	= $e7e5
   192                          	uartInNoWait	= $ea36	; unused
   193                          	hbc56Reset	= $f210	; unused
   194                          	KB_SCANCODE_F5	= $3	; unused
   195                          	hbc56CustomDelayMs	= $f216	; unused
   196                          	_tmsWaitReg	= $e57a
   197                          	uartOut	= $ea59	; ?
   198                          	KB_TMP_X	= $7c5c
   199                          	KB_SCANCODE_F8	= $a	; unused
   200                          	HBC56_KERNEL_RAM_START	= $7a00
   201                          	KB_TMP_Y	= $7c5d	; unused
   202                          	KB_SCANCODE_F9	= $1	; unused
   203                          	tmsConsolePrint	= $e98b	; unused
   204                          	uartIrq	= $e9f4
   205                          	TMS_BLACK	= $1
   206                          	HBC56_META_TITLE	= $7ca5
   207                          	KB_SCANCODE_SQUARE_RIGHT	= $5b	; unused
   208                          	tmsConsoleNewline	= $e99b	; ?
   209                          	AY_S1	= $7f44
   210                          	NOTE_FREQ_C8	= 4186.010000000000218278728425502777	; unused
   211                          	KB_IRQ_BIT	= $2
   212                          	tmsModeGraphicsII	= $e61b	; unused
   213                          	AY_S0	= $7f40
   214                          	NOTE_FREQ_A8	= $1b80	; unused
   215                          	HBC56_TICKS	= $7c9e
   216                          	HBC56_SECONDS_H	= $7ca0
   217                          	memcpySinglePage	= $e0a3	; unused
   218                          	tmsModeGraphicsI	= $e608
   219                          	NOTE_FREQ_G8	= 6271.930000000000291038304567337036	; unused
   220                          	AY_ADDR	= $0
   221                          	NOTE_FREQ_E8	= 5274.039999999999963620211929082870	; unused
   222                          	TMS_R1_RAM_4K	= $0	; unused
   223                          	AY_ENV_SHAPE_ALTERNATE	= $2
   224                          	NOTE_FREQ_DS8	= 4978.029999999999745341483503580093	; unused
   225                          	tmsInitEntireColorTable	= $e74c	; ?
   226                          	TMS_GREY	= $e
   227                          	NES_B	= $40	; unused
   228                          	HBC56_SECONDS_L	= $7c9f
   229                          	AY_PSG1	= $4
   230                          	UART_CTL_WORD_7BIT_EPB_1SB	= $8	; unused
   231                          	NES_A	= $80	; unused
   232                          	TMS9918_IO_PORT	= $10
   233                          	UART_RAM_END	= $7c58
   234                          	AY_PSG0	= $0
   235                          	UART_FLOWCTRL_XON	= $11
   236                          	DEFAULT_HBC56_RST_VECTOR	= $8000
   237                          	NOTE_FREQ_C0	= 16.350000000000001421085471520200	; unused
   238                          	NOTE_FREQ_A1	= $37	; unused
   239                          	NOTE_FREQ_G2	= $62	; unused
   240                          	NOTE_FREQ_E3	= 164.810000000000002273736754432321
   241                          	NOTE_FREQ_DS4	= 311.129999999999995452526491135359	; unused
   242                          	KB_SCANCODE_CTRL_LEFT	= $14	; unused
   243                          	NOTE_FREQ_A0	= 27.500000000000000000000000000000	; unused
   244                          	NOTE_FREQ_E2	= 82.409999999999996589394868351519	; unused
   245                          	NOTE_FREQ_DS5	= 622.250000000000000000000000000000	; unused
   246                          	tmsReg0ClearFields	= $e5d5
   247                          	UART_STATUS_CLEAR_TO_SEND	= $8	; unused
   248                          	NOTE_FREQ_G3	= $c4	; unused
   249                          	NOTE_FREQ_C1	= 32.700000000000002842170943040401	; unused
   250                          	NOTE_FREQ_G0	= 24.500000000000000000000000000000	; unused
   251                          	NOTE_FREQ_E1	= 41.200000000000002842170943040401	; unused
   252                          	NOTE_FREQ_DS6	= 1244.509999999999990905052982270718	; unused
   253                          	UART_DATA	= $7f21
   254                          	NOTE_FREQ_C2	= 65.409999999999996589394868351519	; unused
   255                          	NOTE_FREQ_A3	= $dc	; unused
   256                          	NOTE_FREQ_E0	= 20.600000000000001421085471520200	; unused
   257                          	NOTE_FREQ_DS7	= 2489.019999999999981810105964541435	; unused
   258                          	TMS9918_TMP_BUFFER	= $7b30
   259                          	NOTE_FREQ_G1	= $31	; unused
   260                          	NOTE_FREQ_A2	= $6e	; unused
   261                          	NOTE_FREQ_C3	= 130.810000000000002273736754432321	; unused
   262                          	UART_ZP_END	= $2c
   263                          	NOTE_FREQ_DS0	= 19.449999999999999289457264239900	; unused
   264                          	NOTE_FREQ_C4	= 261.629999999999995452526491135359	; unused
   265                          	NOTE_FREQ_A5	= $370	; unused
   266                          	NOTE_FREQ_G6	= 1567.980000000000018189894035458565	; unused
   267                          	NOTE_FREQ_E7	= 2637.019999999999981810105964541435	; unused
   268                          	NOTE_FREQ_DS1	= 38.890000000000000568434188608080	; unused
   269                          	HAVE_KEYBOARD	= $1
   270                          	NOTE_FREQ_A4	= $1b8	; unused
   271                          	NOTE_FREQ_E6	= 1318.509999999999990905052982270718	; unused
   272                          	hbc56HighBell	= $f191	; ?
   273                          	NOTE_FREQ_G7	= 3135.960000000000036379788070917130	; unused
   274                          	NOTE_FREQ_C5	= 523.250000000000000000000000000000	; unused
   275                          	tmsConsoleHome	= $e8d9	; unused
   276                          	NOTE_FREQ_DS2	= 77.780000000000001136868377216160	; unused
   277                          	NOTE_FREQ_G4	= $188	; unused
   278                          	NOTE_FREQ_E5	= 659.250000000000000000000000000000	; unused
   279                          	NOTE_FREQ_C6	= 1046.500000000000000000000000000000	; unused
   280                          	NOTE_FREQ_A7	= $dc0	; unused
   281                          	BCD_RAM_START	= $7c58
   282                          	HBC56_META_TITLE_MAX_LEN	= $10
   283                          	isDigitX	= $e030	; unused
   284                          	NOTE_FREQ_DS3	= 155.560000000000002273736754432321	; unused
   285                          	NOTE_FREQ_E4	= 329.629999999999995452526491135359	; unused
   286                          	NOTE_FREQ_G5	= 783.990000000000009094947017729282	; unused
   287                          	NOTE_FREQ_A6	= $6e0	; unused
   288                          	NOTE_FREQ_C7	= $82d	; unused
   289                          	AY_INACTIVE	= $3	; unused
   290                          	TMS_SPRITE_SIZE2X	= $10	; unused
   291                          	tmsSetPosWriteText	= $e8f2	; ?
   292                          	KB_SCANCODE_F11	= $78	; unused
   293                          	AY_S0_READ	= $7f42	; unused
   294                          	tmsInitTextTable	= $e731	; ?
   295                          	KB_SCANCODE_F10	= $9	; unused
   296                          	KB_SCANCODE_NUMPAD_PERIOD	= $71	; unused
   297                          	KB_SCANCODE_F12	= $7	; unused
   298                          	kbNextScancode	= $ebe7
   299                          	KB_SCANCODE_WINDOWS_LEFT	= $9f	; unused
   300                          	BCD_RAM_END	= $7c5b
   301                          	ASCII_RETURN	= $a	; unused
   302                          	TMS_R1_INT_ENABLE	= $20
   303                          	UART_CTL_WORD_8BIT_OPAR_1SB	= $1c	; unused
   304                          	isSpace	= $e049	; unused
   305                          	hbc56BootScreen	= $ef4d
   306                          	AY_S1_READ	= $7f46	; unused
   307                          	KB_SCANCODE_END	= $e9	; unused
   308                          	BCD_RAM_SIZE	= $3
   309                          	TMS_GFX_TILE_HEIGHT	= $8
   310                          	KB_SCANCODE_SHIFT_RIGHT	= $59
   311                          	TMS_LT_BLUE	= $5	; unused
   312                          	TMS_R0_EXT_VDP_ENABLE	= $1	; unused
   313                          	uartOutNoBsCheck	= $ea5f	; ?
   314                          	KB_SCANCODE_ALT_LEFT	= $11	; unused
   315                          	HBC56_INT_VECTOR	= $7e00
   316                          	tmsIncPosConsole	= $e89b
   317                          	INT_IO_PORT	= $df
   318                          	KB_PRESSED_MAP_BYTES	= $20
   319                          	STR_ADDR_H	= $33
   320                          	NES_RAM_END	= $7c9e
   321                          	memsetSinglePage	= $e101
   322                          	TMS_FONT_DATA	= $e269
   323                          	kbWaitForScancode	= $ebdb
   324                          	tmsReg0SetFields	= $e5cb
   325                          	tmsPrint	= $e93f
   326                          	KB_SCANCODE_APOS	= $52	; unused
   327                          	STR_ADDR_L	= $32
   328                          	tmsSetPosConsole	= $e8df
   329                          	KB_SHIFT_RIGHT_MAP_BYTE	= $b
   330                          	AY_CLOCK_FREQ	= $1e8480
   331                          	tmsSetBackground	= $e5c7
   332                          	TMS_R1_MODE_GRAPHICS_II	= $0
   333                          	UART_RX_BUFFER_XON_SIZE	= $4
   334                          	uartFlowCtrlXon	= $ea18	; ?
   335                          	ASCII_BELL	= $7	; unused
   336                          	BCD_TMP3	= $7c5a
   337                          	TMS_MED_RED	= $8	; unused
   338                          	UART_CTL_WORD_8BIT_EPAR_1SB	= $18	; unused
   339                          	BCD_TMP2	= $7c59
   340                          	LCD_ZP_END	= $28
   341                          	toLower	= $e073	; unused
   342                          	BCD_TMP1	= $7c58
   343                          	MEM_SRC	= $2e
   344                          	AY_ENABLES	= $7
   345                          	UART_CTL_WORD_7BIT_OPB_2SB	= $4	; unused
   346                          	LCD_RAM_START	= $7b58
   347                          	TMS_LT_GREEN	= $3	; unused
   348                          	_tmsWaitData	= $e571
   349                          	HAVE_MATH_INC	= $1
   350                          	KB_SCANCODE_B	= $32	; unused
   351                          	hbc56Bell	= $f1c3	; unused
   352                          	KB_SCANCODE_C	= $21	; unused
   353                          	TMS_TXT_PIXELS_X	= $f0	; unused
   354                          	HBC56_KERNEL_RAM_SIZE	= $2ba	; unused
   355                          	TMS_TXT_PIXELS_Y	= $c0	; unused
   356                          	KB_SCANCODE_A	= $1c	; unused
   357                          	TMS_GFX_TILES_Y	= $18
   358                          	KB_PRESSED_MAP_SIZE	= $fe	; unused
   359                          	KB_SCANCODE_F	= $2b	; unused
   360                          	kbIsPressed	= $ebc1	; unused
   361                          	TMS_R0_MODE_TEXT	= $0
   362                          	TMS_GFX_TILES_X	= $20
   363                          	KB_SCANCODE_G	= $34	; unused
   364                          	HBC56_DISABLE_LCD	= $1
   365                          	TMS_R0_MODE_GRAPHICS_I	= $0
   366                          	tmsSetSpriteTmpAddress	= $e7dc	; unused
   367                          	KB_CB_RELEASED	= $7c60
   368                          	KB_SCANCODE_D	= $23	; unused
   369                          	TMS_R1_MODE_GRAPHICS_I	= $0
   370                          	KB_SCANCODE_E	= $24	; unused
   371                          	TILEMAP_ZP_START	= $18
   372                          	KB_SHIFT_DOWN	= $1	; unused
   373                          	KB_SCANCODE_J	= $3b	; unused
   374                          	KB_CB_PRESSED	= $7c5e
   375                          	KB_SCANCODE_K	= $42	; unused
   376                          	KB_SHIFT_RIGHT_MAP_BIT	= $40
   377                          	HBC56_CONSOLE_FLAGS	= $7ca2
   378                          	AY_ENV_SHAPE	= $d
   379                          	KB_SCANCODE_H	= $33	; unused
   380                          	kbReadAscii	= $ec46	; unused
   381                          	KB_BUFFER_HEAD	= $7c63
   382                          	KB_SCANCODE_I	= $43	; unused
   383                          	KB_SCANCODE_N	= $31	; unused
   384                          	tmsTileXyAtPixelXy	= $e7a2	; unused
   385                          	UART_CTL_CLOCK_DIV_16	= $1	; unused
   386                          	nesWaitForPress	= $ea7d
   387                          	hbc56LogoInd	= $ed93
   388                          	KB_SCANCODE_O	= $44	; unused
   389                          	memcpyMultiPagePort	= $e0e1	; unused
   390                          	KB_SCANCODE_L	= $4b	; unused
   391                          	bin2bcd8	= $e07b	; unused
   392                          	KB_SCANCODE_M	= $3a	; unused
   393                          	KB_SCANCODE_ARROW_UP	= $f5	; unused
   394                          	UART_RX_BUFFER_HEAD	= $28
   395                          	KB_SCANCODE_R	= $2d	; unused
   396                          	_tmsSendPage	= $e6a8	; ?
   397                          	tmsSetPosWrite	= $e8e5	; unused
   398                          	KB_SCANCODE_S	= $1b	; unused
   399                          	KB_SCANCODE_P	= $4d	; unused
   400                          	TMS_DK_RED	= $6	; unused
   401                          	KB_SCANCODE_Q	= $15	; unused
   402                          	NOTE_FREQ_GS8	= 6644.880000000000109139364212751389	; unused
   403                          	KB_CURRENT_STATE	= $7c62
   404                          	KB_SCANCODE_V	= $2a	; unused
   405                          	NOTE_FREQ_CS8	= 4434.920000000000072759576141834259	; unused
   406                          	KB_SCANCODE_W	= $1d	; unused
   407                          	HBC56_CONSOLE_FLAG_NES	= $40
   408                          	UART_CTL_WORD_7BIT_EPB_2SB	= $0	; unused
   409                          	kbScancodeToAscii	= $ebf6
   410                          	KB_SCANCODE_T	= $2c	; unused
   411                          	KB_SHIFT_LEFT_MAP_BIT	= $20
   412                          	TMS_TRANSPARENT	= $0	; unused
   413                          	KB_SCANCODE_U	= $3c	; unused
   414                          	SFXMAN_RAM_END	= $7c58
   415                          	NOTE_FREQ_GS4	= 415.300000000000011368683772161603	; unused
   416                          	tmsSendBytes	= $e6e2
   417                          	NOTE_FREQ_CS5	= 554.370000000000004547473508864641	; unused
   418                          	KB_SCANCODE_Z	= $1a	; unused
   419                          	LCD_ZP_START	= $28
   420                          	NOTE_FREQ_CS4	= 277.180000000000006821210263296962	; unused
   421                          	NOTE_FREQ_GS5	= 830.610000000000013642420526593924	; unused
   422                          	KB_SCANCODE_MINUS	= $4e	; unused
   423                          	isUpper	= $e00c
   424                          	TMS_VRAM_NAME_ADDRESS	= $3800
   425                          	UART_IRQ	= $3
   426                          	NES_RAM_START	= $7c9b
   427                          	NOTE_FREQ_GS6	= 1661.220000000000027284841053187847	; unused
   428                          	NOTE_FREQ_CS7	= 2217.460000000000036379788070917130	; unused
   429                          	KB_SCANCODE_X	= $22	; unused
   430                          	KB_SCANCODE_PAUSE	= $e1
   431                          	KB_IO_ADDR	= $7f80
   432                          	memcpySinglePagePort	= $e0b1	; unused
   433                          	NOTE_FREQ_CS6	= 1108.730000000000018189894035458565	; unused
   434                          	NOTE_FREQ_GS7	= 3322.440000000000054569682106375694	; unused
   435                          	TMS_REGISTER_DATA	= $e569
   436                          	TMS_MODEL	= $26be
   437                          	KB_SCANCODE_Y	= $35	; unused
   438                          	NOTE_FREQ_GS0	= 25.960000000000000852651282912120	; unused
   439                          	NOTE_FREQ_CS1	= 34.649999999999998578914528479800	; unused
   440                          	HBC56_USER_ZP_START	= $36	; unused
   441                          	NOTE_FREQ_CS0	= 17.320000000000000284217094304040	; unused
   442                          	NOTE_FREQ_GS1	= 51.909999999999996589394868351519	; unused
   443                          	UART_CTL_RX_INT_ENABLE	= $80
   444                          	KB_SCANCODE_CAPS_LOCK	= $58
   445                          	tableInvBitFromRight	= $e148	; unused
   446                          	tmsInitPattTable	= $e6f1	; ?
   447                          	TMS9918_IRQ	= $1
   448                          	HBC56_CONSOLE_FLAG_CURSOR	= $80	; unused
   449                          	NOTE_FREQ_GS2	= 103.829999999999998294697434175760	; unused
   450                          	NOTE_FREQ_CS3	= 138.590000000000003410605131648481	; unused
   451                          	tmsModeMulticolor	= $e64f	; unused
   452                          	NOTE_FREQ_CS2	= 69.299999999999997157829056959599	; unused
   453                          	NOTE_FREQ_GS3	= 207.650000000000005684341886080801	; unused
   454                          	KB_IRQ	= $2
   455                          	VIA_IO_PORT	= $f0	; unused
   456                          	_tmsSendX8	= $e6aa
   457                          	KB_SCANCODE_NUMPAD_5	= $73	; unused
   458                          	AY_CHA	= $0
   459                          	KB_SCANCODE_ALT_RIGHT_	= $91	; unused
   460                          	KB_SCANCODE_NUMPAD_4	= $6b	; unused
   461                          	AY_CHB	= $1
   462                          	KB_RAM_SIZE	= $3a
   463                          	tmsSetPatternWrite	= $e933	; unused
   464                          	KB_SCANCODE_NUMPAD_7	= $6c	; unused
   465                          	UART_RAM_START	= $7b58
   466                          	AY_CHC	= $2
   467                          	KB_SCANCODE_NUMPAD_6	= $74	; unused
   468                          	MEMORY_ZP_SIZE	= $6
   469                          	KB_SCANCODE_NUMPAD_1	= $69	; unused
   470                          	KEY_MAP_SHIFTED	= $ecd3	; ?
   471                          	AY_READ	= $2
   472                          	KB_SCANCODE_NUMPAD_0	= $70	; unused
   473                          	KB_SCANCODE_NUMPAD_3	= $7a	; unused
   474                          	HBC56_LOGO	= $4
   475                          	VIA_IRQ	= $5	; unused
   476                          	tableBitFromRight	= $e140	; unused
   477                          	KB_SCANCODE_NUMPAD_2	= $72	; unused
   478                          	TMS9918_CONSOLE_LINE_LEN	= $7b2b
   479                          	KB_SCANCODE_NUMPAD_MINUS	= $7b	; unused
   480                          	BITMAP_RAM_START	= $7b16
   481                          	uartInit	= $e9d8	; unused
   482                          	hbc56CustomDelay	= $ffe3
   483                          	UART_STATUS_FRAMING_ERROR	= $10	; unused
   484                          	HBC56_BACKGROUND	= $f
   485                          	AY_ENV_SHAPE_FADE_IN_STOP	= $4	; unused
   486                          	HAVE_UART	= $1
   487                          	MEM_DST	= $2c
   488                          	TMS_DK_YELLOW	= $a	; unused
   489                          	UART_STATUS_PARITY_ERROR	= $40	; unused
   490                          	KB_SCANCODE_NUMPAD_9	= $7d	; unused
   491                          	KB_SCANCODE_NUMPAD_8	= $75	; unused
   492                          	AY_CHN	= $3	; unused
   493                          	AY_ENV_SHAPE_TRIANGLE	= $e	; unused
   494                          	hbc56Delay	= $ffe1
   495                          	tableInvBitFromLeft	= $e138
   496                          	KB_SCANCODE_2	= $1e	; unused
   497                          	AY_CHB_TONE_H	= $3	; unused
   498                          	KB_SCANCODE_3	= $26	; unused
   499                          	kbResetCallbacks	= $eac4	; unused
   500                          	NES_IO_PORT	= $82
   501                          	TMS9918_RAM_SIZE	= $32
   502                          	KB_SCANCODE_0	= $45	; unused
   503                          	TMS9918_RAM_START	= $7b26
   504                          	AY_CHA_TONE_L	= $0
   505                          	AY_CHC_TONE_H	= $5	; unused
   506                          	AY_ENV_SHAPE_CONTINUE	= $8
   507                          	KB_SCANCODE_1	= $16	; unused
   508                          	HBC56_TEXT	= $4
   509                          	HBC56_META_VECTOR	= $dffc
   510                          	cputype	= $65c02	; unused
   511                          	KB_SCANCODE_6	= $36	; unused
   512                          	HBC56_KERNEL_RAM_END	= $7cba
   513                          	AY_CHB_TONE_L	= $2	; unused
   514                          	KB_SCANCODE_7	= $3d	; unused
   515                          	AY_ENV_SHAPE_FADE_IN	= $d	; unused
   516                          	tmsModeReset	= $e5ef
   517                          	KB_SCANCODE_DELETE	= $f1	; unused
   518                          	KB_SCANCODE_4	= $25	; unused
   519                          	KB_SCANCODE_MENU	= $af	; unused
   520                          	KB_SCANCODE_SPACEBAR	= $29	; unused
   521                          	AY_CHA_TONE_H	= $1
   522                          	AY_CHC_TONE_L	= $4	; unused
   523                          	KB_SCANCODE_5	= $2e	; unused
   524                          	MEMORY_ZP_START	= $2c
   525                          	tmsSetPosRead	= $e8f8	; unused
   526                          	nes1Pressed	= $ea8a	; unused
   527                          	INT_CTRL_ADDRESS	= $7fdf
   528                          	STR_ADDR	= $32
   529                          	AY_ENV_PERIOD_H	= $c
   530                          	tmsHex8	= $e7af	; unused
   531                          	TILEMAP_ZP_END	= $1e
   532                          	KEY_MAP	= $ec53	; ?
   533                          	KB_SCANCODE_8	= $3e	; unused
   534                          	KB_RAM_START	= $7c5b
   535                          	KB_SCANCODE_9	= $46	; unused
   536                          	AY_ENV_PERIOD_L	= $b
   537                          	KB_CTRL_DOWN	= $2	; unused
   538                          	KB_PAUSE_KEY	= $e1
   539                          	NES_RIGHT	= $1	; unused
   540                          	nes2Pressed	= $ea92	; unused
   541                          	MEM_LEN	= $30
   542                          	UART_CTL_WORD_8BIT_2SB	= $10
   543                          	NES_START	= $10	; unused
   544                          	HBC56_META_TITLE_LEN	= $7cb7
   545                          	memsetMultiPage	= $e10d	; unused
   546                          	UART_REG	= $7f20
   547                          	LCD_MODEL	= $3240	; unused
   548                          	KB_SCANCODE_SHIFT_LEFT	= $12
   549                          	isAlNum	= $e02a	; unused
   550                          	AY_CHA_AMPL	= $8
   551                          	LAST_MODULE_RAM_END	= $7c9e
   552                          	TMS_R1_MODE_TEXT	= $10
   553                          	tmsConsoleOut	= $e952
   554                          	TMS9918_REG	= $7f11
   555                          	KB_SCANCODE_NUMPAD_DIVIDE	= $ca	; unused
   556                          	DEFAULT_HBC56_INT_VECTOR	= $ffe0
   557                          	TMS_VRAM_PATT_ADDRESS	= $2000
   558                          	KB_SCANCODE_EQUAL	= $55	; unused
   559                          	KB_RELEASE	= $f0
   560                          	tmsInitSpriteTable	= $e76d	; ?
   561                          	KB_SCANCODE_ARROW_DOWN	= $f2	; unused
   562                          	UART_RX_BUFFER_BYTES	= $2a
   563                          	isAlpha	= $e018
   564                          	ayInit	= $e150
   565                          	TMS9918_RAM	= $7f10
   566                          	UART_RX_FLAGS	= $2b
   567                          	AY_R1	= $1
   568                          	NOTE_FREQ_B8	= 7902.130000000000109139364212751389	; unused
   569                          	KB_STATUS_ADDR	= $7f81
   570                          	AY_R0	= $0
   571                          	AY_R3	= $3
   572                          	NOTE_FREQ_F8	= 5587.649999999999636202119290828705	; unused
   573                          	AY_R2	= $2
   574                          	NOTE_FREQ_D8	= 4698.630000000000109139364212751389	; unused
   575                          	TMS_DK_GREEN	= $c	; unused
   576                          	AY_R5	= $5
   577                          	AY_CHC_AMPL	= $a	; unused
   578                          	NOTE_FREQ_FS8	= 5919.909999999999854480847716331482	; unused
   579                          	AY_R4	= $4
   580                          	AY_R7	= $7
   581                          	KB_ALT_DOWN	= $4	; unused
   582                          	AY_R6	= $6
   583                          	TMS_TXT_TILE_HEIGHT	= $8
   584                          	AY_R9	= $9
   585                          	NOTE_FREQ_B0	= 30.870000000000000994759830064140	; unused
   586                          	NOTE_FREQ_F2	= 87.310000000000002273736754432321	; unused
   587                          	NOTE_FREQ_D3	= 146.830000000000012505552149377763	; unused
   588                          	NOTE_FREQ_FS4	= 369.990000000000009094947017729282	; unused
   589                          	TMS_VRAM_COLOR_ADDRESS+2	= $0
   590                          	tmsSetPatternTmpAddressBank1	= $e91d	; unused
   591                          	AY_R8	= $8
   592                          	NOTE_FREQ_B1	= 61.740000000000001989519660128281	; unused
   593                          	NOTE_FREQ_D2	= 73.420000000000001705302565824240	; unused
   594                          	NOTE_FREQ_FS5	= 739.990000000000009094947017729282	; unused
   595                          	UART_FLOWCTRL_XOFF	= $13
   596                          	TMS_R0_EXT_VDP_DISABLE	= $0
   597                          	tmsSetPatternTmpAddressBank0	= $e8fe	; unused
   598                          	NOTE_FREQ_F3	= 174.610000000000013642420526593924	; unused
   599                          	NOTE_FREQ_F0	= 21.829999999999998294697434175760	; unused
   600                          	NOTE_FREQ_D1	= 36.710000000000000852651282912120	; unused
   601                          	NOTE_FREQ_FS6	= 1479.980000000000018189894035458565	; unused
   602                          	TMS9918_CONSOLE_Y	= $7b29
   603                          	TMS_LT_YELLOW	= $b	; unused
   604                          	KB_SCANCODE_ARROW_LEFT	= $eb	; unused
   605                          	NOTE_FREQ_B2	= 123.469999999999998863131622783840	; unused
   606                          	NOTE_FREQ_D0	= 18.350000000000001421085471520200	; unused
   607                          	NOTE_FREQ_FS7	= 2959.960000000000036379788070917130	; unused
   608                          	TMS9918_CONSOLE_X	= $7b28
   609                          	tmsSetPatternTmpAddressBank2	= $e928	; unused
   610                          	NOTE_FREQ_F1	= 43.649999999999998578914528479800	; unused
   611                          	NOTE_FREQ_B3	= 246.939999999999997726263245567679	; unused
   612                          	HBC56_KERNEL_START	= $e000
   613                          	TMS9918_ZP_END	= $28
   614                          	HAVE_AY3891X	= $1
   615                          	NOTE_FREQ_FS0	= 23.120000000000000994759830064140	; unused
   616                          	TMS_R1_INT_DISABLE	= $0	; unused
   617                          	AY_CHB_AMPL	= $9	; unused
   618                          	NOTE_FREQ_B4	= 493.879999999999995452526491135359	; unused
   619                          	NOTE_FREQ_F6	= 1396.910000000000081854523159563541	; unused
   620                          	NOTE_FREQ_D7	= 2349.320000000000163709046319127083	; unused
   621                          	NOTE_FREQ_FS1	= 46.250000000000000000000000000000	; unused
   622                          	NOTE_FREQ_B5	= 987.769999999999981810105964541435	; unused
   623                          	NOTE_FREQ_D6	= 1174.660000000000081854523159563541	; unused
   624                          	TMS_TXT_TILE_WIDTH	= $6
   625                          	tmsSetPosTmpAddressText	= $e802
   626                          	tmsSetPatternTmpAddress	= $e8fe
   627                          	NOTE_FREQ_F7	= 2793.829999999999927240423858165741	; unused
   628                          	NOTE_FREQ_FS2	= 92.500000000000000000000000000000	; unused
   629                          	NOTE_FREQ_F4	= 349.230000000000018189894035458565	; unused
   630                          	NOTE_FREQ_D5	= 587.330000000000040927261579781771	; unused
   631                          	LOGO_BUFFER	= $3000	; unused
   632                          	NOTE_FREQ_B6	= 1975.529999999999972715158946812153	; unused
   633                          	TMS9918_CONSOLE_SIZE_X	= $7b2a
   634                          	KB_SCANCODE_BACKSPACE	= $66	; unused
   635                          	NOTE_FREQ_FS3	= $b9	; unused
   636                          	NOTE_FREQ_D4	= 293.660000000000025011104298755527	; unused
   637                          	tmsInit	= $e65d
   638                          	NOTE_FREQ_F5	= 698.460000000000036379788070917130
   639                          	NOTE_FREQ_B7	= 3951.070000000000163709046319127083	; unused
   640                          	KB_SCANCODE_INSERT	= $f0	; unused

; ******** Source: ../../kernel\hbc56kernel.inc
    15                          
    16                          

; ******** Source: ../../lib\ut\math.inc
     1                          ; 6502
     2                          ;
     3                          ; Math macros
     4                          ;
     5                          ; Copyright (c) 2020 Troy Schrapel
     6                          ;
     7                          ; This code is licensed under the MIT license
     8                          ;
     9                          ; https://github.com/visrealm/hbc-56
    10                          ;
    11                          ;
    12                          
    13                          HAVE_MATH_INC = 1
    14                          
    15                          !macro lsr2 {
    16                                  lsr
    17                                  lsr
    18                          }
    19                          
    20                          !macro lsr3 {
    21                                  +lsr2
    22                                  lsr
    23                          }
    24                          
    25                          !macro lsr4 {
    26                                  +lsr3
    27                                  lsr
    28                          }
    29                          
    30                          !macro lsr5 {
    31                                  +lsr4
    32                                  lsr
    33                          }
    34                          
    35                          !macro lsr6 {
    36                                  +lsr5
    37                                  lsr
    38                          }
    39                          
    40                          !macro lsr7 {
    41                                  +lsr6
    42                                  lsr
    43                          }
    44                          
    45                          !macro div2   { lsr }
    46                          !macro div4   { +lsr2 }
    47                          !macro div8   { +lsr3 }
    48                          !macro div16  { +lsr4 }
    49                          !macro div32  { +lsr5 }
    50                          !macro div64  { +lsr6 }
    51                          !macro div128 { +lsr7 }
    52                          
    53                          !macro asl2 {
    54                                  asl
    55                                  asl
    56                          }
    57                          
    58                          !macro asl3 {
    59                                  +asl2
    60                                  asl
    61                          }
    62                          
    63                          !macro asl4 {
    64                                  +asl3
    65                                  asl
    66                          }
    67                          
    68                          !macro asl5 {
    69                                  +asl4
    70                                  asl
    71                          }
    72                          
    73                          !macro asl6 {
    74                                  +asl5
    75                                  asl
    76                          }
    77                          
    78                          !macro asl7 {
    79                                  +asl6
    80                                  asl
    81                          }
    82                          
    83                          !macro mul2   { asl }
    84                          !macro mul4   { +asl2 }
    85                          !macro mul8   { +asl3 }
    86                          !macro mul16  { +asl4 }
    87                          !macro mul32  { +asl5 }
    88                          !macro mul64  { +asl6 }
    89                          !macro mul128 { +asl7 }
    90                          
    91                          
    92                          
    93                          ; -----------------------------------------------------------------------------
    94                          ; +dec16: decement a 16-bit value
    95                          ; -----------------------------------------------------------------------------
    96                          ; Inputs:
    97                          ;  addr: address containing LSB of value to decrement
    98                          ; -----------------------------------------------------------------------------
    99                          !macro dec16 .addr {
   100                            lda .addr
   101                            bne +
   102                            dec .addr + 1
   103                          +
   104                            dec .addr
   105                          }
   106                          
   107                          ; -----------------------------------------------------------------------------
   108                          ; +inc16: increment a 16-bit value
   109                          ; -----------------------------------------------------------------------------
   110                          ; Inputs:
   111                          ;  addr: address containing LSB of value to increment
   112                          ; -----------------------------------------------------------------------------
   113                          !macro inc16 .addr {
   114                            inc .addr
   115                            bne +
   116                            inc .addr + 1
   117                          +
   118                          }
   119                          
   120                          ; -----------------------------------------------------------------------------
   121                          ; +cmp16: compare two 16-bit values in memory
   122                          ; -----------------------------------------------------------------------------
   123                          ; Inputs:
   124                          ;  left:  address containing LSB of left value to comapre
   125                          ;  right: address containing LSB of right value to comapre
   126                          ; Outputs:
   127                          ;  C set if right < left
   128                          ;  Z set if right == left
   129                          ; -----------------------------------------------------------------------------
   130                          !macro cmp16 .left, .right {
   131                            lda .left + 1
   132                            cmp .right + 1
   133                          	bne +
   134                          	lda .left
   135                          	cmp .right
   136                          +
   137                          }
   138                          
   139                          ; -----------------------------------------------------------------------------
   140                          ; +cmp16: compare two 16-bit values in memory
   141                          ; -----------------------------------------------------------------------------
   142                          ; Inputs:
   143                          ;  value: immediate value to compare
   144                          ;  x:     msb
   145                          ;  a:     lsb
   146                          ; -----------------------------------------------------------------------------
   147                          !macro cmp16xa .value {
   148                            cpx #>.value
   149                          	bne .doneCmpXa
   150                          	cmp #<.value
   151                          .doneCmpXa
   152                          }
   153                          
   154                          ; -----------------------------------------------------------------------------
   155                          ; +sub16: subtract 16 bit numbers
   156                          ; -----------------------------------------------------------------------------
   157                          ; Inputs:
   158                          ;  left:  address containing LSB of left value
   159                          ;  right: address containing LSB of right value
   160                          ; Outputs:
   161                          ;  res:   address containing LSB of result
   162                          ; -----------------------------------------------------------------------------
   163                          !macro sub16 .left, .right, .res {
   164                            sec
   165                            lda .left
   166                            sbc .right
   167                            sta .res
   168                            lda .left + 1
   169                            sbc .right + 1
   170                            sta .res + 1
   171                          }
   172                          
   173                          ; -----------------------------------------------------------------------------
   174                          ; +sub16: subtract 16 bit numbers - result in ax registers
   175                          ; -----------------------------------------------------------------------------
   176                          ; Inputs:
   177                          ;  left:  address containing LSB of left value
   178                          ;  right: address containing LSB of right value
   179                          ; Outputs:
   180                          ;  a:     result msb
   181                          ;  x:     result lsb
   182                          ; -----------------------------------------------------------------------------
   183                          !macro sub16 .left, .right {
   184                            sec
   185                            lda .left
   186                            sbc .right
   187                            tax
   188                            lda .left + 1
   189                            sbc .right + 1
   190                          }
   191                          
   192                          
   193                          ; -----------------------------------------------------------------------------
   194                          ; +add16: add 16 bit numbers - result in ax registers
   195                          ; -----------------------------------------------------------------------------
   196                          ; Inputs:
   197                          ;  left:  address containing LSB of left value
   198                          ;  right: address containing LSB of right value
   199                          ; Outputs:
   200                          ;  a:     result msb
   201                          ;  x:     result lsb
   202                          ; -----------------------------------------------------------------------------
   203                          !macro add16 .left, .right {
   204                            clc
   205                            lda .left
   206                            adc .right
   207                            tax
   208                            lda .left + 1
   209                            adc .right + 1
   210                          }
   211                          
   212                          
   213                          ; -----------------------------------------------------------------------------
   214                          ; +add16Imm: add 16 bit numbers - result stored to res
   215                          ; -----------------------------------------------------------------------------
   216                          ; Inputs:
   217                          ;  left:  address containing LSB of left value
   218                          ;  imm:   immediate value to add
   219                          ; Outputs:
   220                          ;  res: address to store result
   221                          ; -----------------------------------------------------------------------------
   222                          !macro add16Imm .left, .imm, .res {
   223                            clc
   224                            lda .left
   225                            adc #<.imm
   226                            sta .res
   227                            lda .left + 1
   228                            adc #>.imm
   229                            sta .res + 1
   230                          }
   231                          
   232                          
   233                          ; -----------------------------------------------------------------------------
   234                          ; +subImm8From16: subtract an 8 bit number from a 16 bit number
   235                          ; -----------------------------------------------------------------------------
   236                          ; Inputs:
   237                          ;  left:  address containing LSB of left value
   238                          ;  right: immediate 8-bit value
   239                          ; Outputs:
   240                          ;  res:   address containing LSB of result
   241                          ; -----------------------------------------------------------------------------
   242                          !macro subImm8From16 .left, .right, .res {
   243                            sec
   244                            lda .left
   245                            sbc #.right
   246                            sta .res
   247                            lda .left + 1
   248                            sbc #0
   249                            sta .res + 1
   250                          }
   251                          
   252                          ; -----------------------------------------------------------------------------
   253                          ; +incBcd: increment a BCD byte (inc instruction doesn't work in bcd mode)
   254                          ; -----------------------------------------------------------------------------
   255                          ; Inputs:
   256                          ;  addr:  address containing BCD value
   257                          ; -----------------------------------------------------------------------------
   258                          !macro incBcd .addr {
   259                            lda .addr
   260                            sed
   261                            clc
   262                            adc #1
   263                            cld
   264                            sta .addr
   265                          }
   266                          
   267                          ; -----------------------------------------------------------------------------
   268                          ; +decBcd: decrement a BCD byte (inc instruction doesn't work in bcd mode)
   269                          ; -----------------------------------------------------------------------------
   270                          ; Inputs:
   271                          ;  addr:  address containing BCD value
   272                          ; -----------------------------------------------------------------------------
   273                          !macro decBcd .addr {
   274                            lda .addr
   275                            sed
   276                            sec
   277                            sbc #1
   278                            cld
   279                            sta .addr

; ******** Source: ../../kernel\hbc56kernel.inc
    17                          

; ******** Source: ../../lib\ut\memory.inc
     1                          ; 6502
     2                          ;
     3                          ; Memory subroutines and macros
     4                          ;
     5                          ; Copyright (c) 2020 Troy Schrapel
     6                          ;
     7                          ; This code is licensed under the MIT license
     8                          ;
     9                          ; https://github.com/visrealm/hbc-56
    10                          ;
    11                          ;
    12                          
    13                          ; -----------------------------------------------------------------------------
    14                          ; store16: Write a 16-bit immediate value to memory
    15                          ; -----------------------------------------------------------------------------
    16                          ; Inputs:
    17                          ;	.dst: destination address
    18                          ;	.val16: 16-bit value
    19                          ; -----------------------------------------------------------------------------
    20                          !macro store16 .dst, .val16 {
    21                                  lda #<.val16
    22                                  sta .addr
    23                                  lda #>.val16
    24                                  sta .addr + 1
    25                          }
    26                          
    27                          ; -----------------------------------------------------------------------------
    28                          ; memcpy: Copy a fixed number of bytes from .src to dest
    29                          ; -----------------------------------------------------------------------------
    30                          ; Inputs:
    31                          ;	.src: source address
    32                          ;	.dst: destination address
    33                          ;	.cnt: number of bytes
    34                          ; -----------------------------------------------------------------------------
    35                          !macro memcpy .dst, .src, .cnt {
    36                          !if .cnt <= 0 {
    37                          	!error "memcpy: invalid count: ", .cnt
    38                          } else if .cnt <= 8 {
    39                          	!for i, 0, .cnt - 1 {
    40                          		lda .src + i
    41                          		sta .dst + i
    42                          	}
    43                          } else { !if .cnt <= 256 {
    44                          	ldx #0
    45                          -
    46                          	lda .src, x
    47                          	sta .dst, x
    48                          	inx
    49                          	cpx #(.cnt & $ff)	
    50                          	bne -
    51                          } else {
    52                          	lda #<.src
    53                          	sta MEM_SRC
    54                          	lda #>.src
    55                          	sta MEM_SRC + 1
    56                          
    57                          	lda #<.dst
    58                          	sta MEM_DST
    59                          	lda #>.dst
    60                          	sta MEM_DST + 1
    61                          
    62                          
    63                          		lda #<.cnt
    64                          		sta MEMCPY_LEN
    65                          		lda #>.cnt
    66                          		sta MEMCPY_LEN + 1
    67                          		jsr memcpyMultiPage
    68                          	}
    69                          }
    70                          }
    71                          
    72                          !macro setMemCpySrc .src {
    73                          	lda #<.src
    74                          	sta MEM_SRC
    75                          	lda #>.src
    76                          	sta MEM_SRC + 1
    77                          }
    78                          
    79                          !macro setMemCpyDst .dst {
    80                          	lda #<.dst
    81                          	sta MEM_DST
    82                          	lda #>.dst
    83                          	sta MEM_DST + 1
    84                          }
    85                          
    86                          !macro setMemCpySrcInd .srcRef {
    87                          	lda .srcRef
    88                          	sta MEM_SRC
    89                          	lda .srcRef + 1
    90                          	sta MEM_SRC + 1
    91                          }
    92                          
    93                          !macro setMemCpyDstInd .dstRef {
    94                          	lda .dstRef
    95                          	sta MEM_DST
    96                          	lda .dstRef + 1
    97                          	sta MEM_DST + 1
    98                          }
    99                          
   100                          !macro memcpySinglePage .bytes {
   101                          
   102                          	!if .bytes <= 0 {
   103                          		!error "memcpySinglePage: invalid count: ", .bytes
   104                          	}	
   105                          
   106                          	ldy #.bytes
   107                          	jsr memcpySinglePage
   108                          }
   109                          
   110                          
   111                          ; -----------------------------------------------------------------------------
   112                          ; memcpyPort: Copy a fixed number of bytes from .src ram to dest port
   113                          ; -----------------------------------------------------------------------------
   114                          ; Inputs:
   115                          ;	.src: source address
   116                          ;	.dst: destination address
   117                          ;	.cnt: number of bytes
   118                          ; -----------------------------------------------------------------------------
   119                          !macro memcpyPort .dst, .src, .cnt {
   120                          	!if .cnt <= 0 {
   121                          		!error "memcpyPort: invalid count: ", .cnt
   122                          	}
   123                          	
   124                          	lda #<.src
   125                          	sta MEM_SRC
   126                          	lda #>.src
   127                          	sta MEM_SRC + 1
   128                          
   129                          	lda #<.dst
   130                          	sta MEM_DST
   131                          	lda #>.dst
   132                          	sta MEM_DST + 1
   133                          
   134                          	!if .cnt <= 256 {
   135                          		ldy #<.cnt					
   136                          		jsr memcpySinglePagePort
   137                          	} else {
   138                          		lda #<.cnt
   139                          		sta MEMCPY_LEN
   140                          		lda #>.cnt
   141                          		sta MEMCPY_LEN + 1
   142                          		jsr memcpyMultiPagePort
   143                          	}
   144                          }
   145                          
   146                          !zone {
   147                          
   148                          ; -----------------------------------------------------------------------------
   149                          ; memset: Set a fixed number of bytes to a single value
   150                          ; -----------------------------------------------------------------------------
   151                          ; Inputs:
   152                          ;	.dst: destination address
   153                          ;	val: the byte value
   154                          ;	.cnt: number of bytes
   155                          ; -----------------------------------------------------------------------------
   156                          !macro memset .dst, .val, .cnt {
   157                          !if .cnt <= 0 {
   158                          	!error "memset: invalid count: ", .cnt
   159                          } else if .cnt <= 8 {
   160                          	lda #.val
   161                          	!for i, 0, .cnt - 1 {
   162                          	sta .dst + i
   163                          	}
   164                          } else if .cnt <= 256 {
   165                          	ldx #<.cnt
   166                          	lda #.val
   167                          -
   168                          	dex
   169                          	sta .dst, x
   170                          	cpx #0
   171                          	bne -
   172                          } else {
   173                          	lda #<.dst
   174                          	sta MEM_DST
   175                          	lda #>.dst
   176                          	sta MEM_DST + 1
   177                          	lda #<.cnt
   178                          	sta MEM_LEN
   179                          	lda #>.cnt
   180                          	sta MEM_LEN + 1
   181                          	lda #.val
   182                          	jsr memsetMultiPage
   183                          }
   184                          }
   185                          
   186                          

; ******** Source: ../../kernel\hbc56kernel.inc
    18                          

; ******** Source: ../../lib\gfx\tms9918.inc
     1                          ; 6502 - TMS9918 VDP Macros
     2                          ;
     3                          ; Copyright (c) 2021 Troy Schrapel
     4                          ;
     5                          ; This code is licensed under the MIT license
     6                          ;
     7                          ; https://github.com/visrealm/hbc-56
     8                          ;
     9                          
    10                          
    11                          
    12                          
    13                          ; -----------------------------------------------------------------------------
    14                          ; tmsWaitReg: Not sure how much delay we need so make a macro for now
    15                          ; -----------------------------------------------------------------------------
    16                          !macro tmsWaitReg {
    17                                  jsr _tmsWaitReg
    18                          }
    19                          
    20                          ; -----------------------------------------------------------------------------
    21                          ; tmsWaitData: Not sure how much delay we need so make a macro for now
    22                          ; -----------------------------------------------------------------------------
    23                          !macro tmsWaitData {
    24                                  jsr _tmsWaitData
    25                          }
    26                          
    27                          ; -----------------------------------------------------------------------------
    28                          ; tmsSetAddressWrite: Set an address in the TMS9918
    29                          ; -----------------------------------------------------------------------------
    30                          !macro tmsSetAddressWrite .addr {
    31                                  +tmsSetAddressRead ($4000 | .addr)
    32                          }
    33                          
    34                          ; -----------------------------------------------------------------------------
    35                          ; tmsSetAddressRead: Set an address to read from the TMS9918
    36                          ; -----------------------------------------------------------------------------
    37                          !macro tmsSetAddressRead .addr {
    38                                  php
    39                                  sei             ; we can't be interrupted here
    40                                  lda #<(.addr)
    41                                  sta TMS9918_REG
    42                                  +tmsWaitReg
    43                                  lda #>(.addr)
    44                                  sta TMS9918_REG
    45                                  +tmsWaitReg
    46                                  plp
    47                          }
    48                          
    49                          ; -----------------------------------------------------------------------------
    50                          ; tmsGet: Get a byte of data from the TMS9918
    51                          ; -----------------------------------------------------------------------------
    52                          !macro tmsGet {
    53                                  lda TMS9918_RAM
    54                                  +tmsWaitData
    55                          }
    56                          
    57                          ; -----------------------------------------------------------------------------
    58                          ; tmsPut: Send a byte of data to the TMS9918
    59                          ; -----------------------------------------------------------------------------
    60                          !macro tmsPut .byte {
    61                                  lda #(.byte & 0xff)
    62                                  +tmsPut
    63                          }
    64                          
    65                          
    66                          ; -----------------------------------------------------------------------------
    67                          ; tmsPut: Send a byte (A) of data to the TMS9918
    68                          ; -----------------------------------------------------------------------------
    69                          !macro tmsPut {
    70                                  sta TMS9918_RAM
    71                                  +tmsWaitData
    72                          }
    73                          
    74                          ; -----------------------------------------------------------------------------
    75                          ; tmsSetColor: Set current fg/bg color
    76                          ; -----------------------------------------------------------------------------
    77                          !macro tmsSetColor .color {
    78                                  lda #.color
    79                                  jsr tmsSetBackground
    80                          }
    81                          
    82                          ; -----------------------------------------------------------------------------
    83                          ; tmsSetColorFgBg: Set current fg/bg color
    84                          ; -----------------------------------------------------------------------------
    85                          !macro tmsSetColorFgBg .fg, .bg {
    86                                  +tmsColorFgBg .fg, .bg
    87                                  jsr tmsSetBackground
    88                          }
    89                          
    90                          ; -----------------------------------------------------------------------------
    91                          ; byteTmsColorFgBg: Output a data byte
    92                          ; -----------------------------------------------------------------------------
    93                          !macro byteTmsColorFgBg .fg, .bg {
    94                          !byte (.fg << 4 | .bg)
    95                          }
    96                          
    97                          
    98                          ; -----------------------------------------------------------------------------
    99                          ; tmsDisableOutput: Disable the TMS9918 output
   100                          ; -----------------------------------------------------------------------------
   101                          !macro tmsDisableOutput {
   102                                  lda #TMS_R1_DISP_ACTIVE
   103                                  jsr tmsReg1ClearFields
   104                          }
   105                          
   106                          ; -----------------------------------------------------------------------------
   107                          ; tmsEnableOutput: Enable the TMS9918 output
   108                          ; -----------------------------------------------------------------------------
   109                          !macro tmsEnableOutput {
   110                                  lda #TMS_R1_DISP_ACTIVE
   111                                  jsr tmsReg1SetFields
   112                          }
   113                          
   114                          ; -
   115                          !macro tmsEnableInterrupts {
   116                                  lda #TMS_R1_INT_ENABLE
   117                                  jsr tmsReg1SetFields
   118                          }
   119                          
   120                          !macro tmsDisableInterrupts {
   121                                  lda #TMS_R1_INT_ENABLE
   122                                  jsr tmsReg1ClearFields
   123                          }
   124                          
   125                          !macro tmsConsoleOut .char {
   126                                  lda #.char
   127                                  jsr tmsConsoleOut
   128                          }
   129                          
   130                          
   131                          ; -----------------------------------------------------------------------------
   132                          ; tmsConsolePrintAddr: Print text to console
   133                          ; -----------------------------------------------------------------------------
   134                          ; Inputs:
   135                          ;  textAddr: Address of null-terminated string to print
   136                          ; -----------------------------------------------------------------------------
   137                          !macro tmsConsolePrintAddr .textAddr {
   138                                  lda #<.textAddr
   139                                  sta STR_ADDR_L
   140                                  lda #>.textAddr
   141                                  sta STR_ADDR_H
   142                                  jsr tmsConsolePrint        
   143                          }
   144                          
   145                          ; -----------------------------------------------------------------------------
   146                          ; tmsConsolePrint: Print immediate text to console
   147                          ; -----------------------------------------------------------------------------
   148                          ; Inputs:
   149                          ;  str: String to print
   150                          ; -----------------------------------------------------------------------------
   151                          !macro tmsConsolePrint .str {
   152                          	jmp .afterText
   153                          .textAddr
   154                          	!text .str,0
   155                          .afterText        
   156                                  +tmsConsolePrintAddr .textAddr
   157                          }
   158                          
   159                          ; -----------------------------------------------------------------------------
   160                          ; +tmsColorFgBg: Set A to the given FG / BG color
   161                          ; -----------------------------------------------------------------------------
   162                          !macro tmsColorFgBg .fg, .bg {
   163                                  lda #(.fg << 4 | .bg)
   164                          }
   165                          
   166                          ; -----------------------------------------------------------------------------
   167                          ; tmsReadStatus: Read status - clear interrupt
   168                          ; -----------------------------------------------------------------------------
   169                          !macro tmsReadStatus  {
   170                                  bit TMS9918_REG
   171                          }
   172                          
   173                          ; -----------------------------------------------------------------------------
   174                          ; tmsSendData: Send # bytes from .sourceAddr to tms9918 data port
   175                          ; -----------------------------------------------------------------------------
   176                          !macro tmsSendData .sourceAddr, .numBytes {
   177                                  lda #<.sourceAddr
   178                                  sta TMS_TMP_ADDRESS
   179                                  lda #>.sourceAddr
   180                                  sta TMS_TMP_ADDRESS + 1
   181                          
   182                                  !if .numBytes < 256 {
   183                                          ldx #.numBytes
   184                                          jsr tmsSendBytes
   185                                  } else {
   186                                          !do while .numBytes > 0 {
   187                                                  !if .numBytes > 255 {
   188                                                          ldx #0
   189                                                          !set .numBytes = .numBytes - 256
   190                                                  } else {
   191                                                          ldx #.numBytes
   192                                                          !set .numBytes = 0
   193                                                  }
   194                                                  jsr tmsSendBytes
   195                                                  inc TMS_TMP_ADDRESS + 1
   196                                          }
   197                                  }
   198                          
   199                          }
   200                          
   201                          ; -----------------------------------------------------------------------------
   202                          ; tmsSendDataRpt: Send # bytes from .sourceAddr to tms9918 data port .rpt times
   203                          ; -----------------------------------------------------------------------------
   204                          !macro tmsSendDataRpt .sourceAddr, .numBytes, .rpt {
   205                                  lda #<.sourceAddr
   206                                  sta TMS_TMP_ADDRESS
   207                                  lda #>.sourceAddr
   208                                  sta TMS_TMP_ADDRESS + 1
   209                          
   210                                  !if .numBytes < 256 {
   211                                          !if .rpt < 5 {
   212                                                  !for i,1,.rpt {
   213                                                          ldx #.numBytes
   214                                                          jsr tmsSendBytes
   215                                                  }
   216                                          } else {
   217                                                  lda #.rpt
   218                                                  sta TMS9918_TMP_BUFFER
   219                          -
   220                                                  ldx #.numBytes
   221                                                  jsr tmsSendBytes
   222                                                  dec TMS9918_TMP_BUFFER
   223                                                  bne -
   224                                          }
   225                                  } else {
   226                                          !error "tmsSendDataRpt supports <256 bytes only"
   227                                  }
   228                          }
   229                          
   230                          
   231                          ; -----------------------------------------------------------------------------
   232                          ; tmsPutRpt: Send value .rpt times
   233                          ; -----------------------------------------------------------------------------
   234                          !macro tmsPutRpt .value, .rpt {
   235                                  ldx #.rpt
   236                                  lda #.value
   237                          -
   238                                  +tmsPut
   239                                  dex
   240                                  bne -
   241                          }
   242                          
   243                          !macro tmsPutSeq .from, .count {
   244                                  lda #.from
   245                          -
   246                                  +tmsPut
   247                                  inc
   248                                  cmp #<(.from + .count)
   249                                  bne -
   250                          }
   251                          
   252                          !macro tmsSetSourceAddressInd .addr {
   253                          	lda .addr
   254                          	sta TMS_TMP_ADDRESS
   255                          	lda .addr + 1
   256                          	sta TMS_TMP_ADDRESS + 1
   257                          }
   258                          
   259                          !macro tmsSetSourceAddressIndOffset .addr, .offset {
   260                                  clc
   261                          	lda .addr
   262                                  adc #<.offset
   263                          	sta TMS_TMP_ADDRESS
   264                          	lda .addr + 1
   265                                  adc #>.offset
   266                          	sta TMS_TMP_ADDRESS + 1
   267                          }
   268                          
   269                          
   270                          !macro tmsSendBytes .bytes {
   271                                  ldx #.bytes
   272                                  jsr tmsSendBytes
   273                          }
   274                          
   275                          
   276                          ; -----------------------------------------------------------------------------
   277                          ; tmsSetAddrPattTable: Initialise address for font table
   278                          ; -----------------------------------------------------------------------------
   279                          !macro tmsSetAddrPattTable {
   280                                  +tmsSetAddrPattTable 0
   281                          }
   282                          
   283                          ; -----------------------------------------------------------------------------
   284                          ; tmsSetAddrPattTable: Initialise address for pattern table
   285                          ; -----------------------------------------------------------------------------
   286                          !macro tmsSetAddrPattTable .ind {
   287                                  +tmsSetAddressWrite TMS_VRAM_PATT_ADDRESS + (8 * .ind)
   288                          }
   289                          
   290                          ; -----------------------------------------------------------------------------
   291                          ; tmsSetAddrPattTable: Initialise address for pattern table
   292                          ; -----------------------------------------------------------------------------
   293                          !macro tmsSetAddrPattTable .ind, .row {
   294                                  +tmsSetAddressWrite TMS_VRAM_PATT_ADDRESS + (8 * .ind) + .row
   295                          }
   296                          
   297                          ; -----------------------------------------------------------------------------
   298                          ; tmsSetAddrPattTableIIBank0: Initialise address for pattern table
   299                          ; -----------------------------------------------------------------------------
   300                          !macro tmsSetAddrPattTableIIBank0 .ind {
   301                                  +tmsSetAddrPattTable .ind
   302                          }
   303                          
   304                          ; -----------------------------------------------------------------------------
   305                          ; tmsSetAddrPattTableIIBank1: Initialise address for pattern table
   306                          ; -----------------------------------------------------------------------------
   307                          !macro tmsSetAddrPattTableIIBank1 .ind {
   308                                  +tmsSetAddrPattTable 256 + .ind
   309                          }
   310                          
   311                          ; -----------------------------------------------------------------------------
   312                          ; tmsSetAddrPattTableIIBank2: Initialise address for pattern table
   313                          ; -----------------------------------------------------------------------------
   314                          !macro tmsSetAddrPattTableIIBank2 .ind {
   315                                  +tmsSetAddrPattTable 512 + .ind
   316                          }
   317                          
   318                          ; -----------------------------------------------------------------------------
   319                          ; tmsSetAddrPattTableRead: Initialise address for pattern table to read
   320                          ; -----------------------------------------------------------------------------
   321                          !macro tmsSetAddrPattTableRead .ind {
   322                                  +tmsSetAddressRead TMS_VRAM_PATT_ADDRESS + (8 * .ind)
   323                          }
   324                          
   325                          ; -----------------------------------------------------------------------------
   326                          ; tmsSetAddrPattTableRowRead: Initialise address for pattern table to read
   327                          ; -----------------------------------------------------------------------------
   328                          !macro tmsSetAddrPattTableRead .ind, .row {
   329                                  +tmsSetAddressRead TMS_VRAM_PATT_ADDRESS + (8 * .ind) + .row
   330                          }
   331                          
   332                          ; -----------------------------------------------------------------------------
   333                          ; tmsUpdateFont: Update the pattern table with a given font
   334                          ; -----------------------------------------------------------------------------
   335                          !macro tmsUpdateFont .fontAddr {
   336                                  +tmsSetAddrPattTable 32
   337                                  +tmsSendData .fontAddr, $300
   338                          }
   339                          
   340                          ; -----------------------------------------------------------------------------
   341                          ; tmsSetAddrNameTable: Initialise address for base (text) table
   342                          ; -----------------------------------------------------------------------------
   343                          !macro tmsSetAddrNameTable {
   344                                  +tmsSetAddressWrite TMS_VRAM_NAME_ADDRESS
   345                          }
   346                          
   347                          ; -----------------------------------------------------------------------------
   348                          ; tmsSetAddrColorTable: Initialise address for color table
   349                          ; -----------------------------------------------------------------------------
   350                          !macro tmsSetAddrColorTable {
   351                                  +tmsSetAddressWrite TMS_VRAM_COLOR_ADDRESS
   352                          }
   353                          
   354                          ; -----------------------------------------------------------------------------
   355                          ; tmsSetAddrColorTable: Initialise address for color table index
   356                          ; -----------------------------------------------------------------------------
   357                          !macro tmsSetAddrColorTable .ind {
   358                                  +tmsSetAddressWrite TMS_VRAM_COLOR_ADDRESS + .ind
   359                          }
   360                          
   361                          ; -----------------------------------------------------------------------------
   362                          ; tmsSetAddrColorTableII: Initialise address for color table index (mode II)
   363                          ; -----------------------------------------------------------------------------
   364                          !macro tmsSetAddrColorTableII .ind {
   365                                  +tmsSetAddressWrite TMS_VRAM_COLOR_ADDRESS + .ind * 8
   366                          }
   367                          
   368                          ; -----------------------------------------------------------------------------
   369                          ; tmsSetAddrColorTableIIBank0: Initialise address for color table index (mode II)
   370                          ; -----------------------------------------------------------------------------
   371                          !macro tmsSetAddrColorTableIIBank0 .ind {
   372                                  +tmsSetAddrColorTableII .ind
   373                          }
   374                          
   375                          ; -----------------------------------------------------------------------------
   376                          ; tmsSetAddrColorTableIIBank1: Initialise address for color table index (mode II)
   377                          ; -----------------------------------------------------------------------------
   378                          !macro tmsSetAddrColorTableIIBank1 .ind {
   379                                  +tmsSetAddrColorTableII 256 + .ind
   380                          }
   381                          
   382                          ; -----------------------------------------------------------------------------
   383                          ; tmsSetAddrColorTableIIBank2: Initialise address for color table index (mode II)
   384                          ; -----------------------------------------------------------------------------
   385                          !macro tmsSetAddrColorTableIIBank2 .ind {
   386                                  +tmsSetAddrColorTableII 512 + .ind
   387                          }
   388                          
   389                          ; -----------------------------------------------------------------------------
   390                          ; tmsSetAddrSpriteAttrTable: Initialise address for sprite attributes table
   391                          ; -----------------------------------------------------------------------------
   392                          !macro tmsSetAddrSpriteAttrTable {
   393                                  +tmsSetAddrSpriteAttrTable 0
   394                          }
   395                          
   396                          ; -----------------------------------------------------------------------------
   397                          ; tmsSetAddrSpriteAttrTable: Initialise address for sprite attributes table
   398                          ; -----------------------------------------------------------------------------
   399                          !macro tmsSetAddrSpriteAttrTable .index {
   400                                  +tmsSetAddressWrite TMS_VRAM_SPRITE_ATTR_ADDRESS + .index * 4
   401                          }
   402                          
   403                          ; -----------------------------------------------------------------------------
   404                          ; tmsSetAddrSpritePattTable: Initialise address for sprite pattern table
   405                          ; -----------------------------------------------------------------------------
   406                          !macro tmsSetAddrSpritePattTable {
   407                                  +tmsSetAddrSpritePattTable 0
   408                          }
   409                          
   410                          ; -----------------------------------------------------------------------------
   411                          ; tmsSetAddrSpritePattTable: Initialise address for sprite pattern table
   412                          ; -----------------------------------------------------------------------------
   413                          !macro tmsSetAddrSpritePattTable .index {
   414                                  +tmsSetAddressWrite TMS_VRAM_SPRITE_PATT_ADDRESS + .index * 8
   415                          }
   416                          
   417                          
   418                          ; -----------------------------------------------------------------------------
   419                          ; tmsCreateSpritePattern: Create a sprite pattern (.spriteDataAddr is 8 bytes)
   420                          ; -----------------------------------------------------------------------------
   421                          !macro tmsCreateSpritePattern .pattInd, .spriteDataAddr {
   422                          
   423                                  
   424                          
   425                                  ; sprite pattern table
   426                                  +tmsSetAddrSpritePattTable .pattInd
   427                          
   428                                  ldx #0
   429                          -
   430                                  lda .spriteDataAddr,x
   431                                  +tmsPut
   432                                  inx
   433                                  cpx #8
   434                          
   435                                  
   436                          
   437                                  bne -
   438                          }
   439                          
   440                          ; -----------------------------------------------------------------------------
   441                          ; tmsCreateSpritePatternQuad: Create a (size 1) sprite pattern 
   442                          ;   (.spriteDataAddr is 32 bytes)
   443                          ; -----------------------------------------------------------------------------
   444                          !macro tmsCreateSpritePatternQuad .pattInd, .spriteDataAddr {
   445                          
   446                                  
   447                          
   448                                  ; sprite pattern table
   449                                  +tmsSetAddrSpritePattTable .pattInd * 4
   450                          
   451                                  ldx #0
   452                          -
   453                                  lda .spriteDataAddr,x
   454                                  +tmsPut 
   455                                  inx
   456                                  cpx #32
   457                          
   458                                  
   459                          
   460                                  bne -
   461                          }
   462                          
   463                          
   464                          !macro tmsCreateSpritePatternImm .ind, .b0, .b1, .b2, .b3, .b4, .b5, .b6, .b7 {
   465                          
   466                                  ; sprite pattern table
   467                                  +tmsSetAddrSpritePattTable .ind
   468                                  +tmsPut .b0
   469                                  +tmsPut .b2
   470                                  +tmsPut .b2
   471                                  +tmsPut .b3
   472                                  +tmsPut .b4
   473                                  +tmsPut .b5
   474                                  +tmsPut .b6
   475                                  +tmsPut .b7
   476                          }
   477                          
   478                          !macro tmsCreatePatternImm .ind, .b0, .b1, .b2, .b3, .b4, .b5, .b6, .b7 {
   479                          
   480                                  ; sprite pattern table
   481                                  +tmsSetAddrPattTable .ind
   482                                  +tmsPut .b0
   483                                  +tmsPut .b2
   484                                  +tmsPut .b2
   485                                  +tmsPut .b3
   486                                  +tmsPut .b4
   487                                  +tmsPut .b5
   488                                  +tmsPut .b6
   489                                  +tmsPut .b7
   490                          }
   491                          
   492                          
   493                          ; -----------------------------------------------------------------------------
   494                          ; tmsCreateSprite: Create a sprite
   495                          ; -----------------------------------------------------------------------------
   496                          !macro tmsCreateSprite .ind, .pattInd, .xPos, .yPos, .color {
   497                          
   498                                  ; sprite attr table
   499                                  +tmsSetAddrSpriteAttrTable .ind
   500                          
   501                                  +tmsPut .yPos
   502                                  +tmsPut .xPos
   503                                  +tmsPut .pattInd
   504                                  +tmsPut .color
   505                          }
   506                          
   507                          ; -----------------------------------------------------------------------------
   508                          ; tmsSpritePos: Set a sprite position
   509                          ; -----------------------------------------------------------------------------
   510                          !macro tmsSpritePos .ind, .xPos, .yPos {
   511                                  
   512                          
   513                                  ; sprite attr table
   514                                  +tmsSetAddrSpriteAttrTable .ind
   515                          
   516                                  +tmsPut .yPos
   517                                  +tmsPut .xPos        
   518                          }
   519                          
   520                          
   521                          ; -----------------------------------------------------------------------------
   522                          ; tmsSetLastSprite: Mark a sprite as the last sprite (set next ypos to )
   523                          ; -----------------------------------------------------------------------------
   524                          !macro tmsSetLastSprite .ind {
   525                                  +tmsSpritePos .ind + 1, 0, $d0
   526                          }
   527                          
   528                          
   529                          ; -----------------------------------------------------------------------------
   530                          ; tmsSpritePosXYReg: Set a sprite position from x/y registers
   531                          ; -----------------------------------------------------------------------------
   532                          !macro tmsSpritePosXYReg .ind {
   533                                  
   534                          
   535                                  ; sprite attr table
   536                                  +tmsSetAddrSpriteAttrTable .ind
   537                          
   538                                  tya
   539                                  +tmsPut 
   540                                  txa
   541                                  +tmsPut 
   542                          }
   543                          
   544                          
   545                          ; -----------------------------------------------------------------------------
   546                          ; tmsSetAddrSpriteColor: Change a sprite color
   547                          ; -----------------------------------------------------------------------------
   548                          !macro tmsSetAddrSpriteColor .ind {
   549                          
   550                                  ; sprite attr table
   551                                  +tmsSetAddressWrite TMS_VRAM_SPRITE_ATTR_ADDRESS + (.ind * 4) + 3
   552                          }
   553                          ; -----------------------------------------------------------------------------
   554                          ; tmsSpriteColor: Change a sprite color
   555                          ; -----------------------------------------------------------------------------
   556                          !macro tmsSpriteColor .ind, .color {
   557                          
   558                                  +tmsSetAddrSpriteColor .ind
   559                          
   560                                  +tmsPut .color
   561                          }
   562                          
   563                          
   564                          ; -----------------------------------------------------------------------------
   565                          ; tmsSetPosWrite: Set cursor position
   566                          ; -----------------------------------------------------------------------------
   567                          !macro tmsSetPosWrite .x, .y {
   568                                  +tmsSetAddressWrite (TMS_VRAM_NAME_ADDRESS + .y * 32 + .x)
   569                          }
   570                          
   571                          ; -----------------------------------------------------------------------------
   572                          ; tmsSetPosRead: Set read cursor position
   573                          ; -----------------------------------------------------------------------------
   574                          !macro tmsSetPosRead .x, .y {
   575                                  +tmsSetAddressRead (TMS_VRAM_NAME_ADDRESS + .y * 32 + .x)
   576                          }
   577                          
   578                          ; -----------------------------------------------------------------------------
   579                          ; tmsPrint: Print immediate text
   580                          ; -----------------------------------------------------------------------------
   581                          ; Inputs:
   582                          ;  str: String to print
   583                          ;  x: x position
   584                          ;  y: y position
   585                          ; -----------------------------------------------------------------------------
   586                          !macro tmsPrint .str, .x, .y {
   587                          	jmp .afterText
   588                          .textAddr
   589                          	!text .str,0
   590                          .afterText        
   591                          
   592                                  +tmsSetPosWrite .x, .y
   593                          
   594                                  lda #<.textAddr
   595                                  sta STR_ADDR_L
   596                                  lda #>.textAddr
   597                                  sta STR_ADDR_H
   598                                  jsr tmsPrint        
   599                          }
   600                          
   601                          
   602                          ; -----------------------------------------------------------------------------
   603                          ; tmsPrintCentre: Print centre-aligned immediate text
   604                          ; -----------------------------------------------------------------------------
   605                          ; Inputs:
   606                          ;  str: String to print
   607                          ;  y: y position
   608                          ; -----------------------------------------------------------------------------
   609                          !macro tmsPrintCentre .str, .y {
   610                          	jmp .afterText
   611                          .textAddr
   612                          	!text .str,0
   613                          .afterText        
   614                          
   615                                  +tmsSetPosWrite (32 - ((.afterText - 1) - .textAddr)) / 2, .y
   616                          
   617                                  lda #<.textAddr
   618                                  sta STR_ADDR_L
   619                                  lda #>.textAddr
   620                                  sta STR_ADDR_H
   621                                  jsr tmsPrint        
   622                          }
   623                          
   624                          
   625                          ; -----------------------------------------------------------------------------
   626                          ; tmsPrintZ: Print text
   627                          ; -----------------------------------------------------------------------------
   628                          ; Inputs:
   629                          ;  str: Address of zero-terminated string to print
   630                          ;  x: x position
   631                          ;  y: y position
   632                          ; -----------------------------------------------------------------------------
   633                          !macro tmsPrintZ .textAddr, .x, .y {
   634                                  +tmsSetPosWrite .x, .y
   635                          
   636                                  lda #<.textAddr
   637                                  sta STR_ADDR_L
   638                                  lda #>.textAddr
   639                                  sta STR_ADDR_H
   640                                  jsr tmsPrint        
   641                          }

; ******** Source: ../../kernel\hbc56kernel.inc
    19                          

; ******** Source: ../../lib\gfx\tilemap.inc
     1                          ; 6502 - Tilemap
     2                          ;
     3                          ; Copyright (c) 2021 Troy Schrapel
     4                          ;
     5                          ; This code is licensed under the MIT license
     6                          ;
     7                          ; https://github.com/visrealm/hbc-56
     8                          ;
     9                          ;
    10                          
    11                          
    12                          
    13                          !macro tilemapCreate .tilemapStructAddr, .bufferAddr, .tilesetAddr, .sizeFlags, .tileSizePx, .invertAddr, .dirtyAddr {
    14                          	!if <.tilesetAddr != 0 { !error "tilemapCreate: Tileset address must be page-aligned",.tilesetAddr }
    15                          	!if >.tilesetAddr < 3 { !error "tilemapCreate: Tileset address must be greater than $2ff",.tilesetAddr }
    16                          	!if <.bufferAddr != 0 { !error "tilemapCreate: Buffer address must be page-aligned",.bufferAddr }
    17                          	!if >.bufferAddr < 3 { !error "tilemapCreate: Buffer address must be greater than $2ff",.bufferAddr }
    18                          	!if .invertAddr != 0 and <.invertAddr != 0  {!error "tilemapCreate: Invert address must be page-aligned", .invertAddr}
    19                          	!if .invertAddr != 0 and >.invertAddr < 3  {!error "tilemapCreate: Invert address must be greater than $2ff", .invertAddr}
    20                          	!if .dirtyAddr != 0 and <.dirtyAddr != 0  {!error "tilemapCreate: Dirty address must be page-aligned", .dirtyAddr}
    21                          	!if .dirtyAddr != 0 and >.dirtyAddr < 3  {!error "tilemapCreate: Dirty address must be greater than $2ff", .dirtyAddr}
    22                          	!if .tileSizePx != 4 and .tileSizePx != 8 {!error "tilemapCreate: Tile size must be 4 or 8 pixels",.tileSizePx}
    23                          
    24                          	lda #<.tilemapStructAddr
    25                          	sta TILEMAP_ADDR
    26                          	lda #>.tilemapStructAddr
    27                          	sta TILEMAP_ADDR + 1
    28                          
    29                          	lda #>.bufferAddr
    30                          	sta .tilemapStructAddr + TILEMAP_BUFFER_ADDR
    31                          	lda #.sizeFlags
    32                          	sta .tilemapStructAddr + TILEMAP_SIZE
    33                          	lda #>.tilesetAddr
    34                          	sta .tilemapStructAddr + TILEMAP_TILES_ADDR
    35                          	lda #>.invertAddr
    36                          	sta .tilemapStructAddr + TILEMAP_INVERT_ADDR
    37                          	lda #>.dirtyAddr
    38                          	sta .tilemapStructAddr + TILEMAP_DIRTY_ADDR
    39                          	lda #.tileSizePx
    40                          	sta .tilemapStructAddr + TILEMAP_TILE_SIZE_PX
    41                          
    42                          	jsr tilemapInit
    43                          }
    44                          
    45                          !macro tilemapCreateDefault .sizeFlags, .tilesetAddr {
    46                          	+tilemapCreate TILEMAP_FIXED_ADDRESS, TILEMAP_DEFAULT_BUFFER_ADDRESS, .tilesetAddr, .sizeFlags, 8, $0, $0
    47                          }
    48                          
    49                          !macro tilemapSetActive .tilemapStructAddr {
    50                          	lda #<.tilemapStructAddr
    51                          	sta TILEMAP_ADDR
    52                          	lda #>.tilemapStructAddr
    53                          	sta TILEMAP_ADDR + 1
    54                          
    55                          	jsr tilemapSetActive

; ******** Source: ../../kernel\hbc56kernel.inc
    20                          

; ******** Source: ../../lib\lcd\lcd.inc
     1                          ; 6502 LCD Macros - HBC-56
     2                          ;
     3                          ; Copyright (c) 2021 Troy Schrapel
     4                          ;
     5                          ; This code is licensed under the MIT license
     6                          ;
     7                          ; https://github.com/visrealm/hbc-56
     8                          ;
     9                          
    10                          ; -----------------------------------------------------------------------------
    11                          ; lcdPrint: Print immediate text
    12                          ; -----------------------------------------------------------------------------
    13                          ; Inputs:
    14                          ;  str: String to print
    15                          ; -----------------------------------------------------------------------------
    16                          !macro lcdPrint str {
    17                          	jmp +
    18                          .textAddr
    19                          	!text str,0
    20                          +
    21                          	lda #<.textAddr
    22                          	sta STR_ADDR_L
    23                          	lda #>.textAddr
    24                          	sta STR_ADDR_H
    25                          	jsr lcdPrint
    26                          }
    27                          
    28                          
    29                          ; -----------------------------------------------------------------------------
    30                          ; lcdChar: Print immediate character
    31                          ; -----------------------------------------------------------------------------
    32                          ; Inputs:
    33                          ;  c: Character to print
    34                          ; -----------------------------------------------------------------------------
    35                          !macro lcdChar c {
    36                          	pha
    37                          	lda #c
    38                          	jsr lcdChar
    39                          	pla
    40                          }
    41                          
    42                          
    43                          ; -----------------------------------------------------------------------------
    44                          ; lcdConsolePrint: Print immediate text to console
    45                          ; -----------------------------------------------------------------------------
    46                          ; Inputs:
    47                          ;  str: String to print
    48                          ; -----------------------------------------------------------------------------
    49                          !macro lcdConsolePrint .str {
    50                          	jmp .afterText
    51                          .textAddr
    52                          	!text .str,0
    53                          .afterText        
    54                          
    55                                  lda #<.textAddr
    56                                  sta STR_ADDR_L
    57                                  lda #>.textAddr
    58                                  sta STR_ADDR_H
    59                                  jsr lcdConsolePrint        

; ******** Source: ../../kernel\hbc56kernel.inc
    21                          

; ******** Source: ../../lib\inp\nes.inc
     1                          ; 6502 NES Controller Macros - HBC-56
     2                          ;
     3                          ; Copyright (c) 2021 Troy Schrapel
     4                          ;
     5                          ; This code is licensed under the MIT license
     6                          ;
     7                          ; https://github.com/visrealm/hbc-56
     8                          ;
     9                          ; Dependencies:
    10                          ;  - hbc56.asm
    11                          
    12                          
    13                          !macro nes1BranchIfPressed .buttonMask, .addr {
    14                                  pha
    15                                  lda #(.buttonMask)
    16                                  jsr nes1Pressed
    17                                  pla
    18                                  bcs .addr
    19                          }
    20                          
    21                          !macro nes1BranchIfNotPressed .buttonMask, .addr {
    22                                  pha
    23                                  lda #(.buttonMask)
    24                                  jsr nes1Pressed
    25                                  pla
    26                                  bcc .addr
    27                          }
    28                          
    29                          !macro nes2BranchIfPressed .buttonMask, addr {
    30                                  pha
    31                                  lda #(.buttonMask)
    32                                  jsr nes2Pressed
    33                                  pla
    34                                  bcs addr
    35                          }
    36                          
    37                          !macro nes2BranchIfNotPressed .buttonMask, addr {
    38                                  pha
    39                                  lda #(.buttonMask)
    40                                  jsr nes2Pressed
    41                                  pla
    42                                  bcc addr
    43                          }

; ******** Source: ../../kernel\hbc56kernel.inc
    22                          

; ******** Source: ../../lib\inp\keyboard.inc
     1                          ; 6502 KB Controller Macros - HBC-56
     2                          ;
     3                          ; Copyright (c) 2021 Troy Schrapel
     4                          ;
     5                          ; This code is licensed under the MIT license
     6                          ;
     7                          ; https://github.com/visrealm/hbc-56
     8                          ;
     9                          ; Dependencies:
    10                          ;  - hbc56.asm
    11                          
    12                          
    13                          !macro kbBranchIfNotPressed .scancode, .addr {
    14                                  ldx #.scancode
    15                                  jsr kbReadAscii
    16                                  beq .addr
    17                          }
    18                          
    19                          !macro kbBranchIfPressed .scancode, .addr {
    20                                  ldx #.scancode
    21                                  jsr kbIsPressed
    22                                  bne .addr
    23                          }
    24                          
    25                          !macro kbSetEventHandlerPressed .cb {
    26                                  lda #<.cb
    27                                  sta KB_CB_PRESSED
    28                                  lda #>.cb
    29                                  sta KB_CB_PRESSED + 1
    30                          }
    31                          
    32                          !macro kbSetEventHandlerReleased .cb {
    33                                  lda #<.cb
    34                                  sta KB_CB_RELEASED
    35                                  lda #>.cb
    36                                  sta KB_CB_RELEASED + 1

; ******** Source: ../../kernel\hbc56kernel.inc
    23                          

; ******** Source: ../../lib\sfx\ay3891x.inc
     1                          ; 6502 - AY-3-819x PSG
     2                          ;
     3                          ; Copyright (c) 2021 Troy Schrapel
     4                          ;
     5                          ; This code is licensed under the MIT license
     6                          ;
     7                          ; https://github.com/visrealm/hbc-56
     8                          ;
     9                          
    10                          
    11                          
    12                          !macro ayWrite .dev, .reg, .val {
    13                                  lda #.reg
    14                                  sta IO_PORT_BASE_ADDRESS | AY_IO_PORT | AY_ADDR | .dev
    15                                  lda #.val
    16                                  sta IO_PORT_BASE_ADDRESS | AY_IO_PORT | AY_WRITE | .dev
    17                          }        
    18                          
    19                          !macro ayRead .dev, .reg {
    20                                  lda #.reg
    21                                  sta IO_PORT_BASE_ADDRESS | AY_IO_PORT | AY_ADDR | .dev
    22                                  lda IO_PORT_BASE_ADDRESS | AY_IO_PORT | AY_READ | .dev
    23                          }        
    24                          
    25                          
    26                          !macro ayWriteX .dev, .reg {
    27                                  lda #.reg
    28                                  sta IO_PORT_BASE_ADDRESS | AY_IO_PORT | AY_ADDR | .dev
    29                                  stx IO_PORT_BASE_ADDRESS | AY_IO_PORT | AY_WRITE | .dev
    30                          }
    31                          
    32                          !macro ayWriteA .dev, .reg {
    33                                  ldx #.reg
    34                                  stx IO_PORT_BASE_ADDRESS | AY_IO_PORT | AY_ADDR | .dev
    35                                  sta IO_PORT_BASE_ADDRESS | AY_IO_PORT | AY_WRITE | .dev
    36                          }
    37                          
    38                          !macro ayPlayNote .dev, .chan, .freq {
    39                                  !if .freq <= 0 {
    40                                          .val = 0
    41                                  } else {
    42                                          .val = AY_CLOCK_FREQ / (32.0 * .freq)
    43                                  }
    44                                  +ayWrite .dev, AY_CHA_TONE_L + (.chan * 2), <.val
    45                                  +ayWrite .dev, AY_CHA_TONE_H + (.chan * 2), >.val
    46                          }
    47                          
    48                          !macro ayToneWord .freq {
    49                                  !word (AY_CLOCK_FREQ / (32.0 * .freq))
    50                          }
    51                          
    52                          !macro ayToneByteL .freq {
    53                                  !byte <(AY_CLOCK_FREQ / (32.0 * .freq))
    54                          }
    55                          
    56                          !macro ayToneByteH .freq {
    57                                  !byte >(AY_CLOCK_FREQ / (32.0 * .freq))
    58                          }
    59                          
    60                          
    61                          !macro ayToneEnable .dev, .chan {
    62                                  +ayRead .dev, AY_ENABLES
    63                                  and #!($01 << .chan)
    64                                  +ayWriteA .dev, AY_ENABLES
    65                          }
    66                          
    67                          !macro ayToneDisable .dev, .chan {
    68                                  +ayRead .dev, AY_ENABLES
    69                                  ora #($01 << .chan)
    70                                  +ayWriteA .dev, AY_ENABLES
    71                          }
    72                          
    73                          !macro ayNoiseEnable .dev, .chan {
    74                                  +ayRead .dev, AY_ENABLES
    75                                  eor #($08 << .chan)
    76                                  +ayWriteA .dev, AY_ENABLES
    77                          }
    78                          
    79                          !macro ayNoiseDisable .dev, .chan {
    80                                  +ayRead .dev, AY_ENABLES
    81                                  ora #($08 << .chan)
    82                                  +ayWriteA .dev, AY_ENABLES
    83                          }
    84                          
    85                          !macro aySetVolume .dev, .chan, .vol {
    86                                  +ayWrite .dev, (AY_CHA_AMPL + .chan), (.vol >> 4)
    87                          }
    88                          
    89                          !macro aySetVolumeEnvelope .dev, .chan {
    90                                  +ayWrite .dev, (AY_CHA_AMPL + .chan), $10
    91                          }
    92                          
    93                          !macro aySetEnvelopePeriod .dev, .period {
    94                                  +ayWrite .dev, AY_ENV_PERIOD_L, <.period
    95                                  +ayWrite .dev, AY_ENV_PERIOD_H, >.period
    96                          }
    97                          
    98                          !macro aySetEnvShape .dev, .shape {
    99                                  +ayWrite .dev, AY_ENV_SHAPE, .shape
   100                          }
   101                          
   102                          !macro aySetNoise .dev, .freq {
   103                                  +ayWrite .dev, AY_ENV_SHAPE, .freq >> 3
   104                          }
   105                          
   106                          !macro ayStop .dev, .chan {
   107                                  +ayPlayNote .dev, .chan, 0
   108                          }

; ******** Source: ../../kernel\hbc56kernel.inc
    24                          

; ******** Source: ../../lib\ser\uart.inc
     1                          ; 6502 - MC68B50 UART Macros
     2                          ;
     3                          ; Copyright (c) 2021 Troy Schrapel
     4                          ;
     5                          ; This code is licensed under the MIT license
     6                          ;
     7                          ; https://github.com/visrealm/hbc-56
     8                          ;
     9                          
    10                          ; -----------------------------------------------------------------------------
    11                          ; uartOutStringAddr: Output a string to the uart
    12                          ; -----------------------------------------------------------------------------
    13                          ; Inputs:
    14                          ;  .addr: Address of null-terminated string to print
    15                          ; -----------------------------------------------------------------------------
    16                          !macro uartOutStringAddr .addr {
    17                                  lda #<.addr
    18                                  sta STR_ADDR_L
    19                                  lda #>.addr
    20                                  sta STR_ADDR_H
    21                                  jsr uartOutString        
    22                          }
    23                          
    24                          
    25                          ; -----------------------------------------------------------------------------
    26                          ; uartOutString: Output an immediate string to the uart
    27                          ; -----------------------------------------------------------------------------
    28                          ; Inputs:
    29                          ;  .str: String to output
    30                          ; -----------------------------------------------------------------------------
    31                          !macro uartOutString .str {
    32                          	jmp @afterText
    33                          @textAddr
    34                          	!text .str,0
    35                          @afterText        
    36                                  +uartOutStringAddr @textAddr
    37                          }
    38                          

; ******** Source: ../../kernel\hbc56kernel.inc
    25                          

; ******** Source: ../../kernel\kernel.inc
     1                          ; 6502 - HBC-56 Kernel Macros
     2                          ;
     3                          ; Copyright (c) 2021 Troy Schrapel
     4                          ;
     5                          ; This code is licensed under the MIT license
     6                          ;
     7                          ; https://github.com/visrealm/hbc-56
     8                          ;
     9                          ;
    10                          
    11                          !macro setIntHandler .address {
    12                                  lda #<.address
    13                                  sta HBC56_INT_VECTOR + 1
    14                                  lda #>.address
    15                                  sta HBC56_INT_VECTOR + 2
    16                                  lda #JMP_OPCODE
    17                                  sta HBC56_INT_VECTOR
    18                          }
    19                          
    20                          !macro setNmiHandler .address {
    21                                  lda #<.address
    22                                  sta HBC56_NMI_VECTOR + 1
    23                                  lda #>.address
    24                                  sta HBC56_NMI_VECTOR + 2
    25                                  lda #JMP_OPCODE
    26                                  sta HBC56_NMI_VECTOR
    27                          }
    28                          
    29                          !macro setHbcMetaNES {
    30                                  lda #HBC56_CONSOLE_FLAG_NES
    31                                  ora HBC56_CONSOLE_FLAGS
    32                                  sta HBC56_CONSOLE_FLAGS
    33                          }
    34                          
    35                          !macro setHbcMetaNoWait {
    36                                  lda #HBC56_CONSOLE_FLAG_NOWAIT
    37                                  ora HBC56_CONSOLE_FLAGS
    38                                  sta HBC56_CONSOLE_FLAGS
    39                          }
    40                          
    41                          
    42                          !macro hbc56SetVsyncCallback .vsync {
    43                                  lda #<.vsync
    44                                  sta HBC56_VSYNC_CALLBACK
    45                                  lda #>.vsync
    46                                  sta HBC56_VSYNC_CALLBACK + 1
    47                          }
    48                          
    49                          !macro setHbcMetaTitle .titleStr {
    50                                  jmp .hbcMetaTitleOut
    51                          .titleStrLabel:
    52                                  !text .titleStr
    53                          .titleStrLabelLen = * - .titleStrLabel
    54                                  !byte 0 ; nul terminator for game name
    55                          
    56                          !if .titleStrLabelLen > HBC56_META_TITLE_MAX_LEN {
    57                                  !error "setHbcMetaTitle: Title metadata limited to ",HBC56_META_TITLE_MAX_LEN,"bytes"
    58                          }
    59                          .hbcMetaTitleOut:
    60                                  +memcpy HBC56_META_TITLE + (HBC56_META_TITLE_MAX_LEN-.titleStrLabelLen)/2, .titleStrLabel, .titleStrLabelLen
    61                                  lda #.titleStrLabelLen
    62                                  sta HBC56_META_TITLE_LEN
    63                          }
    64                          
    65                          !macro consoleEnableCursor {
    66                                  lda HBC56_CONSOLE_FLAGS
    67                                  ora #HBC56_CONSOLE_FLAG_CURSOR
    68                                  sta HBC56_CONSOLE_FLAGS
    69                          }
    70                          
    71                          !macro consoleDisableCursor {
    72                                  lda HBC56_CONSOLE_FLAGS
    73                                  and #!HBC56_CONSOLE_FLAG_CURSOR & $ff
    74                                  sta HBC56_CONSOLE_FLAGS
    75                          }
    76                          
    77                          !macro consoleLCDMode {
    78                                  lda HBC56_CONSOLE_FLAGS
    79                                  ora #HBC56_CONSOLE_FLAG_LCD
    80                                  sta HBC56_CONSOLE_FLAGS
    81                          }
    82                          
    83                          !macro setBreakpoint {
    84                                 !byte $db 
    85                          }
    86                          
    87                          !macro hbc56CustomDelay .delay {
    88                                  ldy #.delay
    89                                  jsr hbc56CustomDelay
    90                          }
    91                          
    92                          !macro hbc56DelayUs .us {
    93                          !if .us = 1 {
    94                                  nop
    95                                  nop
    96                          }
    97                          }
    98                          !macro hbc56DelayMs .ms {
    99                                  lda #<.ms
   100                                  sta DELAY_L
   101                                  lda #>.ms
   102                                  sta DELAY_H
   103                          
   104                                  jsr hbc56CustomDelayMs

; ******** Source: ../../kernel\hbc56kernel.inc
    26                          
    27                          
    28                          !ifndef HBC_56_EXCLUDE_KERNEL_ROM {
    29                          
    30                                  ; if the program requires the kernal image
    31                                  ; then... include it
    32                          
    33                                  *=HBC56_META_VECTOR
    34                                  !ifdef hbc56Meta {
    35  dffc 4c0380                             jmp hbc56Meta
    36                                  } else {
    37                                          rts
    38                                  }
    39                          
    40                                  *=HBC56_KERNEL_START
    41  e000 c9619005c97b9002...        !bin "kernel.o"
    42                          
    43                                  *=DEFAULT_HBC56_RST_VECTOR
    44  8000 4c2a80                     jmp hbc56Main
    45                          
    46                          } else {
    47                          
    48                                  ; otherwise, place the program in RAM
    49                          
    50                                  *=$0400

; ******** Source: tms9918txttest.asm
    10                          
    11                          
    12                          XPOS = $44
    13                          YPOS = $45
    14                          
    15                          
    16                          hbc56Meta:
    17  8003 4c1780544d533939...        +setHbcMetaTitle "TMS9918 TXT MODE"
    18  8029 60                         rts
    19                          
    20                          hbc56Main:
    21  802a 78                         sei
    22                          
    23  802b 0878a9008d117f20...	+tmsUpdateFont TMS_TEXT_MODE_FONT
    24                          
    25  805b 203ce6                     jsr tmsModeText
    26  805e a917                       +tmsColorFgBg TMS_BLACK, TMS_CYAN
    27                          
    28  8060 0878a9008d117f20...        +tmsSetAddrNameTable
    29  8073 a9de8524a9808525...        +tmsSendData TEXT, 40*24
    30                          
    31  8097 a94020dde5                 +tmsEnableOutput
    32  809c a92020e7e5                 +tmsDisableInterrupts
    33                          
    34  80a1 a910               	lda #16
    35  80a3 8545               	sta YPOS
    36                          
    37  80a5 58                         cli
    38                          
    39                          loop:
    40  80a6 a545               	lda YPOS
    41  80a8 18                 	clc
    42  80a9 6910               	adc #16
    43  80ab 6900               	adc #0
    44  80ad 8545               	sta YPOS
    45  80af a207                       ldx #7
    46  80b1 20b4e5                     jsr tmsSetRegister
    47                          
    48  80b4 20ba80                     jsr medDelay
    49                          
    50  80b7 4ca680                     jmp loop
    51                          
    52                          medDelay:
    53  80ba 20c680             	jsr delay
    54  80bd 20c680             	jsr delay
    55  80c0 20c680             	jsr delay
    56  80c3 20c680             	jsr delay
    57                          
    58                          
    59                          delay:
    60  80c6 a2ff               	ldx #255
    61  80c8 a0ff               	ldy #255
    62                          -
    63  80ca ca                 	dex
    64  80cb d0fd               	bne -
    65  80cd a2ff               	ldx #255
    66  80cf 88                 	dey
    67  80d0 d0f8               	bne -
    68  80d2 60                 	rts
    69                          
    70                          customDelay:
    71  80d3 a2ff               	ldx #255
    72                          -
    73  80d5 ca                 	dex
    74  80d6 d0fd               	bne -
    75  80d8 a2ff               	ldx #255
    76  80da 88                 	dey
    77  80db d0f8               	bne -
    78  80dd 60                 	rts
    79                          
    80                          TEXT:
    81  80de 2d2d2d2d2d205452...!text "----- TROY'S HBC-56 TEXT MODE TEST -----"
    82  8106 2020202020202020...!text "                                        "
    83  812e 2020202020202020...!text "                                        "
    84  8156 2020202020202020...!text "                                        "
    85  817e 2020202020202020...!text "               ****                     "
    86  81a6 2020202020202020...!text "               ****                     "
    87  81ce 2020202020202020...!text "               ******.**                "
    88  81f6 2020202020202020...!text "          *******_///_***               "
    89  821e 2020202020202020...!text "          **** /_//_/ ***               "
    90  8246 2020202020202020...!text "           * ** (__/ ***                "
    91  826e 2020202020202020...!text "              *********                 "
    92  8296 2020202020202020...!text "               ****                     "
    93  82be 2020202020202020...!text "               ***                      "        
    94  82e6 2020202020202020...!text "                                        "
    95  830e 2020202020202020...!text "                                        "
    96  8336 2020202020202020...!text "                                        "
    97  835e 2020202020202054...!text "       TEXAS INSTRUMENTS TMS9918A       "
    98  8386 2020202020202020...!text "                                        "
    99  83ae 2020202020202020...!text "         vrEmuTms9918 Emulator          "
   100  83d6 2020202020202020...!text "                                        "
   101  83fe 2020202020202020...!text "                                        "
   102  8426 2020202020202020...!text "                                        "
   103  844e 2020202020202020...!text "                                        "
   104  8476 68747470733a2f2f...!text "https://github.com/visrealm/vrEmuTms9918"
   105                          
   106                          TMS_TEXT_MODE_FONT:

; ******** Source: ../../lib\gfx\fonts\tms9918font2subset.asm
     1                          ; 6502 - TMS9918 Font 2 Subset 6x8 Text mode
     2                          ;
     3                          ; Copyright (c) 2021 Troy Schrapel
     4                          ;
     5                          ; This code is licensed under the MIT license
     6                          ;
     7                          ; https://github.com/visrealm/hbc-56
     8                          ;
     9                          
    10                          
    11                          
    12                          
    13                          
    14                          
    15                          
    16                          
    17                          
    18                          
    19                          
    20                          
    21                          
    22                          
    23                          
    24                          
    25                          
    26                          
    27                          
    28                          
    29                          
    30                          
    31                          
    32  849e 0000000000000000   !byte $00,$00,$00,$00,$00,$00,$00,$00 ; <SPACE>
    33  84a6 1038381010001000   !byte $10,$38,$38,$10,$10,$00,$10,$00 ; !
    34  84ae 6c6c480000000000   !byte $6C,$6C,$48,$00,$00,$00,$00,$00 ; "
    35  84b6 00287c28287c2800   !byte $00,$28,$7C,$28,$28,$7C,$28,$00 ; #
    36  84be 2038403008701000   !byte $20,$38,$40,$30,$08,$70,$10,$00 ; $
    37  84c6 64640810204c4c00   !byte $64,$64,$08,$10,$20,$4C,$4C,$00 ; %
    38  84ce 2050502054483400   !byte $20,$50,$50,$20,$54,$48,$34,$00 ; &
    39  84d6 3030200000000000   !byte $30,$30,$20,$00,$00,$00,$00,$00 ; '
    40  84de 1020202020201000   !byte $10,$20,$20,$20,$20,$20,$10,$00 ; (
    41  84e6 2010101010102000   !byte $20,$10,$10,$10,$10,$10,$20,$00 ; )
    42  84ee 0028387c38280000   !byte $00,$28,$38,$7C,$38,$28,$00,$00 ; *
    43  84f6 0010107c10100000   !byte $00,$10,$10,$7C,$10,$10,$00,$00 ; +
    44  84fe 0000000000303020   !byte $00,$00,$00,$00,$00,$30,$30,$20 ; ,
    45  8506 0000007c00000000   !byte $00,$00,$00,$7C,$00,$00,$00,$00 ; -
    46  850e 0000000000303000   !byte $00,$00,$00,$00,$00,$30,$30,$00 ; .
    47  8516 0004081020400000   !byte $00,$04,$08,$10,$20,$40,$00,$00 ; /
    48  851e 38444c5464443800   !byte $38,$44,$4C,$54,$64,$44,$38,$00 ; 0
    49  8526 1030101010103800   !byte $10,$30,$10,$10,$10,$10,$38,$00 ; 1
    50  852e 3844041820407c00   !byte $38,$44,$04,$18,$20,$40,$7C,$00 ; 2
    51  8536 3844043804443800   !byte $38,$44,$04,$38,$04,$44,$38,$00 ; 3
    52  853e 081828487c080800   !byte $08,$18,$28,$48,$7C,$08,$08,$00 ; 4
    53  8546 7c40407804443800   !byte $7C,$40,$40,$78,$04,$44,$38,$00 ; 5
    54  854e 1820407844443800   !byte $18,$20,$40,$78,$44,$44,$38,$00 ; 6
    55  8556 7c04081020202000   !byte $7C,$04,$08,$10,$20,$20,$20,$00 ; 7
    56  855e 3844443844443800   !byte $38,$44,$44,$38,$44,$44,$38,$00 ; 8
    57  8566 3844443c04083000   !byte $38,$44,$44,$3C,$04,$08,$30,$00 ; 9
    58  856e 0000303000303000   !byte $00,$00,$30,$30,$00,$30,$30,$00 ; :
    59  8576 0000303000303020   !byte $00,$00,$30,$30,$00,$30,$30,$20 ; ;
    60  857e 0810204020100800   !byte $08,$10,$20,$40,$20,$10,$08,$00 ; <
    61  8586 00007c00007c0000   !byte $00,$00,$7C,$00,$00,$7C,$00,$00 ; =
    62  858e 2010080408102000   !byte $20,$10,$08,$04,$08,$10,$20,$00 ; >
    63  8596 3844041810001000   !byte $38,$44,$04,$18,$10,$00,$10,$00 ; ?
    64  859e 38445c545c403800   !byte $38,$44,$5C,$54,$5C,$40,$38,$00 ; @
    65  85a6 384444447c444400   !byte $38,$44,$44,$44,$7C,$44,$44,$00 ; A
    66  85ae 7844447844447800   !byte $78,$44,$44,$78,$44,$44,$78,$00 ; B
    67  85b6 3844404040443800   !byte $38,$44,$40,$40,$40,$44,$38,$00 ; C
    68  85be 7844444444447800   !byte $78,$44,$44,$44,$44,$44,$78,$00 ; D
    69  85c6 7c40407840407c00   !byte $7C,$40,$40,$78,$40,$40,$7C,$00 ; E
    70  85ce 7c40407840404000   !byte $7C,$40,$40,$78,$40,$40,$40,$00 ; F
    71  85d6 3844405c44443c00   !byte $38,$44,$40,$5C,$44,$44,$3C,$00 ; G
    72  85de 4444447c44444400   !byte $44,$44,$44,$7C,$44,$44,$44,$00 ; H
    73  85e6 3810101010103800   !byte $38,$10,$10,$10,$10,$10,$38,$00 ; I
    74  85ee 0404040444443800   !byte $04,$04,$04,$04,$44,$44,$38,$00 ; J
    75  85f6 4448506050484400   !byte $44,$48,$50,$60,$50,$48,$44,$00 ; K
    76  85fe 4040404040407c00   !byte $40,$40,$40,$40,$40,$40,$7C,$00 ; L
    77  8606 446c544444444400   !byte $44,$6C,$54,$44,$44,$44,$44,$00 ; M
    78  860e 4464544c44444400   !byte $44,$64,$54,$4C,$44,$44,$44,$00 ; N
    79  8616 3844444444443800   !byte $38,$44,$44,$44,$44,$44,$38,$00 ; O
    80  861e 7844447840404000   !byte $78,$44,$44,$78,$40,$40,$40,$00 ; P
    81  8626 3844444454483400   !byte $38,$44,$44,$44,$54,$48,$34,$00 ; Q
    82  862e 7844447848444400   !byte $78,$44,$44,$78,$48,$44,$44,$00 ; R
    83  8636 3844403804443800   !byte $38,$44,$40,$38,$04,$44,$38,$00 ; S
    84  863e 7c10101010101000   !byte $7C,$10,$10,$10,$10,$10,$10,$00 ; T
    85  8646 4444444444443800   !byte $44,$44,$44,$44,$44,$44,$38,$00 ; U
    86  864e 4444444444281000   !byte $44,$44,$44,$44,$44,$28,$10,$00 ; V
    87  8656 4444545454542800   !byte $44,$44,$54,$54,$54,$54,$28,$00 ; W
    88  865e 4444281028444400   !byte $44,$44,$28,$10,$28,$44,$44,$00 ; X
    89  8666 4444442810101000   !byte $44,$44,$44,$28,$10,$10,$10,$00 ; Y
    90  866e 7808102040407800   !byte $78,$08,$10,$20,$40,$40,$78,$00 ; Z
    91  8676 3820202020203800   !byte $38,$20,$20,$20,$20,$20,$38,$00 ; [
    92  867e 0040201008040000   !byte $00,$40,$20,$10,$08,$04,$00,$00 ; \
    93  8686 3808080808083800   !byte $38,$08,$08,$08,$08,$08,$38,$00 ; ]
    94  868e 1028440000000000   !byte $10,$28,$44,$00,$00,$00,$00,$00 ; ^
    95  8696 00000000000000fc   !byte $00,$00,$00,$00,$00,$00,$00,$FC ; _
    96  869e 3030100000000000   !byte $30,$30,$10,$00,$00,$00,$00,$00 ; `
    97  86a6 000038043c443c00   !byte $00,$00,$38,$04,$3C,$44,$3C,$00 ; a
    98  86ae 4040784444447800   !byte $40,$40,$78,$44,$44,$44,$78,$00 ; b
    99  86b6 0000384440443800   !byte $00,$00,$38,$44,$40,$44,$38,$00 ; c
   100  86be 04043c4444443c00   !byte $04,$04,$3C,$44,$44,$44,$3C,$00 ; d
   101  86c6 0000384478403800   !byte $00,$00,$38,$44,$78,$40,$38,$00 ; e
   102  86ce 1820207820202000   !byte $18,$20,$20,$78,$20,$20,$20,$00 ; f
   103  86d6 00003c44443c0438   !byte $00,$00,$3C,$44,$44,$3C,$04,$38 ; g
   104  86de 4040704848484800   !byte $40,$40,$70,$48,$48,$48,$48,$00 ; h
   105  86e6 1000101010101800   !byte $10,$00,$10,$10,$10,$10,$18,$00 ; i
   106  86ee 0800180808084830   !byte $08,$00,$18,$08,$08,$08,$48,$30 ; j
   107  86f6 4040485060504800   !byte $40,$40,$48,$50,$60,$50,$48,$00 ; k
   108  86fe 1010101010101800   !byte $10,$10,$10,$10,$10,$10,$18,$00 ; l
   109  8706 0000685454444400   !byte $00,$00,$68,$54,$54,$44,$44,$00 ; m
   110  870e 0000704848484800   !byte $00,$00,$70,$48,$48,$48,$48,$00 ; n
   111  8716 0000384444443800   !byte $00,$00,$38,$44,$44,$44,$38,$00 ; o
   112  871e 0000784444447840   !byte $00,$00,$78,$44,$44,$44,$78,$40 ; p
   113  8726 00003c4444443c04   !byte $00,$00,$3C,$44,$44,$44,$3C,$04 ; q
   114  872e 0000582420207000   !byte $00,$00,$58,$24,$20,$20,$70,$00 ; r
   115  8736 0000384038043800   !byte $00,$00,$38,$40,$38,$04,$38,$00 ; s
   116  873e 0020782020281000   !byte $00,$20,$78,$20,$20,$28,$10,$00 ; t
   117  8746 0000484848582800   !byte $00,$00,$48,$48,$48,$58,$28,$00 ; u
   118  874e 0000444444281000   !byte $00,$00,$44,$44,$44,$28,$10,$00 ; v
   119  8756 00004444547c2800   !byte $00,$00,$44,$44,$54,$7C,$28,$00 ; w
   120  875e 0000484830484800   !byte $00,$00,$48,$48,$30,$48,$48,$00 ; x
   121  8766 0000484848381060   !byte $00,$00,$48,$48,$48,$38,$10,$60 ; y
   122  876e 0000780830407800   !byte $00,$00,$78,$08,$30,$40,$78,$00 ; z
   123  8776 1820206020201800   !byte $18,$20,$20,$60,$20,$20,$18,$00 ; {
   124  877e 1010100010101000   !byte $10,$10,$10,$00,$10,$10,$10,$00 ; |
   125  8786 3008080c08083000   !byte $30,$08,$08,$0C,$08,$08,$30,$00 ; }
   126  878e 2850000000000000   !byte $28,$50,$00,$00,$00,$00,$00,$00 ; ~

; ******** Source: tms9918txttest.asm
   107  8796 ffffffffffffffff   

; ******** Source: kernel.asm
     1                          ; 6502 - HBC-56 Kernel
     2                          ;
     3                          ; Copyright (c) 2021 Troy Schrapel
     4                          ;
     5                          ; This code is licensed under the MIT license
     6                          ;
     7                          ; https://github.com/visrealm/hbc-56
     8                          ;
     9                          ;
    10                          
    11                          HBC56_INT_VECTOR = $7e00
    12                          HBC56_NMI_VECTOR = $7e04
    13                          HBC56_RST_VECTOR = kernelMain
    14                          
    15                          HBC56_KERNEL_START = $e000
    16                          HBC56_META_VECTOR  = HBC56_KERNEL_START-4
    17                          
    18                          RTI_OPCODE = $40
    19                          JMP_OPCODE = $4c
    20                          
    21                          ; -------------------------
    22                          ; I/O devices
    23                          ; -------------------------
    24                          LCD_IO_PORT             = $02
    25                          TMS9918_IO_PORT         = $10
    26                          UART_IO_PORT            = $20
    27                          AY_IO_PORT              = $40
    28                          KB_IO_PORT              = $80
    29                          NES_IO_PORT             = $82
    30                          INT_IO_PORT             = $df
    31                          VIA_IO_PORT             = $f0
    32                          
    33                          ; -------------------------
    34                          ; Kernel Zero Page
    35                          ; -------------------------
    36                          HBC56_KERNEL_ZP_START   = $18
    37                          
    38                          TILEMAP_ZP_START        = HBC56_KERNEL_ZP_START
    39                          TILEMAP_ZP_END          = TILEMAP_ZP_START + 6
    40                          
    41                          BITMAP_ZP_START         = TILEMAP_ZP_END
    42                          BITMAP_ZP_END           = BITMAP_ZP_START + 6
    43                          
    44                          !ifdef HBC56_DISABLE_TMS9918 { .TMS_ZP_SIZE = 0 } else { .TMS_ZP_SIZE = 4 }
    45                          TMS9918_ZP_START        = BITMAP_ZP_END
    46                          TMS9918_ZP_END          = TMS9918_ZP_START + .TMS_ZP_SIZE
    47                          
    48                          !ifdef HBC56_DISABLE_LCD { .LCD_ZP_SIZE = 0 } else { .LCD_ZP_SIZE = 2 }
    49                          LCD_ZP_START            = TMS9918_ZP_END
    50                          LCD_ZP_END              = LCD_ZP_START + .LCD_ZP_SIZE
    51                          
    52                          !ifdef HBC56_DISABLE_UART { .UART_ZP_SIZE = 0 } else { .UART_ZP_SIZE = 4 }
    53                          UART_ZP_START            = LCD_ZP_END
    54                          UART_ZP_END              = UART_ZP_START + .UART_ZP_SIZE
    55                          
    56                          MEMORY_ZP_START         = UART_ZP_END
    57                          MEMORY_ZP_END           = MEMORY_ZP_START + 6
    58                          
    59                          STR_ADDR                = MEMORY_ZP_END
    60                          STR_ADDR_L              = MEMORY_ZP_END
    61                          STR_ADDR_H              = MEMORY_ZP_END + 1
    62                          
    63                          DELAY_L                 = STR_ADDR_H + 1
    64                          DELAY_H                 = DELAY_L + 1
    65                          
    66                          HBC56_KERNEL_ZP_END     = DELAY_H + 1
    67                          HBC56_USER_ZP_START     = HBC56_KERNEL_ZP_END
    68                          
    69                          ;!warn "Total ZP used: ",STR_ADDR_H-HBC56_KERNEL_ZP_START
    70                          
    71                          
    72                          !ifndef HAVE_TMS9918 { HBC56_DISABLE_SFXMAN=1 }
    73                          
    74                          ; -------------------------
    75                          ; Kernel RAM
    76                          ; -------------------------
    77                          HBC56_KERNEL_RAM_START  = $7a00
    78                          
    79                          TILEMAP_RAM_START       = HBC56_KERNEL_RAM_START
    80                          TILEMAP_RAM_END         = TILEMAP_RAM_START + $116
    81                          
    82                          BITMAP_RAM_START        = TILEMAP_RAM_END
    83                          BITMAP_RAM_END          = BITMAP_RAM_START + 16
    84                          
    85                          !ifdef HBC56_DISABLE_TMS9918 { .TMS_RAM_SIZE = 0 } else { .TMS_RAM_SIZE = 50 }
    86                          TMS9918_RAM_START       = BITMAP_RAM_END
    87                          TMS9918_RAM_END         = TMS9918_RAM_START + .TMS_RAM_SIZE
    88                          
    89                          !ifdef HBC56_DISABLE_LCD { .LCD_RAM_SIZE = 0 } else { .LCD_RAM_SIZE = 42 }
    90                          LCD_RAM_START           = TMS9918_RAM_END
    91                          LCD_RAM_END             = LCD_RAM_START + .LCD_RAM_SIZE
    92                          
    93                          !ifdef HBC56_DISABLE_UART { .UART_RAM_SIZE = 0 } else { .UART_RAM_SIZE = 256 }
    94                          UART_RAM_START            = LCD_RAM_END
    95                          UART_RAM_END              = UART_RAM_START + .UART_RAM_SIZE
    96                          
    97                          !ifdef HBC56_DISABLE_SFXMAN { .SFXMAN_RAM_SIZE = 0 } else { .SFXMAN_RAM_SIZE = 18 }
    98                          SFXMAN_RAM_START        = UART_RAM_END
    99                          SFXMAN_RAM_END          = SFXMAN_RAM_START + .SFXMAN_RAM_SIZE
   100                          
   101                          BCD_RAM_START           = SFXMAN_RAM_END
   102                          BCD_RAM_END             = BCD_RAM_START + 3
   103                          
   104                          KB_RAM_START            = BCD_RAM_END
   105                          KB_RAM_END              = KB_RAM_START + 64
   106                          
   107                          NES_RAM_START            = KB_RAM_END
   108                          NES_RAM_END              = NES_RAM_START + 3
   109                          
   110                          LAST_MODULE_RAM_END     = NES_RAM_END
   111                          
   112                          HBC56_TICKS             = LAST_MODULE_RAM_END
   113                          HBC56_SECONDS_L         = LAST_MODULE_RAM_END + 1
   114                          HBC56_SECONDS_H         = LAST_MODULE_RAM_END + 2
   115                          HBC56_TMP               = LAST_MODULE_RAM_END + 3
   116                          
   117                          HBC56_CONSOLE_FLAGS     = LAST_MODULE_RAM_END + 4
   118                          HBC56_CONSOLE_FLAG_CURSOR = $80
   119                          HBC56_CONSOLE_FLAG_NES    = $40
   120                          HBC56_CONSOLE_FLAG_LCD    = $20
   121                          HBC56_CONSOLE_FLAG_NOWAIT = $10
   122                          
   123                          HBC56_TMP_X             = LAST_MODULE_RAM_END + 5
   124                          HBC56_TMP_Y             = LAST_MODULE_RAM_END + 6
   125                          
   126                          HBC56_META_TITLE_MAX_LEN = 16
   127                          HBC56_META_TITLE        = LAST_MODULE_RAM_END + 7
   128                          HBC56_META_TITLE_END    = HBC56_META_TITLE + HBC56_META_TITLE_MAX_LEN + 1
   129                          HBC56_META_TITLE_LEN    = HBC56_META_TITLE_END + 1
   130                          
   131                          ; callback function on vsync
   132                          HBC56_VSYNC_CALLBACK = HBC56_META_TITLE_LEN + 1
   133                          
   134                          
   135                          HBC56_KERNEL_RAM_END    = HBC56_VSYNC_CALLBACK + 2
   136                          HBC56_KERNEL_RAM_SIZE   = HBC56_KERNEL_RAM_END - HBC56_KERNEL_RAM_START
   137                          ;!warn "Total RAM used: ",HBC56_KERNEL_RAM_SIZE
   138                          

; ******** Source: ../lib\hbc56.asm
     1                          ; 6502 - HBC-56
     2                          ;
     3                          ; Copyright (c) 2021 Troy Schrapel
     4                          ;
     5                          ; This code is licensed under the MIT license
     6                          ;
     7                          ; https://github.com/visrealm/hbc-56
     8                          ;
     9                          ;
    10                          
    11                          !cpu w65c02
    12                          !initmem $FF
    13                          cputype = $65c02
    14                          

; ******** Source: ../lib\hbc56.inc
     1                          ; 6502 - HBC-56
     2                          ;
     3                          ; Copyright (c) 2021 Troy Schrapel
     4                          ;
     5                          ; This code is licensed under the MIT license
     6                          ;
     7                          ; https://github.com/visrealm/hbc-56
     8                          ;
     9                          ;
    10                          
    11                          ; Base address of the 256 IO port memory range
    12                          IO_PORT_BASE_ADDRESS    = $7f00
    13                          
    14                          
    15                          ; -------------------------
    16                          ; ASCII constants
    17                          ; -------------------------
    18                          ASCII_RETURN    = $0A
    19                          ASCII_CR        = $0D
    20                          ASCII_BACKSPACE = $08
    21                          ASCII_BELL      = $07

; ******** Source: ../lib\hbc56.asm
    16                          
    17                          DEFAULT_HBC56_NMI_VECTOR = $FFE0
    18                          DEFAULT_HBC56_RST_VECTOR = $8000
    19                          DEFAULT_HBC56_INT_VECTOR = $FFE0
    20                          
    21                          !macro hbc56Title .title {
    22                          HBC56_TITLE_TEXT:
    23                                  !text .title
    24                          HBC56_TITLE_TEXT_LEN = * - HBC56_TITLE_TEXT
    25                                  !byte 0 ; nul terminator for game name
    26                          }
    27                          
    28                          *=DEFAULT_HBC56_INT_VECTOR
    29  ffe0 40                         rti
    30                          
    31                          hbc56Delay:
    32  ffe1 a000                       ldy #0
    33                          hbc56CustomDelay:
    34  ffe3 a200                       ldx #0
    35                          -
    36  ffe5 ca                         dex
    37  ffe6 d0fd                       bne -
    38  ffe8 a200                       ldx #0
    39  ffea 88                         dey
    40  ffeb d0f8                       bne -
    41  ffed 60                         rts
    42                          
    43                          *=$FFFA
    44  fffa 047e               !ifdef HBC56_NMI_VECTOR { !word HBC56_NMI_VECTOR } else { !word DEFAULT_HBC56_NMI_VECTOR }
    45  fffc b7f0               !ifdef HBC56_RST_VECTOR { !word HBC56_RST_VECTOR } else { !word DEFAULT_HBC56_RST_VECTOR }
    46  fffe 007e               !ifdef HBC56_INT_VECTOR { !word HBC56_INT_VECTOR } else { !word DEFAULT_HBC56_INT_VECTOR }
    47                          
    48                          
    49                          *=DEFAULT_HBC56_RST_VECTOR

; ******** Source: kernel.asm
   140                          *=HBC56_KERNEL_START
   141                          

; ******** Source: ../lib\ut\ascii.asm
     1                          ; 6502 - ASCII subroutines
     2                          ;
     3                          ; Copyright (c) 2022 Troy Schrapel
     4                          ;
     5                          ; This code is licensed under the MIT license
     6                          ;
     7                          ; https://github.com/visrealm/hbc-56
     8                          ;
     9                          ;
    10                          
    11                          ; -----------------------------------------------------------------------------
    12                          ; isLower: Is the ASCII character a lower-case letter (a-z)
    13                          ; -----------------------------------------------------------------------------
    14                          ; Inputs:
    15                          ;   A: ASCII character
    16                          ; Outputs:
    17                          ;   Carry set if lower case, carry clear if not lower case
    18                          ; -----------------------------------------------------------------------------
    19                          isLower:
    20  e000 c961                       cmp #'a'
    21  e002 9005                       bcc @notLower   ; less than 'a'?
    22  e004 c97b                       cmp #'z' + 1
    23  e006 9002                       bcc @isLower    ; less than or equal 'z'?
    24  e008 18                         clc
    25                          @notLower:
    26  e009 60                         rts
    27                          
    28                          @isLower
    29  e00a 38                         sec
    30  e00b 60                         rts
    31                          
    32                          
    33                          ; -----------------------------------------------------------------------------
    34                          ; isUpper: Is the ASCII character a upper-case letter (A-Z)
    35                          ; -----------------------------------------------------------------------------
    36                          ; Inputs:
    37                          ;   A: ASCII character
    38                          ; Outputs:
    39                          ;   Carry set if upper case, carry clear if not upper case
    40                          ; -----------------------------------------------------------------------------
    41                          isUpper:
    42  e00c c941                       cmp #'A'
    43  e00e 9005                       bcc @notUpper   ; less than 'A'?
    44  e010 c95b                       cmp #'Z' + 1
    45  e012 9002                       bcc @isUpper    ; less than or equal 'Z'?
    46  e014 18                         clc
    47                          @notUpper:
    48  e015 60                         rts
    49                          
    50                          @isUpper
    51  e016 38                         sec
    52  e017 60                         rts
    53                          
    54                          ; -----------------------------------------------------------------------------
    55                          ; isAlpha: Is the ASCII character alphanumeric (A-Z, a-z)
    56                          ; -----------------------------------------------------------------------------
    57                          ; Inputs:
    58                          ;   A: ASCII character
    59                          ; Outputs:
    60                          ;   Carry set if alpha, carry clear if not alpha
    61                          ; -----------------------------------------------------------------------------
    62                          isAlpha:
    63  e018 2000e0                     jsr isLower
    64  e01b 90ef                       bcc isUpper
    65  e01d 60                         rts
    66                          
    67                          
    68                          ; -----------------------------------------------------------------------------
    69                          ; isDigit: Is the ASCII character a decimal digit (0-9)
    70                          ; -----------------------------------------------------------------------------
    71                          ; Inputs:
    72                          ;   A: ASCII character
    73                          ; Outputs:
    74                          ;   Carry set if digit, carry clear if not digit
    75                          ; -----------------------------------------------------------------------------
    76                          isDigit:
    77  e01e c930                       cmp #'0'
    78  e020 9005                       bcc @notDigit    ; less than '0'?
    79  e022 c93a                       cmp #'9' + 1
    80  e024 9002                       bcc @isDigit     ; less than or equal '9'?
    81  e026 18                         clc
    82                          
    83                          @notDigit:
    84  e027 60                         rts
    85                          
    86                          @isDigit
    87  e028 38                         sec
    88  e029 60                         rts
    89                          
    90                          
    91                          ; -----------------------------------------------------------------------------
    92                          ; isAlNum: Is the ASCII character alphanumeric (A-Z, a-z, 0-9)
    93                          ; -----------------------------------------------------------------------------
    94                          ; Inputs:
    95                          ;   A: ASCII character
    96                          ; Outputs:
    97                          ;   Carry set if alphanumeric, carry clear if not alphanumeric
    98                          ; -----------------------------------------------------------------------------
    99                          isAlNum:
   100  e02a 2018e0                     jsr isAlpha
   101  e02d 90ef                       bcc isDigit
   102  e02f 60                         rts
   103                          
   104                          ; -----------------------------------------------------------------------------
   105                          ; isDigitX: Is the ASCII character a hex digit (A-F, a-f, 0-9)
   106                          ; -----------------------------------------------------------------------------
   107                          ; Inputs:
   108                          ;   A: ASCII character
   109                          ; Outputs:
   110                          ;   Carry set if hexadecimal, carry clear if not hexadecimal
   111                          ; -----------------------------------------------------------------------------
   112                          isDigitX:
   113  e030 201ee0                     jsr isDigit
   114  e033 b013                       bcs @endIsDigitX
   115  e035 c941                       cmp #'A'
   116  e037 900d                       bcc @notHexDigit   ; less than 'A'?
   117  e039 c947                       cmp #'F' + 1
   118  e03b 900a                       bcc @isHexDigit    ; less than or equal 'F'?
   119  e03d c961                       cmp #'a'
   120  e03f 9005                       bcc @notHexDigit   ; less than 'a'?
   121  e041 c967                       cmp #'f' + 1
   122  e043 9002                       bcc @isHexDigit    ; less than or equal 'f'?
   123  e045 18                         clc
   124                          @notHexDigit:
   125  e046 60                         rts
   126                          
   127                          @isHexDigit
   128  e047 38                         sec
   129                          
   130                          @endIsDigitX
   131  e048 60                         rts
   132                          
   133                          
   134                          ; -----------------------------------------------------------------------------
   135                          ; isSpace: Is the ASCII character a whitespace character?
   136                          ; -----------------------------------------------------------------------------
   137                          ; Inputs:
   138                          ;   A: ASCII character
   139                          ; Outputs:
   140                          ;   Carry set if space, carry clear if not space
   141                          ; -----------------------------------------------------------------------------
   142                          isSpace:
   143  e049 c920                       cmp #' '
   144  e04b f01c                       beq @isSpace
   145  e04d b018                       bcs @notSpace
   146  e04f c90a                       cmp #'\n'
   147  e051 f016                       beq @isSpace
   148  e053 c90d                       cmp #'\r'
   149  e055 f012                       beq @isSpace
   150  e057 c909                       cmp #'\t'
   151  e059 f00e                       beq @isSpace
   152  e05b c90d                       cmp #'\r'
   153  e05d f00a                       beq @isSpace
   154  e05f c90b                       cmp #$0b
   155  e061 f006                       beq @isSpace
   156  e063 c90c                       cmp #$0c
   157  e065 f002                       beq @isSpace
   158                          
   159                          @notSpace:
   160  e067 18                         clc
   161  e068 60                         rts
   162                          
   163                          @isSpace
   164  e069 38                         sec
   165  e06a 60                         rts
   166                          
   167                          ; -----------------------------------------------------------------------------
   168                          ; toUpper: convert an ascii character to upper case
   169                          ; -----------------------------------------------------------------------------
   170                          ; Inputs:
   171                          ;   A: ascii character
   172                          ; Outputs:
   173                          ;   A: upper case ascii character
   174                          ;   C: set if character was converted
   175                          ; -----------------------------------------------------------------------------
   176                          toUpper:
   177  e06b 2000e0                     jsr isLower
   178  e06e 9002                       bcc @endToUpper
   179  e070 4920                       eor #$20        ; convert (subtract $20)
   180                          
   181                          @endToUpper
   182  e072 60                         rts        
   183                          
   184                          ; -----------------------------------------------------------------------------
   185                          ; toLower: convert an ascii character to lower case
   186                          ; -----------------------------------------------------------------------------
   187                          ; Inputs:
   188                          ;   A: ascii character
   189                          ; Outputs:
   190                          ;   A: lower case ascii character
   191                          ;   C: set if character was converted
   192                          ; -----------------------------------------------------------------------------
   193                          toLower:
   194  e073 200ce0                     jsr isUpper
   195  e076 9002                       bcc @endToUpper
   196                          
   197  e078 0920                       ora #$20        ; convert (add $20)
   198                          
   199                          @endToUpper

; ******** Source: kernel.asm

; ******** Source: ../lib\ut\bcd.asm
     1  e07a 60                 ; 6502 - BCD subroutines
     2                          ;
     3                          ; Copyright (c) 2020 Troy Schrapel
     4                          ;
     5                          ; This code is licensed under the MIT license
     6                          ;
     7                          ; https://github.com/visrealm/hbc-56
     8                          ;
     9                          ;
    10                          
    11                          
    12                          !ifndef BCD_RAM_START { BCD_RAM_START = $10
    13                                  !warn "BCD_RAM_START not provided. Defaulting to ", BCD_RAM_START
    14                          }
    15                          
    16                          ; -------------------------
    17                          ; High RAM
    18                          ; -------------------------
    19                          BCD_TMP1        = BCD_RAM_START
    20                          BCD_TMP2        = BCD_RAM_START + 1
    21                          BCD_TMP3        = BCD_RAM_START + 2
    22                          BCD_RAM_SIZE    = 3
    23                          
    24                          
    25                          !if BCD_RAM_END < (BCD_RAM_START + BCD_RAM_SIZE) {
    26                                  !error "BCD_RAM requires ",BCD_RAM_SIZE," bytes. Allocated ",BCD_RAM_END - BCD_RAM_START
    27                          }
    28                          
    29                          
    30                          ; -----------------------------------------------------------------------------
    31                          ; bin2bcd8: convert an unsigned byte to a 2-digit bcd value
    32                          ; -----------------------------------------------------------------------------
    33                          ; Inputs:
    34                          ;   A: value
    35                          ; Outputs:
    36                          ;   BCD value in R8
    37                          ; -----------------------------------------------------------------------------
    38                          bin2bcd8:
    39  e07b 8d587c               sta BCD_TMP1
    40  e07e a900                 lda #0
    41  e080 8d597c               sta BCD_TMP2
    42  e083 8d5a7c               sta BCD_TMP3
    43  e086 a208                 ldx #8 
    44  e088 f8                   sed    
    45                          .loop:
    46  e089 0e587c               asl BCD_TMP1
    47  e08c ad597c               lda BCD_TMP2
    48  e08f 6d597c               adc BCD_TMP2
    49  e092 8d597c               sta BCD_TMP2
    50  e095 ad5a7c               lda BCD_TMP3
    51  e098 6d5a7c               adc BCD_TMP3
    52  e09b 8d5a7c               sta BCD_TMP3
    53  e09e ca                   dex
    54  e09f d0e8                 bne .loop
    55  e0a1 d8                   cld   
    56  e0a2 60                   rts
    57                          

; ******** Source: kernel.asm

; ******** Source: ../lib\ut\memory.asm
     1                          ; 6502
     2                          ;
     3                          ; Memory subroutines and macros
     4                          ;
     5                          ; Copyright (c) 2020 Troy Schrapel
     6                          ;
     7                          ; This code is licensed under the MIT license
     8                          ;
     9                          ; https://github.com/visrealm/hbc-56
    10                          ;
    11                          ;
    12                          

; ******** Source: ../lib\ut\memory.inc
     1                          ; 6502
     2                          ;
     3                          ; Memory subroutines and macros
     4                          ;
     5                          ; Copyright (c) 2020 Troy Schrapel
     6                          ;
     7                          ; This code is licensed under the MIT license
     8                          ;
     9                          ; https://github.com/visrealm/hbc-56
    10                          ;
    11                          ;
    12                          
    13                          ; -----------------------------------------------------------------------------
    14                          ; store16: Write a 16-bit immediate value to memory
    15                          ; -----------------------------------------------------------------------------
    16                          ; Inputs:
    17                          ;       .dst: destination address
    18                          ;       .val16: 16-bit value
    19                          ; -----------------------------------------------------------------------------
    20                          !macro store16 .dst, .val16 {
    21                                  lda #<.val16
    22                                  sta .addr
    23                                  lda #>.val16
    24                                  sta .addr + 1
    25                          }
    26                          
    27                          ; -----------------------------------------------------------------------------
    28                          ; memcpy: Copy a fixed number of bytes from .src to dest
    29                          ; -----------------------------------------------------------------------------
    30                          ; Inputs:
    31                          ;       .src: source address
    32                          ;       .dst: destination address
    33                          ;       .cnt: number of bytes
    34                          ; -----------------------------------------------------------------------------
    35                          !macro memcpy .dst, .src, .cnt {
    36                          !if .cnt <= 0 {
    37                                  !error "memcpy: invalid count: ", .cnt
    38                          } else if .cnt <= 8 {
    39                                  !for i, 0, .cnt - 1 {
    40                                          lda .src + i
    41                                          sta .dst + i
    42                                  }
    43                          } else { !if .cnt <= 256 {
    44                                  ldx #0
    45                          -
    46                                  lda .src, x
    47                                  sta .dst, x
    48                                  inx
    49                                  cpx #(.cnt & $ff)       
    50                                  bne -
    51                          } else {
    52                                  lda #<.src
    53                                  sta MEM_SRC
    54                                  lda #>.src
    55                                  sta MEM_SRC + 1
    56                          
    57                                  lda #<.dst
    58                                  sta MEM_DST
    59                                  lda #>.dst
    60                                  sta MEM_DST + 1
    61                          
    62                          
    63                                          lda #<.cnt
    64                                          sta MEMCPY_LEN
    65                                          lda #>.cnt
    66                                          sta MEMCPY_LEN + 1
    67                                          jsr memcpyMultiPage
    68                                  }
    69                          }
    70                          }
    71                          
    72                          !macro setMemCpySrc .src {
    73                                  lda #<.src
    74                                  sta MEM_SRC
    75                                  lda #>.src
    76                                  sta MEM_SRC + 1
    77                          }
    78                          
    79                          !macro setMemCpyDst .dst {
    80                                  lda #<.dst
    81                                  sta MEM_DST
    82                                  lda #>.dst
    83                                  sta MEM_DST + 1
    84                          }
    85                          
    86                          !macro setMemCpySrcInd .srcRef {
    87                                  lda .srcRef
    88                                  sta MEM_SRC
    89                                  lda .srcRef + 1
    90                                  sta MEM_SRC + 1
    91                          }
    92                          
    93                          !macro setMemCpyDstInd .dstRef {
    94                                  lda .dstRef
    95                                  sta MEM_DST
    96                                  lda .dstRef + 1
    97                                  sta MEM_DST + 1
    98                          }
    99                          
   100                          !macro memcpySinglePage .bytes {
   101                          
   102                                  !if .bytes <= 0 {
   103                                          !error "memcpySinglePage: invalid count: ", .bytes
   104                                  }       
   105                          
   106                                  ldy #.bytes
   107                                  jsr memcpySinglePage
   108                          }
   109                          
   110                          
   111                          ; -----------------------------------------------------------------------------
   112                          ; memcpyPort: Copy a fixed number of bytes from .src ram to dest port
   113                          ; -----------------------------------------------------------------------------
   114                          ; Inputs:
   115                          ;       .src: source address
   116                          ;       .dst: destination address
   117                          ;       .cnt: number of bytes
   118                          ; -----------------------------------------------------------------------------
   119                          !macro memcpyPort .dst, .src, .cnt {
   120                                  !if .cnt <= 0 {
   121                                          !error "memcpyPort: invalid count: ", .cnt
   122                                  }
   123                                  
   124                                  lda #<.src
   125                                  sta MEM_SRC
   126                                  lda #>.src
   127                                  sta MEM_SRC + 1
   128                          
   129                                  lda #<.dst
   130                                  sta MEM_DST
   131                                  lda #>.dst
   132                                  sta MEM_DST + 1
   133                          
   134                                  !if .cnt <= 256 {
   135                                          ldy #<.cnt                                      
   136                                          jsr memcpySinglePagePort
   137                                  } else {
   138                                          lda #<.cnt
   139                                          sta MEMCPY_LEN
   140                                          lda #>.cnt
   141                                          sta MEMCPY_LEN + 1
   142                                          jsr memcpyMultiPagePort
   143                                  }
   144                          }
   145                          
   146                          !zone {
   147                          
   148                          ; -----------------------------------------------------------------------------
   149                          ; memset: Set a fixed number of bytes to a single value
   150                          ; -----------------------------------------------------------------------------
   151                          ; Inputs:
   152                          ;       .dst: destination address
   153                          ;       val: the byte value
   154                          ;       .cnt: number of bytes
   155                          ; -----------------------------------------------------------------------------
   156                          !macro memset .dst, .val, .cnt {
   157                          !if .cnt <= 0 {
   158                                  !error "memset: invalid count: ", .cnt
   159                          } else if .cnt <= 8 {
   160                                  lda #.val
   161                                  !for i, 0, .cnt - 1 {
   162                                  sta .dst + i
   163                                  }
   164                          } else if .cnt <= 256 {
   165                                  ldx #<.cnt
   166                                  lda #.val
   167                          -
   168                                  dex
   169                                  sta .dst, x
   170                                  cpx #0
   171                                  bne -
   172                          } else {
   173                                  lda #<.dst
   174                                  sta MEM_DST
   175                                  lda #>.dst
   176                                  sta MEM_DST + 1
   177                                  lda #<.cnt
   178                                  sta MEM_LEN
   179                                  lda #>.cnt
   180                                  sta MEM_LEN + 1
   181                                  lda #.val
   182                                  jsr memsetMultiPage
   183                          }
   184                          }
   185                          
   186                          

; ******** Source: ../lib\ut\memory.asm
    14                          
    15                          
    16                          !ifndef MEMORY_ZP_START { MEMORY_ZP_START = $48
    17                                  !warn "MEMORY_ZP_START not provided. Defaulting to ", MEMORY_ZP_START
    18                          }
    19                          
    20                          ; -------------------------
    21                          ; Zero page
    22                          ; -------------------------
    23                          MEM_DST = MEMORY_ZP_START
    24                          MEM_SRC = MEMORY_ZP_START + 2
    25                          MEM_LEN = MEMORY_ZP_START + 4
    26                          MEMORY_ZP_SIZE  = 6
    27                          
    28                          
    29                          !if MEMORY_ZP_END < (MEMORY_ZP_START + MEMORY_ZP_SIZE) {
    30                                  !error "MEMORY_ZP requires ",MEMORY_ZP_SIZE," bytes. Allocated ",MEMORY_ZP_END - MEMORY_ZP_START
    31                          }
    32                          
    33                          ; -----------------------------------------------------------------------------
    34                          ; memcpySinglePage: Copy up to 255 bytes 
    35                          ; -----------------------------------------------------------------------------
    36                          ; Inputs:
    37                          ;       MEM_SRC: src address
    38                          ;       MEM_DST: dst address
    39                          ;       Y:      bytes
    40                          ; -----------------------------------------------------------------------------
    41                          memcpySinglePage:
    42  e0a3 c000                       cpy #0
    43  e0a5 f009                       beq .endMemcpySinglePage
    44                          -
    45  e0a7 88                         dey
    46  e0a8 b12e                       lda (MEM_SRC), Y
    47  e0aa 912c                       sta (MEM_DST), Y
    48  e0ac c000                       cpy #0
    49  e0ae d0f7                       bne -
    50                          .endMemcpySinglePage:
    51  e0b0 60                         rts
    52                          ; -----------------------------------------------------------------------------
    53                          
    54                          
    55                          
    56                          ; -----------------------------------------------------------------------------
    57                          ; memcpySinglePagePort: Copy up to 255 bytes 
    58                          ; -----------------------------------------------------------------------------
    59                          ; Inputs:
    60                          ;       MEM_SRC: src address
    61                          ;       MEM_DST: dst address (port)
    62                          ;       Y:      bytes
    63                          ; -----------------------------------------------------------------------------
    64                          memcpySinglePagePort:
    65  e0b1 c000                       cpy #0
    66  e0b3 f009                       beq .endMemcpySinglePagePort
    67                          -
    68  e0b5 88                         dey
    69  e0b6 b12e                       lda (MEM_SRC), Y
    70  e0b8 852c                       sta MEM_DST
    71  e0ba c000                       cpy #0
    72  e0bc d0f7                       bne -
    73                          .endMemcpySinglePagePort
    74  e0be 60                         rts
    75                          ; -----------------------------------------------------------------------------
    76                          
    77                          
    78                          
    79                          ; -----------------------------------------------------------------------------
    80                          ; memcpyMultiPage: Copy an up to 2^15 bytes 
    81                          ; -----------------------------------------------------------------------------
    82                          ; Inputs:
    83                          ;       MEM_SRC: src address
    84                          ;       MEM_DST: dst address
    85                          ;       MEM_LEN: length
    86                          ; -----------------------------------------------------------------------------
    87                          memcpyMultiPage:
    88                          
    89                          !ifdef ALLOW_SELF_MODIFYING_CODE {
    90                                  lda MEM_SRC
    91                                  sta .loadIns + 1
    92                                  lda MEM_SRC + 1
    93                                  sta .loadIns + 2
    94                          
    95                                  lda MEM_DST
    96                                  sta .storeIns + 1
    97                                  lda MEM_DST + 1
    98                                  sta .storeIns + 2
    99                          
   100                          .loadIns:
   101                                  lda SELF_MODIFY_ADDR, Y
   102                                  
   103                          .storeIns:
   104                                  sta SELF_MODIFY_ADDR, Y
   105                                  dey
   106                                  bne .loadIns
   107                                  inc .loadIns + 2
   108                                  inc .storeIns + 2
   109                                  dex
   110                                  bne .loadIns
   111                          } else {
   112  e0bf a000                       ldy #0
   113  e0c1 a631                       ldx MEM_LEN + 1
   114                          - 
   115  e0c3 b12e                       lda (MEM_SRC),y ; could unroll to any power of 2
   116  e0c5 912c                       sta (MEM_DST),y
   117  e0c7 c8                         iny
   118  e0c8 d0f9                       bne -
   119  e0ca ca                         dex
   120  e0cb f007                       beq .memcpyMultiPageRemaining
   121  e0cd e62f                       inc MEM_SRC + 1
   122  e0cf e62d                       inc MEM_DST + 1
   123  e0d1 4cc3e0                     jmp -
   124                          .memcpyMultiPageRemaining ; remaining bytes
   125  e0d4 a630                       ldx MEM_LEN
   126  e0d6 f008                       beq .memcpyMultiPageEnd
   127                          - ; X bytes
   128  e0d8 b12e                       lda (MEM_SRC),y
   129  e0da 912c                       sta (MEM_DST),y
   130  e0dc c8                         iny
   131  e0dd ca                         dex
   132  e0de d0f8                       bne -
   133                          .memcpyMultiPageEnd
   134                          }
   135                          
   136  e0e0 60                         rts
   137                          ; -----------------------------------------------------------------------------
   138                          
   139                          
   140                          ; -----------------------------------------------------------------------------
   141                          ; memcpyMultiPagePort: Copy an up to 2^15 bytes 
   142                          ; -----------------------------------------------------------------------------
   143                          ; Inputs:
   144                          ;       MEM_SRC: src address
   145                          ;       MEM_DST: dst address (port)
   146                          ;       MEM_LEN: length
   147                          ; -----------------------------------------------------------------------------
   148                          memcpyMultiPagePort:
   149                          
   150  e0e1 a000                       ldy #0
   151  e0e3 a631                       ldx MEM_LEN + 1
   152                          - 
   153  e0e5 b12e                       lda (MEM_SRC),y ; could unroll to any power of 2
   154  e0e7 852c                       sta MEM_DST
   155  e0e9 c8                         iny
   156  e0ea d0f9                       bne -
   157  e0ec ca                         dex
   158  e0ed f005                       beq .memcpyMultiPagePortRemaining
   159  e0ef e62f                       inc MEM_SRC + 1
   160  e0f1 4ce5e0                     jmp -
   161                          .memcpyMultiPagePortRemaining ; remaining bytes
   162  e0f4 a630                       ldx MEM_LEN
   163  e0f6 f008                       beq .memcpyMultiPagePortEnd
   164                          - ; X bytes
   165  e0f8 b12e                       lda (MEM_SRC),y
   166  e0fa 852c                       sta MEM_DST
   167  e0fc c8                         iny
   168  e0fd ca                         dex
   169  e0fe d0f8                       bne -
   170                          .memcpyMultiPagePortEnd
   171  e100 60                         rts
   172                          ; -----------------------------------------------------------------------------
   173                          
   174                          
   175                          ; -----------------------------------------------------------------------------
   176                          ; memsetSinglePage: set a block of memory data
   177                          ; -----------------------------------------------------------------------------
   178                          ; Inputs:
   179                          ;        A:     value to set
   180                          ;        MEM_DST: start address
   181                          ;        Y:     bytes
   182                          ; -----------------------------------------------------------------------------
   183                          memsetSinglePage:
   184  e101 c000                       cpy #0
   185  e103 f007                       beq .doneCpy
   186                          -
   187  e105 88                         dey
   188  e106 912c                       sta (MEM_DST), y
   189  e108 c000                       cpy #0
   190  e10a d0f9                       bne -
   191                          .doneCpy
   192  e10c 60                         rts
   193                          
   194                          
   195                          ; -----------------------------------------------------------------------------
   196                          ; memsetMultiPage: set a block of memory data
   197                          ; -----------------------------------------------------------------------------
   198                          ; Inputs:
   199                          ;        A: value
   200                          ;        MEM_DST: start address
   201                          ;        MEM_LEN: length
   202                          ; -----------------------------------------------------------------------------
   203                          memsetMultiPage:
   204  e10d a631                       ldx MEM_LEN + 1
   205  e10f d005                       bne .doneSet
   206  e111 a430                       ldy MEM_LEN
   207  e113 4c01e1                     jmp memsetSinglePage
   208                          .doneSet
   209  e116 a000                       ldy #0
   210                          - 
   211  e118 912c                       sta (MEM_DST),y ; could unroll to any power of 2
   212  e11a c8                         iny
   213  e11b d0fb                       bne -
   214  e11d ca                         dex
   215  e11e f005                       beq .doneSet2
   216  e120 e62d                       inc MEM_DST + 1
   217  e122 4c18e1                     jmp -
   218                          .doneSet2 ; remaining bytes
   219  e125 a630                       ldx MEM_LEN
   220  e127 f006                       beq .doneSet3
   221                          - ; X bytes
   222  e129 912c                       sta (MEM_DST),y
   223  e12b c8                         iny
   224  e12c ca                         dex
   225  e12d d0fa                       bne -
   226                          .doneSet3
   227  e12f 60                         rts

; ******** Source: kernel.asm

; ******** Source: ../lib\ut\tables.asm
     1                          ; 6502 - Useful tables
     2                          ;
     3                          ; Copyright (c) 2022 Troy Schrapel
     4                          ;
     5                          ; This code is licensed under the MIT license
     6                          ;
     7                          ; https://github.com/visrealm/hbc-56
     8                          ;
     9                          ;
    10                          
    11                          tableBitFromLeft:
    12  e130 8040201008040201   !byte $80,$40,$20,$10,$08,$04,$02,$01
    13                          tableInvBitFromLeft:
    14  e138 7fbfdfeff7fbfdfe   !byte $7f,$bf,$df,$ef,$f7,$fb,$fd,$fe
    15                          tableBitFromRight:
    16  e140 0102040810204080   !byte $01,$02,$04,$08,$10,$20,$40,$80
    17                          tableInvBitFromRight:

; ******** Source: kernel.asm
   146  e148 fefdfbf7efdfbf7f   
   147                          !ifndef HBC56_DISABLE_AY3891X {

; ******** Source: ../lib\sfx\ay3891x.asm
     1                          ; 6502 - AY-3-819x PSG
     2                          ;
     3                          ; Copyright (c) 2021 Troy Schrapel
     4                          ;
     5                          ; This code is licensed under the MIT license
     6                          ;
     7                          ; https://github.com/visrealm/hbc-56
     8                          ;
     9                          

; ******** Source: ../lib\sfx\ay3891x.inc
     1                          ; 6502 - AY-3-819x PSG
     2                          ;
     3                          ; Copyright (c) 2021 Troy Schrapel
     4                          ;
     5                          ; This code is licensed under the MIT license
     6                          ;
     7                          ; https://github.com/visrealm/hbc-56
     8                          ;
     9                          
    10                          
    11                          
    12                          !macro ayWrite .dev, .reg, .val {
    13                                  lda #.reg
    14                                  sta IO_PORT_BASE_ADDRESS | AY_IO_PORT | AY_ADDR | .dev
    15                                  lda #.val
    16                                  sta IO_PORT_BASE_ADDRESS | AY_IO_PORT | AY_WRITE | .dev
    17                          }        
    18                          
    19                          !macro ayRead .dev, .reg {
    20                                  lda #.reg
    21                                  sta IO_PORT_BASE_ADDRESS | AY_IO_PORT | AY_ADDR | .dev
    22                                  lda IO_PORT_BASE_ADDRESS | AY_IO_PORT | AY_READ | .dev
    23                          }        
    24                          
    25                          
    26                          !macro ayWriteX .dev, .reg {
    27                                  lda #.reg
    28                                  sta IO_PORT_BASE_ADDRESS | AY_IO_PORT | AY_ADDR | .dev
    29                                  stx IO_PORT_BASE_ADDRESS | AY_IO_PORT | AY_WRITE | .dev
    30                          }
    31                          
    32                          !macro ayWriteA .dev, .reg {
    33                                  ldx #.reg
    34                                  stx IO_PORT_BASE_ADDRESS | AY_IO_PORT | AY_ADDR | .dev
    35                                  sta IO_PORT_BASE_ADDRESS | AY_IO_PORT | AY_WRITE | .dev
    36                          }
    37                          
    38                          !macro ayPlayNote .dev, .chan, .freq {
    39                                  !if .freq <= 0 {
    40                                          .val = 0
    41                                  } else {
    42                                          .val = AY_CLOCK_FREQ / (32.0 * .freq)
    43                                  }
    44                                  +ayWrite .dev, AY_CHA_TONE_L + (.chan * 2), <.val
    45                                  +ayWrite .dev, AY_CHA_TONE_H + (.chan * 2), >.val
    46                          }
    47                          
    48                          !macro ayToneWord .freq {
    49                                  !word (AY_CLOCK_FREQ / (32.0 * .freq))
    50                          }
    51                          
    52                          !macro ayToneByteL .freq {
    53                                  !byte <(AY_CLOCK_FREQ / (32.0 * .freq))
    54                          }
    55                          
    56                          !macro ayToneByteH .freq {
    57                                  !byte >(AY_CLOCK_FREQ / (32.0 * .freq))
    58                          }
    59                          
    60                          
    61                          !macro ayToneEnable .dev, .chan {
    62                                  +ayRead .dev, AY_ENABLES
    63                                  and #!($01 << .chan)
    64                                  +ayWriteA .dev, AY_ENABLES
    65                          }
    66                          
    67                          !macro ayToneDisable .dev, .chan {
    68                                  +ayRead .dev, AY_ENABLES
    69                                  ora #($01 << .chan)
    70                                  +ayWriteA .dev, AY_ENABLES
    71                          }
    72                          
    73                          !macro ayNoiseEnable .dev, .chan {
    74                                  +ayRead .dev, AY_ENABLES
    75                                  eor #($08 << .chan)
    76                                  +ayWriteA .dev, AY_ENABLES
    77                          }
    78                          
    79                          !macro ayNoiseDisable .dev, .chan {
    80                                  +ayRead .dev, AY_ENABLES
    81                                  ora #($08 << .chan)
    82                                  +ayWriteA .dev, AY_ENABLES
    83                          }
    84                          
    85                          !macro aySetVolume .dev, .chan, .vol {
    86                                  +ayWrite .dev, (AY_CHA_AMPL + .chan), (.vol >> 4)
    87                          }
    88                          
    89                          !macro aySetVolumeEnvelope .dev, .chan {
    90                                  +ayWrite .dev, (AY_CHA_AMPL + .chan), $10
    91                          }
    92                          
    93                          !macro aySetEnvelopePeriod .dev, .period {
    94                                  +ayWrite .dev, AY_ENV_PERIOD_L, <.period
    95                                  +ayWrite .dev, AY_ENV_PERIOD_H, >.period
    96                          }
    97                          
    98                          !macro aySetEnvShape .dev, .shape {
    99                                  +ayWrite .dev, AY_ENV_SHAPE, .shape
   100                          }
   101                          
   102                          !macro aySetNoise .dev, .freq {
   103                                  +ayWrite .dev, AY_ENV_SHAPE, .freq >> 3
   104                          }
   105                          
   106                          !macro ayStop .dev, .chan {
   107                                  +ayPlayNote .dev, .chan, 0
   108                          }

; ******** Source: ../lib\sfx\ay3891x.asm
    10                          
    11                          
    12                          
    13                          !ifndef AY_IO_PORT { AY_IO_PORT = $40
    14                                  !warn "AY_IO_PORT not provided. Defaulting to ", AY_IO_PORT
    15                          }
    16                          
    17                          HAVE_AY3891X = 1
    18                          
    19                          ; -------------------------
    20                          ; Constants
    21                          ; -------------------------
    22                          AY_PSG0 = $00
    23                          AY_PSG1 = $04
    24                          
    25                          ; IO Ports
    26                          AY_S0 = IO_PORT_BASE_ADDRESS | AY_IO_PORT | AY_PSG0
    27                          AY_S1 = IO_PORT_BASE_ADDRESS | AY_IO_PORT | AY_PSG1
    28                          
    29                          AY_INACTIVE = $03
    30                          AY_READ     = $02
    31                          AY_WRITE    = $01
    32                          AY_ADDR     = $00
    33                          
    34                          AY_S0_READ  = AY_S0 | AY_READ
    35                          AY_S0_WRITE = AY_S0 | AY_WRITE
    36                          AY_S0_ADDR  = AY_S0 | AY_ADDR
    37                          
    38                          AY_S1_READ  = AY_S1 | AY_READ
    39                          AY_S1_WRITE = AY_S1 | AY_WRITE
    40                          AY_S1_ADDR  = AY_S1 | AY_ADDR
    41                          
    42                          ; Registers
    43                          AY_R0 = 0
    44                          AY_R1 = 1
    45                          AY_R2 = 2
    46                          AY_R3 = 3
    47                          AY_R4 = 4
    48                          AY_R5 = 5
    49                          AY_R6 = 6
    50                          AY_R7 = 7
    51                          AY_R8 = 8
    52                          AY_R9 = 9
    53                          AY_R10 = 10
    54                          AY_R11 = 11
    55                          AY_R12 = 12
    56                          AY_R13 = 13
    57                          AY_R14 = 14
    58                          AY_R15 = 15
    59                          AY_R16 = 16
    60                          AY_R17 = 17
    61                          
    62                          AY_CHA = 0
    63                          AY_CHB = 1
    64                          AY_CHC = 2
    65                          AY_CHN = 3
    66                          
    67                          AY_CHA_TONE_L   = AY_R0
    68                          AY_CHA_TONE_H   = AY_R1
    69                          AY_CHB_TONE_L   = AY_R2
    70                          AY_CHB_TONE_H   = AY_R3
    71                          AY_CHC_TONE_L   = AY_R4
    72                          AY_CHC_TONE_H   = AY_R5
    73                          AY_NOISE_GEN    = AY_R6
    74                          AY_ENABLES      = AY_R7
    75                          AY_CHA_AMPL     = AY_R8
    76                          AY_CHB_AMPL     = AY_R9
    77                          AY_CHC_AMPL     = AY_R10
    78                          AY_ENV_PERIOD_L = AY_R11
    79                          AY_ENV_PERIOD_H = AY_R12
    80                          AY_ENV_SHAPE    = AY_R13
    81                          AY_PORTA        = AY_R14
    82                          AY_PORTB        = AY_R15
    83                          
    84                          AY_ENV_SHAPE_CONTINUE  = $08
    85                          AY_ENV_SHAPE_ATTACK    = $04
    86                          AY_ENV_SHAPE_ALTERNATE = $02
    87                          AY_ENV_SHAPE_HOLD      = $01
    88                          
    89                          ;  /\  /\  /\  /\  /\ 
    90                          ; /  \/  \/  \/  \/  \
    91                          AY_ENV_SHAPE_TRIANGLE     = (AY_ENV_SHAPE_CONTINUE | AY_ENV_SHAPE_ATTACK | AY_ENV_SHAPE_ALTERNATE)
    92                          
    93                          ;  /------------------
    94                          ; /
    95                          AY_ENV_SHAPE_FADE_IN      = (AY_ENV_SHAPE_CONTINUE | AY_ENV_SHAPE_ATTACK | AY_ENV_SHAPE_HOLD)
    96                          
    97                          ; \
    98                          ;  \__________________
    99                          AY_ENV_SHAPE_FADE_OUT     = (AY_ENV_SHAPE_CONTINUE | AY_ENV_SHAPE_HOLD)
   100                          
   101                          ; \ |\ |\ |\ |\ |\ |\ |
   102                          ;  \| \| \| \| \| \| \|
   103                          AY_ENV_SHAPE_SAW1         = (AY_ENV_SHAPE_CONTINUE)
   104                          
   105                          ;  /| /| /| /| /| /| /|
   106                          ; / |/ |/ |/ |/ |/ |/ |
   107                          AY_ENV_SHAPE_SAW2         = (AY_ENV_SHAPE_CONTINUE | AY_ENV_SHAPE_ATTACK)
   108                          
   109                          ;  /|
   110                          ; / |__________________
   111                          AY_ENV_SHAPE_FADE_IN_STOP = (AY_ENV_SHAPE_ATTACK)
   112                          
   113                          
   114                          AY_CLOCK_FREQ   = 2000000
   115                          
   116                          ayInit:
   117                                  ; disable everything
   118  e150 a9078d407fa9ff8d...        +ayWrite AY_PSG0, AY_ENABLES, $ff
   119  e15a a9078d447fa9ff8d...        +ayWrite AY_PSG1, AY_ENABLES, $ff
   120                          
   121  e164 a9088d407fa9008d...        +aySetVolume AY_PSG0, AY_CHA, 0
   122  e16e a9098d407fa9008d...        +aySetVolume AY_PSG0, AY_CHB, 0
   123  e178 a90a8d407fa9008d...        +aySetVolume AY_PSG0, AY_CHC, 0
   124                          
   125  e182 a9008d407fa9008d...        +ayPlayNote AY_PSG0, AY_CHA, 0
   126  e196 a9028d407fa9008d...        +ayPlayNote AY_PSG0, AY_CHB, 0
   127  e1aa a9048d407fa9008d...        +ayPlayNote AY_PSG0, AY_CHC, 0
   128                          
   129  e1be a90b8d407fa9008d...        +aySetEnvelopePeriod AY_PSG0, 0
   130  e1d2 a90d8d407fa9008d...        +aySetEnvShape AY_PSG0, 0
   131  e1dc a90d8d407fa9008d...        +aySetNoise  AY_PSG0, 0
   132                          
   133  e1e6 a9088d447fa9008d...        +aySetVolume AY_PSG1, AY_CHA, 0
   134  e1f0 a9098d447fa9008d...        +aySetVolume AY_PSG1, AY_CHB, 0
   135  e1fa a90a8d447fa9008d...        +aySetVolume AY_PSG1, AY_CHC, 0
   136                          
   137  e204 a9008d447fa9008d...        +ayPlayNote AY_PSG1, AY_CHA, 0
   138  e218 a9028d447fa9008d...        +ayPlayNote AY_PSG1, AY_CHB, 0
   139  e22c a9048d447fa9008d...        +ayPlayNote AY_PSG1, AY_CHC, 0
   140                          
   141  e240 a90b8d447fa9008d...        +aySetEnvelopePeriod AY_PSG1, 0
   142  e254 a90d8d447fa9008d...        +aySetEnvShape AY_PSG1, 0
   143  e25e a90d8d447fa9008d...        +aySetNoise  AY_PSG1, 0
   144  e268 60                         rts
   145                          
   146                          ; Note frequencies from https://pages.mtu.edu/~suits/notefreqs.html
   147                          
   148                          NOTE_FREQ_C0  = 16.35
   149                          NOTE_FREQ_CS0 = 17.32
   150                          NOTE_FREQ_D0  = 18.35
   151                          NOTE_FREQ_DS0 = 19.45
   152                          NOTE_FREQ_E0  = 20.6
   153                          NOTE_FREQ_F0  = 21.83
   154                          NOTE_FREQ_FS0 = 23.12
   155                          NOTE_FREQ_G0  = 24.5
   156                          NOTE_FREQ_GS0 = 25.96
   157                          NOTE_FREQ_A0  = 27.5
   158                          NOTE_FREQ_AS0 = 29.14
   159                          NOTE_FREQ_B0  = 30.87
   160                          NOTE_FREQ_C1  = 32.7
   161                          NOTE_FREQ_CS1 = 34.65
   162                          NOTE_FREQ_D1  = 36.71
   163                          NOTE_FREQ_DS1 = 38.89
   164                          NOTE_FREQ_E1  = 41.2
   165                          NOTE_FREQ_F1  = 43.65
   166                          NOTE_FREQ_FS1 = 46.25
   167                          NOTE_FREQ_G1  = 49
   168                          NOTE_FREQ_GS1 = 51.91
   169                          NOTE_FREQ_A1  = 55
   170                          NOTE_FREQ_AS1 = 58.27
   171                          NOTE_FREQ_B1  = 61.74
   172                          NOTE_FREQ_C2  = 65.41
   173                          NOTE_FREQ_CS2 = 69.3
   174                          NOTE_FREQ_D2  = 73.42
   175                          NOTE_FREQ_DS2 = 77.78
   176                          NOTE_FREQ_E2  = 82.41
   177                          NOTE_FREQ_F2  = 87.31
   178                          NOTE_FREQ_FS2 = 92.5
   179                          NOTE_FREQ_G2  = 98
   180                          NOTE_FREQ_GS2 = 103.83
   181                          NOTE_FREQ_A2  = 110
   182                          NOTE_FREQ_AS2 = 116.54
   183                          NOTE_FREQ_B2  = 123.47
   184                          NOTE_FREQ_C3  = 130.81
   185                          NOTE_FREQ_CS3 = 138.59
   186                          NOTE_FREQ_D3  = 146.83
   187                          NOTE_FREQ_DS3 = 155.56
   188                          NOTE_FREQ_E3  = 164.81
   189                          NOTE_FREQ_F3  = 174.61
   190                          NOTE_FREQ_FS3 = 185
   191                          NOTE_FREQ_G3  = 196
   192                          NOTE_FREQ_GS3 = 207.65
   193                          NOTE_FREQ_A3  = 220
   194                          NOTE_FREQ_AS3 = 233.08
   195                          NOTE_FREQ_B3  = 246.94
   196                          NOTE_FREQ_C4  = 261.63
   197                          NOTE_FREQ_CS4 = 277.18
   198                          NOTE_FREQ_D4  = 293.66
   199                          NOTE_FREQ_DS4 = 311.13
   200                          NOTE_FREQ_E4  = 329.63
   201                          NOTE_FREQ_F4  = 349.23
   202                          NOTE_FREQ_FS4 = 369.99
   203                          NOTE_FREQ_G4  = 392
   204                          NOTE_FREQ_GS4 = 415.3
   205                          NOTE_FREQ_A4  = 440
   206                          NOTE_FREQ_AS4 = 466.16
   207                          NOTE_FREQ_B4  = 493.88
   208                          NOTE_FREQ_C5  = 523.25
   209                          NOTE_FREQ_CS5 = 554.37
   210                          NOTE_FREQ_D5  = 587.33
   211                          NOTE_FREQ_DS5 = 622.25
   212                          NOTE_FREQ_E5  = 659.25
   213                          NOTE_FREQ_F5  = 698.46
   214                          NOTE_FREQ_FS5 = 739.99
   215                          NOTE_FREQ_G5  = 783.99
   216                          NOTE_FREQ_GS5 = 830.61
   217                          NOTE_FREQ_A5  = 880
   218                          NOTE_FREQ_AS5 = 932.33
   219                          NOTE_FREQ_B5  = 987.77
   220                          NOTE_FREQ_C6  = 1046.5
   221                          NOTE_FREQ_CS6 = 1108.73
   222                          NOTE_FREQ_D6  = 1174.66
   223                          NOTE_FREQ_DS6 = 1244.51
   224                          NOTE_FREQ_E6  = 1318.51
   225                          NOTE_FREQ_F6  = 1396.91
   226                          NOTE_FREQ_FS6 = 1479.98
   227                          NOTE_FREQ_G6  = 1567.98
   228                          NOTE_FREQ_GS6 = 1661.22
   229                          NOTE_FREQ_A6  = 1760
   230                          NOTE_FREQ_AS6 = 1864.66
   231                          NOTE_FREQ_B6  = 1975.53
   232                          NOTE_FREQ_C7  = 2093
   233                          NOTE_FREQ_CS7 = 2217.46
   234                          NOTE_FREQ_D7  = 2349.32
   235                          NOTE_FREQ_DS7 = 2489.02
   236                          NOTE_FREQ_E7  = 2637.02
   237                          NOTE_FREQ_F7  = 2793.83
   238                          NOTE_FREQ_FS7 = 2959.96
   239                          NOTE_FREQ_G7  = 3135.96
   240                          NOTE_FREQ_GS7 = 3322.44
   241                          NOTE_FREQ_A7  = 3520
   242                          NOTE_FREQ_AS7 = 3729.31
   243                          NOTE_FREQ_B7  = 3951.07
   244                          NOTE_FREQ_C8  = 4186.01
   245                          NOTE_FREQ_CS8 = 4434.92
   246                          NOTE_FREQ_D8  = 4698.63
   247                          NOTE_FREQ_DS8 = 4978.03
   248                          NOTE_FREQ_E8  = 5274.04
   249                          NOTE_FREQ_F8  = 5587.65
   250                          NOTE_FREQ_FS8 = 5919.91
   251                          NOTE_FREQ_G8  = 6271.93
   252                          NOTE_FREQ_GS8 = 6644.88
   253                          NOTE_FREQ_A8  = 7040
   254                          NOTE_FREQ_AS8 = 7458.62
   255                          NOTE_FREQ_B8  = 7902.13

; ******** Source: kernel.asm
   149                          }
   150                          
   151                          !ifndef HBC56_DISABLE_TMS9918 {
   152                                  !ifndef TMS_MODEL { TMS_MODEL = 9918 }

; ******** Source: ../lib\gfx\tms9918.asm
     1                          ; 6502 - TMS9918 VDP
     2                          ;
     3                          ; Copyright (c) 2021 Troy Schrapel
     4                          ;
     5                          ; This code is licensed under the MIT license
     6                          ;
     7                          ; https://github.com/visrealm/hbc-56
     8                          ;
     9                          

; ******** Source: ../lib\hbc56.inc
     1                          ; 6502 - HBC-56
     2                          ;
     3                          ; Copyright (c) 2021 Troy Schrapel
     4                          ;
     5                          ; This code is licensed under the MIT license
     6                          ;
     7                          ; https://github.com/visrealm/hbc-56
     8                          ;
     9                          ;
    10                          
    11                          ; Base address of the 256 IO port memory range
    12                          IO_PORT_BASE_ADDRESS    = $7f00
    13                          
    14                          
    15                          ; -------------------------
    16                          ; ASCII constants
    17                          ; -------------------------
    18                          ASCII_RETURN    = $0A
    19                          ASCII_CR        = $0D
    20                          ASCII_BACKSPACE = $08
    21                          ASCII_BELL      = $07

; ******** Source: ../lib\gfx\tms9918.asm
    11                          
    12                          !ifndef HAVE_MATH_INC { !src "ut/math.inc" }

; ******** Source: ../lib\gfx\tms9918.inc
     1                          ; 6502 - TMS9918 VDP Macros
     2                          ;
     3                          ; Copyright (c) 2021 Troy Schrapel
     4                          ;
     5                          ; This code is licensed under the MIT license
     6                          ;
     7                          ; https://github.com/visrealm/hbc-56
     8                          ;
     9                          
    10                          
    11                          
    12                          
    13                          ; -----------------------------------------------------------------------------
    14                          ; tmsWaitReg: Not sure how much delay we need so make a macro for now
    15                          ; -----------------------------------------------------------------------------
    16                          !macro tmsWaitReg {
    17                                  jsr _tmsWaitReg
    18                          }
    19                          
    20                          ; -----------------------------------------------------------------------------
    21                          ; tmsWaitData: Not sure how much delay we need so make a macro for now
    22                          ; -----------------------------------------------------------------------------
    23                          !macro tmsWaitData {
    24                                  jsr _tmsWaitData
    25                          }
    26                          
    27                          ; -----------------------------------------------------------------------------
    28                          ; tmsSetAddressWrite: Set an address in the TMS9918
    29                          ; -----------------------------------------------------------------------------
    30                          !macro tmsSetAddressWrite .addr {
    31                                  +tmsSetAddressRead ($4000 | .addr)
    32                          }
    33                          
    34                          ; -----------------------------------------------------------------------------
    35                          ; tmsSetAddressRead: Set an address to read from the TMS9918
    36                          ; -----------------------------------------------------------------------------
    37                          !macro tmsSetAddressRead .addr {
    38                                  php
    39                                  sei             ; we can't be interrupted here
    40                                  lda #<(.addr)
    41                                  sta TMS9918_REG
    42                                  +tmsWaitReg
    43                                  lda #>(.addr)
    44                                  sta TMS9918_REG
    45                                  +tmsWaitReg
    46                                  plp
    47                          }
    48                          
    49                          ; -----------------------------------------------------------------------------
    50                          ; tmsGet: Get a byte of data from the TMS9918
    51                          ; -----------------------------------------------------------------------------
    52                          !macro tmsGet {
    53                                  lda TMS9918_RAM
    54                                  +tmsWaitData
    55                          }
    56                          
    57                          ; -----------------------------------------------------------------------------
    58                          ; tmsPut: Send a byte of data to the TMS9918
    59                          ; -----------------------------------------------------------------------------
    60                          !macro tmsPut .byte {
    61                                  lda #(.byte & 0xff)
    62                                  +tmsPut
    63                          }
    64                          
    65                          
    66                          ; -----------------------------------------------------------------------------
    67                          ; tmsPut: Send a byte (A) of data to the TMS9918
    68                          ; -----------------------------------------------------------------------------
    69                          !macro tmsPut {
    70                                  sta TMS9918_RAM
    71                                  +tmsWaitData
    72                          }
    73                          
    74                          ; -----------------------------------------------------------------------------
    75                          ; tmsSetColor: Set current fg/bg color
    76                          ; -----------------------------------------------------------------------------
    77                          !macro tmsSetColor .color {
    78                                  lda #.color
    79                                  jsr tmsSetBackground
    80                          }
    81                          
    82                          ; -----------------------------------------------------------------------------
    83                          ; tmsSetColorFgBg: Set current fg/bg color
    84                          ; -----------------------------------------------------------------------------
    85                          !macro tmsSetColorFgBg .fg, .bg {
    86                                  +tmsColorFgBg .fg, .bg
    87                                  jsr tmsSetBackground
    88                          }
    89                          
    90                          ; -----------------------------------------------------------------------------
    91                          ; byteTmsColorFgBg: Output a data byte
    92                          ; -----------------------------------------------------------------------------
    93                          !macro byteTmsColorFgBg .fg, .bg {
    94                          !byte (.fg << 4 | .bg)
    95                          }
    96                          
    97                          
    98                          ; -----------------------------------------------------------------------------
    99                          ; tmsDisableOutput: Disable the TMS9918 output
   100                          ; -----------------------------------------------------------------------------
   101                          !macro tmsDisableOutput {
   102                                  lda #TMS_R1_DISP_ACTIVE
   103                                  jsr tmsReg1ClearFields
   104                          }
   105                          
   106                          ; -----------------------------------------------------------------------------
   107                          ; tmsEnableOutput: Enable the TMS9918 output
   108                          ; -----------------------------------------------------------------------------
   109                          !macro tmsEnableOutput {
   110                                  lda #TMS_R1_DISP_ACTIVE
   111                                  jsr tmsReg1SetFields
   112                          }
   113                          
   114                          ; -
   115                          !macro tmsEnableInterrupts {
   116                                  lda #TMS_R1_INT_ENABLE
   117                                  jsr tmsReg1SetFields
   118                          }
   119                          
   120                          !macro tmsDisableInterrupts {
   121                                  lda #TMS_R1_INT_ENABLE
   122                                  jsr tmsReg1ClearFields
   123                          }
   124                          
   125                          !macro tmsConsoleOut .char {
   126                                  lda #.char
   127                                  jsr tmsConsoleOut
   128                          }
   129                          
   130                          
   131                          ; -----------------------------------------------------------------------------
   132                          ; tmsConsolePrintAddr: Print text to console
   133                          ; -----------------------------------------------------------------------------
   134                          ; Inputs:
   135                          ;  textAddr: Address of null-terminated string to print
   136                          ; -----------------------------------------------------------------------------
   137                          !macro tmsConsolePrintAddr .textAddr {
   138                                  lda #<.textAddr
   139                                  sta STR_ADDR_L
   140                                  lda #>.textAddr
   141                                  sta STR_ADDR_H
   142                                  jsr tmsConsolePrint        
   143                          }
   144                          
   145                          ; -----------------------------------------------------------------------------
   146                          ; tmsConsolePrint: Print immediate text to console
   147                          ; -----------------------------------------------------------------------------
   148                          ; Inputs:
   149                          ;  str: String to print
   150                          ; -----------------------------------------------------------------------------
   151                          !macro tmsConsolePrint .str {
   152                                  jmp .afterText
   153                          .textAddr
   154                                  !text .str,0
   155                          .afterText        
   156                                  +tmsConsolePrintAddr .textAddr
   157                          }
   158                          
   159                          ; -----------------------------------------------------------------------------
   160                          ; +tmsColorFgBg: Set A to the given FG / BG color
   161                          ; -----------------------------------------------------------------------------
   162                          !macro tmsColorFgBg .fg, .bg {
   163                                  lda #(.fg << 4 | .bg)
   164                          }
   165                          
   166                          ; -----------------------------------------------------------------------------
   167                          ; tmsReadStatus: Read status - clear interrupt
   168                          ; -----------------------------------------------------------------------------
   169                          !macro tmsReadStatus  {
   170                                  bit TMS9918_REG
   171                          }
   172                          
   173                          ; -----------------------------------------------------------------------------
   174                          ; tmsSendData: Send # bytes from .sourceAddr to tms9918 data port
   175                          ; -----------------------------------------------------------------------------
   176                          !macro tmsSendData .sourceAddr, .numBytes {
   177                                  lda #<.sourceAddr
   178                                  sta TMS_TMP_ADDRESS
   179                                  lda #>.sourceAddr
   180                                  sta TMS_TMP_ADDRESS + 1
   181                          
   182                                  !if .numBytes < 256 {
   183                                          ldx #.numBytes
   184                                          jsr tmsSendBytes
   185                                  } else {
   186                                          !do while .numBytes > 0 {
   187                                                  !if .numBytes > 255 {
   188                                                          ldx #0
   189                                                          !set .numBytes = .numBytes - 256
   190                                                  } else {
   191                                                          ldx #.numBytes
   192                                                          !set .numBytes = 0
   193                                                  }
   194                                                  jsr tmsSendBytes
   195                                                  inc TMS_TMP_ADDRESS + 1
   196                                          }
   197                                  }
   198                          
   199                          }
   200                          
   201                          ; -----------------------------------------------------------------------------
   202                          ; tmsSendDataRpt: Send # bytes from .sourceAddr to tms9918 data port .rpt times
   203                          ; -----------------------------------------------------------------------------
   204                          !macro tmsSendDataRpt .sourceAddr, .numBytes, .rpt {
   205                                  lda #<.sourceAddr
   206                                  sta TMS_TMP_ADDRESS
   207                                  lda #>.sourceAddr
   208                                  sta TMS_TMP_ADDRESS + 1
   209                          
   210                                  !if .numBytes < 256 {
   211                                          !if .rpt < 5 {
   212                                                  !for i,1,.rpt {
   213                                                          ldx #.numBytes
   214                                                          jsr tmsSendBytes
   215                                                  }
   216                                          } else {
   217                                                  lda #.rpt
   218                                                  sta TMS9918_TMP_BUFFER
   219                          -
   220                                                  ldx #.numBytes
   221                                                  jsr tmsSendBytes
   222                                                  dec TMS9918_TMP_BUFFER
   223                                                  bne -
   224                                          }
   225                                  } else {
   226                                          !error "tmsSendDataRpt supports <256 bytes only"
   227                                  }
   228                          }
   229                          
   230                          
   231                          ; -----------------------------------------------------------------------------
   232                          ; tmsPutRpt: Send value .rpt times
   233                          ; -----------------------------------------------------------------------------
   234                          !macro tmsPutRpt .value, .rpt {
   235                                  ldx #.rpt
   236                                  lda #.value
   237                          -
   238                                  +tmsPut
   239                                  dex
   240                                  bne -
   241                          }
   242                          
   243                          !macro tmsPutSeq .from, .count {
   244                                  lda #.from
   245                          -
   246                                  +tmsPut
   247                                  inc
   248                                  cmp #<(.from + .count)
   249                                  bne -
   250                          }
   251                          
   252                          !macro tmsSetSourceAddressInd .addr {
   253                                  lda .addr
   254                                  sta TMS_TMP_ADDRESS
   255                                  lda .addr + 1
   256                                  sta TMS_TMP_ADDRESS + 1
   257                          }
   258                          
   259                          !macro tmsSetSourceAddressIndOffset .addr, .offset {
   260                                  clc
   261                                  lda .addr
   262                                  adc #<.offset
   263                                  sta TMS_TMP_ADDRESS
   264                                  lda .addr + 1
   265                                  adc #>.offset
   266                                  sta TMS_TMP_ADDRESS + 1
   267                          }
   268                          
   269                          
   270                          !macro tmsSendBytes .bytes {
   271                                  ldx #.bytes
   272                                  jsr tmsSendBytes
   273                          }
   274                          
   275                          
   276                          ; -----------------------------------------------------------------------------
   277                          ; tmsSetAddrPattTable: Initialise address for font table
   278                          ; -----------------------------------------------------------------------------
   279                          !macro tmsSetAddrPattTable {
   280                                  +tmsSetAddrPattTable 0
   281                          }
   282                          
   283                          ; -----------------------------------------------------------------------------
   284                          ; tmsSetAddrPattTable: Initialise address for pattern table
   285                          ; -----------------------------------------------------------------------------
   286                          !macro tmsSetAddrPattTable .ind {
   287                                  +tmsSetAddressWrite TMS_VRAM_PATT_ADDRESS + (8 * .ind)
   288                          }
   289                          
   290                          ; -----------------------------------------------------------------------------
   291                          ; tmsSetAddrPattTable: Initialise address for pattern table
   292                          ; -----------------------------------------------------------------------------
   293                          !macro tmsSetAddrPattTable .ind, .row {
   294                                  +tmsSetAddressWrite TMS_VRAM_PATT_ADDRESS + (8 * .ind) + .row
   295                          }
   296                          
   297                          ; -----------------------------------------------------------------------------
   298                          ; tmsSetAddrPattTableIIBank0: Initialise address for pattern table
   299                          ; -----------------------------------------------------------------------------
   300                          !macro tmsSetAddrPattTableIIBank0 .ind {
   301                                  +tmsSetAddrPattTable .ind
   302                          }
   303                          
   304                          ; -----------------------------------------------------------------------------
   305                          ; tmsSetAddrPattTableIIBank1: Initialise address for pattern table
   306                          ; -----------------------------------------------------------------------------
   307                          !macro tmsSetAddrPattTableIIBank1 .ind {
   308                                  +tmsSetAddrPattTable 256 + .ind
   309                          }
   310                          
   311                          ; -----------------------------------------------------------------------------
   312                          ; tmsSetAddrPattTableIIBank2: Initialise address for pattern table
   313                          ; -----------------------------------------------------------------------------
   314                          !macro tmsSetAddrPattTableIIBank2 .ind {
   315                                  +tmsSetAddrPattTable 512 + .ind
   316                          }
   317                          
   318                          ; -----------------------------------------------------------------------------
   319                          ; tmsSetAddrPattTableRead: Initialise address for pattern table to read
   320                          ; -----------------------------------------------------------------------------
   321                          !macro tmsSetAddrPattTableRead .ind {
   322                                  +tmsSetAddressRead TMS_VRAM_PATT_ADDRESS + (8 * .ind)
   323                          }
   324                          
   325                          ; -----------------------------------------------------------------------------
   326                          ; tmsSetAddrPattTableRowRead: Initialise address for pattern table to read
   327                          ; -----------------------------------------------------------------------------
   328                          !macro tmsSetAddrPattTableRead .ind, .row {
   329                                  +tmsSetAddressRead TMS_VRAM_PATT_ADDRESS + (8 * .ind) + .row
   330                          }
   331                          
   332                          ; -----------------------------------------------------------------------------
   333                          ; tmsUpdateFont: Update the pattern table with a given font
   334                          ; -----------------------------------------------------------------------------
   335                          !macro tmsUpdateFont .fontAddr {
   336                                  +tmsSetAddrPattTable 32
   337                                  +tmsSendData .fontAddr, $300
   338                          }
   339                          
   340                          ; -----------------------------------------------------------------------------
   341                          ; tmsSetAddrNameTable: Initialise address for base (text) table
   342                          ; -----------------------------------------------------------------------------
   343                          !macro tmsSetAddrNameTable {
   344                                  +tmsSetAddressWrite TMS_VRAM_NAME_ADDRESS
   345                          }
   346                          
   347                          ; -----------------------------------------------------------------------------
   348                          ; tmsSetAddrColorTable: Initialise address for color table
   349                          ; -----------------------------------------------------------------------------
   350                          !macro tmsSetAddrColorTable {
   351                                  +tmsSetAddressWrite TMS_VRAM_COLOR_ADDRESS
   352                          }
   353                          
   354                          ; -----------------------------------------------------------------------------
   355                          ; tmsSetAddrColorTable: Initialise address for color table index
   356                          ; -----------------------------------------------------------------------------
   357                          !macro tmsSetAddrColorTable .ind {
   358                                  +tmsSetAddressWrite TMS_VRAM_COLOR_ADDRESS + .ind
   359                          }
   360                          
   361                          ; -----------------------------------------------------------------------------
   362                          ; tmsSetAddrColorTableII: Initialise address for color table index (mode II)
   363                          ; -----------------------------------------------------------------------------
   364                          !macro tmsSetAddrColorTableII .ind {
   365                                  +tmsSetAddressWrite TMS_VRAM_COLOR_ADDRESS + .ind * 8
   366                          }
   367                          
   368                          ; -----------------------------------------------------------------------------
   369                          ; tmsSetAddrColorTableIIBank0: Initialise address for color table index (mode II)
   370                          ; -----------------------------------------------------------------------------
   371                          !macro tmsSetAddrColorTableIIBank0 .ind {
   372                                  +tmsSetAddrColorTableII .ind
   373                          }
   374                          
   375                          ; -----------------------------------------------------------------------------
   376                          ; tmsSetAddrColorTableIIBank1: Initialise address for color table index (mode II)
   377                          ; -----------------------------------------------------------------------------
   378                          !macro tmsSetAddrColorTableIIBank1 .ind {
   379                                  +tmsSetAddrColorTableII 256 + .ind
   380                          }
   381                          
   382                          ; -----------------------------------------------------------------------------
   383                          ; tmsSetAddrColorTableIIBank2: Initialise address for color table index (mode II)
   384                          ; -----------------------------------------------------------------------------
   385                          !macro tmsSetAddrColorTableIIBank2 .ind {
   386                                  +tmsSetAddrColorTableII 512 + .ind
   387                          }
   388                          
   389                          ; -----------------------------------------------------------------------------
   390                          ; tmsSetAddrSpriteAttrTable: Initialise address for sprite attributes table
   391                          ; -----------------------------------------------------------------------------
   392                          !macro tmsSetAddrSpriteAttrTable {
   393                                  +tmsSetAddrSpriteAttrTable 0
   394                          }
   395                          
   396                          ; -----------------------------------------------------------------------------
   397                          ; tmsSetAddrSpriteAttrTable: Initialise address for sprite attributes table
   398                          ; -----------------------------------------------------------------------------
   399                          !macro tmsSetAddrSpriteAttrTable .index {
   400                                  +tmsSetAddressWrite TMS_VRAM_SPRITE_ATTR_ADDRESS + .index * 4
   401                          }
   402                          
   403                          ; -----------------------------------------------------------------------------
   404                          ; tmsSetAddrSpritePattTable: Initialise address for sprite pattern table
   405                          ; -----------------------------------------------------------------------------
   406                          !macro tmsSetAddrSpritePattTable {
   407                                  +tmsSetAddrSpritePattTable 0
   408                          }
   409                          
   410                          ; -----------------------------------------------------------------------------
   411                          ; tmsSetAddrSpritePattTable: Initialise address for sprite pattern table
   412                          ; -----------------------------------------------------------------------------
   413                          !macro tmsSetAddrSpritePattTable .index {
   414                                  +tmsSetAddressWrite TMS_VRAM_SPRITE_PATT_ADDRESS + .index * 8
   415                          }
   416                          
   417                          
   418                          ; -----------------------------------------------------------------------------
   419                          ; tmsCreateSpritePattern: Create a sprite pattern (.spriteDataAddr is 8 bytes)
   420                          ; -----------------------------------------------------------------------------
   421                          !macro tmsCreateSpritePattern .pattInd, .spriteDataAddr {
   422                          
   423                                  
   424                          
   425                                  ; sprite pattern table
   426                                  +tmsSetAddrSpritePattTable .pattInd
   427                          
   428                                  ldx #0
   429                          -
   430                                  lda .spriteDataAddr,x
   431                                  +tmsPut
   432                                  inx
   433                                  cpx #8
   434                          
   435                                  
   436                          
   437                                  bne -
   438                          }
   439                          
   440                          ; -----------------------------------------------------------------------------
   441                          ; tmsCreateSpritePatternQuad: Create a (size 1) sprite pattern 
   442                          ;   (.spriteDataAddr is 32 bytes)
   443                          ; -----------------------------------------------------------------------------
   444                          !macro tmsCreateSpritePatternQuad .pattInd, .spriteDataAddr {
   445                          
   446                                  
   447                          
   448                                  ; sprite pattern table
   449                                  +tmsSetAddrSpritePattTable .pattInd * 4
   450                          
   451                                  ldx #0
   452                          -
   453                                  lda .spriteDataAddr,x
   454                                  +tmsPut 
   455                                  inx
   456                                  cpx #32
   457                          
   458                                  
   459                          
   460                                  bne -
   461                          }
   462                          
   463                          
   464                          !macro tmsCreateSpritePatternImm .ind, .b0, .b1, .b2, .b3, .b4, .b5, .b6, .b7 {
   465                          
   466                                  ; sprite pattern table
   467                                  +tmsSetAddrSpritePattTable .ind
   468                                  +tmsPut .b0
   469                                  +tmsPut .b2
   470                                  +tmsPut .b2
   471                                  +tmsPut .b3
   472                                  +tmsPut .b4
   473                                  +tmsPut .b5
   474                                  +tmsPut .b6
   475                                  +tmsPut .b7
   476                          }
   477                          
   478                          !macro tmsCreatePatternImm .ind, .b0, .b1, .b2, .b3, .b4, .b5, .b6, .b7 {
   479                          
   480                                  ; sprite pattern table
   481                                  +tmsSetAddrPattTable .ind
   482                                  +tmsPut .b0
   483                                  +tmsPut .b2
   484                                  +tmsPut .b2
   485                                  +tmsPut .b3
   486                                  +tmsPut .b4
   487                                  +tmsPut .b5
   488                                  +tmsPut .b6
   489                                  +tmsPut .b7
   490                          }
   491                          
   492                          
   493                          ; -----------------------------------------------------------------------------
   494                          ; tmsCreateSprite: Create a sprite
   495                          ; -----------------------------------------------------------------------------
   496                          !macro tmsCreateSprite .ind, .pattInd, .xPos, .yPos, .color {
   497                          
   498                                  ; sprite attr table
   499                                  +tmsSetAddrSpriteAttrTable .ind
   500                          
   501                                  +tmsPut .yPos
   502                                  +tmsPut .xPos
   503                                  +tmsPut .pattInd
   504                                  +tmsPut .color
   505                          }
   506                          
   507                          ; -----------------------------------------------------------------------------
   508                          ; tmsSpritePos: Set a sprite position
   509                          ; -----------------------------------------------------------------------------
   510                          !macro tmsSpritePos .ind, .xPos, .yPos {
   511                                  
   512                          
   513                                  ; sprite attr table
   514                                  +tmsSetAddrSpriteAttrTable .ind
   515                          
   516                                  +tmsPut .yPos
   517                                  +tmsPut .xPos        
   518                          }
   519                          
   520                          
   521                          ; -----------------------------------------------------------------------------
   522                          ; tmsSetLastSprite: Mark a sprite as the last sprite (set next ypos to )
   523                          ; -----------------------------------------------------------------------------
   524                          !macro tmsSetLastSprite .ind {
   525                                  +tmsSpritePos .ind + 1, 0, $d0
   526                          }
   527                          
   528                          
   529                          ; -----------------------------------------------------------------------------
   530                          ; tmsSpritePosXYReg: Set a sprite position from x/y registers
   531                          ; -----------------------------------------------------------------------------
   532                          !macro tmsSpritePosXYReg .ind {
   533                                  
   534                          
   535                                  ; sprite attr table
   536                                  +tmsSetAddrSpriteAttrTable .ind
   537                          
   538                                  tya
   539                                  +tmsPut 
   540                                  txa
   541                                  +tmsPut 
   542                          }
   543                          
   544                          
   545                          ; -----------------------------------------------------------------------------
   546                          ; tmsSetAddrSpriteColor: Change a sprite color
   547                          ; -----------------------------------------------------------------------------
   548                          !macro tmsSetAddrSpriteColor .ind {
   549                          
   550                                  ; sprite attr table
   551                                  +tmsSetAddressWrite TMS_VRAM_SPRITE_ATTR_ADDRESS + (.ind * 4) + 3
   552                          }
   553                          ; -----------------------------------------------------------------------------
   554                          ; tmsSpriteColor: Change a sprite color
   555                          ; -----------------------------------------------------------------------------
   556                          !macro tmsSpriteColor .ind, .color {
   557                          
   558                                  +tmsSetAddrSpriteColor .ind
   559                          
   560                                  +tmsPut .color
   561                          }
   562                          
   563                          
   564                          ; -----------------------------------------------------------------------------
   565                          ; tmsSetPosWrite: Set cursor position
   566                          ; -----------------------------------------------------------------------------
   567                          !macro tmsSetPosWrite .x, .y {
   568                                  +tmsSetAddressWrite (TMS_VRAM_NAME_ADDRESS + .y * 32 + .x)
   569                          }
   570                          
   571                          ; -----------------------------------------------------------------------------
   572                          ; tmsSetPosRead: Set read cursor position
   573                          ; -----------------------------------------------------------------------------
   574                          !macro tmsSetPosRead .x, .y {
   575                                  +tmsSetAddressRead (TMS_VRAM_NAME_ADDRESS + .y * 32 + .x)
   576                          }
   577                          
   578                          ; -----------------------------------------------------------------------------
   579                          ; tmsPrint: Print immediate text
   580                          ; -----------------------------------------------------------------------------
   581                          ; Inputs:
   582                          ;  str: String to print
   583                          ;  x: x position
   584                          ;  y: y position
   585                          ; -----------------------------------------------------------------------------
   586                          !macro tmsPrint .str, .x, .y {
   587                                  jmp .afterText
   588                          .textAddr
   589                                  !text .str,0
   590                          .afterText        
   591                          
   592                                  +tmsSetPosWrite .x, .y
   593                          
   594                                  lda #<.textAddr
   595                                  sta STR_ADDR_L
   596                                  lda #>.textAddr
   597                                  sta STR_ADDR_H
   598                                  jsr tmsPrint        
   599                          }
   600                          
   601                          
   602                          ; -----------------------------------------------------------------------------
   603                          ; tmsPrintCentre: Print centre-aligned immediate text
   604                          ; -----------------------------------------------------------------------------
   605                          ; Inputs:
   606                          ;  str: String to print
   607                          ;  y: y position
   608                          ; -----------------------------------------------------------------------------
   609                          !macro tmsPrintCentre .str, .y {
   610                                  jmp .afterText
   611                          .textAddr
   612                                  !text .str,0
   613                          .afterText        
   614                          
   615                                  +tmsSetPosWrite (32 - ((.afterText - 1) - .textAddr)) / 2, .y
   616                          
   617                                  lda #<.textAddr
   618                                  sta STR_ADDR_L
   619                                  lda #>.textAddr
   620                                  sta STR_ADDR_H
   621                                  jsr tmsPrint        
   622                          }
   623                          
   624                          
   625                          ; -----------------------------------------------------------------------------
   626                          ; tmsPrintZ: Print text
   627                          ; -----------------------------------------------------------------------------
   628                          ; Inputs:
   629                          ;  str: Address of zero-terminated string to print
   630                          ;  x: x position
   631                          ;  y: y position
   632                          ; -----------------------------------------------------------------------------
   633                          !macro tmsPrintZ .textAddr, .x, .y {
   634                                  +tmsSetPosWrite .x, .y
   635                          
   636                                  lda #<.textAddr
   637                                  sta STR_ADDR_L
   638                                  lda #>.textAddr
   639                                  sta STR_ADDR_H
   640                                  jsr tmsPrint        
   641                          }

; ******** Source: ../lib\gfx\tms9918.asm
    14                          
    15                          TMS_FONT_DATA:

; ******** Source: ../lib\gfx\fonts\hbc56font.asm
     1                          ; 6502 - HBC-56 Font
     2                          ;
     3                          ; Copyright (c) 2021 Troy Schrapel
     4                          ;
     5                          ; This code is licensed under the MIT license
     6                          ;
     7                          ; https://github.com/visrealm/hbc-56
     8                          ;
     9                          
    10                          
    11                          
    12                          
    13                          
    14                          
    15                          
    16                          
    17                          
    18                          
    19                          
    20                          
    21                          
    22                          
    23                          
    24                          
    25                          
    26                          
    27                          
    28                          
    29                          
    30                          
    31                          
    32  e269 0000000000000000   !byte $00,$00,$00,$00,$00,$00,$00,$00 ; <SPACE>
    33  e271 1818181818001800   !byte $18,$18,$18,$18,$18,$00,$18,$00 ; !
    34  e279 6c6c6c0000000000   !byte $6C,$6C,$6C,$00,$00,$00,$00,$00 ; "
    35  e281 6c6cfe6cfe6c6c00   !byte $6C,$6C,$FE,$6C,$FE,$6C,$6C,$00 ; #
    36  e289 187ec07c06fc1800   !byte $18,$7E,$C0,$7C,$06,$FC,$18,$00 ; $
    37  e291 00c6cc183066c600   !byte $00,$C6,$CC,$18,$30,$66,$C6,$00 ; %
    38  e299 386c3876dccc7600   !byte $38,$6C,$38,$76,$DC,$CC,$76,$00 ; &
    39  e2a1 3030600000000000   !byte $30,$30,$60,$00,$00,$00,$00,$00 ; '
    40  e2a9 0c18303030180c00   !byte $0C,$18,$30,$30,$30,$18,$0C,$00 ; (
    41  e2b1 30180c0c0c183000   !byte $30,$18,$0C,$0C,$0C,$18,$30,$00 ; )
    42  e2b9 00663cff3c660000   !byte $00,$66,$3C,$FF,$3C,$66,$00,$00 ; *
    43  e2c1 0018187e18180000   !byte $00,$18,$18,$7E,$18,$18,$00,$00 ; +
    44  e2c9 0000000000181830   !byte $00,$00,$00,$00,$00,$18,$18,$30 ; ,
    45  e2d1 0000007e00000000   !byte $00,$00,$00,$7E,$00,$00,$00,$00 ; -
    46  e2d9 0000000000181800   !byte $00,$00,$00,$00,$00,$18,$18,$00 ; .
    47  e2e1 060c183060c08000   !byte $06,$0C,$18,$30,$60,$C0,$80,$00 ; /
    48  e2e9 7ccedef6e6c67c00   !byte $7C,$CE,$DE,$F6,$E6,$C6,$7C,$00 ; 0
    49  e2f1 1838181818187e00   !byte $18,$38,$18,$18,$18,$18,$7E,$00 ; 1
    50  e2f9 7cc6067cc0c0fe00   !byte $7C,$C6,$06,$7C,$C0,$C0,$FE,$00 ; 2
    51  e301 fc06063c0606fc00   !byte $FC,$06,$06,$3C,$06,$06,$FC,$00 ; 3
    52  e309 0cccccccfe0c0c00   !byte $0C,$CC,$CC,$CC,$FE,$0C,$0C,$00 ; 4
    53  e311 fec0fc0606c67c00   !byte $FE,$C0,$FC,$06,$06,$C6,$7C,$00 ; 5
    54  e319 7cc0c0fcc6c67c00   !byte $7C,$C0,$C0,$FC,$C6,$C6,$7C,$00 ; 6
    55  e321 fe06060c18303000   !byte $FE,$06,$06,$0C,$18,$30,$30,$00 ; 7
    56  e329 7cc6c67cc6c67c00   !byte $7C,$C6,$C6,$7C,$C6,$C6,$7C,$00 ; 8
    57  e331 7cc6c67e06067c00   !byte $7C,$C6,$C6,$7E,$06,$06,$7C,$00 ; 9
    58  e339 0018180000181800   !byte $00,$18,$18,$00,$00,$18,$18,$00 ; :
    59  e341 0018180000181830   !byte $00,$18,$18,$00,$00,$18,$18,$30 ; ;
    60  e349 0c18306030180c00   !byte $0C,$18,$30,$60,$30,$18,$0C,$00 ; <
    61  e351 00007e007e000000   !byte $00,$00,$7E,$00,$7E,$00,$00,$00 ; =
    62  e359 30180c060c183000   !byte $30,$18,$0C,$06,$0C,$18,$30,$00 ; >
    63  e361 3c660c1818001800   !byte $3C,$66,$0C,$18,$18,$00,$18,$00 ; ?
    64  e369 7cc6dededec07e00   !byte $7C,$C6,$DE,$DE,$DE,$C0,$7E,$00 ; @
    65  e371 386cc6c6fec6c600   !byte $38,$6C,$C6,$C6,$FE,$C6,$C6,$00 ; A
    66  e379 fcc6c6fcc6c6fc00   !byte $FC,$C6,$C6,$FC,$C6,$C6,$FC,$00 ; B
    67  e381 7cc6c0c0c0c67c00   !byte $7C,$C6,$C0,$C0,$C0,$C6,$7C,$00 ; C
    68  e389 f8ccc6c6c6ccf800   !byte $F8,$CC,$C6,$C6,$C6,$CC,$F8,$00 ; D
    69  e391 fec0c0f8c0c0fe00   !byte $FE,$C0,$C0,$F8,$C0,$C0,$FE,$00 ; E
    70  e399 fec0c0f8c0c0c000   !byte $FE,$C0,$C0,$F8,$C0,$C0,$C0,$00 ; F
    71  e3a1 7cc6c0c0cec67c00   !byte $7C,$C6,$C0,$C0,$CE,$C6,$7C,$00 ; G
    72  e3a9 c6c6c6fec6c6c600   !byte $C6,$C6,$C6,$FE,$C6,$C6,$C6,$00 ; H
    73  e3b1 7e18181818187e00   !byte $7E,$18,$18,$18,$18,$18,$7E,$00 ; I
    74  e3b9 0606060606c67c00   !byte $06,$06,$06,$06,$06,$C6,$7C,$00 ; J
    75  e3c1 c6ccd8f0d8ccc600   !byte $C6,$CC,$D8,$F0,$D8,$CC,$C6,$00 ; K
    76  e3c9 c0c0c0c0c0c0fe00   !byte $C0,$C0,$C0,$C0,$C0,$C0,$FE,$00 ; L
    77  e3d1 c6eefefed6c6c600   !byte $C6,$EE,$FE,$FE,$D6,$C6,$C6,$00 ; M
    78  e3d9 c6e6f6decec6c600   !byte $C6,$E6,$F6,$DE,$CE,$C6,$C6,$00 ; N
    79  e3e1 7cc6c6c6c6c67c00   !byte $7C,$C6,$C6,$C6,$C6,$C6,$7C,$00 ; O
    80  e3e9 fcc6c6fcc0c0c000   !byte $FC,$C6,$C6,$FC,$C0,$C0,$C0,$00 ; P
    81  e3f1 7cc6c6c6d6de7c06   !byte $7C,$C6,$C6,$C6,$D6,$DE,$7C,$06 ; Q
    82  e3f9 fcc6c6fcd8ccc600   !byte $FC,$C6,$C6,$FC,$D8,$CC,$C6,$00 ; R
    83  e401 7cc6c07c06c67c00   !byte $7C,$C6,$C0,$7C,$06,$C6,$7C,$00 ; S
    84  e409 ff18181818181800   !byte $FF,$18,$18,$18,$18,$18,$18,$00 ; T
    85  e411 c6c6c6c6c6c6fe00   !byte $C6,$C6,$C6,$C6,$C6,$C6,$FE,$00 ; U
    86  e419 c6c6c6c6c67c3800   !byte $C6,$C6,$C6,$C6,$C6,$7C,$38,$00 ; V
    87  e421 c6c6c6c6d6fe6c00   !byte $C6,$C6,$C6,$C6,$D6,$FE,$6C,$00 ; W
    88  e429 c6c66c386cc6c600   !byte $C6,$C6,$6C,$38,$6C,$C6,$C6,$00 ; X
    89  e431 c6c6c67c1830e000   !byte $C6,$C6,$C6,$7C,$18,$30,$E0,$00 ; Y
    90  e439 fe060c183060fe00   !byte $FE,$06,$0C,$18,$30,$60,$FE,$00 ; Z
    91  e441 3c30303030303c00   !byte $3C,$30,$30,$30,$30,$30,$3C,$00 ; [
    92  e449 c06030180c060200   !byte $C0,$60,$30,$18,$0C,$06,$02,$00 ; \
    93  e451 3c0c0c0c0c0c3c00   !byte $3C,$0C,$0C,$0C,$0C,$0C,$3C,$00 ; ]
    94  e459 10386cc600000000   !byte $10,$38,$6C,$C6,$00,$00,$00,$00 ; ^
    95  e461 00000000000000ff   !byte $00,$00,$00,$00,$00,$00,$00,$FF ; _
    96  e469 18180c0000000000   !byte $18,$18,$0C,$00,$00,$00,$00,$00 ; `
    97  e471 00007c067ec67e00   !byte $00,$00,$7C,$06,$7E,$C6,$7E,$00 ; a
    98  e479 c0c0c0fcc6c6fc00   !byte $C0,$C0,$C0,$FC,$C6,$C6,$FC,$00 ; b
    99  e481 00007cc6c0c67c00   !byte $00,$00,$7C,$C6,$C0,$C6,$7C,$00 ; c
   100  e489 0606067ec6c67e00   !byte $06,$06,$06,$7E,$C6,$C6,$7E,$00 ; d
   101  e491 00007cc6fec07c00   !byte $00,$00,$7C,$C6,$FE,$C0,$7C,$00 ; e
   102  e499 1c36307830307800   !byte $1C,$36,$30,$78,$30,$30,$78,$00 ; f
   103  e4a1 00007ec6c67e06fc   !byte $00,$00,$7E,$C6,$C6,$7E,$06,$FC ; g
   104  e4a9 c0c0fcc6c6c6c600   !byte $C0,$C0,$FC,$C6,$C6,$C6,$C6,$00 ; h
   105  e4b1 1800381818183c00   !byte $18,$00,$38,$18,$18,$18,$3C,$00 ; i
   106  e4b9 060006060606c67c   !byte $06,$00,$06,$06,$06,$06,$C6,$7C ; j
   107  e4c1 c0c0ccd8f8ccc600   !byte $C0,$C0,$CC,$D8,$F8,$CC,$C6,$00 ; k
   108  e4c9 3818181818183c00   !byte $38,$18,$18,$18,$18,$18,$3C,$00 ; l
   109  e4d1 0000ccfefed6d600   !byte $00,$00,$CC,$FE,$FE,$D6,$D6,$00 ; m
   110  e4d9 0000fcc6c6c6c600   !byte $00,$00,$FC,$C6,$C6,$C6,$C6,$00 ; n
   111  e4e1 00007cc6c6c67c00   !byte $00,$00,$7C,$C6,$C6,$C6,$7C,$00 ; o
   112  e4e9 0000fcc6c6fcc0c0   !byte $00,$00,$FC,$C6,$C6,$FC,$C0,$C0 ; p
   113  e4f1 00007ec6c67e0606   !byte $00,$00,$7E,$C6,$C6,$7E,$06,$06 ; q
   114  e4f9 0000fcc6c0c0c000   !byte $00,$00,$FC,$C6,$C0,$C0,$C0,$00 ; r
   115  e501 00007ec07c06fc00   !byte $00,$00,$7E,$C0,$7C,$06,$FC,$00 ; s
   116  e509 18187e1818180e00   !byte $18,$18,$7E,$18,$18,$18,$0E,$00 ; t
   117  e511 0000c6c6c6c67e00   !byte $00,$00,$C6,$C6,$C6,$C6,$7E,$00 ; u
   118  e519 0000c6c6c67c3800   !byte $00,$00,$C6,$C6,$C6,$7C,$38,$00 ; v
   119  e521 0000c6c6d6fe6c00   !byte $00,$00,$C6,$C6,$D6,$FE,$6C,$00 ; w
   120  e529 0000c66c386cc600   !byte $00,$00,$C6,$6C,$38,$6C,$C6,$00 ; x
   121  e531 0000c6c6c67e06fc   !byte $00,$00,$C6,$C6,$C6,$7E,$06,$FC ; y
   122  e539 0000fe0c3860fe00   !byte $00,$00,$FE,$0C,$38,$60,$FE,$00 ; z
   123  e541 0e18187018180e00   !byte $0E,$18,$18,$70,$18,$18,$0E,$00 ; {
   124  e549 1818180018181800   !byte $18,$18,$18,$00,$18,$18,$18,$00 ; |
   125  e551 7018180e18187000   !byte $70,$18,$18,$0E,$18,$18,$70,$00 ; }
   126  e559 76dc000000000000   !byte $76,$DC,$00,$00,$00,$00,$00,$00 ; ~

; ******** Source: ../lib\gfx\tms9918.asm
    17  e561 ffffffffffffffff   
    18                          HAVE_TMS9918 = 1
    19                          
    20                          ; -------------------------
    21                          ; Constants
    22                          ; -------------------------
    23                          !ifndef TMS9918_IO_PORT { TMS9918_IO_PORT = $10
    24                                  !warn "TMS9918_IO_PORT not provided. Defaulting to ", TMS9918_IO_PORT
    25                          }
    26                          
    27                          !ifndef TMS9918_ZP_START { TMS9918_ZP_START = $30
    28                                  !warn "TMS9918_ZP_START not provided. Defaulting to ", TMS9918_ZP_START
    29                          }
    30                          
    31                          !ifndef TMS9918_RAM_START { TMS9918_RAM_START = $7ba0
    32                                  !warn "TMS9918_RAM_START not provided. Defaulting to ", TMS9918_RAM_START
    33                          }
    34                          
    35                          ; -----------------------------------------------------------------------------
    36                          ; Zero page
    37                          ; -----------------------------------------------------------------------------
    38                          TMS_TMP_ADDRESS         = TMS9918_ZP_START      ; 2 bytes
    39                          TMS9918_ZP_SIZE         = 2                     ; LAST ZP ADDRESS
    40                          
    41                          ; -----------------------------------------------------------------------------
    42                          ; High RAM
    43                          ; -----------------------------------------------------------------------------
    44                          .TMS9918_REG0_SHADOW_ADDR = TMS9918_RAM_START
    45                          .TMS9918_REG1_SHADOW_ADDR = TMS9918_RAM_START + 1
    46                          
    47                          TMS9918_CONSOLE_X         = TMS9918_RAM_START + 2
    48                          TMS9918_CONSOLE_Y         = TMS9918_RAM_START + 3
    49                          TMS9918_CONSOLE_SIZE_X    = TMS9918_RAM_START + 4
    50                          TMS9918_CONSOLE_LINE_LEN  = TMS9918_RAM_START + 5
    51                          .TMS9918_REGX             = TMS9918_RAM_START + 6
    52                          .TMS9918_REGY             = TMS9918_RAM_START + 7
    53                          .TMS9918_TMP_READ_ROW     = TMS9918_RAM_START + 8
    54                          .TMS9918_TMP_WRITE_ROW    = TMS9918_RAM_START + 9
    55                          
    56                          TMS9918_TMP_BUFFER        = TMS9918_RAM_START + 10 ; 40 bytes 
    57                          TMS9918_RAM_SIZE          = 50
    58                          
    59                          
    60                          
    61                          !if TMS9918_ZP_END < (TMS9918_ZP_START + TMS9918_ZP_SIZE) {
    62                                  !error "TMS9918_ZP requires ",TMS9918_ZP_SIZE," bytes. Allocated ",TMS9918_ZP_END - TMS9918_ZP_START
    63                          }
    64                          
    65                          !if TMS9918_RAM_END < (TMS9918_RAM_START + TMS9918_RAM_SIZE) {
    66                                  !error "TMS9918_RAM requires ",.TMS9918_RAM_SIZE," bytes. Allocated ",TMS9918_RAM_END - TMS9918_RAM_START
    67                          }
    68                          
    69                          
    70                          ; IO Ports
    71                          TMS9918_RAM     = IO_PORT_BASE_ADDRESS | TMS9918_IO_PORT
    72                          TMS9918_REG     = IO_PORT_BASE_ADDRESS | TMS9918_IO_PORT | $01
    73                          
    74                          
    75                          ; -----------------------------------------------------------------------------
    76                          ; VRAM addresses
    77                          ; -----------------------------------------------------------------------------
    78                          TMS_VRAM_NAME_ADDRESS           = $3800
    79                          TMS_VRAM_COLOR_ADDRESS          = $0000
    80                          TMS_VRAM_PATT_ADDRESS           = $2000
    81                          TMS_VRAM_SPRITE_ATTR_ADDRESS    = $3B00
    82                          TMS_VRAM_SPRITE_PATT_ADDRESS    = $1800
    83                          
    84                          ; -----------------------------------------------------------------------------
    85                          ; Register values
    86                          ; -----------------------------------------------------------------------------
    87                          TMS_R0_MODE_GRAPHICS_I          = $00
    88                          TMS_R0_MODE_GRAPHICS_II         = $02
    89                          TMS_R0_MODE_MULTICOLOR          = $00
    90                          TMS_R0_MODE_TEXT                = $00
    91                          TMS_R0_EXT_VDP_ENABLE           = $01
    92                          TMS_R0_EXT_VDP_DISABLE          = $00
    93                          
    94                          TMS_R1_RAM_16K                  = $80
    95                          TMS_R1_RAM_4K                   = $00
    96                          TMS_R1_DISP_BLANK               = $00
    97                          TMS_R1_DISP_ACTIVE              = $40
    98                          TMS_R1_INT_ENABLE               = $20
    99                          TMS_R1_INT_DISABLE              = $00
   100                          TMS_R1_MODE_GRAPHICS_I          = $00
   101                          TMS_R1_MODE_GRAPHICS_II         = $00
   102                          TMS_R1_MODE_MULTICOLOR          = $08
   103                          TMS_R1_MODE_TEXT                = $10
   104                          TMS_R1_SPRITE_8                 = $00
   105                          TMS_R1_SPRITE_16                = $02
   106                          TMS_R1_SPRITE_MAG1              = $00
   107                          TMS_R1_SPRITE_MAG2              = $01
   108                          
   109                          ; -----------------------------------------------------------------------------
   110                          ; Color palette
   111                          ; -----------------------------------------------------------------------------
   112                          TMS_TRANSPARENT         = $00
   113                          TMS_BLACK               = $01
   114                          TMS_MED_GREEN           = $02
   115                          TMS_LT_GREEN            = $03
   116                          TMS_DK_BLUE             = $04
   117                          TMS_LT_BLUE             = $05
   118                          TMS_DK_RED              = $06
   119                          TMS_CYAN                = $07
   120                          TMS_MED_RED             = $08
   121                          TMS_LT_RED              = $09
   122                          TMS_DK_YELLOW           = $0a
   123                          TMS_LT_YELLOW           = $0b
   124                          TMS_DK_GREEN            = $0c
   125                          TMS_MAGENTA             = $0d
   126                          TMS_GREY                = $0e
   127                          TMS_WHITE               = $0f
   128                          
   129                          TMS_GFX_TILE_WIDTH      = 8
   130                          TMS_GFX_TILE_HEIGHT     = 8
   131                          TMS_GFX_TILES_X         = 32
   132                          TMS_GFX_TILES_Y         = 24
   133                          TMS_GFX_PIXELS_X        = TMS_GFX_TILES_X * TMS_GFX_TILE_WIDTH
   134                          TMS_GFX_PIXELS_Y        = TMS_GFX_TILES_Y * TMS_GFX_TILE_HEIGHT
   135                          
   136                          TMS_TXT_TILE_WIDTH      = 6
   137                          TMS_TXT_TILE_HEIGHT     = 8
   138                          TMS_TXT_TILES_X         = 40
   139                          TMS_TXT_TILES_Y         = 24
   140                          TMS_TXT_PIXELS_X        = TMS_TXT_TILES_X * TMS_TXT_TILE_WIDTH
   141                          TMS_TXT_PIXELS_Y        = TMS_TXT_TILES_Y * TMS_TXT_TILE_HEIGHT
   142                          
   143                          TMS_SPRITE_SIZE         = 8
   144                          TMS_SPRITE_SIZE2X       = TMS_SPRITE_SIZE * 2
   145                          
   146                          !ifndef TMS_MODEL {
   147                                  !warn "Set TMS_MODEL to one of: 9918, 9929. Defaulting to 9918"
   148                                  TMS_MODEL = 9918
   149                          } 
   150                          
   151                          ; -------------------------
   152                          ; Constants
   153                          ; -------------------------
   154                          
   155                          !if TMS_MODEL = 9918 {
   156                                  TMS_FPS = 60
   157                          } else { !if TMS_MODEL = 9929 {
   158                                  TMS_FPS = 50
   159                          } else {
   160                                  !error "Unknown TMS_MODEL. Must be one of: 9918 or 9929"
   161                          }}
   162                          
   163                          ; -----------------------------------------------------------------------------
   164                          ; Default register values
   165                          ; -----------------------------------------------------------------------------
   166                          TMS_REGISTER_DATA:
   167  e569 00                 !byte TMS_R0_EXT_VDP_DISABLE
   168  e56a 80                 !byte TMS_R1_RAM_16K
   169  e56b 0e                 !byte TMS_VRAM_NAME_ADDRESS >> 10
   170  e56c 00                 !byte TMS_VRAM_COLOR_ADDRESS >> 6
   171  e56d 04                 !byte TMS_VRAM_PATT_ADDRESS >> 11
   172  e56e 76                 !byte TMS_VRAM_SPRITE_ATTR_ADDRESS >> 7
   173  e56f 03                 !byte TMS_VRAM_SPRITE_PATT_ADDRESS >> 11
   174  e570 11                 !byte TMS_BLACK << 4 | TMS_BLACK
   175                          
   176                          
   177                          ; -----------------------------------------------------------------------------
   178                          ; Delay subroutines required for TMS9918 CPU access windows
   179                          ; -----------------------------------------------------------------------------
   180                          ;      CONDITION          MODE    VDP DELAY       WAIT TIME          TOTAL TIME
   181                          ; -----------------------------------------------------------------------------
   182                          ;  Active Display Area   Text        2uS          0 - 1.1uS           2 - 3.1uS      
   183                          ;  Active Display Area   GFX I, II   2uS          0 - 5.95uS          2 - 8uS      
   184                          ;  4300uS after VSYNC    All         2uS             0uS                2uS      
   185                          ;  Reg 1 Blank Bit 0     All         2uS             0uS                2uS      
   186                          ;  Active Display Area   Multicolor  2uS          0 - 1.5uS           2 - 3.5uS      
   187                          ; -----------------------------------------------------------------------------
   188                          _tmsWaitData:
   189  e571 ea                         nop
   190  e572 ea                         nop
   191  e573 ea                         nop
   192  e574 ea                         nop
   193  e575 ea                         nop
   194  e576 ea                         nop
   195  e577 ea                         nop
   196  e578 ea                         nop
   197  e579 ea                         nop
   198                          _tmsWaitReg:
   199  e57a ea                         nop
   200  e57b ea                         nop
   201  e57c ea                         nop
   202  e57d 60                         rts
   203                          
   204                          tmsSetAddressNextRow:
   205  e57e a524                       lda TMS_TMP_ADDRESS
   206  e580 18                         clc
   207  e581 6920                       adc #32
   208  e583 8524                       sta TMS_TMP_ADDRESS
   209  e585 9002                       bcc +
   210  e587 e625                       inc TMS_TMP_ADDRESS + 1
   211                          +
   212  e589 60                         rts
   213                          
   214                          ; -----------------------------------------------------------------------------
   215                          ; tmsSetAddressWrite: Set an address in the TMS9918 
   216                          ; -----------------------------------------------------------------------------
   217                          ; TMS_TMP_ADDRESS: Address to set
   218                          ; -----------------------------------------------------------------------------
   219                          tmsSetAddressWrite:
   220  e58a 08                         php
   221  e58b 78                         sei                     ; we can't be interrupted here
   222  e58c a524                       lda TMS_TMP_ADDRESS
   223  e58e 8d117f                     sta TMS9918_REG
   224  e591 207ae5                     +tmsWaitReg
   225  e594 a525                       lda TMS_TMP_ADDRESS + 1
   226  e596 0940                       ora #$40
   227  e598 8d117f                     sta TMS9918_REG
   228  e59b 207ae5                     +tmsWaitReg
   229  e59e 28                         plp
   230  e59f 60                         rts
   231                          
   232                          ; -----------------------------------------------------------------------------
   233                          ; tmsSetAddressRead: Set an address to read from the TMS9918 
   234                          ; -----------------------------------------------------------------------------
   235                          ; TMS_TMP_ADDRESS: Address to read
   236                          ; -----------------------------------------------------------------------------
   237                          tmsSetAddressRead:
   238  e5a0 08                         php
   239  e5a1 78                         sei                     ; we can't be interrupted here
   240  e5a2 a524                       lda TMS_TMP_ADDRESS
   241  e5a4 8d117f                     sta TMS9918_REG
   242  e5a7 207ae5                     +tmsWaitReg
   243  e5aa a525                       lda TMS_TMP_ADDRESS + 1
   244  e5ac 8d117f                     sta TMS9918_REG
   245  e5af 207ae5                     +tmsWaitReg
   246  e5b2 28                         plp
   247  e5b3 60                         rts
   248                          
   249                          
   250                          ; -----------------------------------------------------------------------------
   251                          ; tmsSetRegister: Set a register value
   252                          ; -----------------------------------------------------------------------------
   253                          ; Inputs:
   254                          ;  A: The value to set
   255                          ;  X: The register (0 - 7)
   256                          ; -----------------------------------------------------------------------------
   257                          tmsSetRegister:
   258  e5b4 08                         php
   259  e5b5 78                         sei             ; we can't be interrupted here
   260  e5b6 8d117f                     sta TMS9918_REG
   261  e5b9 207ae5                     +tmsWaitReg
   262  e5bc 8a                         txa
   263  e5bd 0980                       ora #$80
   264  e5bf 8d117f                     sta TMS9918_REG
   265  e5c2 207ae5                     +tmsWaitReg
   266  e5c5 28                         plp
   267  e5c6 60                         rts
   268                          
   269                          ; -----------------------------------------------------------------------------
   270                          ; tmsSetBackground: Set the background color (R7)
   271                          ; -----------------------------------------------------------------------------
   272                          ; Outputs:
   273                          ;  A: Color. High nibble = FG. Low nibble = BG
   274                          ; -----------------------------------------------------------------------------
   275                          tmsSetBackground:
   276  e5c7 a207                       ldx #7
   277  e5c9 d0e9                       bne tmsSetRegister
   278                          
   279                          ; -----------------------------------------------------------------------------
   280                          ; tmsReg0Set: Set register 0
   281                          ; -----------------------------------------------------------------------------
   282                          ; Outputs:
   283                          ;  A: Field values to set (will be OR'd with existing Reg0)
   284                          ; -----------------------------------------------------------------------------
   285                          tmsReg0SetFields:
   286  e5cb 0d267b                     ora .TMS9918_REG0_SHADOW_ADDR
   287                          .tmsReg0SetFields:
   288  e5ce 8d267b                     sta .TMS9918_REG0_SHADOW_ADDR
   289  e5d1 a200                       ldx #0
   290  e5d3 f0df                       beq tmsSetRegister
   291                                  
   292                          ; -----------------------------------------------------------------------------
   293                          ; tmsReg0Clear: Clear register 0 
   294                          ; -----------------------------------------------------------------------------
   295                          ; Outputs:
   296                          ;  A: Field values to cleared (will be XOR'd with existing Reg0)
   297                          ; -----------------------------------------------------------------------------
   298                          tmsReg0ClearFields:
   299  e5d5 49ff                       eor #$ff
   300  e5d7 2d267b                     and .TMS9918_REG0_SHADOW_ADDR
   301  e5da 4ccee5                     jmp .tmsReg0SetFields
   302                          
   303                          
   304                          ; -----------------------------------------------------------------------------
   305                          ; tmsReg1Set: Set register 0
   306                          ; -----------------------------------------------------------------------------
   307                          ; Outputs:
   308                          ;  A: Field values to set (will be OR'd with existing Reg1)
   309                          ; -----------------------------------------------------------------------------
   310                          tmsReg1SetFields:
   311  e5dd 0d277b                     ora .TMS9918_REG1_SHADOW_ADDR
   312                          .tmsReg1SetFields:
   313  e5e0 8d277b                     sta .TMS9918_REG1_SHADOW_ADDR
   314  e5e3 a201                       ldx #1
   315  e5e5 d0cd                       bne tmsSetRegister
   316                                  
   317                          ; -----------------------------------------------------------------------------
   318                          ; tmsReg1Clear: Clear register 1
   319                          ; -----------------------------------------------------------------------------
   320                          ; Outputs:
   321                          ;  A: Field values to cleared (will be XOR'd with existing Reg1)
   322                          ; -----------------------------------------------------------------------------
   323                          tmsReg1ClearFields:
   324  e5e7 49ff                       eor #$ff
   325  e5e9 2d277b                     and .TMS9918_REG1_SHADOW_ADDR
   326  e5ec 4ce0e5                     jmp .tmsReg1SetFields
   327                          
   328                          
   329                          ; -----------------------------------------------------------------------------
   330                          ; tmsModeReset: Reset graphics Mode
   331                          ; -----------------------------------------------------------------------------
   332                          tmsModeReset:
   333  e5ef a903                       lda #$03
   334  e5f1 20d5e5                     jsr tmsReg0ClearFields
   335                          
   336  e5f4 a918                       lda #$18
   337  e5f6 20d5e5                     jsr tmsReg0ClearFields
   338                          
   339                                  ; if we were in Graphics II, then we need to reset
   340                                  ; the color and pattern table addresses
   341  e5f9 a900                       lda #0;(TMS_VRAM_COLOR_ADDRESS >> 6)
   342  e5fb a203                       ldx #3
   343  e5fd 20b4e5                     jsr tmsSetRegister
   344                          
   345  e600 a904                       lda #TMS_VRAM_PATT_ADDRESS >> 11
   346  e602 a204                       ldx #4
   347  e604 20b4e5                     jsr tmsSetRegister
   348  e607 60                         rts
   349                          
   350                          ; -----------------------------------------------------------------------------
   351                          ; tmsModeGraphicsI: Set up for Graphics I mode
   352                          ; -----------------------------------------------------------------------------
   353                          tmsModeGraphicsI:
   354  e608 20efe5                     jsr tmsModeReset
   355                          
   356  e60b a900                       lda #TMS_R0_MODE_GRAPHICS_I
   357  e60d 20cbe5                     jsr tmsReg0SetFields
   358                          
   359  e610 a900                       lda #TMS_R1_MODE_GRAPHICS_I
   360  e612 20dde5                     jsr tmsReg1SetFields
   361                          
   362  e615 a920                       lda #32
   363  e617 8d2a7b                     sta TMS9918_CONSOLE_SIZE_X
   364  e61a 60                         rts
   365                          
   366                          ; -----------------------------------------------------------------------------
   367                          ; tmsModeGraphicsII: Set up for Graphics II mode
   368                          ; -----------------------------------------------------------------------------
   369                          tmsModeGraphicsII:
   370  e61b 20efe5                     jsr tmsModeReset
   371                          
   372  e61e a902                       lda #TMS_R0_MODE_GRAPHICS_II
   373  e620 20cbe5                     jsr tmsReg0SetFields
   374                          
   375  e623 a900                       lda #TMS_R1_MODE_GRAPHICS_II
   376  e625 20dde5                     jsr tmsReg1SetFields
   377                          
   378                                  ; in Graphics II, Registers 3 and 4 work differently
   379                                  ;
   380                                  ; reg3 - Color table
   381                                  ;   $7f = $0000
   382                                  ;   $ff = $2000
   383                                  ;
   384                                  ; reg4 - Pattern table
   385                                  ;  $03 = $0000
   386                                  ;  $07 = $2000
   387                          
   388                                  ; set color table to $0000
   389  e628 a97f                       lda #$7f
   390  e62a a203                       ldx #3
   391  e62c 20b4e5                     jsr tmsSetRegister
   392                          
   393                                  ; set pattern table to $2000
   394  e62f a907                       lda #$07
   395  e631 a204                       ldx #4
   396  e633 20b4e5                     jsr tmsSetRegister
   397                          
   398  e636 a920                       lda #32
   399  e638 8d2a7b                     sta TMS9918_CONSOLE_SIZE_X
   400                          
   401  e63b 60                         rts
   402                          
   403                          ; -----------------------------------------------------------------------------
   404                          ; tmsModeText: Set up for Text mode
   405                          ; -----------------------------------------------------------------------------
   406                          tmsModeText:
   407  e63c 20efe5                     jsr tmsModeReset
   408                          
   409  e63f a900                       lda #TMS_R0_MODE_TEXT
   410  e641 20cbe5                     jsr tmsReg0SetFields
   411                          
   412  e644 a910                       lda #TMS_R1_MODE_TEXT
   413  e646 20dde5                     jsr tmsReg1SetFields
   414                          
   415  e649 a928                       lda #40
   416  e64b 8d2a7b                     sta TMS9918_CONSOLE_SIZE_X
   417                          
   418  e64e 60                         rts
   419                          
   420                          ; -----------------------------------------------------------------------------
   421                          ; tmsModeMulticolor: Set up for Multicolor mode
   422                          ; -----------------------------------------------------------------------------
   423                          tmsModeMulticolor:
   424  e64f 20efe5                     jsr tmsModeReset
   425                          
   426  e652 a900                       lda #TMS_R0_MODE_MULTICOLOR
   427  e654 20cbe5                     jsr tmsReg0SetFields
   428                          
   429  e657 a908                       lda #TMS_R1_MODE_MULTICOLOR
   430  e659 20dde5                     jsr tmsReg1SetFields
   431  e65c 60                         rts
   432                          
   433                          ; -----------------------------------------------------------------------------
   434                          ; tmsInit: Initialise the registers
   435                          ; -----------------------------------------------------------------------------
   436                          tmsInit:
   437  e65d 08                         php
   438  e65e 78                         sei                             ; we can't be interrupted here
   439  e65f ad69e5                     lda TMS_REGISTER_DATA
   440  e662 8d267b                     sta .TMS9918_REG0_SHADOW_ADDR
   441  e665 ad6ae5                     lda TMS_REGISTER_DATA + 1
   442  e668 8d277b                     sta .TMS9918_REG1_SHADOW_ADDR
   443                          
   444  e66b a900                       lda #0
   445  e66d 8d287b                     sta TMS9918_CONSOLE_X
   446  e670 8d297b                     sta TMS9918_CONSOLE_Y
   447                          
   448                                  ; set up the registers
   449  e673 a200                       ldx #0
   450                          
   451                          @regLoop
   452  e675 bd69e5                             lda TMS_REGISTER_DATA, x
   453  e678 8d117f                             sta TMS9918_REG
   454  e67b 207ae5                             +tmsWaitReg
   455  e67e 8a                                 txa
   456  e67f 0980                               ora #$80
   457  e681 8d117f                             sta TMS9918_REG
   458  e684 207ae5                             +tmsWaitReg
   459  e687 e8                                 inx
   460  e688 e008                               cpx #8
   461  e68a d0e9                               bne @regLoop
   462                                  
   463  e68c 2008e6                     jsr tmsModeGraphicsI
   464                          
   465                                  ; load all data into VRAM
   466  e68f 20f1e6                     jsr tmsInitPattTable
   467                          
   468  e692 2031e7                     jsr tmsInitTextTable
   469                                  
   470  e695 a917                       +tmsColorFgBg TMS_BLACK, TMS_CYAN
   471  e697 204ce7                     jsr tmsInitEntireColorTable
   472                          
   473  e69a 206de7                     jsr tmsInitSpriteTable
   474                          
   475  e69d 28                         plp
   476                                  
   477  e69e 60                         rts
   478                          
   479                          ; -----------------------------------------------------------------------------
   480                          ; _tmsSendPage: Send A for a kilobyte
   481                          ; -----------------------------------------------------------------------------
   482                          _tmsSendKb
   483  e69f 20a8e6                     jsr _tmsSendPage
   484  e6a2 20a8e6                     jsr _tmsSendPage
   485  e6a5 20a8e6                     jsr _tmsSendPage
   486                                  ; flow through
   487                                  
   488                          ; -----------------------------------------------------------------------------
   489                          ; _tmsSendPage: Send A for a whole page
   490                          ; -----------------------------------------------------------------------------
   491                          _tmsSendPage:
   492  e6a8 a220                       ldx #32
   493                          _tmsSendX8:
   494  e6aa 8d107f2071e5               +tmsPut
   495  e6b0 8d107f2071e5               +tmsPut
   496  e6b6 8d107f2071e5               +tmsPut
   497  e6bc 8d107f2071e5               +tmsPut
   498  e6c2 8d107f2071e5               +tmsPut
   499  e6c8 8d107f2071e5               +tmsPut
   500  e6ce 8d107f2071e5               +tmsPut
   501  e6d4 8d107f2071e5               +tmsPut
   502  e6da ca                         dex
   503  e6db d0cd                       bne _tmsSendX8
   504  e6dd 60                         rts
   505                          
   506                          ; -----------------------------------------------------------------------------
   507                          ; _tmsSendEmptyPage: Send an empty page of data
   508                          ; -----------------------------------------------------------------------------
   509                          _tmsSendEmptyPage:
   510  e6de a900                       lda #0
   511  e6e0 f0c6                       beq _tmsSendPage ; rts in here
   512                          
   513                          ; -----------------------------------------------------------------------------
   514                          ; tmsSendBytes: Send bytes to the TMS (up to 1 page)
   515                          ; -----------------------------------------------------------------------------
   516                          ; Inputs:
   517                          ;   TMS_TMP_ADDRESS:    Holds source address
   518                          ;   X:                  Number of bytes (1 to 256)
   519                          ; -----------------------------------------------------------------------------
   520                          tmsSendBytes:
   521  e6e2 a000                       ldy #0
   522                          -
   523  e6e4 b124                       lda (TMS_TMP_ADDRESS), Y
   524  e6e6 8d107f2071e5               +tmsPut
   525  e6ec c8                         iny
   526  e6ed ca                         dex
   527  e6ee d0f4                       bne -
   528  e6f0 60                         rts
   529                          
   530                          ; -----------------------------------------------------------------------------
   531                          ; tmsInitPattTable: Initialise the pattern table
   532                          ; -----------------------------------------------------------------------------
   533                          tmsInitPattTable:
   534                                  
   535                          
   536                                  ; pattern table
   537  e6f1 0878a9008d117f20...        +tmsSetAddrPattTable
   538                          
   539                                  ; (0 - 31) all empty
   540  e704 20dee6                     jsr _tmsSendEmptyPage
   541                          
   542  e707 a9698524a9e28525...        +tmsSendData TMS_FONT_DATA, $300
   543                          
   544                                  ; (128 - 159) all empty
   545  e724 20dee6                     jsr _tmsSendEmptyPage
   546                          
   547                                  ; (160 - 191) all empty
   548  e727 20dee6                     jsr _tmsSendEmptyPage
   549                          
   550                                  ; (192 - 223) all empty
   551  e72a 20dee6                     jsr _tmsSendEmptyPage
   552                          
   553                                  ; (224 - 255) all empty
   554  e72d 20dee6                     jsr _tmsSendEmptyPage
   555                          
   556                                  
   557                          
   558  e730 60                         rts
   559                          
   560                          ; -----------------------------------------------------------------------------
   561                          ; tmsInitTextTable: Initialise the text (tilemap) table
   562                          ; -----------------------------------------------------------------------------
   563                          tmsInitTextTable:
   564                                  
   565                          
   566                                  ; text table table
   567  e731 0878a9008d117f20...        +tmsSetAddrNameTable
   568                          
   569                          
   570  e744 a900                       lda #0
   571  e746 a27e                       ldx #(42 * 3)
   572  e748 20aae6                     jsr _tmsSendX8
   573                          
   574  e74b 60                         rts
   575                          
   576                          
   577                          ; -----------------------------------------------------------------------------
   578                          ; tmsInitEntireColorTable: Initialise the full color table
   579                          ; -----------------------------------------------------------------------------
   580                          ; Inputs:
   581                          ;   A: Color (fg/bg) to initialise
   582                          
   583                          tmsInitEntireColorTable:
   584  e74c a220                       ldx #32
   585                          
   586                          ; tmsInitColorTable: Initialise the color table
   587                          
   588                          ; Inputs:
   589                          ;   A: Color (fg/bg) to initialise
   590                          ;   X: Number of elements to initialise (1 to 32)
   591                          ; -----------------------------------------------------------------------------
   592                          tmsInitColorTable:
   593                                  
   594  e74e 48                         pha
   595                          
   596                                  ; color table
   597  e74f 0878a9008d117f20...        +tmsSetAddrColorTable
   598                          
   599  e762 68                         pla
   600                          -
   601  e763 8d107f2071e5               +tmsPut
   602  e769 ca                         dex
   603  e76a d0f7                       bne -
   604                          
   605  e76c 60                         rts
   606                          
   607                          ; -----------------------------------------------------------------------------
   608                          ; tmsInitSpriteTable: Initialise the sprite table
   609                          ; -----------------------------------------------------------------------------
   610                          tmsInitSpriteTable:
   611                                  
   612                          
   613                                  ; sprites table
   614  e76d 0878a9008d117f20...        +tmsSetAddrSpriteAttrTable
   615                          
   616  e780 a220                       ldx #32
   617                          -
   618                                  ; Vertical position
   619  e782 a9d08d107f2071e5           +tmsPut $D0        ; 208 ($D0) stops processing of sprites
   620  e78a a9008d107f2071e5           +tmsPut $00        ; Horizontal position
   621                          
   622                                  ; Index (A still 0)
   623  e792 8d107f2071e5               +tmsPut
   624                                  ; Early Clock / Color  (A still 0)
   625  e798 8d107f2071e5               +tmsPut
   626  e79e ca                         dex
   627  e79f d0e1                       bne -
   628                          
   629                                  
   630                          
   631  e7a1 60                         rts
   632                          
   633                          ; -----------------------------------------------------------------------------
   634                          ; tmsTileXyAtPixelXy: Return tile position at pixel position
   635                          ; -----------------------------------------------------------------------------
   636                          ; Inputs:
   637                          ;  X: Pixel position X
   638                          ;  Y: Pixel position Y
   639                          ; Outputs:
   640                          ;  X: Tile position X
   641                          ;  Y: Tile position Y
   642                          ; -----------------------------------------------------------------------------
   643                          tmsTileXyAtPixelXy:
   644  e7a2 48                         pha
   645  e7a3 8a                         txa
   646  e7a4 4a4a4a                     +div8
   647  e7a7 aa                         tax
   648                          
   649  e7a8 98                         tya
   650  e7a9 4a4a4a                     +div8
   651  e7ac a8                         tay
   652  e7ad 68                         pla
   653  e7ae 60                         rts
   654                          
   655                          ; -----------------------------------------------------------------------------
   656                          ; tmsHex8: Output an 8-bit byte as hexadecimal
   657                          ; -----------------------------------------------------------------------------
   658                          ; Inputs:
   659                          ;  A: The value to output
   660                          ; -----------------------------------------------------------------------------
   661                          tmsHex8:
   662  e7af 48                         pha
   663  e7b0 4a4a4a4a                   +lsr4
   664  e7b4 aa                         tax
   665  e7b5 bdcce7                     lda .H2, x
   666  e7b8 8d107f2071e5               +tmsPut 
   667  e7be 68                         pla
   668  e7bf 290f                       and #$0f
   669  e7c1 aa                         tax
   670  e7c2 bdcce7                     lda .H2, x
   671  e7c5 8d107f2071e5               +tmsPut 
   672                                  
   673  e7cb 60                         rts
   674                          
   675  e7cc 3031323334353637....H2 !text "0123456789abcdef"
   676                          
   677                          
   678                          ; -----------------------------------------------------------------------------
   679                          ; tmsSetSpriteTmpAddress: Set TMS_TMP_ADDRESS for a given sprite attributes
   680                          ; -----------------------------------------------------------------------------
   681                          ; Inputs:
   682                          ;   A: sprite index (0-31)
   683                          ; -----------------------------------------------------------------------------
   684                          tmsSetSpriteTmpAddress:
   685  e7dc 0a                         asl
   686  e7dd 0a                         asl
   687  e7de 8524                       sta TMS_TMP_ADDRESS
   688                          
   689  e7e0 a93b                       lda #>TMS_VRAM_SPRITE_ATTR_ADDRESS
   690  e7e2 8525                       sta TMS_TMP_ADDRESS + 1
   691  e7e4 60                         rts
   692                          
   693                          ; -----------------------------------------------------------------------------
   694                          ; tmsSetPosTmpAddress: Set TMS_TMP_ADDRESS for a given text position
   695                          ; -----------------------------------------------------------------------------
   696                          ; Inputs:
   697                          ;   X: X position (0 - 31)
   698                          ;   Y: Y position (0 - 23)
   699                          ; -----------------------------------------------------------------------------
   700                          tmsSetPosTmpAddress:
   701  e7e5 a938                       lda #>TMS_VRAM_NAME_ADDRESS
   702  e7e7 8525                       sta TMS_TMP_ADDRESS + 1
   703                                  
   704                                  ; this can be better. rotate and save, perhaps
   705                          
   706  e7e9 98                         tya
   707  e7ea 4a4a4a                     +div8
   708  e7ed 18                         clc
   709  e7ee 6525                       adc TMS_TMP_ADDRESS + 1
   710  e7f0 8525                       sta TMS_TMP_ADDRESS + 1
   711  e7f2 98                         tya
   712  e7f3 2907                       and #$07
   713  e7f5 0a0a0a0a0a                 +mul32
   714  e7fa 8524                       sta TMS_TMP_ADDRESS
   715  e7fc 8a                         txa
   716  e7fd 0524                       ora TMS_TMP_ADDRESS
   717  e7ff 8524                       sta TMS_TMP_ADDRESS
   718  e801 60                         rts
   719                          
   720                          ; -----------------------------------------------------------------------------
   721                          ; tmsSetPosTmpAddressText: Set TMS_TMP_ADDRESS for a given text position
   722                          ; -----------------------------------------------------------------------------
   723                          ; Inputs:
   724                          ;   X: X position (0 - 39)
   725                          ;   Y: Y position (0 - 23)
   726                          ; -----------------------------------------------------------------------------
   727                          tmsSetPosTmpAddressText:
   728  e802 a938                       lda #>TMS_VRAM_NAME_ADDRESS
   729  e804 8525                       sta TMS_TMP_ADDRESS + 1
   730  e806 a900                       lda #<TMS_VRAM_NAME_ADDRESS
   731  e808 8524                       sta TMS_TMP_ADDRESS
   732                          
   733                          .tmsSetPosTmpAddressTextLoop
   734  e80a c000                       cpy #0
   735  e80c f00e                       beq ++
   736  e80e 18                         clc
   737  e80f a524                       lda TMS_TMP_ADDRESS
   738  e811 6928                       adc #40
   739  e813 8524                       sta TMS_TMP_ADDRESS
   740  e815 9002                       bcc +
   741  e817 e625                       inc TMS_TMP_ADDRESS + 1
   742                          +
   743  e819 88                         dey
   744  e81a d0ee                       bne .tmsSetPosTmpAddressTextLoop
   745                          ++
   746  e81c 18                         clc
   747  e81d 8a                         txa
   748  e81e 6524                       adc TMS_TMP_ADDRESS
   749  e820 8524                       sta TMS_TMP_ADDRESS
   750  e822 9002                       bcc +
   751  e824 e625                       inc TMS_TMP_ADDRESS + 1
   752                          +
   753  e826 60                         rts
   754                          
   755                          
   756                          tmsConsoleScrollLine:
   757  e827 a900                       lda #0
   758  e829 8d2f7b                     sta .TMS9918_TMP_WRITE_ROW
   759  e82c a901                       lda #1
   760  e82e 8d2e7b                     sta .TMS9918_TMP_READ_ROW
   761                          .nextRow:
   762                          
   763  e831 ac2e7b                     ldy .TMS9918_TMP_READ_ROW
   764  e834 a200                       ldx #0
   765  e836 a928                       lda #40
   766  e838 cd2a7b                     cmp TMS9918_CONSOLE_SIZE_X
   767  e83b f006                       beq +
   768  e83d 20e5e7                     jsr tmsSetPosTmpAddress
   769  e840 4c46e8                     jmp ++
   770                          +
   771  e843 2002e8                     jsr tmsSetPosTmpAddressText
   772                          ++
   773  e846 20a0e5                     jsr tmsSetAddressRead
   774                          
   775  e849 2077e8                     jsr .tmsBufferIn
   776                          
   777  e84c a200                       ldx #0
   778  e84e ac2f7b                     ldy .TMS9918_TMP_WRITE_ROW
   779  e851 a200                       ldx #0
   780  e853 a928                       lda #40
   781  e855 cd2a7b                     cmp TMS9918_CONSOLE_SIZE_X
   782  e858 f006                       beq +
   783  e85a 20e5e7                     jsr tmsSetPosTmpAddress
   784  e85d 4c63e8                     jmp ++
   785                          +
   786  e860 2002e8                     jsr tmsSetPosTmpAddressText
   787                          ++
   788  e863 208ae5                     jsr tmsSetAddressWrite
   789                          
   790  e866 2089e8                     jsr .tmsBufferOut
   791                          
   792                          
   793  e869 ee2f7b                     inc .TMS9918_TMP_WRITE_ROW
   794  e86c ee2e7b                     inc .TMS9918_TMP_READ_ROW
   795                          
   796  e86f ad2e7b                     lda .TMS9918_TMP_READ_ROW
   797  e872 c919                       cmp #25
   798                          
   799  e874 d0bb                       bne .nextRow
   800                          
   801                          
   802                                  ; copy to buffer 32 bytes at a time, write back  24 rows for gfx, 30 "rows" for text
   803  e876 60                         rts
   804                          
   805                          .tmsBufferIn:
   806  e877 a200                       ldx #0
   807                          -
   808  e879 ad107f2071e5               +tmsGet
   809  e87f 9d307b                     sta TMS9918_TMP_BUFFER, x
   810  e882 e8                         inx
   811  e883 ec2a7b                     cpx TMS9918_CONSOLE_SIZE_X
   812  e886 d0f1                       bne -
   813  e888 60                         rts
   814                          
   815                          .tmsBufferOut:
   816  e889 a200                       ldx #0
   817                          
   818                          -
   819  e88b bd307b                     lda TMS9918_TMP_BUFFER, x
   820  e88e 8d107f2071e5               +tmsPut
   821  e894 e8                         inx
   822  e895 ec2a7b                     cpx TMS9918_CONSOLE_SIZE_X
   823  e898 d0f1                       bne -
   824  e89a 60                         rts
   825                          
   826                          ; -----------------------------------------------------------------------------
   827                          ; tmsIncPosConsole: Increment console position
   828                          ; -----------------------------------------------------------------------------
   829                          tmsIncPosConsole:
   830  e89b ee287b                     inc TMS9918_CONSOLE_X
   831  e89e ad287b                     lda TMS9918_CONSOLE_X
   832  e8a1 cd2a7b                     cmp TMS9918_CONSOLE_SIZE_X
   833  e8a4 d008                       bne +
   834  e8a6 a900                       lda #0
   835  e8a8 8d287b                     sta TMS9918_CONSOLE_X
   836  e8ab ee297b                     inc TMS9918_CONSOLE_Y
   837                          +
   838  e8ae ad297b                     lda TMS9918_CONSOLE_Y
   839  e8b1 c918                       cmp #24
   840  e8b3 9006                       bcc +
   841  e8b5 ce297b                     dec TMS9918_CONSOLE_Y
   842  e8b8 4c27e8                     jmp tmsConsoleScrollLine
   843                          +
   844  e8bb 60                         rts
   845                          
   846                          
   847                          ; -----------------------------------------------------------------------------
   848                          ; tmsDecPosConsole: Increment console position
   849                          ; -----------------------------------------------------------------------------
   850                          tmsDecPosConsole:
   851  e8bc ce287b                     dec TMS9918_CONSOLE_X
   852  e8bf 1017                       bpl ++
   853  e8c1 ad2a7b                     lda TMS9918_CONSOLE_SIZE_X
   854  e8c4 8d287b                     sta TMS9918_CONSOLE_X
   855  e8c7 ce287b                     dec TMS9918_CONSOLE_X
   856  e8ca a900                       lda #0
   857  e8cc cd297b                     cmp TMS9918_CONSOLE_Y
   858  e8cf d004                       bne +
   859  e8d1 8d287b                     sta TMS9918_CONSOLE_X
   860  e8d4 60                         rts        
   861                          +
   862  e8d5 ce297b                     dec TMS9918_CONSOLE_Y
   863                          ++
   864  e8d8 60                         rts
   865                          
   866                          
   867                          ; -----------------------------------------------------------------------------
   868                          ; tmsConsoleHome: Set cursor position top left
   869                          ; -----------------------------------------------------------------------------
   870                          tmsConsoleHome:
   871  e8d9 9c287b                     stz TMS9918_CONSOLE_X
   872  e8dc 9c297b                     stz TMS9918_CONSOLE_Y
   873                          
   874                                  ; flow through
   875                          
   876                          ; -----------------------------------------------------------------------------
   877                          ; tmsSetPosConsole: Set cursor position to console position
   878                          ; -----------------------------------------------------------------------------
   879                          tmsSetPosConsole:
   880  e8df ae287b                     ldx TMS9918_CONSOLE_X
   881  e8e2 ac297b                     ldy TMS9918_CONSOLE_Y
   882                          
   883                                  ; flow through
   884                          
   885                          ; -----------------------------------------------------------------------------
   886                          ; tmsSetPosWrite: Set cursor position
   887                          ; -----------------------------------------------------------------------------
   888                          ; Inputs:
   889                          ;   X: X position (0 - 31)
   890                          ;   Y: Y position (0 - 23)
   891                          ; -----------------------------------------------------------------------------
   892                          tmsSetPosWrite:
   893  e8e5 a910                       lda #TMS_R1_MODE_TEXT
   894  e8e7 2c277b                     bit .TMS9918_REG1_SHADOW_ADDR
   895  e8ea d006                       bne tmsSetPosWriteText
   896  e8ec 20e5e7                     jsr tmsSetPosTmpAddress
   897  e8ef 4c8ae5                     jmp tmsSetAddressWrite
   898                          
   899                          ; -----------------------------------------------------------------------------
   900                          ; tmsSetPosWrite: Set cursor position (text mode)
   901                          ; -----------------------------------------------------------------------------
   902                          ; Inputs:
   903                          ;   X: X position (0 - 39)
   904                          ;   Y: Y position (0 - 23)
   905                          ; -----------------------------------------------------------------------------
   906                          tmsSetPosWriteText:
   907  e8f2 2002e8                     jsr tmsSetPosTmpAddressText
   908  e8f5 4c8ae5                     jmp tmsSetAddressWrite
   909                          
   910                          ; -----------------------------------------------------------------------------
   911                          ; tmsSetPosRead: Set cursor position to read from
   912                          ; -----------------------------------------------------------------------------
   913                          ; Inputs:
   914                          ;   X: X position (0 - 31)
   915                          ;   Y: Y position (0 - 23)
   916                          ; -----------------------------------------------------------------------------
   917                          tmsSetPosRead:
   918  e8f8 20e5e7                     jsr tmsSetPosTmpAddress
   919  e8fb 4ca0e5                     jmp tmsSetAddressRead
   920                          
   921                          
   922                          ; -----------------------------------------------------------------------------
   923                          ; tmsSetPatternTmpAddress: Set TMS_TMP_ADDRESS for a given pattern definition
   924                          ; -----------------------------------------------------------------------------
   925                          ; Inputs:
   926                          ;   A: Pattern number
   927                          ;   Y: Y offset (row) in the pattern
   928                          ; -----------------------------------------------------------------------------
   929                          tmsSetPatternTmpAddressBank0:
   930                          tmsSetPatternTmpAddress:
   931  e8fe 48                         pha
   932  e8ff a920                       lda #>TMS_VRAM_PATT_ADDRESS
   933  e901 8525                       sta TMS_TMP_ADDRESS + 1
   934                                  
   935  e903 68                         pla
   936  e904 48                         pha
   937                          
   938  e905 4a4a4a4a4a                 +div32
   939  e90a 18                         clc
   940  e90b 6525                       adc TMS_TMP_ADDRESS + 1
   941  e90d 8525                       sta TMS_TMP_ADDRESS + 1
   942  e90f 68                         pla
   943  e910 291f                       and #$1f
   944  e912 0a0a0a                     +mul8
   945  e915 8524                       sta TMS_TMP_ADDRESS
   946  e917 98                         tya
   947  e918 0524                       ora TMS_TMP_ADDRESS
   948  e91a 8524                       sta TMS_TMP_ADDRESS
   949  e91c 60                         rts
   950                          
   951                          ; -----------------------------------------------------------------------------
   952                          ; tmsSetPatternTmpAddressBank1: Set TMS_TMP_ADDRESS for a given pattern 
   953                          ;                               definition in bank 1 (GFX II)
   954                          ; -----------------------------------------------------------------------------
   955                          ; Inputs:
   956                          ;   A: Pattern number
   957                          ;   Y: Y offset (row) in the pattern
   958                          ; -----------------------------------------------------------------------------
   959                          tmsSetPatternTmpAddressBank1:
   960  e91d 20fee8                     jsr tmsSetPatternTmpAddress
   961  e920 a525                       lda TMS_TMP_ADDRESS + 1
   962  e922 18                         clc
   963  e923 6908                       adc #8
   964  e925 8525                       sta TMS_TMP_ADDRESS + 1
   965  e927 60                         rts
   966                          
   967                          ; -----------------------------------------------------------------------------
   968                          ; tmsSetPatternTmpAddressBank2: Set TMS_TMP_ADDRESS for a given pattern 
   969                          ;                               definition in bank 2 (GFX II)
   970                          ; -----------------------------------------------------------------------------
   971                          ; Inputs:
   972                          ;   A: Pattern number
   973                          ;   Y: Y offset (row) in the pattern
   974                          ; -----------------------------------------------------------------------------
   975                          tmsSetPatternTmpAddressBank2:
   976  e928 20fee8                     jsr tmsSetPatternTmpAddress
   977  e92b a525                       lda TMS_TMP_ADDRESS + 1
   978  e92d 18                         clc
   979  e92e 6910                       adc #16
   980  e930 8525                       sta TMS_TMP_ADDRESS + 1
   981  e932 60                         rts        
   982                          
   983                          ; -----------------------------------------------------------------------------
   984                          ; tmsSetPatternWrite: Set pattern definition to write to
   985                          ; -----------------------------------------------------------------------------
   986                          ; Inputs:
   987                          ;   A: Pattern number
   988                          ;   Y: Y offset (row) in the pattern
   989                          ; -----------------------------------------------------------------------------
   990                          tmsSetPatternWrite:
   991  e933 20fee8                     jsr tmsSetPatternTmpAddress
   992  e936 4c8ae5                     jmp tmsSetAddressWrite
   993                          
   994                          ; -----------------------------------------------------------------------------
   995                          ; tmsSetPatternRead: Set pattern definition to read from
   996                          ; -----------------------------------------------------------------------------
   997                          ; Inputs:
   998                          ;   A: Pattern number
   999                          ;   Y: Y offset (row) in the pattern
  1000                          ; -----------------------------------------------------------------------------
  1001                          tmsSetPatternRead:
  1002  e939 20fee8                     jsr tmsSetPatternTmpAddress
  1003  e93c 4ca0e5                     jmp tmsSetAddressRead
  1004                          
  1005                          
  1006                          ; -----------------------------------------------------------------------------
  1007                          ; tmsPrint: Print a null-terminated string
  1008                          ; -----------------------------------------------------------------------------
  1009                          ; Inputs:
  1010                          ;  STR_ADDR: Contains address of null-terminated string
  1011                          ; Prerequisites:
  1012                          ;  TMS address already set using +tmsSetAddressWrite
  1013                          ; -----------------------------------------------------------------------------
  1014                          tmsPrint:
  1015  e93f a000                       ldy #0
  1016                          -
  1017  e941 2071e5                     +tmsWaitData
  1018  e944 b132                       lda (STR_ADDR), y
  1019  e946 f009                       beq +
  1020  e948 8d107f2071e5               +tmsPut 
  1021  e94e c8                         iny
  1022  e94f d0f0                       bne -
  1023                          +
  1024  e951 60                         rts
  1025                          
  1026                          
  1027                          ; -----------------------------------------------------------------------------
  1028                          ; tmsConsoleOut: Print a null-terminated string
  1029                          ; -----------------------------------------------------------------------------
  1030                          ; Inputs:
  1031                          ;  'A': Character to output to console
  1032                          ; -----------------------------------------------------------------------------
  1033                          tmsConsoleOut:
  1034  e952 8e2c7b                     stx .TMS9918_REGX
  1035  e955 8c2d7b                     sty .TMS9918_REGY
  1036  e958 08                         php
  1037  e959 78                         sei
  1038  e95a c90d                       cmp #$0d ; enter
  1039  e95c f021                       beq .tmsConsoleNewline
  1040  e95e c90a                       cmp #$0a ; enter
  1041  e960 f01d                       beq .tmsConsoleNewline
  1042                          
  1043  e962 c908                       cmp #$08 ; backspace
  1044  e964 f01f                       beq .tmsConsoleBackspace
  1045                          
  1046  e966 48                         pha
  1047  e967 20dfe8                     jsr tmsSetPosConsole
  1048  e96a 68                         pla
  1049  e96b 8d107f2071e5               +tmsPut
  1050  e971 209be8                     jsr tmsIncPosConsole
  1051  e974 ee2b7b                     inc TMS9918_CONSOLE_LINE_LEN
  1052                          
  1053                          .endConsoleOut
  1054  e977 28                         plp
  1055  e978 ac2d7b                     ldy .TMS9918_REGY
  1056  e97b ae2c7b                     ldx .TMS9918_REGX
  1057  e97e 60                         rts
  1058                          
  1059                          .tmsConsoleNewline
  1060  e97f 209be9                     jsr tmsConsoleNewline
  1061  e982 4c77e9                     jmp .endConsoleOut
  1062                          
  1063                          .tmsConsoleBackspace
  1064  e985 20c2e9                     jsr tmsConsoleBackspace
  1065  e988 4c77e9                     jmp .endConsoleOut
  1066                          
  1067                          
  1068                          ; -----------------------------------------------------------------------------
  1069                          ; tmsConsolePrint: Print a null-terminated string (console mode)
  1070                          ; -----------------------------------------------------------------------------
  1071                          ; Inputs:
  1072                          ;  STR_ADDR: Contains address of null-terminated string
  1073                          ; Prerequisites:
  1074                          ;  TMS address already set using +tmsSetAddressWrite
  1075                          ; -----------------------------------------------------------------------------
  1076                          tmsConsolePrint:
  1077  e98b a000                       ldy #0
  1078                          -
  1079  e98d 2071e5                     +tmsWaitData
  1080  e990 b132                       lda (STR_ADDR), y
  1081  e992 f006                       beq +
  1082  e994 2052e9                     jsr tmsConsoleOut
  1083  e997 c8                         iny
  1084  e998 d0f3                       bne -
  1085                          +
  1086  e99a 60                         rts
  1087                          
  1088                          ; -----------------------------------------------------------------------------
  1089                          ; tmsConsoleNewline: Output a newline to the console (scrolls if on last line)
  1090                          ; -----------------------------------------------------------------------------
  1091                          tmsConsoleNewline:
  1092  e99b 20dfe8                     jsr tmsSetPosConsole
  1093  e99e a9208d107f2071e5           +tmsPut ' '
  1094  e9a6 ad287b                     lda TMS9918_CONSOLE_X
  1095  e9a9 d008                       bne +
  1096  e9ab ad2b7b                     lda TMS9918_CONSOLE_LINE_LEN
  1097  e9ae f003                       beq +
  1098  e9b0 60                         rts
  1099  e9b1 f000                       beq +
  1100                          +
  1101  e9b3 ad2a7b                     lda TMS9918_CONSOLE_SIZE_X
  1102  e9b6 8d287b                     sta TMS9918_CONSOLE_X
  1103  e9b9 ce287b                     dec TMS9918_CONSOLE_X
  1104  e9bc 9c2b7b                     stz TMS9918_CONSOLE_LINE_LEN
  1105  e9bf 4c9be8                     jmp tmsIncPosConsole
  1106                          
  1107                          
  1108                          ; -----------------------------------------------------------------------------
  1109                          ; tmsConsoleBackspace: Output a backspace to the console
  1110                          ; -----------------------------------------------------------------------------
  1111                          tmsConsoleBackspace:
  1112  e9c2 20bce8                     jsr tmsDecPosConsole
  1113  e9c5 a9202052e9                 +tmsConsoleOut ' '
  1114  e9ca a9208d107f2071e5           +tmsPut ' '
  1115  e9d2 ce2b7b                     dec TMS9918_CONSOLE_LINE_LEN
  1116  e9d5 4cbce8                     jmp tmsDecPosConsole

; ******** Source: kernel.asm
   154                          }
   155                          
   156                          !ifndef HBC56_DISABLE_SFXMAN {
   157                                  !src "sfx/sfxman.asm"
   158                          }
   159                          
   160                          !ifndef HBC56_DISABLE_LCD {
   161                                  !ifndef LCD_MODEL { LCD_MODEL = 12864 }
   162                                  !src "gfx/bitmap.asm"
   163                                  !src "lcd/lcd.asm"
   164                                  !src "gfx/tilemap.asm"
   165                          }
   166                          
   167                          !ifndef HBC56_DISABLE_UART {

; ******** Source: ../lib\ser\uart.asm
     1                          ; 6502 - MC68B50 UART
     2                          ;
     3                          ; Copyright (c) 2021 Troy Schrapel
     4                          ;
     5                          ; This code is licensed under the MIT license
     6                          ;
     7                          ; https://github.com/visrealm/hbc-56
     8                          ;
     9                          
    10                          HAVE_UART = 1
    11                          
    12                          ; -------------------------
    13                          ; Constants
    14                          ; -------------------------
    15                          !ifndef UART_IO_PORT { UART_IO_PORT = $20
    16                                  !warn "UART_IO_PORT not provided. Defaulting to ", UART_IO_PORT
    17                          }
    18                          
    19                          !ifndef UART_ZP_START { UART_ZP_START = $40
    20                                  !warn "UART_ZP_START not provided. Defaulting to ", UART_ZP_START
    21                          }
    22                          
    23                          !ifndef UART_RAM_START { UART_RAM_START = $7c80
    24                                  !warn "UART_RAM_START not provided. Defaulting to ", UART_RAM_START
    25                          }
    26                          
    27                          
    28                          ; -----------------------------------------------------------------------------
    29                          ; Zero page
    30                          ; -----------------------------------------------------------------------------
    31                          UART_RX_BUFFER_HEAD  = UART_ZP_START            ; head of circular buffer
    32                          UART_RX_BUFFER_TAIL  = UART_ZP_START + 1        ; tail of circular buffer
    33                          UART_RX_BUFFER_BYTES = UART_ZP_START + 2        ; bytes in buffer
    34                          UART_RX_FLAGS        = UART_ZP_START + 3        ; flags
    35                          @UART_ZP_END         = UART_ZP_START + 4
    36                          
    37                          !if (.UART_ZP_SIZE < @UART_ZP_END - UART_ZP_START) {
    38                                  !error "UART ZP allocation insufficient. Allocated: ", .UART_ZP_SIZE, " Require: ", (@UART_ZP_END - UART_ZP_START)
    39                          }
    40                          
    41                          ; -----------------------------------------------------------------------------
    42                          ; High RAM
    43                          ; -----------------------------------------------------------------------------
    44                          UART_RX_BUFFER       = UART_RAM_START
    45                          UART_RX_BUFFER_SIZE  = $100
    46                          
    47                          @UART_RAM_END        = UART_RAM_START + UART_RX_BUFFER_SIZE
    48                          
    49                          !if (.UART_RAM_SIZE < @UART_RAM_END - UART_RAM_START) {
    50                                  !error "UART RAM allocation insufficient. Allocated: ", .UART_RAM_SIZE, " Require: ", (@UART_RAM_END - UART_RAM_START)
    51                          }
    52                          
    53                          
    54                          ; IO Ports
    55                          UART_REG      = IO_PORT_BASE_ADDRESS | UART_IO_PORT
    56                          UART_DATA     = IO_PORT_BASE_ADDRESS | UART_IO_PORT | $01
    57                          
    58                          ; -----------------------------------------------------------------------------
    59                          ; Constants
    60                          ; -----------------------------------------------------------------------------
    61                          UART_CTL_MASTER_RESET       = %00000011
    62                          UART_CTL_CLOCK_DIV_16       = %00000001
    63                          UART_CTL_CLOCK_DIV_64       = %00000010
    64                          UART_CTL_WORD_7BIT_EPB_2SB  = %00000000
    65                          UART_CTL_WORD_7BIT_OPB_2SB  = %00000100
    66                          UART_CTL_WORD_7BIT_EPB_1SB  = %00001000
    67                          UART_CTL_WORD_7BIT_OPB_1SB  = %00001100
    68                          UART_CTL_WORD_8BIT_2SB      = %00010000
    69                          UART_CTL_WORD_8BIT_1SB      = %00010100
    70                          UART_CTL_WORD_8BIT_EPAR_1SB = %00011000
    71                          UART_CTL_WORD_8BIT_OPAR_1SB = %00011100
    72                          UART_CTL_RX_INT_ENABLE      = %10000000
    73                          
    74                          UART_STATUS_RX_REG_FULL     = %00000001
    75                          UART_STATUS_TX_REG_EMPTY    = %00000010
    76                          UART_STATUS_CARRIER_DETECT  = %00000100
    77                          UART_STATUS_CLEAR_TO_SEND   = %00001000
    78                          UART_STATUS_FRAMING_ERROR   = %00010000
    79                          UART_STATUS_RCVR_OVERRUN    = %00100000
    80                          UART_STATUS_PARITY_ERROR    = %01000000
    81                          UART_STATUS_IRQ             = %10000000
    82                          
    83                          UART_FLOWCTRL_XON           = $11
    84                          UART_FLOWCTRL_XOFF          = $13
    85                          
    86                          UART_RX_BUFFER_XOFF_SIZE    = 192
    87                          UART_RX_BUFFER_XON_SIZE     = 4
    88                          
    89                          
    90                          ; -----------------------------------------------------------------------------
    91                          ; uartInit: Initialise the UART
    92                          ; -----------------------------------------------------------------------------
    93                          uartInit:
    94  e9d8 a900                       lda #0
    95  e9da 8528                       sta UART_RX_BUFFER_HEAD
    96  e9dc 8529                       sta UART_RX_BUFFER_TAIL
    97  e9de 852a                       sta UART_RX_BUFFER_BYTES
    98  e9e0 852b                       sta UART_RX_FLAGS
    99                          
   100  e9e2 a903                       lda #UART_CTL_MASTER_RESET
   101  e9e4 8d207f                     sta UART_REG
   102  e9e7 ea                         nop
   103  e9e8 ea                         nop
   104                          
   105  e9e9 a992                       lda #(UART_CTL_CLOCK_DIV_64 | UART_CTL_WORD_8BIT_2SB | UART_CTL_RX_INT_ENABLE)
   106  e9eb 8d207f                     sta UART_REG
   107  e9ee ea                         nop
   108  e9ef ea                         nop
   109                          
   110  e9f0 2018ea                     jsr uartFlowCtrlXon
   111                          
   112  e9f3 60                         rts
   113                          
   114                          ; -----------------------------------------------------------------------------
   115                          ; uartIrq: Standard UART IRQ handler
   116                          ; -----------------------------------------------------------------------------
   117                          uartIrq:
   118  e9f4 a901                       lda #UART_STATUS_RX_REG_FULL
   119  e9f6 2c207f                     bit UART_REG
   120  e9f9 f01c                       beq @endFlowControlCheck
   121  e9fb ea                         nop
   122  e9fc ea                         nop
   123                          
   124  e9fd da                         phx
   125  e9fe a628                       ldx UART_RX_BUFFER_HEAD
   126  ea00 ad217f                     lda UART_DATA
   127  ea03 9d587b                     sta UART_RX_BUFFER, x
   128  ea06 e628                       inc UART_RX_BUFFER_HEAD
   129  ea08 e62a                       inc UART_RX_BUFFER_BYTES
   130  ea0a fa                         plx
   131                          
   132                          @flowControlCheck
   133                                  ; check flow control
   134  ea0b ff2b09                     bbs7 UART_RX_FLAGS, @endFlowControlCheck    ; if already xoff, just leave
   135  ea0e a9c0                       lda #UART_RX_BUFFER_XOFF_SIZE               ; otherwise, should we ask for xoff?
   136  ea10 c52a                       cmp UART_RX_BUFFER_BYTES
   137  ea12 b003                       bcs @endFlowControlCheck                    ; all good
   138  ea14 2023ea                     jsr uartFlowCtrlXoff                        ; stop please.
   139                          
   140                          @endFlowControlCheck
   141  ea17 60                         rts
   142                          
   143                          ; -----------------------------------------------------------------------------
   144                          ; uartFlowCtrlXon: Allow client to send data
   145                          ; -----------------------------------------------------------------------------
   146                          uartFlowCtrlXon:
   147  ea18 772b                       rmb7 UART_RX_FLAGS        
   148  ea1a a911                       lda #UART_FLOWCTRL_XON
   149  ea1c ea                         nop
   150  ea1d ea                         nop
   151  ea1e ea                         nop
   152  ea1f ea                         nop
   153  ea20 4c59ea                     jmp uartOut
   154                          
   155                          ; -----------------------------------------------------------------------------
   156                          ; uartFlowCtrlXoff: Stop client to sending data
   157                          ; -----------------------------------------------------------------------------
   158                          uartFlowCtrlXoff
   159  ea23 f72b                       smb7 UART_RX_FLAGS
   160  ea25 a913                       lda #UART_FLOWCTRL_XOFF
   161  ea27 ea                         nop
   162  ea28 ea                         nop
   163  ea29 4c5fea                     jmp uartOutNoBsCheck
   164                          
   165                          ; -----------------------------------------------------------------------------
   166                          ; uartInWait: Input a byte from the UART (wait forever)
   167                          ; -----------------------------------------------------------------------------
   168                          ; Outputs:
   169                          ;   A: Value of the buffer
   170                          ; -----------------------------------------------------------------------------
   171                          uartInWait:
   172  ea2c a528                       lda UART_RX_BUFFER_HEAD
   173  ea2e c529                       cmp UART_RX_BUFFER_TAIL
   174  ea30 f0fa                       beq uartInWait
   175  ea32 08                         php
   176  ea33 78                         sei
   177  ea34 8008                       bra .uartIncheckFlowControl
   178                          
   179                          ; -----------------------------------------------------------------------------
   180                          ; uartInNoWait: Input a byte from the UART (don't wait)
   181                          ; -----------------------------------------------------------------------------
   182                          ; Outputs:
   183                          ;   A: Value of the buffer
   184                          ;   C: Set if a byte is read
   185                          ; -----------------------------------------------------------------------------
   186                          uartInNoWait:
   187  ea36 08                         php
   188  ea37 78                         sei
   189  ea38 a528                       lda UART_RX_BUFFER_HEAD
   190  ea3a c529                       cmp UART_RX_BUFFER_TAIL
   191  ea3c f018                       beq @noData
   192                          
   193                          .uartIncheckFlowControl
   194                                  ; check flow control
   195  ea3e 7f2b09                     bbr7 UART_RX_FLAGS, @readUartValue  ; if already xon, just exit again
   196  ea41 a904                       lda #UART_RX_BUFFER_XON_SIZE        ; otherwise, should we ask for xon?
   197  ea43 c52a                       cmp UART_RX_BUFFER_BYTES
   198  ea45 9003                       bcc @readUartValue                  ; all good
   199  ea47 2018ea                     jsr uartFlowCtrlXon                 ; continue sending please.
   200                          
   201                          @readUartValue
   202  ea4a a629                       ldx UART_RX_BUFFER_TAIL
   203  ea4c bd587b                     lda UART_RX_BUFFER, x
   204  ea4f e629                       inc UART_RX_BUFFER_TAIL
   205  ea51 c62a                       dec UART_RX_BUFFER_BYTES
   206  ea53 28                         plp
   207  ea54 38                         sec
   208  ea55 60                         rts
   209                          @noData
   210  ea56 28                         plp
   211  ea57 18                         clc
   212  ea58 60                         rts
   213                          
   214                          
   215                          ; -----------------------------------------------------------------------------
   216                          ; uartOut: Output a byte to the UART
   217                          ; -----------------------------------------------------------------------------
   218                          ; Inputs:
   219                          ;   A: Value to output
   220                          ; -----------------------------------------------------------------------------
   221                          uartOut:
   222  ea59 c908                       cmp #$08        ; bs
   223  ea5b d002                       bne uartOutNoBsCheck
   224  ea5d a97f                       lda #$7f        ; del
   225                          uartOutNoBsCheck:
   226  ea5f 48                         pha
   227  ea60 a902                       lda #UART_STATUS_TX_REG_EMPTY
   228                          
   229                          @aciaTestSend
   230  ea62 2c207f                     bit UART_REG
   231  ea65 ea                         nop
   232  ea66 ea                         nop
   233  ea67 d002                       bne +
   234  ea69 80f7                       bra @aciaTestSend
   235                          
   236                          +
   237  ea6b 68                         pla
   238  ea6c 8d217f                     sta UART_DATA
   239  ea6f 60                         rts
   240                          
   241                          
   242                          ; -----------------------------------------------------------------------------
   243                          ; uartOutString: Output a string to the UART
   244                          ; -----------------------------------------------------------------------------
   245                          ; Inputs:
   246                          ;   A: Value to output
   247                          ; -----------------------------------------------------------------------------
   248                          uartOutString:
   249  ea70 a000                       ldy #0
   250                          -
   251  ea72 b132                       lda (STR_ADDR), y
   252  ea74 f006                       beq +
   253  ea76 205fea                     jsr uartOutNoBsCheck
   254  ea79 c8                         iny
   255  ea7a d0f6                       bne -
   256                          +
   257  ea7c 60                         rts

; ******** Source: kernel.asm
   169                          }
   170                          
   171                          !ifndef HBC56_DISABLE_NES {

; ******** Source: ../lib\inp\nes.asm
     1                          ; 6502 NES Controllers - HBC-56
     2                          ;
     3                          ; Copyright (c) 2021 Troy Schrapel
     4                          ;
     5                          ; This code is licensed under the MIT license
     6                          ;
     7                          ; https://github.com/visrealm/hbc-56
     8                          ;
     9                          
    10                          
    11                          !ifndef NES_IO_PORT { NES_IO_PORT = $82
    12                                  !warn "NES_IO_PORT not provided. Defaulting to ", NES_IO_PORT
    13                          }
    14                          
    15                          !ifndef NES_RAM_START { NES_RAM_START = $7ea1
    16                                  !warn "NES_RAM_START not provided. Defaulting to ", NES_RAM_START
    17                          }
    18                          
    19                          ; -------------------------
    20                          ; High RAM
    21                          ; -------------------------
    22                          NES_TMP        = NES_RAM_START
    23                          NES_RAM_SIZE   = 1
    24                          
    25                          
    26                          !if NES_RAM_END < (NES_RAM_START + NES_RAM_SIZE) {
    27                                  !error "NES_RAM requires ",NES_RAM_SIZE," bytes. Allocated ",NES_RAM_END - NES_RAM_START
    28                          }
    29                          
    30                          
    31                          ; IO Ports
    32                          NES1_IO_ADDR     = IO_PORT_BASE_ADDRESS | NES_IO_PORT
    33                          NES2_IO_ADDR     = IO_PORT_BASE_ADDRESS | NES_IO_PORT | $01
    34                          
    35                          
    36                          NES_RIGHT       = %00000001
    37                          NES_LEFT        = %00000010
    38                          NES_DOWN        = %00000100
    39                          NES_UP          = %00001000
    40                          NES_START       = %00010000
    41                          NES_SELECT      = %00100000
    42                          NES_B           = %01000000
    43                          NES_A           = %10000000
    44                          
    45                          ; -----------------------------------------------------------------------------
    46                          ; nesWaitForPress: Wait for a NES button press (either port)
    47                          ; -----------------------------------------------------------------------------
    48                          nesWaitForPress:
    49  ea7d a9ff                       lda #$ff
    50                          @notPressed
    51  ea7f cd827f                     cmp NES1_IO_ADDR
    52  ea82 d005                       bne @pressed
    53  ea84 cd837f                     cmp NES2_IO_ADDR
    54  ea87 f0f6                       beq @notPressed
    55                          @pressed
    56  ea89 60                         rts
    57                          
    58                          ; -----------------------------------------------------------------------------
    59                          ; nes1Pressed: Is a button pressed?
    60                          ; -----------------------------------------------------------------------------
    61                          ; Inputs:
    62                          ;   A: Button to test
    63                          ; Outputs:
    64                          ;   Carry set if pressed, Carry clear if not
    65                          nes1Pressed:
    66  ea8a 2c827f                     bit NES1_IO_ADDR
    67  ea8d 18                         clc
    68  ea8e d001                       bne +
    69  ea90 38                         sec
    70                          +
    71  ea91 60                         rts
    72                          
    73                          ; -----------------------------------------------------------------------------
    74                          ; nes2Pressed: Is a button pressed?
    75                          ; -----------------------------------------------------------------------------
    76                          ; Inputs:
    77                          ;   A: Button to test
    78                          ; Outputs:
    79                          ;   Carry set if pressed, Carry clear if not
    80                          nes2Pressed:
    81  ea92 2c827f                     bit NES1_IO_ADDR
    82  ea95 18                         clc
    83  ea96 d001                       bne +
    84  ea98 38                         sec
    85                          +
    86  ea99 60                         rts
    87                          
    88                          
    89                          
    90                          

; ******** Source: kernel.asm
   173                          }
   174                          
   175                          !ifndef HBC56_DISABLE_KEYBOARD {

; ******** Source: ../lib\inp\keyboard.asm
     1                          ; 6502 KB Controller - HBC-56
     2                          ;
     3                          ; Copyright (c) 2021 Troy Schrapel
     4                          ;
     5                          ; This code is licensed under the MIT license
     6                          ;
     7                          ; https://github@com/visrealm/hbc-56
     8                          ;
     9                          
    10                          !ifndef HAVE_MATH_INC { !src "ut/math.inc" }
    11                          
    12                          HAVE_KEYBOARD = 1
    13                          
    14                          ; -------------------------
    15                          ; Constants
    16                          ; -------------------------
    17                          !ifndef KB_IO_PORT { KB_IO_PORT = $80
    18                                  !warn "KB_IO_PORT not provided@ Defaulting to ", KB_IO_PORT
    19                          }
    20                          
    21                          !ifndef KB_RAM_START { KB_RAM_START = $7ea1
    22                                  !warn "KB_RAM_START not provided@ Defaulting to ", KB_RAM_START
    23                          }
    24                          
    25                          ; -------------------------
    26                          ; High RAM
    27                          ; -------------------------
    28                          KB_FLAGS          = KB_RAM_START
    29                          KB_TMP_X          = KB_RAM_START + 1
    30                          KB_TMP_Y          = KB_RAM_START + 2
    31                          KB_CB_PRESSED     = KB_RAM_START + 3
    32                          KB_CB_RELEASED    = KB_RAM_START + 5
    33                          KB_CURRENT_STATE  = KB_RAM_START + 7
    34                          KB_BUFFER_HEAD    = KB_RAM_START + 8         ; head of circular buffer
    35                          KB_BUFFER_TAIL    = KB_RAM_START + 9         ; tail of circular buffer
    36                          KB_BUFFER         = KB_RAM_START + 10
    37                          KB_BUFFER_SIZE    = (1 << 4)
    38                          KB_BUFFER_MASK    = KB_BUFFER_SIZE - 1
    39                          KB_PRESSED_MAP    = KB_BUFFER + KB_BUFFER_SIZE
    40                          
    41                          KB_PRESSED_MAP_SIZE = $fd + 1
    42                          KB_PRESSED_MAP_BYTES = 32
    43                          
    44                          KB_RAM_SIZE     = (KB_PRESSED_MAP + KB_PRESSED_MAP_BYTES) - KB_RAM_START
    45                          
    46                          
    47                          !if KB_RAM_END < (KB_RAM_START + KB_RAM_SIZE) {
    48                                  !error "KB_RAM requires ",KB_RAM_SIZE," bytes@ Allocated ",KB_RAM_END - KB_RAM_START
    49                          }
    50                          
    51                          ; -------------------------
    52                          ; Contants
    53                          ; -------------------------
    54                          KB_SHIFT_DOWN   = %00000001
    55                          KB_CTRL_DOWN    = %00000010
    56                          KB_ALT_DOWN     = %00000100
    57                          KB_CAPS_LOCK    = %00001000
    58                          KB_NUM_LOCK     = %00010000
    59                          
    60                          KB_RELEASE      = $f0
    61                          KB_EXT_KEY      = $e0
    62                          KB_PAUSE_KEY    = $e1
    63                          
    64                          KB_SCANCODE_0 = $45
    65                          KB_SCANCODE_1 = $16
    66                          KB_SCANCODE_2 = $1E
    67                          KB_SCANCODE_3 = $26
    68                          KB_SCANCODE_4 = $25
    69                          KB_SCANCODE_5 = $2E
    70                          KB_SCANCODE_6 = $36
    71                          KB_SCANCODE_7 = $3D
    72                          KB_SCANCODE_8 = $3E
    73                          KB_SCANCODE_9 = $46
    74                          KB_SCANCODE_A = $1C
    75                          KB_SCANCODE_B = $32
    76                          KB_SCANCODE_C = $21
    77                          KB_SCANCODE_D = $23
    78                          KB_SCANCODE_E = $24
    79                          KB_SCANCODE_F = $2B
    80                          KB_SCANCODE_G = $34
    81                          KB_SCANCODE_H = $33
    82                          KB_SCANCODE_I = $43
    83                          KB_SCANCODE_J = $3B
    84                          KB_SCANCODE_K = $42
    85                          KB_SCANCODE_L = $4B
    86                          KB_SCANCODE_M = $3A
    87                          KB_SCANCODE_N = $31
    88                          KB_SCANCODE_O = $44
    89                          KB_SCANCODE_P = $4D
    90                          KB_SCANCODE_Q = $15
    91                          KB_SCANCODE_R = $2D
    92                          KB_SCANCODE_S = $1B
    93                          KB_SCANCODE_T = $2C
    94                          KB_SCANCODE_U = $3C
    95                          KB_SCANCODE_V = $2A
    96                          KB_SCANCODE_W = $1D
    97                          KB_SCANCODE_X = $22
    98                          KB_SCANCODE_Y = $35
    99                          KB_SCANCODE_Z = $1A
   100                          KB_SCANCODE_F1 = $05
   101                          KB_SCANCODE_F2 = $06
   102                          KB_SCANCODE_F3 = $04
   103                          KB_SCANCODE_F4 = $0C
   104                          KB_SCANCODE_F5 = $03
   105                          KB_SCANCODE_F6 = $0B
   106                          KB_SCANCODE_F7 = $83
   107                          KB_SCANCODE_F8 = $0A
   108                          KB_SCANCODE_F9 = $01
   109                          KB_SCANCODE_F10 = $09
   110                          KB_SCANCODE_F11 = $78
   111                          KB_SCANCODE_F12 = $07
   112                          KB_SCANCODE_NUMPAD_0 = $70
   113                          KB_SCANCODE_NUMPAD_1 = $69
   114                          KB_SCANCODE_NUMPAD_2 = $72
   115                          KB_SCANCODE_NUMPAD_3 = $7A
   116                          KB_SCANCODE_NUMPAD_4 = $6B
   117                          KB_SCANCODE_NUMPAD_5 = $73
   118                          KB_SCANCODE_NUMPAD_6 = $74
   119                          KB_SCANCODE_NUMPAD_7 = $6C
   120                          KB_SCANCODE_NUMPAD_8 = $75
   121                          KB_SCANCODE_NUMPAD_9 = $7D
   122                          KB_SCANCODE_NUMPAD_DIVIDE = $CA
   123                          KB_SCANCODE_NUMPAD_ENTER = $DA
   124                          KB_SCANCODE_NUMPAD_MINUS = $7B
   125                          KB_SCANCODE_NUMPAD_MULTIPLY = $7C
   126                          KB_SCANCODE_NUMPAD_PERIOD = $71
   127                          KB_SCANCODE_NUMPAD_PLUS = $79
   128                          KB_SCANCODE_NUM_LOCK = $77
   129                          KB_SCANCODE_ALT_LEFT = $11
   130                          KB_SCANCODE_ALT_RIGHT_ = $91
   131                          KB_SCANCODE_APOS = $52
   132                          KB_SCANCODE_ARROW_DOWN = $F2
   133                          KB_SCANCODE_ARROW_LEFT = $EB
   134                          KB_SCANCODE_ARROW_RIGHT = $F4
   135                          KB_SCANCODE_ARROW_UP = $F5
   136                          KB_SCANCODE_BACKSPACE = $66
   137                          KB_SCANCODE_CAPS_LOCK = $58
   138                          KB_SCANCODE_COMMA = $41
   139                          KB_SCANCODE_CTRL_LEFT = $14
   140                          KB_SCANCODE_CTRL_RIGHT = $94
   141                          KB_SCANCODE_DELETE = $F1
   142                          KB_SCANCODE_END = $E9
   143                          KB_SCANCODE_ENTER = $5A
   144                          KB_SCANCODE_EQUAL = $55
   145                          KB_SCANCODE_ESC = $76
   146                          KB_SCANCODE_HOME = $EC
   147                          KB_SCANCODE_INSERT = $F0
   148                          KB_SCANCODE_MENU = $AF
   149                          KB_SCANCODE_MINUS = $4E
   150                          KB_SCANCODE_PAGE_DOWN = $FA
   151                          KB_SCANCODE_PAGE_UP = $FD
   152                          KB_SCANCODE_PAUSE = $E1
   153                          KB_SCANCODE_PERIOD = $49
   154                          KB_SCANCODE_PRTSCR = $92
   155                          KB_SCANCODE_SCROLL_LOCK = $7E
   156                          KB_SCANCODE_SEMICOLON = $4C
   157                          KB_SCANCODE_SHIFT_LEFT = $12
   158                          KB_SCANCODE_SHIFT_RIGHT = $59
   159                          KB_SCANCODE_SLASH_BACK = $5D
   160                          KB_SCANCODE_SLASH_FORWARD = $4A
   161                          KB_SCANCODE_SPACEBAR = $29
   162                          KB_SCANCODE_SQUARE_LEFT = $54
   163                          KB_SCANCODE_SQUARE_RIGHT = $5B
   164                          KB_SCANCODE_TAB = $0D
   165                          KB_SCANCODE_TILDE = $0E
   166                          KB_SCANCODE_WINDOWS_LEFT = $9F
   167                          KB_SCANCODE_WINDOWS_RIGHT = $A7
   168                          
   169                          
   170                          KB_SHIFT_LEFT_MAP_BYTE = KB_SCANCODE_SHIFT_LEFT >> 3
   171                          KB_SHIFT_LEFT_MAP_BIT  = $80 >> (KB_SCANCODE_SHIFT_LEFT & $07)
   172                          
   173                          KB_SHIFT_RIGHT_MAP_BYTE = KB_SCANCODE_SHIFT_RIGHT >> 3
   174                          KB_SHIFT_RIGHT_MAP_BIT  = $80 >> (KB_SCANCODE_SHIFT_RIGHT & $07)
   175                          
   176                          
   177                          ; IO Ports
   178                          KB_IO_ADDR         = IO_PORT_BASE_ADDRESS | KB_IO_PORT
   179                          KB_STATUS_ADDR     = IO_PORT_BASE_ADDRESS | KB_IO_PORT | $01
   180                          
   181                          ; -----------------------------------------------------------------------------
   182                          ; kbInit: Initialise the keyboard
   183                          ; -----------------------------------------------------------------------------
   184                          kbInit:
   185  ea9a a900                       lda #$00
   186  ea9c 8d5b7c                     sta KB_FLAGS
   187                          
   188  ea9f a210                       ldx #16 ;buffer size
   189                                  
   190                                  ; ensure the hardware keyboard buffer is clear
   191                          -
   192  eaa1 8e5c7c                     stx KB_TMP_X
   193  eaa4 2055eb                     jsr .kbReadByte
   194  eaa7 ae5c7c                     ldx KB_TMP_X
   195  eaaa ca                         dex
   196  eaab d0f4                       bne -
   197                          
   198  eaad a220a900ca9d757c...        +memset KB_PRESSED_MAP, 0, KB_PRESSED_MAP_BYTES
   199                          
   200  eab9 9c637c                     stz KB_BUFFER_HEAD
   201  eabc 9c647c                     stz KB_BUFFER_TAIL
   202                          
   203  eabf a900                       lda #.KB_STATE_DEFAULT
   204  eac1 8d627c                     sta KB_CURRENT_STATE
   205                          
   206                                  ; flow through
   207                          
   208                          kbResetCallbacks:
   209  eac4 a9d4                       lda #<.kbDummyCb
   210  eac6 8d5e7c                     sta KB_CB_PRESSED
   211  eac9 8d607c                     sta KB_CB_RELEASED
   212                                  
   213  eacc a9ea                       lda #>.kbDummyCb
   214  eace 8d5f7c                     sta KB_CB_PRESSED + 1
   215  ead1 8d617c                     sta KB_CB_RELEASED + 1
   216                          
   217                                  ; flow through
   218                          
   219                          .kbDummyCb:
   220  ead4 60                         rts
   221                          
   222                          ; -----------------------------------------------------------------------------
   223                          ; kbIntHandler: Standard keyboard interrupt handler
   224                          ; -----------------------------------------------------------------------------
   225                          kbIntHandler:
   226  ead5 2055eb                     jsr .kbReadByte
   227  ead8 e000                       cpx #0
   228  eada f0f8                       beq .kbDummyCb
   229                          
   230  eadc 8a                         txa     ; acc now holds scancode
   231                          
   232  eadd ae627c                     ldx KB_CURRENT_STATE
   233                          
   234  eae0 7ce3ea                     jmp (.kbStateHandlers, x)
   235                          
   236                          .KB_STATE_DEFAULT          = 0
   237                          .KB_STATE_RELEASE          = 2
   238                          .KB_STATE_EXTENDED         = 4
   239                          .KB_STATE_EXTENDED_RELEASE = 6
   240                          .KB_STATE_PAUSE_SEQ        = 8
   241                          
   242                          .kbStateHandlers:
   243  eae3 edea13eb20eb11eb...!word .stdKeyHandler, .relKeyHandler, .extKeyHandler, .extRelKeyHandler, .pauseKeyHandler
   244                          
   245                          ; default scancode handler
   246                          .stdKeyHandler
   247  eaed c9f0                       cmp #KB_RELEASE
   248  eaef d006                       bne +
   249  eaf1 a902                       lda #.KB_STATE_RELEASE
   250  eaf3 8d627c                     sta KB_CURRENT_STATE
   251  eaf6 60                         rts
   252                          +
   253  eaf7 c9e0                       cmp #KB_EXT_KEY
   254  eaf9 d006                       bne +
   255  eafb a904                       lda #.KB_STATE_EXTENDED
   256  eafd 8d627c                     sta KB_CURRENT_STATE
   257  eb00 60                         rts
   258                          +
   259  eb01 c9e1                       cmp #KB_PAUSE_KEY
   260  eb03 d006                       bne +
   261  eb05 a908                       lda #.KB_STATE_PAUSE_SEQ
   262  eb07 8d627c                     sta KB_CURRENT_STATE
   263  eb0a 60                         rts
   264                          +
   265                                  ; a regular key was pressed 
   266                                  ; TODO: bit field rather than a byte per key?
   267  eb0b 2067eb                     jsr .kbSetKey
   268                          
   269  eb0e 6c5e7c                     jmp (KB_CB_PRESSED)
   270                                  ; subroutine returns above
   271                          
   272                          ; extended release scancode handler
   273                          .extRelKeyHandler:
   274  eb11 0980                       ora #$80
   275                                  ; flow through
   276                          
   277                          ;  release scancode handler
   278                          .relKeyHandler:
   279  eb13 aa                         tax
   280  eb14 209ceb                     jsr .kbClearKey
   281                          
   282  eb17 a900                       lda #.KB_STATE_DEFAULT
   283  eb19 8d627c                     sta KB_CURRENT_STATE
   284  eb1c 8a                         txa
   285                          
   286  eb1d 6c607c                     jmp (KB_CB_RELEASED)
   287                          
   288                          ; extended scancode handler
   289                          .extKeyHandler:
   290  eb20 c9f0                       cmp #KB_RELEASE
   291  eb22 d006                       bne +
   292  eb24 a906                       lda #.KB_STATE_EXTENDED_RELEASE
   293  eb26 8d627c                     sta KB_CURRENT_STATE
   294  eb29 60                         rts
   295                          +
   296  eb2a 0980                       ora #$80
   297                                  
   298  eb2c 2067eb                     jsr .kbSetKey
   299                          
   300  eb2f a900                       lda #.KB_STATE_DEFAULT
   301  eb31 8d627c                     sta KB_CURRENT_STATE
   302  eb34 8a                         txa
   303                          
   304  eb35 6c5e7c                     jmp (KB_CB_PRESSED)
   305                          
   306                          ; pause/break sequence scancode handler
   307                          .pauseKeyHandler:
   308  eb38 c977                       cmp #$77
   309  eb3a d018                       bne @notLastByte
   310  eb3c aa                         tax
   311  eb3d ad567d                     lda KB_PRESSED_MAP + KB_SCANCODE_PAUSE
   312  eb40 d006                       bne +
   313  eb42 8e567d                     stx KB_PRESSED_MAP + KB_SCANCODE_PAUSE
   314  eb45 6c5e7c                     jmp (KB_CB_PRESSED)
   315                          +
   316  eb48 9c567d                     stz KB_PRESSED_MAP + KB_SCANCODE_PAUSE
   317                          
   318  eb4b a900                       lda #.KB_STATE_DEFAULT
   319  eb4d 8d627c                     sta KB_CURRENT_STATE
   320  eb50 8a                         txa
   321                          
   322  eb51 6c607c                     jmp (KB_CB_RELEASED)
   323                          
   324                          @notLastByte
   325  eb54 60                         rts
   326                          
   327                          ; -----------------------------------------------------------------------------
   328                          ; Outputs:
   329                          ;   A: Value of the KB Status (0 if no key)
   330                          ;   X: PS/2 Scancode byte
   331                          ; -----------------------------------------------------------------------------
   332                          .kbReadByte:        
   333  eb55 a200                       ldx #0
   334  eb57 a904                       lda #$04
   335  eb59 2c817f                     bit KB_STATUS_ADDR
   336  eb5c f008                       beq @end
   337                          
   338  eb5e a020                       ldy #32         ; TODO: this could probably be smaller
   339                          -
   340  eb60 88                         dey
   341  eb61 d0fd                       bne -
   342                          
   343  eb63 ae807f                     ldx KB_IO_ADDR
   344                          @end
   345  eb66 60                         rts
   346                          
   347                          
   348                          ; -----------------------------------------------------------------------------
   349                          ; .kbSetKey: Set a key is pressed in KB_PRESSED_MAP
   350                          ; Inputs:
   351                          ;    A - scancode
   352                          ; -----------------------------------------------------------------------------
   353                          .kbSetKey:
   354  eb67 ae637c                     ldx KB_BUFFER_HEAD      ; store at head of buffer
   355  eb6a 9d657c                     sta KB_BUFFER, x
   356                          
   357  eb6d 8d5c7c                     sta KB_TMP_X            ; find byte in map
   358  eb70 4a4a4a                     +lsr3
   359  eb73 aa                         tax
   360  eb74 ad5c7c                     lda KB_TMP_X
   361  eb77 2907                       and #$07
   362  eb79 a8                         tay
   363  eb7a bd757c                     lda KB_PRESSED_MAP, x
   364  eb7d 1930e1                     ora tableBitFromLeft, y ; set bit in map byte
   365  eb80 9d757c                     sta KB_PRESSED_MAP, x   ; update map
   366                          
   367                                  ; check for toggle keys
   368  eb83 ae5c7c                     ldx KB_TMP_X
   369  eb86 e058                       cpx #KB_SCANCODE_CAPS_LOCK
   370  eb88 d008                       bne +
   371  eb8a a908                       lda #KB_CAPS_LOCK
   372  eb8c 4d5b7c                     eor KB_FLAGS
   373  eb8f 8d5b7c                     sta KB_FLAGS
   374                          +
   375                          
   376  eb92 ad637c                     lda KB_BUFFER_HEAD      ; increment (and mask) buffer head
   377  eb95 1a                         inc
   378  eb96 290f                       and #KB_BUFFER_MASK
   379  eb98 8d637c                     sta KB_BUFFER_HEAD
   380  eb9b 60                         rts
   381                          
   382                          ; -----------------------------------------------------------------------------
   383                          ; .kbClearKey: Clear a key is pressed in KB_PRESSED_MAP
   384                          ; Inputs:
   385                          ;    A - scancode
   386                          ; -----------------------------------------------------------------------------
   387                          .kbClearKey:
   388  eb9c 8d5c7c                     sta KB_TMP_X
   389  eb9f 4a4a4a                     +lsr3
   390  eba2 aa                         tax
   391  eba3 ad5c7c                     lda KB_TMP_X
   392  eba6 2907                       and #$07
   393  eba8 a8                         tay
   394  eba9 bd757c                     lda KB_PRESSED_MAP, x
   395  ebac 3938e1                     and tableInvBitFromLeft, y
   396  ebaf 9d757c                     sta KB_PRESSED_MAP, x
   397  ebb2 60                         rts
   398                          
   399                          
   400                          .kbPopTail:
   401  ebb3 ad647c                     lda KB_BUFFER_TAIL
   402  ebb6 aa                         tax
   403  ebb7 1a                         inc
   404  ebb8 290f                       and #KB_BUFFER_MASK
   405  ebba 8d647c                     sta KB_BUFFER_TAIL
   406  ebbd bd657c                     lda KB_BUFFER, x
   407  ebc0 60                         rts
   408                          
   409                          ; -----------------------------------------------------------------------------
   410                          ; kbIsPressed: Is a key pressed right now?
   411                          ; Inputs:
   412                          ;    X - scancode
   413                          ; Returns:
   414                          ;    Z - clear if pressed, set if not pressed
   415                          ; -----------------------------------------------------------------------------
   416                          kbIsPressed:
   417  ebc1 8e5c7c                     stx KB_TMP_X
   418  ebc4 8a                         txa
   419  ebc5 4a4a4a                     +lsr3
   420  ebc8 aa                         tax
   421  ebc9 ad5c7c                     lda KB_TMP_X
   422  ebcc 2907                       and #$07
   423  ebce a8                         tay
   424  ebcf b930e1                     lda tableBitFromLeft, y
   425  ebd2 3d757c                     and KB_PRESSED_MAP, x
   426  ebd5 ae5c7c                     ldx KB_TMP_X
   427  ebd8 c900                       cmp #0
   428  ebda 60                         rts
   429                          
   430                          
   431                          ; -----------------------------------------------------------------------------
   432                          ; kbWaitForScancode: Wait for a key press
   433                          ; Returns:
   434                          ;    A - scancode
   435                          ; -----------------------------------------------------------------------------
   436                          kbWaitForScancode:
   437  ebdb ad637c                     lda KB_BUFFER_HEAD
   438  ebde cd647c                     cmp KB_BUFFER_TAIL
   439  ebe1 f0f8                       beq kbWaitForScancode
   440  ebe3 20b3eb                     jsr .kbPopTail
   441  ebe6 60                         rts
   442                          
   443                          ; -----------------------------------------------------------------------------
   444                          ; kbNextScancode: Return the next scancode in the buffer or zero if empty
   445                          ; Returns:
   446                          ;    A - scancode (or zero)
   447                          ; -----------------------------------------------------------------------------
   448                          kbNextScancode:
   449  ebe7 ad637c                     lda KB_BUFFER_HEAD
   450  ebea cd647c                     cmp KB_BUFFER_TAIL
   451  ebed f004                       beq @noScancode
   452  ebef 20b3eb                     jsr .kbPopTail
   453                                  ;!byte $db
   454  ebf2 60                         rts
   455                          
   456                          @noScancode
   457  ebf3 a900                       lda #0
   458  ebf5 60                         rts
   459                          
   460                          ; -----------------------------------------------------------------------------
   461                          ; kbScancodeToAscii: Convert a scancode to ascii. shift/caps lock is honoured
   462                          ; Inputs:
   463                          ;    A - scancode (or zero)
   464                          ; Returns:
   465                          ;    A - ascii character
   466                          ; -----------------------------------------------------------------------------
   467                          kbScancodeToAscii:
   468  ebf6 da                         phx
   469  ebf7 8d5c7c                     sta KB_TMP_X
   470  ebfa 18                         clc
   471  ebfb 1002                       bpl +
   472  ebfd fa                         plx        
   473  ebfe 60                         rts
   474                          +
   475  ebff a202                       ldx #KB_SHIFT_LEFT_MAP_BYTE
   476  ec01 a920                       lda #KB_SHIFT_LEFT_MAP_BIT
   477  ec03 3c757c                     bit KB_PRESSED_MAP, x
   478  ec06 f003                       beq +
   479  ec08 38                         sec
   480  ec09 800a                       bra @doneShiftCheck
   481                          +
   482                          
   483  ec0b a20b                       ldx #KB_SHIFT_RIGHT_MAP_BYTE
   484  ec0d a940                       lda #KB_SHIFT_RIGHT_MAP_BIT
   485  ec0f 3c757c                     bit KB_PRESSED_MAP, x
   486  ec12 f001                       beq +
   487  ec14 38                         sec
   488                          +
   489                          
   490                          @doneShiftCheck:
   491  ec15 b008                       bcs @shiftedKeys:
   492  ec17 ae5c7c                     ldx KB_TMP_X
   493  ec1a bd53ec                     lda KEY_MAP, x
   494  ec1d 8006                       bra @end
   495                          
   496                          @shiftedKeys:
   497  ec1f ae5c7c                     ldx KB_TMP_X
   498  ec22 bdd3ec                     lda KEY_MAP_SHIFTED, x
   499                          
   500                          @end
   501  ec25 2018e0                     jsr isAlpha
   502  ec28 9014                       bcc @afterAlphaCheck
   503  ec2a 8d5c7c                     sta KB_TMP_X
   504  ec2d a908                       lda #KB_CAPS_LOCK
   505  ec2f 2d5b7c                     and KB_FLAGS
   506  ec32 f007                       beq +
   507  ec34 ad5c7c                     lda KB_TMP_X
   508  ec37 4920                       eor #$20
   509  ec39 8003                       bra @afterAlphaCheck
   510                          +
   511  ec3b ad5c7c                     lda KB_TMP_X
   512                          @afterAlphaCheck
   513  ec3e fa                         plx
   514  ec3f c9ff                       cmp #$ff
   515  ec41 38                         sec
   516  ec42 d001                       bne +
   517  ec44 18                         clc
   518                          +        
   519  ec45 60                         rts
   520                          
   521                          kbReadAscii:
   522  ec46 da                         phx
   523  ec47 20e7eb                     jsr kbNextScancode
   524  ec4a f004                       beq @noKey
   525  ec4c fa                         plx
   526  ec4d 4cf6eb                     jmp kbScancodeToAscii
   527                          @noKey
   528  ec50 fa                         plx
   529  ec51 18                         clc
   530  ec52 60                         rts
   531                          
   532                          
   533                          KEY_MAP:
   534                          ;      0   1   2   3   4   5   6   7   8   9   a   b   c   d   e   f
   535  ec53 ffffffffffffffff...!byte $ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$09,$60,$ff; 0
   536  ec63 ffffffffff7131ff...!byte $ff,$ff,$ff,$ff,$ff,$71,$31,$ff,$ff,$ff,$7a,$73,$61,$77,$32,$ff; 1
   537  ec73 ff637864653433ff...!byte $ff,$63,$78,$64,$65,$34,$33,$ff,$ff,$20,$76,$66,$74,$72,$35,$ff; 2
   538  ec83 ff6e6268677936ff...!byte $ff,$6e,$62,$68,$67,$79,$36,$ff,$ff,$ff,$6d,$6a,$75,$37,$38,$ff; 3
   539  ec93 ff2c6b696f3039ff...!byte $ff,$2c,$6b,$69,$6f,$30,$39,$ff,$ff,$2e,$2f,$6c,$3b,$70,$2d,$ff; 4
   540  eca3 ffff27ff5b3dffff...!byte $ff,$ff,$27,$ff,$5b,$3d,$ff,$ff,$ff,$ff,$0d,$5d,$ff,$5c,$ff,$ff; 5
   541  ecb3 ffffffffffff08ff...!byte $ff,$ff,$ff,$ff,$ff,$ff,$08,$ff,$ff,$31,$ff,$34,$37,$ff,$ff,$ff; 6
   542  ecc3 30ff323536381bff...!byte $30,$ff,$32,$35,$36,$38,$1b,$ff,$ff,$ff,$33,$2d,$ff,$39,$ff,$ff; 7
   543                          
   544                          KEY_MAP_SHIFTED:
   545                          ;      0   1   2   3   4   5   6   7   8   9   a   b   c   d   e   f
   546  ecd3 ffffffffffffffff...!byte $ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$09,$7e,$ff; 0
   547  ece3 ffffffffff5121ff...!byte $ff,$ff,$ff,$ff,$ff,$51,$21,$ff,$ff,$ff,$5a,$53,$41,$57,$40,$ff; 1
   548  ecf3 ff435844452423ff...!byte $ff,$43,$58,$44,$45,$24,$23,$ff,$ff,$20,$56,$46,$54,$52,$25,$ff; 2
   549  ed03 ff4e424847595eff...!byte $ff,$4e,$42,$48,$47,$59,$5e,$ff,$ff,$ff,$4d,$4a,$55,$26,$2a,$ff; 3
   550  ed13 ff3c4b494f2928ff...!byte $ff,$3c,$4b,$49,$4f,$29,$28,$ff,$ff,$3e,$3f,$4c,$3a,$50,$5f,$ff; 4
   551  ed23 ffff22ff7b2bffff...!byte $ff,$ff,$22,$ff,$7b,$2b,$ff,$ff,$ff,$ff,$0d,$7d,$ff,$7c,$ff,$ff; 5
   552  ed33 ffffffffffff08ff...!byte $ff,$ff,$ff,$ff,$ff,$ff,$08,$ff,$ff,$31,$ff,$34,$37,$ff,$ff,$ff; 6
   553  ed43 30ff323536381bff...!byte $30,$ff,$32,$35,$36,$38,$1b,$ff,$ff,$ff,$33,$2d,$ff,$39,$ff,$ff; 7

; ******** Source: kernel.asm
   177                          }
   178                          
   179  ed53 6769746875622e63...+hbc56Title "github.com/visrealm/hbc-56"
   180                          

; ******** Source: bootscreen.asm
     1                          ; 6502 - HBC-56 - Memory tests
     2                          ;
     3                          ; Copyright (c) 2021 Troy Schrapel
     4                          ;
     5                          ; This code is licensed under the MIT license
     6                          ;
     7                          ; https://github.com/visrealm/hbc-56
     8                          ;
     9                          ;
    10                          
    11                          ; can be anywhere. we own the place at this stage
    12                          LOGO_BUFFER = $3000     
    13                          
    14                          !ifdef HAVE_TMS9918 {
    15                                  HBC56_BORDER     = TMS_DK_BLUE 
    16                                  HBC56_BACKGROUND = TMS_WHITE
    17                                  HBC56_LOGO       = TMS_DK_BLUE 
    18                                  HBC56_TEXT       = TMS_DK_BLUE
    19                          }
    20                          
    21                          !ifdef HBC56_TITLE_TEXT {
    22                                  HBC56_TITLE     = HBC56_TITLE_TEXT
    23                                  HBC56_TITLE_LEN = HBC56_TITLE_TEXT_LEN
    24                          }
    25                          
    26                          .HBC56_PRESS_ANY_KEY_TEXT:
    27  ed6e 505245535320414e...        !text "PRESS ANY KEY...",0
    28                          .HBC56_PRESS_ANY_KEY_TEXT_LEN = *-.HBC56_PRESS_ANY_KEY_TEXT-1
    29                          
    30                          .HBC56_PRESS_ANY_NES_TEXT:
    31  ed7f 5052455353204120...        !text "PRESS A TO BEGIN...",0
    32                          .HBC56_PRESS_ANY_NES_TEXT_LEN = *-.HBC56_PRESS_ANY_NES_TEXT-1
    33                          
    34                          !ifdef HAVE_GRAPHICS_LCD {
    35                                  !align 255, 0
    36                          hbc56FontLcd:
    37                                  !bin "lcd/fonts/c64-alnum.bin"
    38                          hbc56LogoLcd:
    39                                  !bin "res/hbc56lcd.bin"
    40                          }
    41                          
    42                          !ifdef HAVE_TMS9918 {
    43                          hbc56LogoInd:
    44  ed93 c8c9cacbcccdcecf...        !bin "res/hbc56boot.ind"
    45                          hbc56LogoPatt:
    46  edd5 fefefefefefefefe...        !bin "res/hbc56boot.patt"
    47                          hbc56LogoPattEnd:        
    48                          }
    49                          
    50                          hbc56BootScreen:
    51                          
    52                          !ifdef HAVE_TMS9918 {
    53  ef4d 0878a9108d117f20...        +tmsSetAddrColorTable 16
    54  ef60 a94f                       +tmsColorFgBg HBC56_LOGO, HBC56_BACKGROUND
    55  ef62 a202                       ldx #2
    56  ef64 20aae6                     jsr _tmsSendX8
    57  ef67 a94f                       +tmsColorFgBg HBC56_TEXT, HBC56_BACKGROUND
    58  ef69 a210                       ldx #16
    59  ef6b 204ee7                     jsr tmsInitColorTable
    60                          
    61  ef6e 0878a9a58d117f20...        +tmsSetPosWrite 5,5
    62  ef81 a9938524a9ed8525...        +tmsSendData hbc56LogoInd, 22
    63  ef8e 0878a9c58d117f20...        +tmsSetPosWrite 5,6
    64  efa1 a9a98524a9ed8525...        +tmsSendData hbc56LogoInd + 22, 22
    65  efae 0878a9e58d117f20...        +tmsSetPosWrite 5,7
    66  efc1 a9bf8524a9ed8525...        +tmsSendData hbc56LogoInd + 44, 22
    67                          
    68  efce 0878a9408d117f20...        +tmsSetAddrPattTable 200
    69  efe1 a9d58524a9ed8525...        +tmsSendData hbc56LogoPatt, $178
    70                          
    71  eff7 0878a9c88d117f20...        +tmsPrintZ HBC56_META_TITLE, 8, 14
    72                          
    73                          
    74                                  !ifdef HBC56_TITLE_TEXT {
    75  f015 0878a9c38d117f20...                +tmsPrintZ HBC56_TITLE, (32 - HBC56_TITLE_LEN) / 2, 22
    76                                  }
    77                          
    78  f033 a9e4                       +tmsColorFgBg TMS_GREY, HBC56_BORDER
    79  f035 20c7e5                     jsr tmsSetBackground
    80                          }
    81                          
    82                          !ifdef HAVE_LCD {
    83                                  jsr lcdDetect
    84                                  bcc @noLcd
    85                                  !ifdef HAVE_GRAPHICS_LCD {
    86                                          jsr lcdGraphicsMode
    87                                          +memset LOGO_BUFFER, $00, 1024
    88                                          +memcpy LOGO_BUFFER + 128, hbc56LogoLcd, 256
    89                                          lda #>LOGO_BUFFER
    90                                          sta BITMAP_ADDR_H
    91                                          jsr lcdImage
    92                          
    93                                          +memset LOGO_BUFFER, $0, 128
    94                                          +tilemapCreateDefault (TILEMAP_SIZE_X_16 | TILEMAP_SIZE_Y_8), hbc56FontLcd-(32*8)
    95                                          +memset TILEMAP_DEFAULT_BUFFER_ADDRESS, ' ', 128
    96                          
    97                                          +memcpy TILEMAP_DEFAULT_BUFFER_ADDRESS + 16*4, HBC56_META_TITLE, 16
    98                          
    99                                          ldy #4
   100                                          jsr tilemapRenderRowToLcd
   101                          
   102                                  } else {
   103                                          !if LCD_ROWS > 2 { +lcdPrint "\n" }
   104                                          !if LCD_COLUMNS > 16 { +lcdPrint "  " }
   105                                          +lcdPrint "     HBC-56\n"
   106                                          !if LCD_COLUMNS > 16 { +lcdPrint "  " }
   107                                          lda #<HBC56_META_TITLE
   108                                          sta STR_ADDR_L
   109                                          lda #>HBC56_META_TITLE
   110                                          sta STR_ADDR_H
   111                                          !if LCD_ROWS = 2 {
   112                                                  jsr lcdLineTwo
   113                                          }                
   114                                          jsr lcdPrint
   115                                          !if LCD_ROWS = 2 {
   116                                                  jsr lcdLineTwo
   117                                          } else {
   118                                                  jsr lcdLineThree
   119                                          }                
   120                                          !if LCD_COLUMNS > 16 { +lcdConsolePrint "  " }
   121                                  }
   122                          @noLcd:
   123                          }
   124  f038 60                         rts

; ******** Source: kernel.asm

; ******** Source: kernel.inc
     1                          ; 6502 - HBC-56 Kernel Macros
     2                          ;
     3                          ; Copyright (c) 2021 Troy Schrapel
     4                          ;
     5                          ; This code is licensed under the MIT license
     6                          ;
     7                          ; https://github.com/visrealm/hbc-56
     8                          ;
     9                          ;
    10                          
    11                          !macro setIntHandler .address {
    12                                  lda #<.address
    13                                  sta HBC56_INT_VECTOR + 1
    14                                  lda #>.address
    15                                  sta HBC56_INT_VECTOR + 2
    16                                  lda #JMP_OPCODE
    17                                  sta HBC56_INT_VECTOR
    18                          }
    19                          
    20                          !macro setNmiHandler .address {
    21                                  lda #<.address
    22                                  sta HBC56_NMI_VECTOR + 1
    23                                  lda #>.address
    24                                  sta HBC56_NMI_VECTOR + 2
    25                                  lda #JMP_OPCODE
    26                                  sta HBC56_NMI_VECTOR
    27                          }
    28                          
    29                          !macro setHbcMetaNES {
    30                                  lda #HBC56_CONSOLE_FLAG_NES
    31                                  ora HBC56_CONSOLE_FLAGS
    32                                  sta HBC56_CONSOLE_FLAGS
    33                          }
    34                          
    35                          !macro setHbcMetaNoWait {
    36                                  lda #HBC56_CONSOLE_FLAG_NOWAIT
    37                                  ora HBC56_CONSOLE_FLAGS
    38                                  sta HBC56_CONSOLE_FLAGS
    39                          }
    40                          
    41                          
    42                          !macro hbc56SetVsyncCallback .vsync {
    43                                  lda #<.vsync
    44                                  sta HBC56_VSYNC_CALLBACK
    45                                  lda #>.vsync
    46                                  sta HBC56_VSYNC_CALLBACK + 1
    47                          }
    48                          
    49                          !macro setHbcMetaTitle .titleStr {
    50                                  jmp .hbcMetaTitleOut
    51                          .titleStrLabel:
    52                                  !text .titleStr
    53                          .titleStrLabelLen = * - .titleStrLabel
    54                                  !byte 0 ; nul terminator for game name
    55                          
    56                          !if .titleStrLabelLen > HBC56_META_TITLE_MAX_LEN {
    57                                  !error "setHbcMetaTitle: Title metadata limited to ",HBC56_META_TITLE_MAX_LEN,"bytes"
    58                          }
    59                          .hbcMetaTitleOut:
    60                                  +memcpy HBC56_META_TITLE + (HBC56_META_TITLE_MAX_LEN-.titleStrLabelLen)/2, .titleStrLabel, .titleStrLabelLen
    61                                  lda #.titleStrLabelLen
    62                                  sta HBC56_META_TITLE_LEN
    63                          }
    64                          
    65                          !macro consoleEnableCursor {
    66                                  lda HBC56_CONSOLE_FLAGS
    67                                  ora #HBC56_CONSOLE_FLAG_CURSOR
    68                                  sta HBC56_CONSOLE_FLAGS
    69                          }
    70                          
    71                          !macro consoleDisableCursor {
    72                                  lda HBC56_CONSOLE_FLAGS
    73                                  and #!HBC56_CONSOLE_FLAG_CURSOR & $ff
    74                                  sta HBC56_CONSOLE_FLAGS
    75                          }
    76                          
    77                          !macro consoleLCDMode {
    78                                  lda HBC56_CONSOLE_FLAGS
    79                                  ora #HBC56_CONSOLE_FLAG_LCD
    80                                  sta HBC56_CONSOLE_FLAGS
    81                          }
    82                          
    83                          !macro setBreakpoint {
    84                                 !byte $db 
    85                          }
    86                          
    87                          !macro hbc56CustomDelay .delay {
    88                                  ldy #.delay
    89                                  jsr hbc56CustomDelay
    90                          }
    91                          
    92                          !macro hbc56DelayUs .us {
    93                          !if .us = 1 {
    94                                  nop
    95                                  nop
    96                          }
    97                          }
    98                          !macro hbc56DelayMs .ms {
    99                                  lda #<.ms
   100                                  sta DELAY_L
   101                                  lda #>.ms
   102                                  sta DELAY_H
   103                          
   104                                  jsr hbc56CustomDelayMs

; ******** Source: kernel.asm

; ******** Source: interrupts.asm
     1                          ; 6502 - HBC-56 Kernel Interrupt Handling
     2                          ;
     3                          ; Copyright (c) 2021 Troy Schrapel
     4                          ;
     5                          ; This code is licensed under the MIT license
     6                          ;
     7                          ; https://github.com/visrealm/hbc-56
     8                          ;
     9                          ;
    10                          
    11                          ; -------------------------
    12                          ; Interrupts
    13                          ; -------------------------
    14                          TMS9918_IRQ            = 1      ; /INT
    15                          KB_IRQ                 = 2      ; RES1
    16                          UART_IRQ               = 3      ; RES2
    17                          VIA_IRQ                = 5      ; Onboard
    18                          
    19                          TMS9918_IRQ_BIT = (1 << (TMS9918_IRQ - 1))
    20                          KB_IRQ_BIT      = (1 << (KB_IRQ - 1))
    21                          UART_IRQ_BIT    = (1 << (UART_IRQ - 1))
    22                          
    23                          INT_CTRL_ADDRESS    = IO_PORT_BASE_ADDRESS | INT_IO_PORT
    24                          
    25                          ; -----------------------------------------------------------------------------
    26                          ; HBC-56 Interrupt handler
    27                          ; -----------------------------------------------------------------------------
    28                          hbc56IntHandler:
    29  f039 48                         pha
    30  f03a da                         phx
    31  f03b 5a                         phy
    32                          
    33  f03c addf7f                     lda INT_CTRL_ADDRESS
    34                          
    35                          !ifdef HAVE_UART {
    36  f03f 8904                       bit #UART_IRQ_BIT
    37  f041 f005                       beq +
    38  f043 20f4e9                     jsr uartIrq        
    39  f046 8015                       bra @endIntHandler
    40                          +
    41                          }
    42                          
    43                          !ifdef HAVE_TMS9918 {
    44  f048 8901                       bit #TMS9918_IRQ_BIT
    45  f04a f008                       beq +
    46  f04c 2061f0                     jsr hbc56Tms9918Int
    47  f04f 2c117f                     +tmsReadStatus
    48  f052 8009                       bra @endIntHandler
    49                          +
    50                          }
    51                          
    52                          !ifdef HAVE_KEYBOARD {
    53  f054 8902                       bit #KB_IRQ_BIT
    54  f056 f005                       beq +
    55  f058 20d5ea                     jsr kbIntHandler
    56  f05b 8000                       bra @endIntHandler
    57                          +
    58                          }
    59                                  
    60                          @endIntHandler:
    61  f05d 7a                         ply
    62  f05e fa                         plx
    63  f05f 68                         pla      
    64  f060 40                         rti
    65                          
    66                          
    67                          
    68                          ; -----------------------------------------------------------------------------
    69                          ; HBC-56 TMS9918 VSYNC Interrupt handler
    70                          ; -----------------------------------------------------------------------------
    71                          !ifdef HAVE_TMS9918 {
    72                          hbc56Tms9918Int:
    73                          
    74                                  ; update ticks and seconds
    75  f061 ee9e7c                     inc HBC56_TICKS
    76  f064 ad9e7c                     lda HBC56_TICKS
    77  f067 c93c                       cmp #TMS_FPS
    78  f069 d00d                       bne +
    79  f06b a900                       lda #0
    80  f06d 8d9e7c                     sta HBC56_TICKS
    81  f070 ee9f7cd003eea07c           +inc16 HBC56_SECONDS_L
    82                          +
    83                                  ; "tick" for sfx manager
    84                                  !ifdef HAVE_SFX_MAN {
    85                                          jsr sfxManTick
    86                                  }
    87                          
    88                                  ; handle console if enabled
    89  f078 2ca27c                     bit HBC56_CONSOLE_FLAGS
    90  f07b 1003                       bpl +
    91  f07d 2083f0                     jsr .consoleVsyncCallback
    92                          +
    93                          
    94                                  ; rely on callback rts to return
    95  f080 6cb87c                     jmp (HBC56_VSYNC_CALLBACK)
    96                          
    97                          
    98                          ; -----------------------------------------------------------------------------
    99                          ; HBC-56 TMS9918 Console update
   100                          ; -----------------------------------------------------------------------------
   101                          .consoleVsyncCallback:
   102                          
   103  f083 ad9e7c                     lda HBC56_TICKS
   104  f086 f007                       beq .doCursor
   105  f088 c91e                       cmp #30
   106  f08a f003                       beq .doCursor
   107  f08c 4cb6f0                     jmp @endConsoleCallback
   108                          
   109                          .doCursor:
   110  f08f 8ea37c                     stx HBC56_TMP_X
   111  f092 8ca47c                     sty HBC56_TMP_Y
   112  f095 20dfe8                     jsr tmsSetPosConsole
   113  f098 aea37c                     ldx HBC56_TMP_X
   114  f09b aca47c                     ldy HBC56_TMP_Y
   115  f09e ad9e7c                     lda HBC56_TICKS
   116  f0a1 f00b                       beq +
   117  f0a3 a920                       lda #' '
   118  f0a5 8d107f2071e5               +tmsPut
   119  f0ab 4cb6f0                     jmp @endConsoleCallback
   120                          + 
   121  f0ae a97f                       lda #$7f
   122  f0b0 8d107f2071e5               +tmsPut
   123                          
   124                          @endConsoleCallback
   125                          
   126                          .nullCallbackFunction:
   127  f0b6 60                         rts
   128                          }

; ******** Source: kernel.asm
   184                          
   185                          ; -----------------------------------------------------------------------------
   186                          ; HBC-56 Main entry point (reset vector)
   187                          ; -----------------------------------------------------------------------------
   188                          kernelMain:
   189  f0b7 78                         sei
   190  f0b8 d8                         cld     ; make sure we're not in decimal mode
   191  f0b9 a2ff                       ldx #$ff
   192  f0bb 9a                         txs
   193                                  
   194  f0bc a940                       lda #RTI_OPCODE
   195  f0be 8d007e                     sta HBC56_INT_VECTOR
   196  f0c1 8d047e                     sta HBC56_NMI_VECTOR
   197                          
   198  f0c4 a210a920ca9da57c...        +memset HBC56_META_TITLE, ' ', HBC56_META_TITLE_MAX_LEN
   199                          
   200  f0d0 a900                       lda #0
   201  f0d2 8d9e7c                     sta HBC56_TICKS
   202  f0d5 8d9f7c                     sta HBC56_SECONDS_L
   203  f0d8 8da07c                     sta HBC56_SECONDS_H
   204  f0db 8da27c                     sta HBC56_CONSOLE_FLAGS
   205                          
   206  f0de 8db57c                     sta HBC56_META_TITLE + HBC56_META_TITLE_MAX_LEN
   207                          
   208                          
   209  f0e1 20fcdf                     jsr HBC56_META_VECTOR   ; user program metadata
   210                          
   211                                  !ifdef HAVE_KEYBOARD {
   212  f0e4 209aea                             jsr kbInit
   213                                  }
   214                          
   215                                  !ifdef HAVE_AY3891X {
   216  f0e7 2050e1                             jsr ayInit
   217                                  }
   218                          
   219                                  !ifdef HAVE_SFXMAN {
   220                                          jsr sfxManInit  ; requires TMS interrupts
   221                                  }
   222                          
   223                                  !ifdef HAVE_TMS9918 {
   224  f0ea 205de6                             jsr tmsInit
   225                          
   226                                          ; dummy callback
   227  f0ed a9b68db87ca9f08d...                +hbc56SetVsyncCallback .nullCallbackFunction
   228                                  }
   229                          
   230                                  !ifdef HAVE_LCD {
   231                                          jsr lcdDetect
   232                                          bcc @noLcd1                
   233                                          jsr lcdInit
   234                                          jsr hbc56Delay
   235                                          jsr lcdDisplayOn
   236                                          jsr hbc56Delay
   237                          @noLcd1:
   238                                  }
   239                          
   240  f0f7 204def                     jsr hbc56BootScreen
   241                          
   242  f0fa a9398d017ea9f08d...        +setIntHandler hbc56IntHandler
   243                          
   244                                  !ifdef HAVE_TMS9918 {
   245  f109 a94020dde5                         +tmsEnableOutput
   246  f10e a92020e7e5                         +tmsDisableInterrupts
   247                                  }
   248                          
   249  f113 a914                       lda #20
   250  f115 8da17c                     sta HBC56_TMP
   251                          -
   252  f118 20e1ff                     jsr hbc56Delay
   253  f11b cea17c                     dec HBC56_TMP
   254  f11e d0f8                       bne -
   255                                 
   256                                  !ifdef HAVE_TMS9918 {
   257  f120 a92020dde5                         +tmsEnableInterrupts
   258                                  }
   259  f125 58                         cli
   260                          
   261  f126 2091f1                     jsr hbc56HighBell
   262                          
   263  f129 a910                       lda #HBC56_CONSOLE_FLAG_NOWAIT
   264  f12b 2ca27c                     bit HBC56_CONSOLE_FLAGS
   265  f12e d050                       bne .afterInput
   266                          
   267  f130 a940                       lda #HBC56_CONSOLE_FLAG_NES
   268  f132 2da27c                     and HBC56_CONSOLE_FLAGS
   269  f135 f026                       beq .keyboardInput
   270                          
   271                          
   272                                  ; NES input
   273  f137 78                         sei
   274                                  !ifdef HAVE_TMS9918 {
   275  f138 0878a9268d117f20...                +tmsPrintZ .HBC56_PRESS_ANY_NES_TEXT, (32 - .HBC56_PRESS_ANY_NES_TEXT_LEN) / 2, 17
   276                                  }
   277                          
   278                                  !ifdef HAVE_LCD {
   279                                          jsr lcdDetect
   280                                          bcc @noLcd2
   281                                          !ifdef HAVE_GRAPHICS_LCD {
   282                                                  +memcpy TILEMAP_DEFAULT_BUFFER_ADDRESS + 16*6, .HBC56_PRESS_ANY_NES_TEXT, 16
   283                                                  ldy #6
   284                                                  jsr tilemapRenderRowToLcd
   285                                          } else {
   286                                                  lda #<.HBC56_PRESS_ANY_NES_TEXT
   287                                                  sta STR_ADDR_L
   288                                                  lda #>.HBC56_PRESS_ANY_NES_TEXT
   289                                                  sta STR_ADDR_H
   290                                                  jsr lcdPrint
   291                                          }
   292                          @noLcd2:
   293                                  }
   294  f156 58                         cli
   295  f157 207dea                     jsr nesWaitForPress
   296  f15a 4c80f1                     jmp .afterInput
   297                          
   298                          .keyboardInput
   299                          !ifdef HAVE_KEYBOARD {
   300                                  ; Keyboard  input
   301  f15d 78                         sei
   302                                  !ifdef HAVE_TMS9918 {
   303  f15e 0878a9288d117f20...                +tmsPrintZ .HBC56_PRESS_ANY_KEY_TEXT, (32 - .HBC56_PRESS_ANY_KEY_TEXT_LEN) / 2, 17
   304                                  }
   305                          
   306                                  !ifdef HAVE_LCD {
   307                                          jsr lcdDetect
   308                                          bcc @noLcd3
   309                                          !ifdef HAVE_GRAPHICS_LCD {
   310                                                  +memcpy TILEMAP_DEFAULT_BUFFER_ADDRESS + 16*6, .HBC56_PRESS_ANY_KEY_TEXT, 16
   311                                                  ldy #6
   312                                                  jsr tilemapRenderRowToLcd
   313                                          } else {
   314                                                  lda #<.HBC56_PRESS_ANY_KEY_TEXT
   315                                                  sta STR_ADDR_L
   316                                                  lda #>.HBC56_PRESS_ANY_KEY_TEXT
   317                                                  sta STR_ADDR_H
   318                                                  jsr lcdPrint        
   319                                          }
   320                          @noLcd3:
   321                                  }
   322  f17c 58                         cli
   323  f17d 20dbeb                     jsr kbWaitForScancode
   324                          }
   325                          
   326                          .afterInput
   327                          
   328                                  !ifdef HAVE_LCD {
   329                                          ;jsr lcdDetect
   330                                          ;bcc @noLcd4
   331                                          jsr lcdInit
   332                                          !ifdef HAVE_GRAPHICS_LCD {
   333                                                  jsr lcdTextMode
   334                                          }
   335                                          jsr lcdClear
   336                                          jsr lcdHome
   337                          @noLcd4:
   338                                  }
   339                          
   340                                  !ifdef HAVE_TMS9918 {
   341  f180 2031e7                             jsr tmsInitTextTable ; clear output
   342  f183 a94020e7e5                         +tmsDisableOutput
   343  f188 a92020e7e5                         +tmsDisableInterrupts
   344                                  }
   345                                  ; no interrupts until the user code says so
   346  f18d 78                         sei
   347                          
   348  f18e 200080                     jsr DEFAULT_HBC56_RST_VECTOR
   349                          
   350                          ; -----------------------------------------------------------------------------
   351                          ; Beep (higher tone)
   352                          ; -----------------------------------------------------------------------------
   353                          hbc56HighBell:
   354                                  !ifdef HAVE_AY3891X {
   355  f191 a9078d407fad427f...                +ayToneEnable AY_PSG0, AY_CHC
   356  f1a3 a90a8d407fa90f8d...                +aySetVolume AY_PSG0, AY_CHC, $ff
   357  f1ad a9048d407fa9598d...                +ayPlayNote AY_PSG0, AY_CHC, NOTE_FREQ_F5
   358                                  }
   359  f1c1 8032                       bra .noteTimeout
   360                          
   361                          ; -----------------------------------------------------------------------------
   362                          ; Beep (lower tone)
   363                          ; -----------------------------------------------------------------------------
   364                          hbc56Bell:
   365                                  !ifdef HAVE_AY3891X {
   366  f1c3 a9078d407fad427f...                +ayToneEnable AY_PSG0, AY_CHC
   367  f1d5 a90a8d407fa90f8d...                +aySetVolume AY_PSG0, AY_CHC, $ff
   368  f1df a9048d407fa97b8d...                +ayPlayNote AY_PSG0, AY_CHC, NOTE_FREQ_E3
   369                                  }
   370  f1f3 8000                       bra .noteTimeout
   371                          
   372                          .noteTimeout
   373                                  !ifdef HAVE_SFXMAN {
   374                                          lda HBC56_CONSOLE_FLAGS
   375                                          and #HBC56_CONSOLE_FLAG_LCD
   376                                          bne @skipSfxMan
   377                                          +sfxManSetChannelTimeout  AY_PSG0, AY_CHC, 0.16
   378                                          rts
   379                                  }
   380                          @skipSfxMan
   381                                  !ifdef HAVE_AY3891X {
   382  f1f5 20e1ff                             jsr hbc56Delay
   383  f1f8 20e1ff                             jsr hbc56Delay
   384  f1fb a9048d407fa9008d...                +ayStop AY_PSG0, AY_CHC
   385                                  }
   386                          
   387  f20f 60                         rts
   388                          
   389                          ; -----------------------------------------------------------------------------
   390                          ; Software reset
   391                          ; -----------------------------------------------------------------------------
   392                          hbc56Reset:
   393  f210 4cb7f0                     jmp kernelMain
   394                          
   395                          ; -----------------------------------------------------------------------------
   396                          ; Stop (loop forever)
   397                          ; -----------------------------------------------------------------------------
   398                          hbc56Stop:
   399  f213 4c13f2                     jmp hbc56Stop
   400                          
   401                          ; -----------------------------------------------------------------------------
   402                          ; Delay function
   403                          ; -----------------------------------------------------------------------------
   404                          hbc56CustomDelayMs:
   405  f216 e635                       inc DELAY_H
   406                          -
   407  f218 a003                       ldy #3
   408  f21a 20e3ff                     jsr hbc56CustomDelay
   409  f21d c634                       dec DELAY_L
   410  f21f d0f7                       bne -
   411  f221 a900                       lda #0
   412  f223 8534                       sta DELAY_L
   413  f225 c635                       dec DELAY_H
   414  f227 d0ef                       bne -
   415  f229 60                         rts
   416                          
   417                          
   418                          ;!warn "Kernel size: ", *-$f000
